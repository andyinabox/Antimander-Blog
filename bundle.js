!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=8)}([function(e,t,n){var r=n(6),i=n(7),a="undefined"!=typeof Float64Array;function o(e,t){return e[0]-t[0]}function f(){var e,t=this.stride,n=new Array(t.length);for(e=0;e<n.length;++e)n[e]=[Math.abs(t[e]),e];n.sort(o);var r=new Array(n.length);for(e=0;e<r.length;++e)r[e]=n[e][1];return r}function u(e,t){var n=["View",t,"d",e].join("");t<0&&(n="View_Nil"+e);var i="generic"===e;if(-1===t){var a="function "+n+"(a){this.data=a;};var proto="+n+".prototype;proto.dtype='"+e+"';proto.index=function(){return -1};proto.size=0;proto.dimension=-1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function(){return new "+n+"(this.data);};proto.get=proto.set=function(){};proto.pick=function(){return null};return function construct_"+n+"(a){return new "+n+"(a);}";return new Function(a)()}if(0===t){a="function "+n+"(a,d) {this.data = a;this.offset = d};var proto="+n+".prototype;proto.dtype='"+e+"';proto.index=function(){return this.offset};proto.dimension=0;proto.size=1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function "+n+"_copy() {return new "+n+"(this.data,this.offset)};proto.pick=function "+n+"_pick(){return TrivialArray(this.data);};proto.valueOf=proto.get=function "+n+"_get(){return "+(i?"this.data.get(this.offset)":"this.data[this.offset]")+"};proto.set=function "+n+"_set(v){return "+(i?"this.data.set(this.offset,v)":"this.data[this.offset]=v")+"};return function construct_"+n+"(a,b,c,d){return new "+n+"(a,d)}";return new Function("TrivialArray",a)(s[e][0])}a=["'use strict'"];var o=r(t),u=o.map((function(e){return"i"+e})),c="this.offset+"+o.map((function(e){return"this.stride["+e+"]*i"+e})).join("+"),l=o.map((function(e){return"b"+e})).join(","),d=o.map((function(e){return"c"+e})).join(",");a.push("function "+n+"(a,"+l+","+d+",d){this.data=a","this.shape=["+l+"]","this.stride=["+d+"]","this.offset=d|0}","var proto="+n+".prototype","proto.dtype='"+e+"'","proto.dimension="+t),a.push("Object.defineProperty(proto,'size',{get:function "+n+"_size(){return "+o.map((function(e){return"this.shape["+e+"]"})).join("*"),"}})"),1===t?a.push("proto.order=[0]"):(a.push("Object.defineProperty(proto,'order',{get:"),t<4?(a.push("function "+n+"_order(){"),2===t?a.push("return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})"):3===t&&a.push("var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);if(s0>s1){if(s1>s2){return [2,1,0];}else if(s0>s2){return [1,2,0];}else{return [1,0,2];}}else if(s0>s2){return [2,0,1];}else if(s2>s1){return [0,1,2];}else{return [0,2,1];}}})")):a.push("ORDER})")),a.push("proto.set=function "+n+"_set("+u.join(",")+",v){"),i?a.push("return this.data.set("+c+",v)}"):a.push("return this.data["+c+"]=v}"),a.push("proto.get=function "+n+"_get("+u.join(",")+"){"),i?a.push("return this.data.get("+c+")}"):a.push("return this.data["+c+"]}"),a.push("proto.index=function "+n+"_index(",u.join(),"){return "+c+"}"),a.push("proto.hi=function "+n+"_hi("+u.join(",")+"){return new "+n+"(this.data,"+o.map((function(e){return["(typeof i",e,"!=='number'||i",e,"<0)?this.shape[",e,"]:i",e,"|0"].join("")})).join(",")+","+o.map((function(e){return"this.stride["+e+"]"})).join(",")+",this.offset)}");var p=o.map((function(e){return"a"+e+"=this.shape["+e+"]"})),m=o.map((function(e){return"c"+e+"=this.stride["+e+"]"}));a.push("proto.lo=function "+n+"_lo("+u.join(",")+"){var b=this.offset,d=0,"+p.join(",")+","+m.join(","));for(var h=0;h<t;++h)a.push("if(typeof i"+h+"==='number'&&i"+h+">=0){d=i"+h+"|0;b+=c"+h+"*d;a"+h+"-=d}");a.push("return new "+n+"(this.data,"+o.map((function(e){return"a"+e})).join(",")+","+o.map((function(e){return"c"+e})).join(",")+",b)}"),a.push("proto.step=function "+n+"_step("+u.join(",")+"){var "+o.map((function(e){return"a"+e+"=this.shape["+e+"]"})).join(",")+","+o.map((function(e){return"b"+e+"=this.stride["+e+"]"})).join(",")+",c=this.offset,d=0,ceil=Math.ceil");for(h=0;h<t;++h)a.push("if(typeof i"+h+"==='number'){d=i"+h+"|0;if(d<0){c+=b"+h+"*(a"+h+"-1);a"+h+"=ceil(-a"+h+"/d)}else{a"+h+"=ceil(a"+h+"/d)}b"+h+"*=d}");a.push("return new "+n+"(this.data,"+o.map((function(e){return"a"+e})).join(",")+","+o.map((function(e){return"b"+e})).join(",")+",c)}");var b=new Array(t),v=new Array(t);for(h=0;h<t;++h)b[h]="a[i"+h+"]",v[h]="b[i"+h+"]";a.push("proto.transpose=function "+n+"_transpose("+u+"){"+u.map((function(e,t){return e+"=("+e+"===undefined?"+t+":"+e+"|0)"})).join(";"),"var a=this.shape,b=this.stride;return new "+n+"(this.data,"+b.join(",")+","+v.join(",")+",this.offset)}"),a.push("proto.pick=function "+n+"_pick("+u+"){var a=[],b=[],c=this.offset");for(h=0;h<t;++h)a.push("if(typeof i"+h+"==='number'&&i"+h+">=0){c=(c+this.stride["+h+"]*i"+h+")|0}else{a.push(this.shape["+h+"]);b.push(this.stride["+h+"])}");return a.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}"),a.push("return function construct_"+n+"(data,shape,stride,offset){return new "+n+"(data,"+o.map((function(e){return"shape["+e+"]"})).join(",")+","+o.map((function(e){return"stride["+e+"]"})).join(",")+",offset)}"),new Function("CTOR_LIST","ORDER",a.join("\n"))(s[e],f)}var s={float32:[],float64:[],int8:[],int16:[],int32:[],uint8:[],uint16:[],uint32:[],array:[],uint8_clamped:[],bigint64:[],biguint64:[],buffer:[],generic:[]};e.exports=function(e,t,n,r){if(void 0===e)return(0,s.array[0])([]);"number"==typeof e&&(e=[e]),void 0===t&&(t=[e.length]);var o=t.length;if(void 0===n){n=new Array(o);for(var f=o-1,c=1;f>=0;--f)n[f]=c,c*=t[f]}if(void 0===r){r=0;for(f=0;f<o;++f)n[f]<0&&(r-=(t[f]-1)*n[f])}for(var l=function(e){if(i(e))return"buffer";if(a)switch(Object.prototype.toString.call(e)){case"[object Float64Array]":return"float64";case"[object Float32Array]":return"float32";case"[object Int8Array]":return"int8";case"[object Int16Array]":return"int16";case"[object Int32Array]":return"int32";case"[object Uint8Array]":return"uint8";case"[object Uint16Array]":return"uint16";case"[object Uint32Array]":return"uint32";case"[object Uint8ClampedArray]":return"uint8_clamped";case"[object BigInt64Array]":return"bigint64";case"[object BigUint64Array]":return"biguint64"}return Array.isArray(e)?"array":"generic"}(e),d=s[l];d.length<=o+1;)d.push(u(l,d.length-1));return(0,d[o+1])(e,t,n,r)}},function(e,t,n){e.exports=function(){"use strict";var e=function(e){return e instanceof Uint8Array||e instanceof Uint16Array||e instanceof Uint32Array||e instanceof Int8Array||e instanceof Int16Array||e instanceof Int32Array||e instanceof Float32Array||e instanceof Float64Array||e instanceof Uint8ClampedArray},t=function(e,t){for(var n=Object.keys(t),r=0;r<n.length;++r)e[n[r]]=t[n[r]];return e};function n(e){var t=new Error("(regl) "+e);throw console.error(t),t}function r(e,t){e||n(t)}function i(e){return e?": "+e:""}function a(e,t,r){t.indexOf(e)<0&&n("invalid value"+i(r)+". must be one of: "+t)}var o=["gl","canvas","container","attributes","pixelRatio","extensions","optionalExtensions","profile","onDone"];function f(e,t){for(e+="";e.length<t;)e=" "+e;return e}function u(){this.name="unknown",this.lines=[],this.index={},this.hasErrors=!1}function s(e,t){this.number=e,this.line=t,this.errors=[]}function c(e,t,n){this.file=e,this.line=t,this.message=n}function l(){var e=new Error,t=(e.stack||e).toString(),n=/compileProcedure.*\n\s*at.*\((.*)\)/.exec(t);if(n)return n[1];var r=/compileProcedure.*\n\s*at\s+(.*)(\n|$)/.exec(t);return r?r[1]:"unknown"}function d(){var e=new Error,t=(e.stack||e).toString(),n=/at REGLCommand.*\n\s+at.*\((.*)\)/.exec(t);if(n)return n[1];var r=/at REGLCommand.*\n\s+at\s+(.*)\n/.exec(t);return r?r[1]:"unknown"}function p(e,t){var n,r=e.split("\n"),i=1,a=0,o={unknown:new u,0:new u};o.unknown.name=o[0].name=t||l(),o.unknown.lines.push(new s(0,""));for(var f=0;f<r.length;++f){var c=r[f],d=/^\s*\#\s*(\w+)\s+(.+)\s*$/.exec(c);if(d)switch(d[1]){case"line":var p=/(\d+)(\s+\d+)?/.exec(d[2]);p&&(i=0|p[1],p[2]&&((a=0|p[2])in o||(o[a]=new u)));break;case"define":var m=/SHADER_NAME(_B64)?\s+(.*)$/.exec(d[2]);m&&(o[a].name=m[1]?(n=m[2],"undefined"!=typeof atob?atob(n):"base64:"+n):m[2])}o[a].lines.push(new s(i++,c))}return Object.keys(o).forEach((function(e){var t=o[e];t.lines.forEach((function(e){t.index[e.number]=e}))})),o}function m(e){e._commandRef=l()}function h(e,t){var r=d();n(e+" in command "+(t||l())+("unknown"===r?"":" called from "+r))}function b(e,t,n,r){typeof e!==t&&h("invalid parameter type"+i(n)+". expected "+t+", got "+typeof e,r||l())}var v={};function g(e,t){return 32820===e||32819===e||33635===e?2:34042===e?4:v[e]*t}function y(e){return!(e&e-1||!e)}v[5120]=v[5121]=1,v[5122]=v[5123]=v[36193]=v[33635]=v[32819]=v[32820]=2,v[5124]=v[5125]=v[5126]=v[34042]=4;var x=t(r,{optional:function(e){e()},raise:n,commandRaise:h,command:function(e,t,n){e||h(t,n||l())},parameter:function(e,t,r){e in t||n("unknown parameter ("+e+")"+i(r)+". possible values: "+Object.keys(t).join())},commandParameter:function(e,t,n,r){e in t||h("unknown parameter ("+e+")"+i(n)+". possible values: "+Object.keys(t).join(),r||l())},constructor:function(e){Object.keys(e).forEach((function(e){o.indexOf(e)<0&&n('invalid regl constructor argument "'+e+'". must be one of '+o)}))},type:function(e,t,r){typeof e!==t&&n("invalid parameter type"+i(r)+". expected "+t+", got "+typeof e)},commandType:b,isTypedArray:function(t,r){e(t)||n("invalid parameter type"+i(r)+". must be a typed array")},nni:function(e,t){e>=0&&(0|e)===e||n("invalid parameter type, ("+e+")"+i(t)+". must be a nonnegative integer")},oneOf:a,shaderError:function(e,t,n,i,a){if(!e.getShaderParameter(t,e.COMPILE_STATUS)){var o=e.getShaderInfoLog(t),u=i===e.FRAGMENT_SHADER?"fragment":"vertex";b(n,"string",u+" shader source must be a string",a);var s=p(n,a),l=function(e){var t=[];return e.split("\n").forEach((function(e){if(!(e.length<5)){var n=/^ERROR\:\s+(\d+)\:(\d+)\:\s*(.*)$/.exec(e);n?t.push(new c(0|n[1],0|n[2],n[3].trim())):e.length>0&&t.push(new c("unknown",0,e))}})),t}(o);!function(e,t){t.forEach((function(t){var n=e[t.file];if(n){var r=n.index[t.line];if(r)return r.errors.push(t),void(n.hasErrors=!0)}e.unknown.hasErrors=!0,e.unknown.lines[0].errors.push(t)}))}(s,l),Object.keys(s).forEach((function(e){var t=s[e];if(t.hasErrors){var n=[""],r=[""];i("file number "+e+": "+t.name+"\n","color:red;text-decoration:underline;font-weight:bold"),t.lines.forEach((function(e){if(e.errors.length>0){i(f(e.number,4)+"|  ","background-color:yellow; font-weight:bold"),i(e.line+"\n","color:red; background-color:yellow; font-weight:bold");var t=0;e.errors.forEach((function(n){var r=n.message,a=/^\s*\'(.*)\'\s*\:\s*(.*)$/.exec(r);if(a){var o=a[1];switch(r=a[2],o){case"assign":o="="}t=Math.max(e.line.indexOf(o,t),0)}else t=0;i(f("| ",6)),i(f("^^^",t+3)+"\n","font-weight:bold"),i(f("| ",6)),i(r+"\n","font-weight:bold")})),i(f("| ",6)+"\n")}else i(f(e.number,4)+"|  "),i(e.line+"\n","color:red")})),"undefined"==typeof document||window.chrome?console.log(n.join("")):(r[0]=n.join("%c"),console.log.apply(console,r))}function i(e,t){n.push(e),r.push(t||"")}})),r.raise("Error compiling "+u+" shader, "+s[0].name)}},linkError:function(e,t,n,i,a){if(!e.getProgramParameter(t,e.LINK_STATUS)){var o=e.getProgramInfoLog(t),f=p(n,a),u='Error linking program with vertex shader, "'+p(i,a)[0].name+'", and fragment shader "'+f[0].name+'"';"undefined"!=typeof document?console.log("%c"+u+"\n%c"+o,"color:red;text-decoration:underline;font-weight:bold","color:red"):console.log(u+"\n"+o),r.raise(u)}},callSite:d,saveCommandRef:m,saveDrawInfo:function(e,t,n,r){function i(e){return e?r.id(e):0}function a(e,t){Object.keys(t).forEach((function(t){e[r.id(t)]=!0}))}m(e),e._fragId=i(e.static.frag),e._vertId=i(e.static.vert);var o=e._uniformSet={};a(o,t.static),a(o,t.dynamic);var f=e._attributeSet={};a(f,n.static),a(f,n.dynamic),e._hasCount="count"in e.static||"count"in e.dynamic||"elements"in e.static||"elements"in e.dynamic},framebufferFormat:function(e,t,n){e.texture?a(e.texture._texture.internalformat,t,"unsupported texture format for attachment"):a(e.renderbuffer._renderbuffer.format,n,"unsupported renderbuffer format for attachment")},guessCommand:l,texture2D:function(e,t,n){var i,a=t.width,o=t.height,f=t.channels;r(a>0&&a<=n.maxTextureSize&&o>0&&o<=n.maxTextureSize,"invalid texture shape"),33071===e.wrapS&&33071===e.wrapT||r(y(a)&&y(o),"incompatible wrap mode for texture, both width and height must be power of 2"),1===t.mipmask?1!==a&&1!==o&&r(9984!==e.minFilter&&9986!==e.minFilter&&9985!==e.minFilter&&9987!==e.minFilter,"min filter requires mipmap"):(r(y(a)&&y(o),"texture must be a square power of 2 to support mipmapping"),r(t.mipmask===(a<<1)-1,"missing or incomplete mipmap data")),5126===t.type&&(n.extensions.indexOf("oes_texture_float_linear")<0&&r(9728===e.minFilter&&9728===e.magFilter,"filter not supported, must enable oes_texture_float_linear"),r(!e.genMipmaps,"mipmap generation not supported with float textures"));var u=t.images;for(i=0;i<16;++i)if(u[i]){var s=a>>i,c=o>>i;r(t.mipmask&1<<i,"missing mipmap data");var l=u[i];if(r(l.width===s&&l.height===c,"invalid shape for mip images"),r(l.format===t.format&&l.internalformat===t.internalformat&&l.type===t.type,"incompatible type for mip image"),l.compressed);else if(l.data){var d=Math.ceil(g(l.type,f)*s/l.unpackAlignment)*l.unpackAlignment;r(l.data.byteLength===d*c,"invalid data for image, buffer size is inconsistent with image format")}else l.element||l.copy}else e.genMipmaps||r(0==(t.mipmask&1<<i),"extra mipmap data");t.compressed&&r(!e.genMipmaps,"mipmap generation for compressed images not supported")},textureCube:function(e,t,n,i){var a=e.width,o=e.height,f=e.channels;r(a>0&&a<=i.maxTextureSize&&o>0&&o<=i.maxTextureSize,"invalid texture shape"),r(a===o,"cube map must be square"),r(33071===t.wrapS&&33071===t.wrapT,"wrap mode not supported by cube map");for(var u=0;u<n.length;++u){var s=n[u];r(s.width===a&&s.height===o,"inconsistent cube map face shape"),t.genMipmaps&&(r(!s.compressed,"can not generate mipmap for compressed textures"),r(1===s.mipmask,"can not specify mipmaps and generate mipmaps"));for(var c=s.images,l=0;l<16;++l){var d=c[l];if(d){var p=a>>l,m=o>>l;r(s.mipmask&1<<l,"missing mipmap data"),r(d.width===p&&d.height===m,"invalid shape for mip images"),r(d.format===e.format&&d.internalformat===e.internalformat&&d.type===e.type,"incompatible type for mip image"),d.compressed||(d.data?r(d.data.byteLength===p*m*Math.max(g(d.type,f),d.unpackAlignment),"invalid data for image, buffer size is inconsistent with image format"):d.element||d.copy)}}}}}),w=0;function _(e,t){this.id=w++,this.type=e,this.data=t}function k(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"')}function A(e){return"["+function e(t){if(0===t.length)return[];var n=t.charAt(0),r=t.charAt(t.length-1);if(t.length>1&&n===r&&('"'===n||"'"===n))return['"'+k(t.substr(1,t.length-2))+'"'];var i=/\[(false|true|null|\d+|'[^']*'|"[^"]*")\]/.exec(t);if(i)return e(t.substr(0,i.index)).concat(e(i[1])).concat(e(t.substr(i.index+i[0].length)));var a=t.split(".");if(1===a.length)return['"'+k(t)+'"'];for(var o=[],f=0;f<a.length;++f)o=o.concat(e(a[f]));return o}(e).join("][")+"]"}var S={DynamicVariable:_,define:function(e,t){return new _(e,A(t+""))},isDynamic:function(e){return"function"==typeof e&&!e._reglType||e instanceof _},unbox:function(e,t){return"function"==typeof e?new _(0,e):e},accessor:A},E={next:"function"==typeof requestAnimationFrame?function(e){return requestAnimationFrame(e)}:function(e){return setTimeout(e,16)},cancel:"function"==typeof cancelAnimationFrame?function(e){return cancelAnimationFrame(e)}:clearTimeout},j="undefined"!=typeof performance&&performance.now?function(){return performance.now()}:function(){return+new Date};function T(e){return"string"==typeof e?e.split():(x(Array.isArray(e),"invalid extension array"),e)}function D(e){return"string"==typeof e?(x("undefined"!=typeof document,"not supported outside of DOM"),document.querySelector(e)):e}function O(e){var n,r,i,a,o,f=e||{},u={},s=[],c=[],l="undefined"==typeof window?1:window.devicePixelRatio,d=!1,p=function(e){e&&x.raise(e)},m=function(){};if("string"==typeof f?(x("undefined"!=typeof document,"selector queries only supported in DOM enviroments"),n=document.querySelector(f),x(n,"invalid query string for element")):"object"==typeof f?"string"==typeof(o=f).nodeName&&"function"==typeof o.appendChild&&"function"==typeof o.getBoundingClientRect?n=f:function(e){return"function"==typeof e.drawArrays||"function"==typeof e.drawElements}(f)?i=(a=f).canvas:(x.constructor(f),"gl"in f?a=f.gl:"canvas"in f?i=D(f.canvas):"container"in f&&(r=D(f.container)),"attributes"in f&&(u=f.attributes,x.type(u,"object","invalid context attributes")),"extensions"in f&&(s=T(f.extensions)),"optionalExtensions"in f&&(c=T(f.optionalExtensions)),"onDone"in f&&(x.type(f.onDone,"function","invalid or missing onDone callback"),p=f.onDone),"profile"in f&&(d=!!f.profile),"pixelRatio"in f&&(l=+f.pixelRatio,x(l>0,"invalid pixel ratio"))):x.raise("invalid arguments to regl"),n&&("canvas"===n.nodeName.toLowerCase()?i=n:r=n),!a){if(!i){x("undefined"!=typeof document,"must manually specify webgl context outside of DOM environments");var h=function(e,n,r){var i=document.createElement("canvas");function a(){var n=window.innerWidth,a=window.innerHeight;if(e!==document.body){var o=e.getBoundingClientRect();n=o.right-o.left,a=o.bottom-o.top}i.width=r*n,i.height=r*a,t(i.style,{width:n+"px",height:a+"px"})}return t(i.style,{border:0,margin:0,padding:0,top:0,left:0}),e.appendChild(i),e===document.body&&(i.style.position="absolute",t(e.style,{margin:0,padding:0})),window.addEventListener("resize",a,!1),a(),{canvas:i,onDestroy:function(){window.removeEventListener("resize",a),e.removeChild(i)}}}(r||document.body,0,l);if(!h)return null;i=h.canvas,m=h.onDestroy}a=function(e,t){function n(n){try{return e.getContext(n,t)}catch(e){return null}}return n("webgl")||n("experimental-webgl")||n("webgl-experimental")}(i,u)}return a?{gl:a,canvas:i,container:r,extensions:s,optionalExtensions:c,pixelRatio:l,profile:d,onDone:p,onDestroy:m}:(m(),p("webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org"),null)}function C(e,t){for(var n=Array(e),r=0;r<e;++r)n[r]=t(r);return n}function z(e){var t,n;return t=(e>65535)<<4,t|=n=((e>>>=t)>255)<<3,t|=n=((e>>>=n)>15)<<2,(t|=n=((e>>>=n)>3)<<1)|(e>>>=n)>>1}function F(){var e=C(8,(function(){return[]}));function t(t){var n=function(e){for(var t=16;t<=1<<28;t*=16)if(e<=t)return t;return 0}(t),r=e[z(n)>>2];return r.length>0?r.pop():new ArrayBuffer(n)}function n(t){e[z(t.byteLength)>>2].push(t)}return{alloc:t,free:n,allocType:function(e,n){var r=null;switch(e){case 5120:r=new Int8Array(t(n),0,n);break;case 5121:r=new Uint8Array(t(n),0,n);break;case 5122:r=new Int16Array(t(2*n),0,n);break;case 5123:r=new Uint16Array(t(2*n),0,n);break;case 5124:r=new Int32Array(t(4*n),0,n);break;case 5125:r=new Uint32Array(t(4*n),0,n);break;case 5126:r=new Float32Array(t(4*n),0,n);break;default:return null}return r.length!==n?r.subarray(0,n):r},freeType:function(e){n(e.buffer)}}}var B=F();function M(t){return!!t&&"object"==typeof t&&Array.isArray(t.shape)&&Array.isArray(t.stride)&&"number"==typeof t.offset&&t.shape.length===t.stride.length&&(Array.isArray(t.data)||e(t.data))}B.zero=F();var P=function(e){return Object.keys(e).map((function(t){return e[t]}))},L={shape:function(e){for(var t=[],n=e;n.length;n=n[0])t.push(n.length);return t},flatten:function(e,t,n,r){var i=1;if(t.length)for(var a=0;a<t.length;++a)i*=t[a];else i=0;var o=r||B.allocType(n,i);switch(t.length){case 0:break;case 1:!function(e,t,n){for(var r=0;r<t;++r)n[r]=e[r]}(e,t[0],o);break;case 2:!function(e,t,n,r){for(var i=0,a=0;a<t;++a)for(var o=e[a],f=0;f<n;++f)r[i++]=o[f]}(e,t[0],t[1],o);break;case 3:R(e,t[0],t[1],t[2],o,0);break;default:!function e(t,n,r,i,a){for(var o=1,f=r+1;f<n.length;++f)o*=n[f];var u=n[r];if(n.length-r==4){var s=n[r+1],c=n[r+2],l=n[r+3];for(f=0;f<u;++f)R(t[f],s,c,l,i,a),a+=o}else for(f=0;f<u;++f)e(t[f],n,r+1,i,a),a+=o}(e,t,0,o,0)}return o}};function R(e,t,n,r,i,a){for(var o=a,f=0;f<t;++f)for(var u=e[f],s=0;s<n;++s)for(var c=u[s],l=0;l<r;++l)i[o++]=c[l]}var I={"[object Int8Array]":5120,"[object Int16Array]":5122,"[object Int32Array]":5124,"[object Uint8Array]":5121,"[object Uint8ClampedArray]":5121,"[object Uint16Array]":5123,"[object Uint32Array]":5125,"[object Float32Array]":5126,"[object Float64Array]":5121,"[object ArrayBuffer]":5121},W={int8:5120,int16:5122,int32:5124,uint8:5121,uint16:5123,uint32:5125,float:5126,float32:5126},H={dynamic:35048,stream:35040,static:35044},U=L.flatten,q=L.shape,N=[];function G(e){return 0|I[Object.prototype.toString.call(e)]}function Q(e,t){for(var n=0;n<t.length;++n)e[n]=t[n]}function V(e,t,n,r,i,a,o){for(var f=0,u=0;u<n;++u)for(var s=0;s<r;++s)e[f++]=t[i*u+a*s+o]}N[5120]=1,N[5122]=2,N[5124]=4,N[5121]=1,N[5123]=2,N[5125]=4,N[5126]=4;var Y={points:0,point:0,lines:1,line:1,triangles:4,triangle:4,"line loop":2,"line strip":3,"triangle strip":5,"triangle fan":6},X=new Float32Array(1),$=new Uint32Array(X.buffer);function J(e){for(var t=B.allocType(5123,e.length),n=0;n<e.length;++n)if(isNaN(e[n]))t[n]=65535;else if(e[n]===1/0)t[n]=31744;else if(e[n]===-1/0)t[n]=64512;else{X[0]=e[n];var r=$[0],i=r>>>31<<15,a=(r<<1>>>24)-127,o=r>>13&1023;if(a<-24)t[n]=i;else if(a<-14){var f=-14-a;t[n]=i+(o+1024>>f)}else t[n]=a>15?i+31744:i+(a+15<<10)+o}return t}function K(t){return Array.isArray(t)||e(t)}var Z=function(e){return!(e&e-1||!e)},ee=[9984,9986,9985,9987],te=[0,6409,6410,6407,6408],ne={};function re(e){return"[object "+e+"]"}ne[6409]=ne[6406]=ne[6402]=1,ne[34041]=ne[6410]=2,ne[6407]=ne[35904]=3,ne[6408]=ne[35906]=4;var ie=re("HTMLCanvasElement"),ae=re("CanvasRenderingContext2D"),oe=re("ImageBitmap"),fe=re("HTMLImageElement"),ue=re("HTMLVideoElement"),se=Object.keys(I).concat([ie,ae,oe,fe,ue]),ce=[];ce[5121]=1,ce[5126]=4,ce[36193]=2,ce[5123]=2,ce[5125]=4;var le=[];function de(e){return Array.isArray(e)&&(0===e.length||"number"==typeof e[0])}function pe(e){return!!Array.isArray(e)&&!(0===e.length||!K(e[0]))}function me(e){return Object.prototype.toString.call(e)}function he(e){return me(e)===ie}function be(e){if(!e)return!1;var t=me(e);return se.indexOf(t)>=0||de(e)||pe(e)||M(e)}function ve(e){return 0|I[Object.prototype.toString.call(e)]}function ge(e,t){return B.allocType(36193===e.type?5126:e.type,t)}function ye(e,t){36193===e.type?(e.data=J(t),B.freeType(t)):e.data=t}function xe(e,t,n,r,i,a){var o;if(o=void 0!==le[e]?le[e]:ne[e]*ce[t],a&&(o*=6),i){for(var f=0,u=n;u>=1;)f+=o*u*u,u/=2;return f}return o*n*r}function we(n,r,i,a,o,f,u){var s={"don't care":4352,"dont care":4352,nice:4354,fast:4353},c={repeat:10497,clamp:33071,mirror:33648},l={nearest:9728,linear:9729},d=t({mipmap:9987,"nearest mipmap nearest":9984,"linear mipmap nearest":9985,"nearest mipmap linear":9986,"linear mipmap linear":9987},l),p={none:0,browser:37444},m={uint8:5121,rgba4:32819,rgb565:33635,"rgb5 a1":32820},h={alpha:6406,luminance:6409,"luminance alpha":6410,rgb:6407,rgba:6408,rgba4:32854,"rgb5 a1":32855,rgb565:36194},b={};r.ext_srgb&&(h.srgb=35904,h.srgba=35906),r.oes_texture_float&&(m.float32=m.float=5126),r.oes_texture_half_float&&(m.float16=m["half float"]=36193),r.webgl_depth_texture&&(t(h,{depth:6402,"depth stencil":34041}),t(m,{uint16:5123,uint32:5125,"depth stencil":34042})),r.webgl_compressed_texture_s3tc&&t(b,{"rgb s3tc dxt1":33776,"rgba s3tc dxt1":33777,"rgba s3tc dxt3":33778,"rgba s3tc dxt5":33779}),r.webgl_compressed_texture_atc&&t(b,{"rgb atc":35986,"rgba atc explicit alpha":35987,"rgba atc interpolated alpha":34798}),r.webgl_compressed_texture_pvrtc&&t(b,{"rgb pvrtc 4bppv1":35840,"rgb pvrtc 2bppv1":35841,"rgba pvrtc 4bppv1":35842,"rgba pvrtc 2bppv1":35843}),r.webgl_compressed_texture_etc1&&(b["rgb etc1"]=36196);var v=Array.prototype.slice.call(n.getParameter(34467));Object.keys(b).forEach((function(e){var t=b[e];v.indexOf(t)>=0&&(h[e]=t)}));var g=Object.keys(h);i.textureFormats=g;var y=[];Object.keys(h).forEach((function(e){var t=h[e];y[t]=e}));var w=[];Object.keys(m).forEach((function(e){var t=m[e];w[t]=e}));var _=[];Object.keys(l).forEach((function(e){_[l[e]]=e}));var k=[];Object.keys(d).forEach((function(e){var t=d[e];k[t]=e}));var A=[];Object.keys(c).forEach((function(e){A[c[e]]=e}));var S=g.reduce((function(e,t){var n=h[t];return 6409===n||6406===n||6409===n||6410===n||6402===n||34041===n?e[n]=n:32855===n||t.indexOf("rgba")>=0?e[n]=6408:e[n]=6407,e}),{});function E(){this.internalformat=6408,this.format=6408,this.type=5121,this.compressed=!1,this.premultiplyAlpha=!1,this.flipY=!1,this.unpackAlignment=1,this.colorSpace=37444,this.width=0,this.height=0,this.channels=0}function j(e,t){e.internalformat=t.internalformat,e.format=t.format,e.type=t.type,e.compressed=t.compressed,e.premultiplyAlpha=t.premultiplyAlpha,e.flipY=t.flipY,e.unpackAlignment=t.unpackAlignment,e.colorSpace=t.colorSpace,e.width=t.width,e.height=t.height,e.channels=t.channels}function T(e,t){if("object"==typeof t&&t){if("premultiplyAlpha"in t&&(x.type(t.premultiplyAlpha,"boolean","invalid premultiplyAlpha"),e.premultiplyAlpha=t.premultiplyAlpha),"flipY"in t&&(x.type(t.flipY,"boolean","invalid texture flip"),e.flipY=t.flipY),"alignment"in t&&(x.oneOf(t.alignment,[1,2,4,8],"invalid texture unpack alignment"),e.unpackAlignment=t.alignment),"colorSpace"in t&&(x.parameter(t.colorSpace,p,"invalid colorSpace"),e.colorSpace=p[t.colorSpace]),"type"in t){var n=t.type;x(r.oes_texture_float||!("float"===n||"float32"===n),"you must enable the OES_texture_float extension in order to use floating point textures."),x(r.oes_texture_half_float||!("half float"===n||"float16"===n),"you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures."),x(r.webgl_depth_texture||!("uint16"===n||"uint32"===n||"depth stencil"===n),"you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures."),x.parameter(n,m,"invalid texture type"),e.type=m[n]}var a=e.width,o=e.height,f=e.channels,u=!1;"shape"in t?(x(Array.isArray(t.shape)&&t.shape.length>=2,"shape must be an array"),a=t.shape[0],o=t.shape[1],3===t.shape.length&&(f=t.shape[2],x(f>0&&f<=4,"invalid number of channels"),u=!0),x(a>=0&&a<=i.maxTextureSize,"invalid width"),x(o>=0&&o<=i.maxTextureSize,"invalid height")):("radius"in t&&(a=o=t.radius,x(a>=0&&a<=i.maxTextureSize,"invalid radius")),"width"in t&&(a=t.width,x(a>=0&&a<=i.maxTextureSize,"invalid width")),"height"in t&&(o=t.height,x(o>=0&&o<=i.maxTextureSize,"invalid height")),"channels"in t&&(f=t.channels,x(f>0&&f<=4,"invalid number of channels"),u=!0)),e.width=0|a,e.height=0|o,e.channels=0|f;var s=!1;if("format"in t){var c=t.format;x(r.webgl_depth_texture||!("depth"===c||"depth stencil"===c),"you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures."),x.parameter(c,h,"invalid texture format");var l=e.internalformat=h[c];e.format=S[l],c in m&&("type"in t||(e.type=m[c])),c in b&&(e.compressed=!0),s=!0}!u&&s?e.channels=ne[e.format]:u&&!s?e.channels!==te[e.format]&&(e.format=e.internalformat=te[e.channels]):s&&u&&x(e.channels===ne[e.format],"number of channels inconsistent with specified format")}}function D(e){n.pixelStorei(37440,e.flipY),n.pixelStorei(37441,e.premultiplyAlpha),n.pixelStorei(37443,e.colorSpace),n.pixelStorei(3317,e.unpackAlignment)}function O(){E.call(this),this.xOffset=0,this.yOffset=0,this.data=null,this.needsFree=!1,this.element=null,this.needsCopy=!1}function C(t,n){var r=null;if(be(n)?r=n:n&&(x.type(n,"object","invalid pixel data type"),T(t,n),"x"in n&&(t.xOffset=0|n.x),"y"in n&&(t.yOffset=0|n.y),be(n.data)&&(r=n.data)),x(!t.compressed||r instanceof Uint8Array,"compressed texture data must be stored in a uint8array"),n.copy){x(!r,"can not specify copy and data field for the same texture");var a=o.viewportWidth,f=o.viewportHeight;t.width=t.width||a-t.xOffset,t.height=t.height||f-t.yOffset,t.needsCopy=!0,x(t.xOffset>=0&&t.xOffset<a&&t.yOffset>=0&&t.yOffset<f&&t.width>0&&t.width<=a&&t.height>0&&t.height<=f,"copy texture read out of bounds")}else if(r){if(e(r))t.channels=t.channels||4,t.data=r,"type"in n||5121!==t.type||(t.type=ve(r));else if(de(r))t.channels=t.channels||4,function(e,t){var n=t.length;switch(e.type){case 5121:case 5123:case 5125:case 5126:var r=B.allocType(e.type,n);r.set(t),e.data=r;break;case 36193:e.data=J(t);break;default:x.raise("unsupported texture type, must specify a typed array")}}(t,r),t.alignment=1,t.needsFree=!0;else if(M(r)){var u=r.data;Array.isArray(u)||5121!==t.type||(t.type=ve(u));var s,c,l,d,p,m,h=r.shape,b=r.stride;3===h.length?(l=h[2],m=b[2]):(x(2===h.length,"invalid ndarray pixel data, must be 2 or 3D"),l=1,m=1),s=h[0],c=h[1],d=b[0],p=b[1],t.alignment=1,t.width=s,t.height=c,t.channels=l,t.format=t.internalformat=te[l],t.needsFree=!0,function(e,t,n,r,i,a){for(var o=e.width,f=e.height,u=e.channels,s=ge(e,o*f*u),c=0,l=0;l<f;++l)for(var d=0;d<o;++d)for(var p=0;p<u;++p)s[c++]=t[n*d+r*l+i*p+a];ye(e,s)}(t,u,d,p,m,r.offset)}else if(he(r)||me(r)===ae)he(r)?t.element=r:t.element=r.canvas,t.width=t.element.width,t.height=t.element.height,t.channels=4;else if(function(e){return me(e)===oe}(r))t.element=r,t.width=r.width,t.height=r.height,t.channels=4;else if(function(e){return me(e)===fe}(r))t.element=r,t.width=r.naturalWidth,t.height=r.naturalHeight,t.channels=4;else if(function(e){return me(e)===ue}(r))t.element=r,t.width=r.videoWidth,t.height=r.videoHeight,t.channels=4;else if(pe(r)){var v=t.width||r[0].length,g=t.height||r.length,y=t.channels;y=K(r[0][0])?y||r[0][0].length:y||1;for(var w=L.shape(r),_=1,k=0;k<w.length;++k)_*=w[k];var A=ge(t,_);L.flatten(r,w,"",A),ye(t,A),t.alignment=1,t.width=v,t.height=g,t.channels=y,t.format=t.internalformat=te[y],t.needsFree=!0}}else t.width=t.width||1,t.height=t.height||1,t.channels=t.channels||4;5126===t.type?x(i.extensions.indexOf("oes_texture_float")>=0,"oes_texture_float extension not enabled"):36193===t.type&&x(i.extensions.indexOf("oes_texture_half_float")>=0,"oes_texture_half_float extension not enabled")}function z(e,t,r){var i=e.element,o=e.data,f=e.internalformat,u=e.format,s=e.type,c=e.width,l=e.height,d=e.channels;if(D(e),i)n.texImage2D(t,r,u,u,s,i);else if(e.compressed)n.compressedTexImage2D(t,r,f,c,l,0,o);else if(e.needsCopy)a(),n.copyTexImage2D(t,r,u,e.xOffset,e.yOffset,c,l,0);else{var p=!o;p&&(o=B.zero.allocType(s,c*l*d)),n.texImage2D(t,r,u,c,l,0,u,s,o),p&&o&&B.zero.freeType(o)}}function F(e,t,r,i,o){var f=e.element,u=e.data,s=e.internalformat,c=e.format,l=e.type,d=e.width,p=e.height;D(e),f?n.texSubImage2D(t,o,r,i,c,l,f):e.compressed?n.compressedTexSubImage2D(t,o,r,i,s,d,p,u):e.needsCopy?(a(),n.copyTexSubImage2D(t,o,r,i,e.xOffset,e.yOffset,d,p)):n.texSubImage2D(t,o,r,i,d,p,c,l,u)}var R=[];function I(){return R.pop()||new O}function W(e){e.needsFree&&B.freeType(e.data),O.call(e),R.push(e)}function H(){E.call(this),this.genMipmaps=!1,this.mipmapHint=4352,this.mipmask=0,this.images=Array(16)}function U(e,t,n){var r=e.images[0]=I();e.mipmask=1,r.width=e.width=t,r.height=e.height=n,r.channels=e.channels=4}function q(e,t){var n=null;if(be(t))j(n=e.images[0]=I(),e),C(n,t),e.mipmask=1;else if(T(e,t),Array.isArray(t.mipmap))for(var r=t.mipmap,i=0;i<r.length;++i)j(n=e.images[i]=I(),e),n.width>>=i,n.height>>=i,C(n,r[i]),e.mipmask|=1<<i;else j(n=e.images[0]=I(),e),C(n,t),e.mipmask=1;j(e,e.images[0]),(e.compressed&&33776===e.internalformat||33777===e.internalformat||33778===e.internalformat||33779===e.internalformat)&&x(e.width%4==0&&e.height%4==0,"for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4")}function N(e,t){for(var n=e.images,r=0;r<n.length;++r){if(!n[r])return;z(n[r],t,r)}}var G=[];function Q(){var e=G.pop()||new H;E.call(e),e.mipmask=0;for(var t=0;t<16;++t)e.images[t]=null;return e}function V(e){for(var t=e.images,n=0;n<t.length;++n)t[n]&&W(t[n]),t[n]=null;G.push(e)}function Y(){this.minFilter=9728,this.magFilter=9728,this.wrapS=33071,this.wrapT=33071,this.anisotropic=1,this.genMipmaps=!1,this.mipmapHint=4352}function X(e,t){if("min"in t){var n=t.min;x.parameter(n,d),e.minFilter=d[n],ee.indexOf(e.minFilter)>=0&&!("faces"in t)&&(e.genMipmaps=!0)}if("mag"in t){var r=t.mag;x.parameter(r,l),e.magFilter=l[r]}var a=e.wrapS,o=e.wrapT;if("wrap"in t){var f=t.wrap;"string"==typeof f?(x.parameter(f,c),a=o=c[f]):Array.isArray(f)&&(x.parameter(f[0],c),x.parameter(f[1],c),a=c[f[0]],o=c[f[1]])}else{if("wrapS"in t){var u=t.wrapS;x.parameter(u,c),a=c[u]}if("wrapT"in t){var p=t.wrapT;x.parameter(p,c),o=c[p]}}if(e.wrapS=a,e.wrapT=o,"anisotropic"in t){var m=t.anisotropic;x("number"==typeof m&&m>=1&&m<=i.maxAnisotropic,"aniso samples must be between 1 and "),e.anisotropic=t.anisotropic}if("mipmap"in t){var h=!1;switch(typeof t.mipmap){case"string":x.parameter(t.mipmap,s,"invalid mipmap hint"),e.mipmapHint=s[t.mipmap],e.genMipmaps=!0,h=!0;break;case"boolean":h=e.genMipmaps=t.mipmap;break;case"object":x(Array.isArray(t.mipmap),"invalid mipmap type"),e.genMipmaps=!1,h=!0;break;default:x.raise("invalid mipmap type")}!h||"min"in t||(e.minFilter=9984)}}function $(e,t){n.texParameteri(t,10241,e.minFilter),n.texParameteri(t,10240,e.magFilter),n.texParameteri(t,10242,e.wrapS),n.texParameteri(t,10243,e.wrapT),r.ext_texture_filter_anisotropic&&n.texParameteri(t,34046,e.anisotropic),e.genMipmaps&&(n.hint(33170,e.mipmapHint),n.generateMipmap(t))}var re=0,ie={},se=i.maxTextureUnits,ce=Array(se).map((function(){return null}));function le(e){E.call(this),this.mipmask=0,this.internalformat=6408,this.id=re++,this.refCount=1,this.target=e,this.texture=n.createTexture(),this.unit=-1,this.bindCount=0,this.texInfo=new Y,u.profile&&(this.stats={size:0})}function we(e){n.activeTexture(33984),n.bindTexture(e.target,e.texture)}function _e(){var e=ce[0];e?n.bindTexture(e.target,e.texture):n.bindTexture(3553,null)}function ke(e){var t=e.texture;x(t,"must not double destroy texture");var r=e.unit,i=e.target;r>=0&&(n.activeTexture(33984+r),n.bindTexture(i,null),ce[r]=null),n.deleteTexture(t),e.texture=null,e.params=null,e.pixels=null,e.refCount=0,delete ie[e.id],f.textureCount--}return t(le.prototype,{bind:function(){this.bindCount+=1;var e=this.unit;if(e<0){for(var t=0;t<se;++t){var r=ce[t];if(r){if(r.bindCount>0)continue;r.unit=-1}ce[t]=this,e=t;break}e>=se&&x.raise("insufficient number of texture units"),u.profile&&f.maxTextureUnits<e+1&&(f.maxTextureUnits=e+1),this.unit=e,n.activeTexture(33984+e),n.bindTexture(this.target,this.texture)}return e},unbind:function(){this.bindCount-=1},decRef:function(){--this.refCount<=0&&ke(this)}}),u.profile&&(f.getTotalTextureSize=function(){var e=0;return Object.keys(ie).forEach((function(t){e+=ie[t].stats.size})),e}),{create2D:function(e,t){var r=new le(3553);function a(e,t){var n=r.texInfo;Y.call(n);var o=Q();return"number"==typeof e?U(o,0|e,"number"==typeof t?0|t:0|e):e?(x.type(e,"object","invalid arguments to regl.texture"),X(n,e),q(o,e)):U(o,1,1),n.genMipmaps&&(o.mipmask=(o.width<<1)-1),r.mipmask=o.mipmask,j(r,o),x.texture2D(n,o,i),r.internalformat=o.internalformat,a.width=o.width,a.height=o.height,we(r),N(o,3553),$(n,3553),_e(),V(o),u.profile&&(r.stats.size=xe(r.internalformat,r.type,o.width,o.height,n.genMipmaps,!1)),a.format=y[r.internalformat],a.type=w[r.type],a.mag=_[n.magFilter],a.min=k[n.minFilter],a.wrapS=A[n.wrapS],a.wrapT=A[n.wrapT],a}return ie[r.id]=r,f.textureCount++,a(e,t),a.subimage=function(e,t,n,i){x(!!e,"must specify image data");var o=0|t,f=0|n,u=0|i,s=I();return j(s,r),s.width=0,s.height=0,C(s,e),s.width=s.width||(r.width>>u)-o,s.height=s.height||(r.height>>u)-f,x(r.type===s.type&&r.format===s.format&&r.internalformat===s.internalformat,"incompatible format for texture.subimage"),x(o>=0&&f>=0&&o+s.width<=r.width&&f+s.height<=r.height,"texture.subimage write out of bounds"),x(r.mipmask&1<<u,"missing mipmap data"),x(s.data||s.element||s.needsCopy,"missing image data"),we(r),F(s,3553,o,f,u),_e(),W(s),a},a.resize=function(e,t){var i,o=0|e,f=0|t||o;if(o===r.width&&f===r.height)return a;a.width=r.width=o,a.height=r.height=f,we(r);for(var s=r.channels,c=r.type,l=0;r.mipmask>>l;++l){var d=o>>l,p=f>>l;if(!d||!p)break;i=B.zero.allocType(c,d*p*s),n.texImage2D(3553,l,r.format,d,p,0,r.format,r.type,i),i&&B.zero.freeType(i)}return _e(),u.profile&&(r.stats.size=xe(r.internalformat,r.type,o,f,!1,!1)),a},a._reglType="texture2d",a._texture=r,u.profile&&(a.stats=r.stats),a.destroy=function(){r.decRef()},a},createCube:function(e,t,r,a,o,s){var c=new le(34067);ie[c.id]=c,f.cubeCount++;var l=new Array(6);function d(e,t,n,r,a,o){var f,s=c.texInfo;for(Y.call(s),f=0;f<6;++f)l[f]=Q();if("number"!=typeof e&&e)if("object"==typeof e)if(t)q(l[0],e),q(l[1],t),q(l[2],n),q(l[3],r),q(l[4],a),q(l[5],o);else if(X(s,e),T(c,e),"faces"in e){var p=e.faces;for(x(Array.isArray(p)&&6===p.length,"cube faces must be a length 6 array"),f=0;f<6;++f)x("object"==typeof p[f]&&!!p[f],"invalid input for cube map face"),j(l[f],c),q(l[f],p[f])}else for(f=0;f<6;++f)q(l[f],e);else x.raise("invalid arguments to cube map");else{var m=0|e||1;for(f=0;f<6;++f)U(l[f],m,m)}for(j(c,l[0]),i.npotTextureCube||x(Z(c.width)&&Z(c.height),"your browser does not support non power or two texture dimensions"),s.genMipmaps?c.mipmask=(l[0].width<<1)-1:c.mipmask=l[0].mipmask,x.textureCube(c,s,l,i),c.internalformat=l[0].internalformat,d.width=l[0].width,d.height=l[0].height,we(c),f=0;f<6;++f)N(l[f],34069+f);for($(s,34067),_e(),u.profile&&(c.stats.size=xe(c.internalformat,c.type,d.width,d.height,s.genMipmaps,!0)),d.format=y[c.internalformat],d.type=w[c.type],d.mag=_[s.magFilter],d.min=k[s.minFilter],d.wrapS=A[s.wrapS],d.wrapT=A[s.wrapT],f=0;f<6;++f)V(l[f]);return d}return d(e,t,r,a,o,s),d.subimage=function(e,t,n,r,i){x(!!t,"must specify image data"),x("number"==typeof e&&e===(0|e)&&e>=0&&e<6,"invalid face");var a=0|n,o=0|r,f=0|i,u=I();return j(u,c),u.width=0,u.height=0,C(u,t),u.width=u.width||(c.width>>f)-a,u.height=u.height||(c.height>>f)-o,x(c.type===u.type&&c.format===u.format&&c.internalformat===u.internalformat,"incompatible format for texture.subimage"),x(a>=0&&o>=0&&a+u.width<=c.width&&o+u.height<=c.height,"texture.subimage write out of bounds"),x(c.mipmask&1<<f,"missing mipmap data"),x(u.data||u.element||u.needsCopy,"missing image data"),we(c),F(u,34069+e,a,o,f),_e(),W(u),d},d.resize=function(e){var t=0|e;if(t!==c.width){d.width=c.width=t,d.height=c.height=t,we(c);for(var r=0;r<6;++r)for(var i=0;c.mipmask>>i;++i)n.texImage2D(34069+r,i,c.format,t>>i,t>>i,0,c.format,c.type,null);return _e(),u.profile&&(c.stats.size=xe(c.internalformat,c.type,d.width,d.height,!1,!0)),d}},d._reglType="textureCube",d._texture=c,u.profile&&(d.stats=c.stats),d.destroy=function(){c.decRef()},d},clear:function(){for(var e=0;e<se;++e)n.activeTexture(33984+e),n.bindTexture(3553,null),ce[e]=null;P(ie).forEach(ke),f.cubeCount=0,f.textureCount=0},getTexture:function(e){return null},restore:function(){for(var e=0;e<se;++e){var t=ce[e];t&&(t.bindCount=0,t.unit=-1,ce[e]=null)}P(ie).forEach((function(e){e.texture=n.createTexture(),n.bindTexture(e.target,e.texture);for(var t=0;t<32;++t)if(0!=(e.mipmask&1<<t))if(3553===e.target)n.texImage2D(3553,t,e.internalformat,e.width>>t,e.height>>t,0,e.internalformat,e.type,null);else for(var r=0;r<6;++r)n.texImage2D(34069+r,t,e.internalformat,e.width>>t,e.height>>t,0,e.internalformat,e.type,null);$(e.texInfo,e.target)}))}}}le[32854]=2,le[32855]=2,le[36194]=2,le[34041]=4,le[33776]=.5,le[33777]=.5,le[33778]=1,le[33779]=1,le[35986]=.5,le[35987]=1,le[34798]=1,le[35840]=.5,le[35841]=.25,le[35842]=.5,le[35843]=.25,le[36196]=.5;var _e=[];function ke(e,t,n){return _e[e]*t*n}_e[32854]=2,_e[32855]=2,_e[36194]=2,_e[33189]=2,_e[36168]=1,_e[34041]=4,_e[35907]=4,_e[34836]=16,_e[34842]=8,_e[34843]=6;var Ae=[6407,6408],Se=[];Se[6408]=4,Se[6407]=3;var Ee=[];Ee[5121]=1,Ee[5126]=4,Ee[36193]=2;var je=[32854,32855,36194,35907,34842,34843,34836],Te={};function De(){this.state=0,this.x=0,this.y=0,this.z=0,this.w=0,this.buffer=null,this.size=0,this.normalized=!1,this.type=5126,this.offset=0,this.stride=0,this.divisor=0}function Oe(t,n,r,i,a,o,f){function u(u){var s;null===n.next?(x(a.preserveDrawingBuffer,'you must create a webgl context with "preserveDrawingBuffer":true in order to read pixels from the drawing buffer'),s=5121):(x(null!==n.next.colorAttachments[0].texture,"You cannot read from a renderbuffer"),s=n.next.colorAttachments[0].texture._texture.type,o.oes_texture_float?(x(5121===s||5126===s,"Reading from a framebuffer is only allowed for the types 'uint8' and 'float'"),5126===s&&x(f.readFloat,"Reading 'float' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float")):x(5121===s,"Reading from a framebuffer is only allowed for the type 'uint8'"));var c=0,l=0,d=i.framebufferWidth,p=i.framebufferHeight,m=null;e(u)?m=u:u&&(x.type(u,"object","invalid arguments to regl.read()"),c=0|u.x,l=0|u.y,x(c>=0&&c<i.framebufferWidth,"invalid x offset for regl.read"),x(l>=0&&l<i.framebufferHeight,"invalid y offset for regl.read"),d=0|(u.width||i.framebufferWidth-c),p=0|(u.height||i.framebufferHeight-l),m=u.data||null),m&&(5121===s?x(m instanceof Uint8Array,"buffer must be 'Uint8Array' when reading from a framebuffer of type 'uint8'"):5126===s&&x(m instanceof Float32Array,"buffer must be 'Float32Array' when reading from a framebuffer of type 'float'")),x(d>0&&d+c<=i.framebufferWidth,"invalid width for read pixels"),x(p>0&&p+l<=i.framebufferHeight,"invalid height for read pixels"),r();var h=d*p*4;return m||(5121===s?m=new Uint8Array(h):5126===s&&(m=m||new Float32Array(h))),x.isTypedArray(m,"data buffer for regl.read() must be a typedarray"),x(m.byteLength>=h,"data buffer for regl.read() too small"),t.pixelStorei(3333,4),t.readPixels(c,l,d,p,6408,s,m),m}return function(e){return e&&"framebuffer"in e?function(e){var t;return n.setFBO({framebuffer:e.framebuffer},(function(){t=u(e)})),t}(e):u(e)}}function Ce(e){return Array.prototype.slice.call(e)}function ze(e){return Ce(e).join("")}Te[36053]="complete",Te[36054]="incomplete attachment",Te[36057]="incomplete dimensions",Te[36055]="incomplete, missing attachment",Te[36061]="unsupported";var Fe="xyzw".split(""),Be="profile",Me="framebuffer",Pe="vert",Le="frag",Re="elements",Ie="primitive",We="count",He="offset",Ue="instances",qe=Me+"Width",Ne=Me+"Height",Ge=["blend.func","blend.equation","stencil.func","stencil.opFront","stencil.opBack","sample.coverage","viewport","scissor.box","polygonOffset.offset"],Qe={0:0,1:1,zero:0,one:1,"src color":768,"one minus src color":769,"src alpha":770,"one minus src alpha":771,"dst color":774,"one minus dst color":775,"dst alpha":772,"one minus dst alpha":773,"constant color":32769,"one minus constant color":32770,"constant alpha":32771,"one minus constant alpha":32772,"src alpha saturate":776},Ve=["constant color, constant alpha","one minus constant color, constant alpha","constant color, one minus constant alpha","one minus constant color, one minus constant alpha","constant alpha, constant color","constant alpha, one minus constant color","one minus constant alpha, constant color","one minus constant alpha, one minus constant color"],Ye={never:512,less:513,"<":513,equal:514,"=":514,"==":514,"===":514,lequal:515,"<=":515,greater:516,">":516,notequal:517,"!=":517,"!==":517,gequal:518,">=":518,always:519},Xe={0:0,zero:0,keep:7680,replace:7681,increment:7682,decrement:7683,"increment wrap":34055,"decrement wrap":34056,invert:5386},$e={frag:35632,vert:35633},Je={cw:2304,ccw:2305};function Ke(t){return Array.isArray(t)||e(t)||M(t)}function Ze(e){return e.sort((function(e,t){return"viewport"===e?-1:"viewport"===t?1:e<t?-1:1}))}function et(e,t,n,r){this.thisDep=e,this.contextDep=t,this.propDep=n,this.append=r}function tt(e){return e&&!(e.thisDep||e.contextDep||e.propDep)}function nt(e){return new et(!1,!1,!1,e)}function rt(e,t){var n=e.type;if(0===n){var r=e.data.length;return new et(!0,r>=1,r>=2,t)}if(4===n){var i=e.data;return new et(i.thisDep,i.contextDep,i.propDep,t)}return new et(3===n,2===n,1===n,t)}var it=new et(!1,!1,!1,(function(){}));function at(e,n,r,i,a,o,f,u,s,c,l,d,p,m,h){var b=c.Record,v={add:32774,subtract:32778,"reverse subtract":32779};r.ext_blend_minmax&&(v.min=32775,v.max=32776);var g=r.angle_instanced_arrays,y=r.webgl_draw_buffers,w={dirty:!0,profile:h.profile},_={},k=[],A={},E={};function j(e){return e.replace(".","_")}function T(e,t,n){var r=j(e);k.push(e),_[r]=w[r]=!!n,A[r]=t}function D(e,t,n){var r=j(e);k.push(e),Array.isArray(n)?(w[r]=n.slice(),_[r]=n.slice()):w[r]=_[r]=n,E[r]=t}T("dither",3024),T("blend.enable",3042),D("blend.color","blendColor",[0,0,0,0]),D("blend.equation","blendEquationSeparate",[32774,32774]),D("blend.func","blendFuncSeparate",[1,0,1,0]),T("depth.enable",2929,!0),D("depth.func","depthFunc",513),D("depth.range","depthRange",[0,1]),D("depth.mask","depthMask",!0),D("colorMask","colorMask",[!0,!0,!0,!0]),T("cull.enable",2884),D("cull.face","cullFace",1029),D("frontFace","frontFace",2305),D("lineWidth","lineWidth",1),T("polygonOffset.enable",32823),D("polygonOffset.offset","polygonOffset",[0,0]),T("sample.alpha",32926),T("sample.enable",32928),D("sample.coverage","sampleCoverage",[1,!1]),T("stencil.enable",2960),D("stencil.mask","stencilMask",-1),D("stencil.func","stencilFunc",[519,0,-1]),D("stencil.opFront","stencilOpSeparate",[1028,7680,7680,7680]),D("stencil.opBack","stencilOpSeparate",[1029,7680,7680,7680]),T("scissor.enable",3089),D("scissor.box","scissor",[0,0,e.drawingBufferWidth,e.drawingBufferHeight]),D("viewport","viewport",[0,0,e.drawingBufferWidth,e.drawingBufferHeight]);var O={gl:e,context:p,strings:n,next:_,current:w,draw:d,elements:o,buffer:a,shader:l,attributes:c.state,uniforms:s,framebuffer:u,extensions:r,timer:m,isBufferArgs:Ke},z={primTypes:Y,compareFuncs:Ye,blendFuncs:Qe,blendEquations:v,stencilOps:Xe,glTypes:W,orientationType:Je};x.optional((function(){O.isArrayLike=K})),y&&(z.backBuffer=[1029],z.drawBuffer=C(i.maxDrawbuffers,(function(e){return 0===e?[0]:C(e,(function(e){return 36064+e}))})));var F=0;function B(){var e=function(){var e=0,n=[],r=[];function i(){var n=[],r=[];return t((function(){n.push.apply(n,Ce(arguments))}),{def:function(){var t="v"+e++;return r.push(t),arguments.length>0&&(n.push(t,"="),n.push.apply(n,Ce(arguments)),n.push(";")),t},toString:function(){return ze([r.length>0?"var "+r.join(",")+";":"",ze(n)])}})}function a(){var e=i(),n=i(),r=e.toString,a=n.toString;function o(t,r){n(t,r,"=",e.def(t,r),";")}return t((function(){e.apply(e,Ce(arguments))}),{def:e.def,entry:e,exit:n,save:o,set:function(t,n,r){o(t,n),e(t,n,"=",r,";")},toString:function(){return r()+a()}})}var o=i(),f={};return{global:o,link:function(t){for(var i=0;i<r.length;++i)if(r[i]===t)return n[i];var a="g"+e++;return n.push(a),r.push(t),a},block:i,proc:function(e,n){var r=[];function i(){var e="a"+r.length;return r.push(e),e}n=n||0;for(var o=0;o<n;++o)i();var u=a(),s=u.toString;return f[e]=t(u,{arg:i,toString:function(){return ze(["function(",r.join(),"){",s(),"}"])}})},scope:a,cond:function(){var e=ze(arguments),n=a(),r=a(),i=n.toString,o=r.toString;return t(n,{then:function(){return n.apply(n,Ce(arguments)),this},else:function(){return r.apply(r,Ce(arguments)),this},toString:function(){var t=o();return t&&(t="else{"+t+"}"),ze(["if(",e,"){",i(),"}",t])}})},compile:function(){var e=['"use strict";',o,"return {"];Object.keys(f).forEach((function(t){e.push('"',t,'":',f[t].toString(),",")})),e.push("}");var t=ze(e).replace(/;/g,";\n").replace(/}/g,"}\n").replace(/{/g,"{\n");return Function.apply(null,n.concat(t)).apply(null,r)}}}(),r=e.link,i=e.global;e.id=F++,e.batchId="0";var a=r(O),o=e.shared={props:"a0"};Object.keys(O).forEach((function(e){o[e]=i.def(a,".",e)})),x.optional((function(){e.CHECK=r(x),e.commandStr=x.guessCommand(),e.command=r(e.commandStr),e.assert=function(e,t,n){e("if(!(",t,"))",this.CHECK,".commandRaise(",r(n),",",this.command,");")},z.invalidBlendCombinations=Ve}));var f=e.next={},u=e.current={};Object.keys(E).forEach((function(e){Array.isArray(w[e])&&(f[e]=i.def(o.next,".",e),u[e]=i.def(o.current,".",e))}));var s=e.constants={};Object.keys(z).forEach((function(e){s[e]=i.def(JSON.stringify(z[e]))})),e.invoke=function(t,n){switch(n.type){case 0:var i=["this",o.context,o.props,e.batchId];return t.def(r(n.data),".call(",i.slice(0,Math.max(n.data.length+1,4)),")");case 1:return t.def(o.props,n.data);case 2:return t.def(o.context,n.data);case 3:return t.def("this",n.data);case 4:return n.data.append(e,t),n.data.ref}},e.attribCache={};var l={};return e.scopeAttrib=function(e){var t=n.id(e);if(t in l)return l[t];var i=c.scope[t];return i||(i=c.scope[t]=new b),l[t]=r(i)},e}function M(e,t,r,f,s){var c=e.static,d=e.dynamic;x.optional((function(){var e=[Me,Pe,Le,Re,Ie,He,We,Ue,Be].concat(k);function t(t){Object.keys(t).forEach((function(t){x.command(e.indexOf(t)>=0,'unknown parameter "'+t+'"',s.commandStr)}))}t(c),t(d)}));var p=function(e,t){var n=e.static,r=e.dynamic;if(Me in n){var i=n[Me];return i?(i=u.getFramebuffer(i),x.command(i,"invalid framebuffer object"),nt((function(e,t){var n=e.link(i),r=e.shared;t.set(r.framebuffer,".next",n);var a=r.context;return t.set(a,"."+qe,n+".width"),t.set(a,"."+Ne,n+".height"),n}))):nt((function(e,t){var n=e.shared;t.set(n.framebuffer,".next","null");var r=n.context;return t.set(r,"."+qe,r+".drawingBufferWidth"),t.set(r,"."+Ne,r+".drawingBufferHeight"),"null"}))}if(Me in r){var a=r[Me];return rt(a,(function(e,t){var n=e.invoke(t,a),r=e.shared,i=r.framebuffer,o=t.def(i,".getFramebuffer(",n,")");x.optional((function(){e.assert(t,"!"+n+"||"+o,"invalid framebuffer object")})),t.set(i,".next",o);var f=r.context;return t.set(f,"."+qe,o+"?"+o+".width:"+f+".drawingBufferWidth"),t.set(f,"."+Ne,o+"?"+o+".height:"+f+".drawingBufferHeight"),o}))}return null}(e),m=function(e,t,n){var r=e.static,i=e.dynamic;function a(e){if(e in r){var a=r[e];x.commandType(a,"object","invalid "+e,n.commandStr);var o,f,u=!0,s=0|a.x,c=0|a.y;return"width"in a?(o=0|a.width,x.command(o>=0,"invalid "+e,n.commandStr)):u=!1,"height"in a?(f=0|a.height,x.command(f>=0,"invalid "+e,n.commandStr)):u=!1,new et(!u&&t&&t.thisDep,!u&&t&&t.contextDep,!u&&t&&t.propDep,(function(e,t){var n=e.shared.context,r=o;"width"in a||(r=t.def(n,".",qe,"-",s));var i=f;return"height"in a||(i=t.def(n,".",Ne,"-",c)),[s,c,r,i]}))}if(e in i){var l=i[e],d=rt(l,(function(t,n){var r=t.invoke(n,l);x.optional((function(){t.assert(n,r+"&&typeof "+r+'==="object"',"invalid "+e)}));var i=t.shared.context,a=n.def(r,".x|0"),o=n.def(r,".y|0"),f=n.def('"width" in ',r,"?",r,".width|0:","(",i,".",qe,"-",a,")"),u=n.def('"height" in ',r,"?",r,".height|0:","(",i,".",Ne,"-",o,")");return x.optional((function(){t.assert(n,f+">=0&&"+u+">=0","invalid "+e)})),[a,o,f,u]}));return t&&(d.thisDep=d.thisDep||t.thisDep,d.contextDep=d.contextDep||t.contextDep,d.propDep=d.propDep||t.propDep),d}return t?new et(t.thisDep,t.contextDep,t.propDep,(function(e,t){var n=e.shared.context;return[0,0,t.def(n,".",qe),t.def(n,".",Ne)]})):null}var o=a("viewport");if(o){var f=o;o=new et(o.thisDep,o.contextDep,o.propDep,(function(e,t){var n=f.append(e,t),r=e.shared.context;return t.set(r,".viewportWidth",n[2]),t.set(r,".viewportHeight",n[3]),n}))}return{viewport:o,scissor_box:a("scissor.box")}}(e,p,s),h=function(e,t){var n=e.static,r=e.dynamic,i=function(){if(Re in n){var e=n[Re];Ke(e)?e=o.getElements(o.create(e,!0)):e&&(e=o.getElements(e),x.command(e,"invalid elements",t.commandStr));var i=nt((function(t,n){if(e){var r=t.link(e);return t.ELEMENTS=r,r}return t.ELEMENTS=null,null}));return i.value=e,i}if(Re in r){var a=r[Re];return rt(a,(function(e,t){var n=e.shared,r=n.isBufferArgs,i=n.elements,o=e.invoke(t,a),f=t.def("null"),u=t.def(r,"(",o,")"),s=e.cond(u).then(f,"=",i,".createStream(",o,");").else(f,"=",i,".getElements(",o,");");return x.optional((function(){e.assert(s.else,"!"+o+"||"+f,"invalid elements")})),t.entry(s),t.exit(e.cond(u).then(i,".destroyStream(",f,");")),e.ELEMENTS=f,f}))}return null}();function a(e,a){if(e in n){var o=0|n[e];return x.command(!a||o>=0,"invalid "+e,t.commandStr),nt((function(e,t){return a&&(e.OFFSET=o),o}))}if(e in r){var f=r[e];return rt(f,(function(t,n){var r=t.invoke(n,f);return a&&(t.OFFSET=r,x.optional((function(){t.assert(n,r+">=0","invalid "+e)}))),r}))}return a&&i?nt((function(e,t){return e.OFFSET="0",0})):null}var f=a(He,!0);return{elements:i,primitive:function(){if(Ie in n){var e=n[Ie];return x.commandParameter(e,Y,"invalid primitve",t.commandStr),nt((function(t,n){return Y[e]}))}if(Ie in r){var a=r[Ie];return rt(a,(function(e,t){var n=e.constants.primTypes,r=e.invoke(t,a);return x.optional((function(){e.assert(t,r+" in "+n,"invalid primitive, must be one of "+Object.keys(Y))})),t.def(n,"[",r,"]")}))}return i?tt(i)?i.value?nt((function(e,t){return t.def(e.ELEMENTS,".primType")})):nt((function(){return 4})):new et(i.thisDep,i.contextDep,i.propDep,(function(e,t){var n=e.ELEMENTS;return t.def(n,"?",n,".primType:",4)})):null}(),count:function(){if(We in n){var e=0|n[We];return x.command("number"==typeof e&&e>=0,"invalid vertex count",t.commandStr),nt((function(){return e}))}if(We in r){var a=r[We];return rt(a,(function(e,t){var n=e.invoke(t,a);return x.optional((function(){e.assert(t,"typeof "+n+'==="number"&&'+n+">=0&&"+n+"===("+n+"|0)","invalid vertex count")})),n}))}if(i){if(tt(i)){if(i)return f?new et(f.thisDep,f.contextDep,f.propDep,(function(e,t){var n=t.def(e.ELEMENTS,".vertCount-",e.OFFSET);return x.optional((function(){e.assert(t,n+">=0","invalid vertex offset/element buffer too small")})),n})):nt((function(e,t){return t.def(e.ELEMENTS,".vertCount")}));var o=nt((function(){return-1}));return x.optional((function(){o.MISSING=!0})),o}var u=new et(i.thisDep||f.thisDep,i.contextDep||f.contextDep,i.propDep||f.propDep,(function(e,t){var n=e.ELEMENTS;return e.OFFSET?t.def(n,"?",n,".vertCount-",e.OFFSET,":-1"):t.def(n,"?",n,".vertCount:-1")}));return x.optional((function(){u.DYNAMIC=!0})),u}return null}(),instances:a(Ue,!1),offset:f}}(e,s),y=function(e,t){var n=e.static,r=e.dynamic,a={};return k.forEach((function(e){var o=j(e);function f(t,i){if(e in n){var f=t(n[e]);a[o]=nt((function(){return f}))}else if(e in r){var u=r[e];a[o]=rt(u,(function(e,t){return i(e,t,e.invoke(t,u))}))}}switch(e){case"cull.enable":case"blend.enable":case"dither":case"stencil.enable":case"depth.enable":case"scissor.enable":case"polygonOffset.enable":case"sample.alpha":case"sample.enable":case"depth.mask":return f((function(n){return x.commandType(n,"boolean",e,t.commandStr),n}),(function(t,n,r){return x.optional((function(){t.assert(n,"typeof "+r+'==="boolean"',"invalid flag "+e,t.commandStr)})),r}));case"depth.func":return f((function(n){return x.commandParameter(n,Ye,"invalid "+e,t.commandStr),Ye[n]}),(function(t,n,r){var i=t.constants.compareFuncs;return x.optional((function(){t.assert(n,r+" in "+i,"invalid "+e+", must be one of "+Object.keys(Ye))})),n.def(i,"[",r,"]")}));case"depth.range":return f((function(e){return x.command(K(e)&&2===e.length&&"number"==typeof e[0]&&"number"==typeof e[1]&&e[0]<=e[1],"depth range is 2d array",t.commandStr),e}),(function(e,t,n){return x.optional((function(){e.assert(t,e.shared.isArrayLike+"("+n+")&&"+n+".length===2&&typeof "+n+'[0]==="number"&&typeof '+n+'[1]==="number"&&'+n+"[0]<="+n+"[1]","depth range must be a 2d array")})),[t.def("+",n,"[0]"),t.def("+",n,"[1]")]}));case"blend.func":return f((function(e){x.commandType(e,"object","blend.func",t.commandStr);var n="srcRGB"in e?e.srcRGB:e.src,r="srcAlpha"in e?e.srcAlpha:e.src,i="dstRGB"in e?e.dstRGB:e.dst,a="dstAlpha"in e?e.dstAlpha:e.dst;return x.commandParameter(n,Qe,o+".srcRGB",t.commandStr),x.commandParameter(r,Qe,o+".srcAlpha",t.commandStr),x.commandParameter(i,Qe,o+".dstRGB",t.commandStr),x.commandParameter(a,Qe,o+".dstAlpha",t.commandStr),x.command(-1===Ve.indexOf(n+", "+i),"unallowed blending combination (srcRGB, dstRGB) = ("+n+", "+i+")",t.commandStr),[Qe[n],Qe[i],Qe[r],Qe[a]]}),(function(t,n,r){var i=t.constants.blendFuncs;function a(a,o){var f=n.def('"',a,o,'" in ',r,"?",r,".",a,o,":",r,".",a);return x.optional((function(){t.assert(n,f+" in "+i,"invalid "+e+"."+a+o+", must be one of "+Object.keys(Qe))})),f}x.optional((function(){t.assert(n,r+"&&typeof "+r+'==="object"',"invalid blend func, must be an object")}));var o=a("src","RGB"),f=a("dst","RGB");x.optional((function(){var e=t.constants.invalidBlendCombinations;t.assert(n,e+".indexOf("+o+'+", "+'+f+") === -1 ","unallowed blending combination for (srcRGB, dstRGB)")}));var u=n.def(i,"[",o,"]"),s=n.def(i,"[",a("src","Alpha"),"]");return[u,n.def(i,"[",f,"]"),s,n.def(i,"[",a("dst","Alpha"),"]")]}));case"blend.equation":return f((function(n){return"string"==typeof n?(x.commandParameter(n,v,"invalid "+e,t.commandStr),[v[n],v[n]]):"object"==typeof n?(x.commandParameter(n.rgb,v,e+".rgb",t.commandStr),x.commandParameter(n.alpha,v,e+".alpha",t.commandStr),[v[n.rgb],v[n.alpha]]):void x.commandRaise("invalid blend.equation",t.commandStr)}),(function(t,n,r){var i=t.constants.blendEquations,a=n.def(),o=n.def(),f=t.cond("typeof ",r,'==="string"');return x.optional((function(){function n(e,n,r){t.assert(e,r+" in "+i,"invalid "+n+", must be one of "+Object.keys(v))}n(f.then,e,r),t.assert(f.else,r+"&&typeof "+r+'==="object"',"invalid "+e),n(f.else,e+".rgb",r+".rgb"),n(f.else,e+".alpha",r+".alpha")})),f.then(a,"=",o,"=",i,"[",r,"];"),f.else(a,"=",i,"[",r,".rgb];",o,"=",i,"[",r,".alpha];"),n(f),[a,o]}));case"blend.color":return f((function(e){return x.command(K(e)&&4===e.length,"blend.color must be a 4d array",t.commandStr),C(4,(function(t){return+e[t]}))}),(function(e,t,n){return x.optional((function(){e.assert(t,e.shared.isArrayLike+"("+n+")&&"+n+".length===4","blend.color must be a 4d array")})),C(4,(function(e){return t.def("+",n,"[",e,"]")}))}));case"stencil.mask":return f((function(e){return x.commandType(e,"number",o,t.commandStr),0|e}),(function(e,t,n){return x.optional((function(){e.assert(t,"typeof "+n+'==="number"',"invalid stencil.mask")})),t.def(n,"|0")}));case"stencil.func":return f((function(n){x.commandType(n,"object",o,t.commandStr);var r=n.cmp||"keep",i=n.ref||0,a="mask"in n?n.mask:-1;return x.commandParameter(r,Ye,e+".cmp",t.commandStr),x.commandType(i,"number",e+".ref",t.commandStr),x.commandType(a,"number",e+".mask",t.commandStr),[Ye[r],i,a]}),(function(e,t,n){var r=e.constants.compareFuncs;return x.optional((function(){function i(){e.assert(t,Array.prototype.join.call(arguments,""),"invalid stencil.func")}i(n+"&&typeof ",n,'==="object"'),i('!("cmp" in ',n,")||(",n,".cmp in ",r,")")})),[t.def('"cmp" in ',n,"?",r,"[",n,".cmp]",":",7680),t.def(n,".ref|0"),t.def('"mask" in ',n,"?",n,".mask|0:-1")]}));case"stencil.opFront":case"stencil.opBack":return f((function(n){x.commandType(n,"object",o,t.commandStr);var r=n.fail||"keep",i=n.zfail||"keep",a=n.zpass||"keep";return x.commandParameter(r,Xe,e+".fail",t.commandStr),x.commandParameter(i,Xe,e+".zfail",t.commandStr),x.commandParameter(a,Xe,e+".zpass",t.commandStr),["stencil.opBack"===e?1029:1028,Xe[r],Xe[i],Xe[a]]}),(function(t,n,r){var i=t.constants.stencilOps;function a(a){return x.optional((function(){t.assert(n,'!("'+a+'" in '+r+")||("+r+"."+a+" in "+i+")","invalid "+e+"."+a+", must be one of "+Object.keys(Xe))})),n.def('"',a,'" in ',r,"?",i,"[",r,".",a,"]:",7680)}return x.optional((function(){t.assert(n,r+"&&typeof "+r+'==="object"',"invalid "+e)})),["stencil.opBack"===e?1029:1028,a("fail"),a("zfail"),a("zpass")]}));case"polygonOffset.offset":return f((function(e){x.commandType(e,"object",o,t.commandStr);var n=0|e.factor,r=0|e.units;return x.commandType(n,"number",o+".factor",t.commandStr),x.commandType(r,"number",o+".units",t.commandStr),[n,r]}),(function(t,n,r){return x.optional((function(){t.assert(n,r+"&&typeof "+r+'==="object"',"invalid "+e)})),[n.def(r,".factor|0"),n.def(r,".units|0")]}));case"cull.face":return f((function(e){var n=0;return"front"===e?n=1028:"back"===e&&(n=1029),x.command(!!n,o,t.commandStr),n}),(function(e,t,n){return x.optional((function(){e.assert(t,n+'==="front"||'+n+'==="back"',"invalid cull.face")})),t.def(n,'==="front"?',1028,":",1029)}));case"lineWidth":return f((function(e){return x.command("number"==typeof e&&e>=i.lineWidthDims[0]&&e<=i.lineWidthDims[1],"invalid line width, must be a positive number between "+i.lineWidthDims[0]+" and "+i.lineWidthDims[1],t.commandStr),e}),(function(e,t,n){return x.optional((function(){e.assert(t,"typeof "+n+'==="number"&&'+n+">="+i.lineWidthDims[0]+"&&"+n+"<="+i.lineWidthDims[1],"invalid line width")})),n}));case"frontFace":return f((function(e){return x.commandParameter(e,Je,o,t.commandStr),Je[e]}),(function(e,t,n){return x.optional((function(){e.assert(t,n+'==="cw"||'+n+'==="ccw"',"invalid frontFace, must be one of cw,ccw")})),t.def(n+'==="cw"?2304:2305')}));case"colorMask":return f((function(e){return x.command(K(e)&&4===e.length,"color.mask must be length 4 array",t.commandStr),e.map((function(e){return!!e}))}),(function(e,t,n){return x.optional((function(){e.assert(t,e.shared.isArrayLike+"("+n+")&&"+n+".length===4","invalid color.mask")})),C(4,(function(e){return"!!"+n+"["+e+"]"}))}));case"sample.coverage":return f((function(e){x.command("object"==typeof e&&e,o,t.commandStr);var n="value"in e?e.value:1,r=!!e.invert;return x.command("number"==typeof n&&n>=0&&n<=1,"sample.coverage.value must be a number between 0 and 1",t.commandStr),[n,r]}),(function(e,t,n){return x.optional((function(){e.assert(t,n+"&&typeof "+n+'==="object"',"invalid sample.coverage")})),[t.def('"value" in ',n,"?+",n,".value:1"),t.def("!!",n,".invert")]}))}})),a}(e,s),w=function(e){var t=e.static,r=e.dynamic;function i(e){if(e in t){var i=n.id(t[e]);x.optional((function(){l.shader($e[e],i,x.guessCommand())}));var a=nt((function(){return i}));return a.id=i,a}if(e in r){var o=r[e];return rt(o,(function(t,n){var r=t.invoke(n,o),i=n.def(t.shared.strings,".id(",r,")");return x.optional((function(){n(t.shared.shader,".shader(",$e[e],",",i,",",t.command,");")})),i}))}return null}var a,o=i(Le),f=i(Pe),u=null;return tt(o)&&tt(f)?(u=l.program(f.id,o.id),a=nt((function(e,t){return e.link(u)}))):a=new et(o&&o.thisDep||f&&f.thisDep,o&&o.contextDep||f&&f.contextDep,o&&o.propDep||f&&f.propDep,(function(e,t){var n,r=e.shared.shader;n=o?o.append(e,t):t.def(r,".",Le);var i=r+".program("+(f?f.append(e,t):t.def(r,".",Pe))+","+n;return x.optional((function(){i+=","+e.command})),t.def(i+")")})),{frag:o,vert:f,progVar:a,program:u}}(e);function _(e){var t=m[e];t&&(y[e]=t)}_("viewport"),_(j("scissor.box"));var A=Object.keys(y).length>0,S={framebuffer:p,draw:h,shader:w,state:y,dirty:A};return S.profile=function(e){var t,n=e.static,r=e.dynamic;if(Be in n){var i=!!n[Be];(t=nt((function(e,t){return i}))).enable=i}else if(Be in r){var a=r[Be];t=rt(a,(function(e,t){return e.invoke(t,a)}))}return t}(e),S.uniforms=function(e,t){var n=e.static,r=e.dynamic,i={};return Object.keys(n).forEach((function(e){var r,a=n[e];if("number"==typeof a||"boolean"==typeof a)r=nt((function(){return a}));else if("function"==typeof a){var o=a._reglType;"texture2d"===o||"textureCube"===o?r=nt((function(e){return e.link(a)})):"framebuffer"===o||"framebufferCube"===o?(x.command(a.color.length>0,'missing color attachment for framebuffer sent to uniform "'+e+'"',t.commandStr),r=nt((function(e){return e.link(a.color[0])}))):x.commandRaise('invalid data for uniform "'+e+'"',t.commandStr)}else K(a)?r=nt((function(t){return t.global.def("[",C(a.length,(function(n){return x.command("number"==typeof a[n]||"boolean"==typeof a[n],"invalid uniform "+e,t.commandStr),a[n]})),"]")})):x.commandRaise('invalid or missing data for uniform "'+e+'"',t.commandStr);r.value=a,i[e]=r})),Object.keys(r).forEach((function(e){var t=r[e];i[e]=rt(t,(function(e,n){return e.invoke(n,t)}))})),i}(r,s),S.attributes=function(e,t){var r=e.static,i=e.dynamic,o={};return Object.keys(r).forEach((function(e){var i=r[e],f=n.id(e),u=new b;if(Ke(i))u.state=1,u.buffer=a.getBuffer(a.create(i,34962,!1,!0)),u.type=0;else{var s=a.getBuffer(i);if(s)u.state=1,u.buffer=s,u.type=0;else if(x.command("object"==typeof i&&i,"invalid data for attribute "+e,t.commandStr),"constant"in i){var c=i.constant;u.buffer="null",u.state=2,"number"==typeof c?u.x=c:(x.command(K(c)&&c.length>0&&c.length<=4,"invalid constant for attribute "+e,t.commandStr),Fe.forEach((function(e,t){t<c.length&&(u[e]=c[t])})))}else{s=Ke(i.buffer)?a.getBuffer(a.create(i.buffer,34962,!1,!0)):a.getBuffer(i.buffer),x.command(!!s,'missing buffer for attribute "'+e+'"',t.commandStr);var l=0|i.offset;x.command(l>=0,'invalid offset for attribute "'+e+'"',t.commandStr);var d=0|i.stride;x.command(d>=0&&d<256,'invalid stride for attribute "'+e+'", must be integer betweeen [0, 255]',t.commandStr);var p=0|i.size;x.command(!("size"in i)||p>0&&p<=4,'invalid size for attribute "'+e+'", must be 1,2,3,4',t.commandStr);var m=!!i.normalized,h=0;"type"in i&&(x.commandParameter(i.type,W,"invalid type for attribute "+e,t.commandStr),h=W[i.type]);var v=0|i.divisor;"divisor"in i&&(x.command(0===v||g,'cannot specify divisor for attribute "'+e+'", instancing not supported',t.commandStr),x.command(v>=0,'invalid divisor for attribute "'+e+'"',t.commandStr)),x.optional((function(){var n=t.commandStr,r=["buffer","offset","divisor","normalized","type","size","stride"];Object.keys(i).forEach((function(t){x.command(r.indexOf(t)>=0,'unknown parameter "'+t+'" for attribute pointer "'+e+'" (valid parameters are '+r+")",n)}))})),u.buffer=s,u.state=1,u.size=p,u.normalized=m,u.type=h||s.dtype,u.offset=l,u.stride=d,u.divisor=v}}o[e]=nt((function(e,t){var n=e.attribCache;if(f in n)return n[f];var r={isStream:!1};return Object.keys(u).forEach((function(e){r[e]=u[e]})),u.buffer&&(r.buffer=e.link(u.buffer),r.type=r.type||r.buffer+".dtype"),n[f]=r,r}))})),Object.keys(i).forEach((function(e){var t=i[e];o[e]=rt(t,(function(n,r){var i=n.invoke(r,t),a=n.shared,o=n.constants,f=a.isBufferArgs,u=a.buffer;x.optional((function(){n.assert(r,i+"&&(typeof "+i+'==="object"||typeof '+i+'==="function")&&('+f+"("+i+")||"+u+".getBuffer("+i+")||"+u+".getBuffer("+i+".buffer)||"+f+"("+i+'.buffer)||("constant" in '+i+"&&(typeof "+i+'.constant==="number"||'+a.isArrayLike+"("+i+".constant))))",'invalid dynamic attribute "'+e+'"')}));var s={isStream:r.def(!1)},c=new b;c.state=1,Object.keys(c).forEach((function(e){s[e]=r.def(""+c[e])}));var l=s.buffer,d=s.type;function p(e){r(s[e],"=",i,".",e,"|0;")}return r("if(",f,"(",i,")){",s.isStream,"=true;",l,"=",u,".createStream(",34962,",",i,");",d,"=",l,".dtype;","}else{",l,"=",u,".getBuffer(",i,");","if(",l,"){",d,"=",l,".dtype;",'}else if("constant" in ',i,"){",s.state,"=",2,";","if(typeof "+i+'.constant === "number"){',s[Fe[0]],"=",i,".constant;",Fe.slice(1).map((function(e){return s[e]})).join("="),"=0;","}else{",Fe.map((function(e,t){return s[e]+"="+i+".constant.length>"+t+"?"+i+".constant["+t+"]:0;"})).join(""),"}}else{","if(",f,"(",i,".buffer)){",l,"=",u,".createStream(",34962,",",i,".buffer);","}else{",l,"=",u,".getBuffer(",i,".buffer);","}",d,'="type" in ',i,"?",o.glTypes,"[",i,".type]:",l,".dtype;",s.normalized,"=!!",i,".normalized;"),p("size"),p("offset"),p("stride"),p("divisor"),r("}}"),r.exit("if(",s.isStream,"){",u,".destroyStream(",l,");","}"),s}))})),o}(t,s),S.context=function(e){var t=e.static,n=e.dynamic,r={};return Object.keys(t).forEach((function(e){var n=t[e];r[e]=nt((function(e,t){return"number"==typeof n||"boolean"==typeof n?""+n:e.link(n)}))})),Object.keys(n).forEach((function(e){var t=n[e];r[e]=rt(t,(function(e,n){return e.invoke(n,t)}))})),r}(f),S}function P(e,t,n){var r=e.shared.context,i=e.scope();Object.keys(n).forEach((function(a){t.save(r,"."+a);var o=n[a];i(r,".",a,"=",o.append(e,t),";")})),t(i)}function L(e,t,n,r){var i,a=e.shared,o=a.gl,f=a.framebuffer;y&&(i=t.def(a.extensions,".webgl_draw_buffers"));var u,s=e.constants,c=s.drawBuffer,l=s.backBuffer;u=n?n.append(e,t):t.def(f,".next"),r||t("if(",u,"!==",f,".cur){"),t("if(",u,"){",o,".bindFramebuffer(",36160,",",u,".framebuffer);"),y&&t(i,".drawBuffersWEBGL(",c,"[",u,".colorAttachments.length]);"),t("}else{",o,".bindFramebuffer(",36160,",null);"),y&&t(i,".drawBuffersWEBGL(",l,");"),t("}",f,".cur=",u,";"),r||t("}")}function R(e,t,n){var r=e.shared,i=r.gl,a=e.current,o=e.next,f=r.current,u=r.next,s=e.cond(f,".dirty");k.forEach((function(t){var r,c,l=j(t);if(!(l in n.state))if(l in o){r=o[l],c=a[l];var d=C(w[l].length,(function(e){return s.def(r,"[",e,"]")}));s(e.cond(d.map((function(e,t){return e+"!=="+c+"["+t+"]"})).join("||")).then(i,".",E[l],"(",d,");",d.map((function(e,t){return c+"["+t+"]="+e})).join(";"),";"))}else{r=s.def(u,".",l);var p=e.cond(r,"!==",f,".",l);s(p),l in A?p(e.cond(r).then(i,".enable(",A[l],");").else(i,".disable(",A[l],");"),f,".",l,"=",r,";"):p(i,".",E[l],"(",r,");",f,".",l,"=",r,";")}})),0===Object.keys(n.state).length&&s(f,".dirty=false;"),t(s)}function I(e,t,n,r){var i=e.shared,a=e.current,o=i.current,f=i.gl;Ze(Object.keys(n)).forEach((function(i){var u=n[i];if(!r||r(u)){var s=u.append(e,t);if(A[i]){var c=A[i];tt(u)?t(f,s?".enable(":".disable(",c,");"):t(e.cond(s).then(f,".enable(",c,");").else(f,".disable(",c,");")),t(o,".",i,"=",s,";")}else if(K(s)){var l=a[i];t(f,".",E[i],"(",s,");",s.map((function(e,t){return l+"["+t+"]="+e})).join(";"),";")}else t(f,".",E[i],"(",s,");",o,".",i,"=",s,";")}}))}function H(e,t){g&&(e.instancing=t.def(e.shared.extensions,".angle_instanced_arrays"))}function U(e,t,n,r,i){var a,o,f,u=e.shared,s=e.stats,c=u.current,l=u.timer,d=n.profile;function p(){return"undefined"==typeof performance?"Date.now()":"performance.now()"}function h(e){e(a=t.def(),"=",p(),";"),"string"==typeof i?e(s,".count+=",i,";"):e(s,".count++;"),m&&(r?e(o=t.def(),"=",l,".getNumPendingQueries();"):e(l,".beginQuery(",s,");"))}function b(e){e(s,".cpuTime+=",p(),"-",a,";"),m&&(r?e(l,".pushScopeStats(",o,",",l,".getNumPendingQueries(),",s,");"):e(l,".endQuery();"))}function v(e){var n=t.def(c,".profile");t(c,".profile=",e,";"),t.exit(c,".profile=",n,";")}if(d){if(tt(d))return void(d.enable?(h(t),b(t.exit),v("true")):v("false"));v(f=d.append(e,t))}else f=t.def(c,".profile");var g=e.block();h(g),t("if(",f,"){",g,"}");var y=e.block();b(y),t.exit("if(",f,"){",y,"}")}function q(e,t,n,r,i){var a=e.shared;r.forEach((function(r){var o,f=r.name,u=n.attributes[f];if(u){if(!i(u))return;o=u.append(e,t)}else{if(!i(it))return;var s=e.scopeAttrib(f);x.optional((function(){e.assert(t,s+".state","missing attribute "+f)})),o={},Object.keys(new b).forEach((function(e){o[e]=t.def(s,".",e)}))}!function(n,r,i){var o=a.gl,f=t.def(n,".location"),u=t.def(a.attributes,"[",f,"]"),s=i.state,c=i.buffer,l=[i.x,i.y,i.z,i.w],d=["buffer","normalized","offset","stride"];function p(){t("if(!",u,".buffer){",o,".enableVertexAttribArray(",f,");}");var n,a=i.type;if(n=i.size?t.def(i.size,"||",r):r,t("if(",u,".type!==",a,"||",u,".size!==",n,"||",d.map((function(e){return u+"."+e+"!=="+i[e]})).join("||"),"){",o,".bindBuffer(",34962,",",c,".buffer);",o,".vertexAttribPointer(",[f,n,a,i.normalized,i.stride,i.offset],");",u,".type=",a,";",u,".size=",n,";",d.map((function(e){return u+"."+e+"="+i[e]+";"})).join(""),"}"),g){var s=i.divisor;t("if(",u,".divisor!==",s,"){",e.instancing,".vertexAttribDivisorANGLE(",[f,s],");",u,".divisor=",s,";}")}}function m(){t("if(",u,".buffer){",o,".disableVertexAttribArray(",f,");",u,".buffer=null;","}if(",Fe.map((function(e,t){return u+"."+e+"!=="+l[t]})).join("||"),"){",o,".vertexAttrib4f(",f,",",l,");",Fe.map((function(e,t){return u+"."+e+"="+l[t]+";"})).join(""),"}")}1===s?p():2===s?m():(t("if(",s,"===",1,"){"),p(),t("}else{"),m(),t("}"))}(e.link(r),function(e){switch(e){case 35664:case 35667:case 35671:return 2;case 35665:case 35668:case 35672:return 3;case 35666:case 35669:case 35673:return 4;default:return 1}}(r.info.type),o)}))}function N(e,t,r,i,a){for(var o,f=e.shared,u=f.gl,s=0;s<i.length;++s){var c,l=i[s],d=l.name,p=l.info.type,m=r.uniforms[d],h=e.link(l)+".location";if(m){if(!a(m))continue;if(tt(m)){var b=m.value;if(x.command(null!=b,'missing uniform "'+d+'"',e.commandStr),35678===p||35680===p){x.command("function"==typeof b&&(35678===p&&("texture2d"===b._reglType||"framebuffer"===b._reglType)||35680===p&&("textureCube"===b._reglType||"framebufferCube"===b._reglType)),"invalid texture for uniform "+d,e.commandStr);var v=e.link(b._texture||b.color[0]._texture);t(u,".uniform1i(",h,",",v+".bind());"),t.exit(v,".unbind();")}else if(35674===p||35675===p||35676===p){x.optional((function(){x.command(K(b),"invalid matrix for uniform "+d,e.commandStr),x.command(35674===p&&4===b.length||35675===p&&9===b.length||35676===p&&16===b.length,"invalid length for matrix uniform "+d,e.commandStr)}));var g=e.global.def("new Float32Array(["+Array.prototype.slice.call(b)+"])"),y=2;35675===p?y=3:35676===p&&(y=4),t(u,".uniformMatrix",y,"fv(",h,",false,",g,");")}else{switch(p){case 5126:x.commandType(b,"number","uniform "+d,e.commandStr),o="1f";break;case 35664:x.command(K(b)&&2===b.length,"uniform "+d,e.commandStr),o="2f";break;case 35665:x.command(K(b)&&3===b.length,"uniform "+d,e.commandStr),o="3f";break;case 35666:x.command(K(b)&&4===b.length,"uniform "+d,e.commandStr),o="4f";break;case 35670:x.commandType(b,"boolean","uniform "+d,e.commandStr),o="1i";break;case 5124:x.commandType(b,"number","uniform "+d,e.commandStr),o="1i";break;case 35671:case 35667:x.command(K(b)&&2===b.length,"uniform "+d,e.commandStr),o="2i";break;case 35672:case 35668:x.command(K(b)&&3===b.length,"uniform "+d,e.commandStr),o="3i";break;case 35673:case 35669:x.command(K(b)&&4===b.length,"uniform "+d,e.commandStr),o="4i"}t(u,".uniform",o,"(",h,",",K(b)?Array.prototype.slice.call(b):b,");")}continue}c=m.append(e,t)}else{if(!a(it))continue;c=t.def(f.uniforms,"[",n.id(d),"]")}35678===p?t("if(",c,"&&",c,'._reglType==="framebuffer"){',c,"=",c,".color[0];","}"):35680===p&&t("if(",c,"&&",c,'._reglType==="framebufferCube"){',c,"=",c,".color[0];","}"),x.optional((function(){function n(n,r){e.assert(t,n,'bad data or missing for uniform "'+d+'".  '+r)}function r(e){n("typeof "+c+'==="'+e+'"',"invalid type, expected "+e)}function i(t,r){n(f.isArrayLike+"("+c+")&&"+c+".length==="+t,"invalid vector, should have length "+t,e.commandStr)}function a(t){n("typeof "+c+'==="function"&&'+c+'._reglType==="texture'+(3553===t?"2d":"Cube")+'"',"invalid texture type",e.commandStr)}switch(p){case 5124:r("number");break;case 35667:i(2);break;case 35668:i(3);break;case 35669:i(4);break;case 5126:r("number");break;case 35664:i(2);break;case 35665:i(3);break;case 35666:i(4);break;case 35670:r("boolean");break;case 35671:i(2);break;case 35672:i(3);break;case 35673:case 35674:i(4);break;case 35675:i(9);break;case 35676:i(16);break;case 35678:a(3553);break;case 35680:a(34067)}}));var w=1;switch(p){case 35678:case 35680:var _=t.def(c,"._texture");t(u,".uniform1i(",h,",",_,".bind());"),t.exit(_,".unbind();");continue;case 5124:case 35670:o="1i";break;case 35667:case 35671:o="2i",w=2;break;case 35668:case 35672:o="3i",w=3;break;case 35669:case 35673:o="4i",w=4;break;case 5126:o="1f";break;case 35664:o="2f",w=2;break;case 35665:o="3f",w=3;break;case 35666:o="4f",w=4;break;case 35674:o="Matrix2fv";break;case 35675:o="Matrix3fv";break;case 35676:o="Matrix4fv"}if(t(u,".uniform",o,"(",h,","),"M"===o.charAt(0)){var k=Math.pow(p-35674+2,2),A=e.global.def("new Float32Array(",k,")");t("false,(Array.isArray(",c,")||",c," instanceof Float32Array)?",c,":(",C(k,(function(e){return A+"["+e+"]="+c+"["+e+"]"})),",",A,")")}else t(w>1?C(w,(function(e){return c+"["+e+"]"})):c);t(");")}}function G(e,t,n,r){var i=e.shared,a=i.gl,o=i.draw,f=r.draw,u=function(){var i,u=f.elements,s=t;return u?((u.contextDep&&r.contextDynamic||u.propDep)&&(s=n),i=u.append(e,s)):i=s.def(o,".",Re),i&&s("if("+i+")"+a+".bindBuffer(34963,"+i+".buffer.buffer);"),i}();function s(i){var a=f[i];return a?a.contextDep&&r.contextDynamic||a.propDep?a.append(e,n):a.append(e,t):t.def(o,".",i)}var c,l,d=s(Ie),p=s(He),m=function(){var i,a=f.count,u=t;return a?((a.contextDep&&r.contextDynamic||a.propDep)&&(u=n),i=a.append(e,u),x.optional((function(){a.MISSING&&e.assert(t,"false","missing vertex count"),a.DYNAMIC&&e.assert(u,i+">=0","missing vertex count")}))):(i=u.def(o,".",We),x.optional((function(){e.assert(u,i+">=0","missing vertex count")}))),i}();if("number"==typeof m){if(0===m)return}else n("if(",m,"){"),n.exit("}");g&&(c=s(Ue),l=e.instancing);var h=u+".type",b=f.elements&&tt(f.elements);function v(){function e(){n(l,".drawElementsInstancedANGLE(",[d,m,h,p+"<<(("+h+"-5121)>>1)",c],");")}function t(){n(l,".drawArraysInstancedANGLE(",[d,p,m,c],");")}u?b?e():(n("if(",u,"){"),e(),n("}else{"),t(),n("}")):t()}function y(){function e(){n(a+".drawElements("+[d,m,h,p+"<<(("+h+"-5121)>>1)"]+");")}function t(){n(a+".drawArrays("+[d,p,m]+");")}u?b?e():(n("if(",u,"){"),e(),n("}else{"),t(),n("}")):t()}g&&("number"!=typeof c||c>=0)?"string"==typeof c?(n("if(",c,">0){"),v(),n("}else if(",c,"<0){"),y(),n("}")):v():y()}function Q(e,t,n,r,i){var a=B(),o=a.proc("body",i);return x.optional((function(){a.commandStr=t.commandStr,a.command=a.link(t.commandStr)})),g&&(a.instancing=o.def(a.shared.extensions,".angle_instanced_arrays")),e(a,o,n,r),a.compile().body}function V(e,t,n,r){H(e,t),q(e,t,n,r.attributes,(function(){return!0})),N(e,t,n,r.uniforms,(function(){return!0})),G(e,t,t,n)}function X(e,t,n,r){function i(){return!0}e.batchId="a1",H(e,t),q(e,t,n,r.attributes,i),N(e,t,n,r.uniforms,i),G(e,t,t,n)}function $(e,t,n,r){H(e,t);var i=n.contextDep,a=t.def(),o=t.def();e.shared.props=o,e.batchId=a;var f=e.scope(),u=e.scope();function s(e){return e.contextDep&&i||e.propDep}function c(e){return!s(e)}if(t(f.entry,"for(",a,"=0;",a,"<","a1",";++",a,"){",o,"=","a0","[",a,"];",u,"}",f.exit),n.needsContext&&P(e,u,n.context),n.needsFramebuffer&&L(e,u,n.framebuffer),I(e,u,n.state,s),n.profile&&s(n.profile)&&U(e,u,n,!1,!0),r)q(e,f,n,r.attributes,c),q(e,u,n,r.attributes,s),N(e,f,n,r.uniforms,c),N(e,u,n,r.uniforms,s),G(e,f,u,n);else{var l=e.global.def("{}"),d=n.shader.progVar.append(e,u),p=u.def(d,".id"),m=u.def(l,"[",p,"]");u(e.shared.gl,".useProgram(",d,".program);","if(!",m,"){",m,"=",l,"[",p,"]=",e.link((function(t){return Q(X,e,n,t,2)})),"(",d,");}",m,".call(this,a0[",a,"],",a,");")}}function J(e,t,n){var r=t.static[n];if(r&&function(e){if("object"==typeof e&&!K(e)){for(var t=Object.keys(e),n=0;n<t.length;++n)if(S.isDynamic(e[t[n]]))return!0;return!1}}(r)){var i=e.global,a=Object.keys(r),o=!1,f=!1,u=!1,s=e.global.def("{}");a.forEach((function(t){var n=r[t];if(S.isDynamic(n)){"function"==typeof n&&(n=r[t]=S.unbox(n));var a=rt(n,null);o=o||a.thisDep,u=u||a.propDep,f=f||a.contextDep}else{switch(i(s,".",t,"="),typeof n){case"number":i(n);break;case"string":i('"',n,'"');break;case"object":Array.isArray(n)&&i("[",n.join(),"]");break;default:i(e.link(n))}i(";")}})),t.dynamic[n]=new S.DynamicVariable(4,{thisDep:o,contextDep:f,propDep:u,ref:s,append:function(e,t){a.forEach((function(n){var i=r[n];if(S.isDynamic(i)){var a=e.invoke(t,i);t(s,".",n,"=",a,";")}}))}}),delete t.static[n]}}return{next:_,current:w,procs:function(){var e=B(),t=e.proc("poll"),n=e.proc("refresh"),r=e.block();t(r),n(r);var a,o=e.shared,f=o.gl,u=o.next,s=o.current;r(s,".dirty=false;"),L(e,t),L(e,n,null,!0),g&&(a=e.link(g));for(var c=0;c<i.maxAttributes;++c){var l=n.def(o.attributes,"[",c,"]"),d=e.cond(l,".buffer");d.then(f,".enableVertexAttribArray(",c,");",f,".bindBuffer(",34962,",",l,".buffer.buffer);",f,".vertexAttribPointer(",c,",",l,".size,",l,".type,",l,".normalized,",l,".stride,",l,".offset);").else(f,".disableVertexAttribArray(",c,");",f,".vertexAttrib4f(",c,",",l,".x,",l,".y,",l,".z,",l,".w);",l,".buffer=null;"),n(d),g&&n(a,".vertexAttribDivisorANGLE(",c,",",l,".divisor);")}return Object.keys(A).forEach((function(i){var a=A[i],o=r.def(u,".",i),c=e.block();c("if(",o,"){",f,".enable(",a,")}else{",f,".disable(",a,")}",s,".",i,"=",o,";"),n(c),t("if(",o,"!==",s,".",i,"){",c,"}")})),Object.keys(E).forEach((function(i){var a,o,c=E[i],l=w[i],d=e.block();if(d(f,".",c,"("),K(l)){var p=l.length;a=e.global.def(u,".",i),o=e.global.def(s,".",i),d(C(p,(function(e){return a+"["+e+"]"})),");",C(p,(function(e){return o+"["+e+"]="+a+"["+e+"];"})).join("")),t("if(",C(p,(function(e){return a+"["+e+"]!=="+o+"["+e+"]"})).join("||"),"){",d,"}")}else a=r.def(u,".",i),o=r.def(s,".",i),d(a,");",s,".",i,"=",a,";"),t("if(",a,"!==",o,"){",d,"}");n(d)})),e.compile()}(),compile:function(e,t,r,i,a){var o=B();o.stats=o.link(a),Object.keys(t.static).forEach((function(e){J(o,t,e)})),Ge.forEach((function(t){J(o,e,t)}));var f=M(e,t,r,i,o);return function(e,t){var n=e.proc("draw",1);H(e,n),P(e,n,t.context),L(e,n,t.framebuffer),R(e,n,t),I(e,n,t.state),U(e,n,t,!1,!0);var r=t.shader.progVar.append(e,n);if(n(e.shared.gl,".useProgram(",r,".program);"),t.shader.program)V(e,n,t,t.shader.program);else{var i=e.global.def("{}"),a=n.def(r,".id"),o=n.def(i,"[",a,"]");n(e.cond(o).then(o,".call(this,a0);").else(o,"=",i,"[",a,"]=",e.link((function(n){return Q(V,e,t,n,1)})),"(",r,");",o,".call(this,a0);"))}Object.keys(t.state).length>0&&n(e.shared.current,".dirty=true;")}(o,f),function(e,t){var r=e.proc("scope",3);e.batchId="a2";var i=e.shared,a=i.current;function o(n){var a=t.shader[n];a&&r.set(i.shader,"."+n,a.append(e,r))}P(e,r,t.context),t.framebuffer&&t.framebuffer.append(e,r),Ze(Object.keys(t.state)).forEach((function(n){var a=t.state[n].append(e,r);K(a)?a.forEach((function(t,i){r.set(e.next[n],"["+i+"]",t)})):r.set(i.next,"."+n,a)})),U(e,r,t,!0,!0),[Re,He,We,Ue,Ie].forEach((function(n){var a=t.draw[n];a&&r.set(i.draw,"."+n,""+a.append(e,r))})),Object.keys(t.uniforms).forEach((function(a){r.set(i.uniforms,"["+n.id(a)+"]",t.uniforms[a].append(e,r))})),Object.keys(t.attributes).forEach((function(n){var i=t.attributes[n].append(e,r),a=e.scopeAttrib(n);Object.keys(new b).forEach((function(e){r.set(a,"."+e,i[e])}))})),o(Pe),o(Le),Object.keys(t.state).length>0&&(r(a,".dirty=true;"),r.exit(a,".dirty=true;")),r("a1(",e.shared.context,",a0,",e.batchId,");")}(o,f),function(e,t){var n=e.proc("batch",2);e.batchId="0",H(e,n);var r=!1,i=!0;Object.keys(t.context).forEach((function(e){r=r||t.context[e].propDep})),r||(P(e,n,t.context),i=!1);var a=t.framebuffer,o=!1;function f(e){return e.contextDep&&r||e.propDep}a?(a.propDep?r=o=!0:a.contextDep&&r&&(o=!0),o||L(e,n,a)):L(e,n,null),t.state.viewport&&t.state.viewport.propDep&&(r=!0),R(e,n,t),I(e,n,t.state,(function(e){return!f(e)})),t.profile&&f(t.profile)||U(e,n,t,!1,"a1"),t.contextDep=r,t.needsContext=i,t.needsFramebuffer=o;var u=t.shader.progVar;if(u.contextDep&&r||u.propDep)$(e,n,t,null);else{var s=u.append(e,n);if(n(e.shared.gl,".useProgram(",s,".program);"),t.shader.program)$(e,n,t,t.shader.program);else{var c=e.global.def("{}"),l=n.def(s,".id"),d=n.def(c,"[",l,"]");n(e.cond(d).then(d,".call(this,a0,a1);").else(d,"=",c,"[",l,"]=",e.link((function(n){return Q($,e,t,n,2)})),"(",s,");",d,".call(this,a0,a1);"))}}Object.keys(t.state).length>0&&n(e.shared.current,".dirty=true;")}(o,f),o.compile()}}}var ot=function(e,t){if(!t.ext_disjoint_timer_query)return null;var n=[];function r(e){n.push(e)}var i=[];function a(){this.startQueryIndex=-1,this.endQueryIndex=-1,this.sum=0,this.stats=null}var o=[];function f(e){o.push(e)}var u=[];function s(e,t,n){var r=o.pop()||new a;r.startQueryIndex=e,r.endQueryIndex=t,r.sum=0,r.stats=n,u.push(r)}var c=[],l=[];return{beginQuery:function(e){var r=n.pop()||t.ext_disjoint_timer_query.createQueryEXT();t.ext_disjoint_timer_query.beginQueryEXT(35007,r),i.push(r),s(i.length-1,i.length,e)},endQuery:function(){t.ext_disjoint_timer_query.endQueryEXT(35007)},pushScopeStats:s,update:function(){var e,n,a=i.length;if(0!==a){l.length=Math.max(l.length,a+1),c.length=Math.max(c.length,a+1),c[0]=0,l[0]=0;var o=0;for(e=0,n=0;n<i.length;++n){var s=i[n];t.ext_disjoint_timer_query.getQueryObjectEXT(s,34919)?(o+=t.ext_disjoint_timer_query.getQueryObjectEXT(s,34918),r(s)):i[e++]=s,c[n+1]=o,l[n+1]=e}for(i.length=e,e=0,n=0;n<u.length;++n){var d=u[n],p=d.startQueryIndex,m=d.endQueryIndex;d.sum+=c[m]-c[p];var h=l[p],b=l[m];b===h?(d.stats.gpuTime+=d.sum/1e6,f(d)):(d.startQueryIndex=h,d.endQueryIndex=b,u[e++]=d)}u.length=e}},getNumPendingQueries:function(){return i.length},clear:function(){n.push.apply(n,i);for(var e=0;e<n.length;e++)t.ext_disjoint_timer_query.deleteQueryEXT(n[e]);i.length=0,n.length=0},restore:function(){i.length=0,n.length=0}}};function ft(e,t){for(var n=0;n<e.length;++n)if(e[n]===t)return n;return-1}return function(n){var r=O(n);if(!r)return null;var i=r.gl,a=i.getContextAttributes(),o=i.isContextLost(),f=function(e,t){var n={};function r(t){x.type(t,"string","extension name must be string");var r,i=t.toLowerCase();try{r=n[i]=e.getExtension(i)}catch(e){}return!!r}for(var i=0;i<t.extensions.length;++i){var a=t.extensions[i];if(!r(a))return t.onDestroy(),t.onDone('"'+a+'" extension is not supported by the current WebGL context, try upgrading your system or a different browser'),null}return t.optionalExtensions.forEach(r),{extensions:n,restore:function(){Object.keys(n).forEach((function(e){if(n[e]&&!r(e))throw new Error("(regl): error restoring extension "+e)}))}}}(i,r);if(!f)return null;var u,s,c=(u={"":0},s=[""],{id:function(e){var t=u[e];return t||(t=u[e]=s.length,s.push(e),t)},str:function(e){return s[e]}}),l={bufferCount:0,elementsCount:0,framebufferCount:0,shaderCount:0,textureCount:0,cubeCount:0,renderbufferCount:0,maxTextureUnits:0},d=f.extensions,p=ot(0,d),m=j(),h=i.drawingBufferWidth,b=i.drawingBufferHeight,v={tick:0,time:0,viewportWidth:h,viewportHeight:b,framebufferWidth:h,framebufferHeight:b,drawingBufferWidth:h,drawingBufferHeight:b,pixelRatio:r.pixelRatio},g=function(e,t){var n=1;t.ext_texture_filter_anisotropic&&(n=e.getParameter(34047));var r=1,i=1;t.webgl_draw_buffers&&(r=e.getParameter(34852),i=e.getParameter(36063));var a=!!t.oes_texture_float;if(a){var o=e.createTexture();e.bindTexture(3553,o),e.texImage2D(3553,0,6408,1,1,0,6408,5126,null);var f=e.createFramebuffer();if(e.bindFramebuffer(36160,f),e.framebufferTexture2D(36160,36064,3553,o,0),e.bindTexture(3553,null),36053!==e.checkFramebufferStatus(36160))a=!1;else{e.viewport(0,0,1,1),e.clearColor(1,0,0,1),e.clear(16384);var u=B.allocType(5126,4);e.readPixels(0,0,1,1,6408,5126,u),e.getError()?a=!1:(e.deleteFramebuffer(f),e.deleteTexture(o),a=1===u[0]),B.freeType(u)}}var s=!0;if("undefined"==typeof navigator||!(/MSIE/.test(navigator.userAgent)||/Trident\//.test(navigator.appVersion)||/Edge/.test(navigator.userAgent))){var c=e.createTexture(),l=B.allocType(5121,36);e.activeTexture(33984),e.bindTexture(34067,c),e.texImage2D(34069,0,6408,3,3,0,6408,5121,l),B.freeType(l),e.bindTexture(34067,null),e.deleteTexture(c),s=!e.getError()}return{colorBits:[e.getParameter(3410),e.getParameter(3411),e.getParameter(3412),e.getParameter(3413)],depthBits:e.getParameter(3414),stencilBits:e.getParameter(3415),subpixelBits:e.getParameter(3408),extensions:Object.keys(t).filter((function(e){return!!t[e]})),maxAnisotropic:n,maxDrawbuffers:r,maxColorAttachments:i,pointSizeDims:e.getParameter(33901),lineWidthDims:e.getParameter(33902),maxViewportDims:e.getParameter(3386),maxCombinedTextureUnits:e.getParameter(35661),maxCubeMapSize:e.getParameter(34076),maxRenderbufferSize:e.getParameter(34024),maxTextureUnits:e.getParameter(34930),maxTextureSize:e.getParameter(3379),maxAttributes:e.getParameter(34921),maxVertexUniforms:e.getParameter(36347),maxVertexTextureUnits:e.getParameter(35660),maxVaryingVectors:e.getParameter(36348),maxFragmentUniforms:e.getParameter(36349),glsl:e.getParameter(35724),renderer:e.getParameter(7937),vendor:e.getParameter(7936),version:e.getParameter(7938),readFloat:a,npotTextureCube:s}}(i,d),y=function(e,t,n,r){for(var i=n.maxAttributes,a=new Array(i),o=0;o<i;++o)a[o]=new De;return{Record:De,scope:{},state:a}}(0,0,g),w=function(t,n,r,i){var a=0,o={};function f(e){this.id=a++,this.buffer=t.createBuffer(),this.type=e,this.usage=35044,this.byteLength=0,this.dimension=1,this.dtype=5121,this.persistentData=null,r.profile&&(this.stats={size:0})}f.prototype.bind=function(){t.bindBuffer(this.type,this.buffer)},f.prototype.destroy=function(){l(this)};var u=[];function s(e,n,r){e.byteLength=n.byteLength,t.bufferData(e.type,n,r)}function c(t,n,r,i,a,o){var f,u;if(t.usage=r,Array.isArray(n)){if(t.dtype=i||5126,n.length>0)if(Array.isArray(n[0])){f=q(n);for(var c=1,l=1;l<f.length;++l)c*=f[l];t.dimension=c,s(t,u=U(n,f,t.dtype),r),o?t.persistentData=u:B.freeType(u)}else if("number"==typeof n[0]){t.dimension=a;var d=B.allocType(t.dtype,n.length);Q(d,n),s(t,d,r),o?t.persistentData=d:B.freeType(d)}else e(n[0])?(t.dimension=n[0].length,t.dtype=i||G(n[0])||5126,s(t,u=U(n,[n.length,n[0].length],t.dtype),r),o?t.persistentData=u:B.freeType(u)):x.raise("invalid buffer data")}else if(e(n))t.dtype=i||G(n),t.dimension=a,s(t,n,r),o&&(t.persistentData=new Uint8Array(new Uint8Array(n.buffer)));else if(M(n)){f=n.shape;var p=n.stride,m=n.offset,h=0,b=0,v=0,g=0;1===f.length?(h=f[0],b=1,v=p[0],g=0):2===f.length?(h=f[0],b=f[1],v=p[0],g=p[1]):x.raise("invalid shape"),t.dtype=i||G(n.data)||5126,t.dimension=b;var y=B.allocType(t.dtype,h*b);V(y,n.data,h,b,v,g,m),s(t,y,r),o?t.persistentData=y:B.freeType(y)}else n instanceof ArrayBuffer?(t.dtype=5121,t.dimension=a,s(t,n,r),o&&(t.persistentData=new Uint8Array(new Uint8Array(n)))):x.raise("invalid buffer data")}function l(e){n.bufferCount--;for(var r=0;r<i.state.length;++r){var a=i.state[r];a.buffer===e&&(t.disableVertexAttribArray(r),a.buffer=null)}var f=e.buffer;x(f,"buffer must not be deleted already"),t.deleteBuffer(f),e.buffer=null,delete o[e.id]}return r.profile&&(n.getTotalBufferSize=function(){var e=0;return Object.keys(o).forEach((function(t){e+=o[t].stats.size})),e}),{create:function(i,a,u,s){n.bufferCount++;var d=new f(a);function p(n){var i=35044,a=null,o=0,f=0,u=1;return Array.isArray(n)||e(n)||M(n)||n instanceof ArrayBuffer?a=n:"number"==typeof n?o=0|n:n&&(x.type(n,"object","buffer arguments must be an object, a number or an array"),"data"in n&&(x(null===a||Array.isArray(a)||e(a)||M(a),"invalid data for buffer"),a=n.data),"usage"in n&&(x.parameter(n.usage,H,"invalid buffer usage"),i=H[n.usage]),"type"in n&&(x.parameter(n.type,W,"invalid buffer type"),f=W[n.type]),"dimension"in n&&(x.type(n.dimension,"number","invalid dimension"),u=0|n.dimension),"length"in n&&(x.nni(o,"buffer length must be a nonnegative integer"),o=0|n.length)),d.bind(),a?c(d,a,i,f,u,s):(o&&t.bufferData(d.type,o,i),d.dtype=f||5121,d.usage=i,d.dimension=u,d.byteLength=o),r.profile&&(d.stats.size=d.byteLength*N[d.dtype]),p}function m(e,n){x(n+e.byteLength<=d.byteLength,"invalid buffer subdata call, buffer is too small.  Can't write data of size "+e.byteLength+" starting from offset "+n+" to a buffer of size "+d.byteLength),t.bufferSubData(d.type,n,e)}return o[d.id]=d,u||p(i),p._reglType="buffer",p._buffer=d,p.subdata=function(t,n){var r,i=0|(n||0);if(d.bind(),e(t)||t instanceof ArrayBuffer)m(t,i);else if(Array.isArray(t)){if(t.length>0)if("number"==typeof t[0]){var a=B.allocType(d.dtype,t.length);Q(a,t),m(a,i),B.freeType(a)}else if(Array.isArray(t[0])||e(t[0])){r=q(t);var o=U(t,r,d.dtype);m(o,i),B.freeType(o)}else x.raise("invalid buffer data")}else if(M(t)){r=t.shape;var f=t.stride,u=0,s=0,c=0,l=0;1===r.length?(u=r[0],s=1,c=f[0],l=0):2===r.length?(u=r[0],s=r[1],c=f[0],l=f[1]):x.raise("invalid shape");var h=Array.isArray(t.data)?d.dtype:G(t.data),b=B.allocType(h,u*s);V(b,t.data,u,s,c,l,t.offset),m(b,i),B.freeType(b)}else x.raise("invalid data for buffer subdata");return p},r.profile&&(p.stats=d.stats),p.destroy=function(){l(d)},p},createStream:function(e,t){var n=u.pop();return n||(n=new f(e)),n.bind(),c(n,t,35040,0,1,!1),n},destroyStream:function(e){u.push(e)},clear:function(){P(o).forEach(l),u.forEach(l)},getBuffer:function(e){return e&&e._buffer instanceof f?e._buffer:null},restore:function(){P(o).forEach((function(e){e.buffer=t.createBuffer(),t.bindBuffer(e.type,e.buffer),t.bufferData(e.type,e.persistentData||e.byteLength,e.usage)}))},_initBuffer:c}}(i,l,r,y),_=function(t,n,r,i){var a={},o=0,f={uint8:5121,uint16:5123};function u(e){this.id=o++,a[this.id]=this,this.buffer=e,this.primType=4,this.vertCount=0,this.type=0}n.oes_element_index_uint&&(f.uint32=5125),u.prototype.bind=function(){this.buffer.bind()};var s=[];function c(i,a,o,f,u,s,c){if(i.buffer.bind(),a){var l=c;c||e(a)&&(!M(a)||e(a.data))||(l=n.oes_element_index_uint?5125:5123),r._initBuffer(i.buffer,a,o,l,3)}else t.bufferData(34963,s,o),i.buffer.dtype=d||5121,i.buffer.usage=o,i.buffer.dimension=3,i.buffer.byteLength=s;var d=c;if(!c){switch(i.buffer.dtype){case 5121:case 5120:d=5121;break;case 5123:case 5122:d=5123;break;case 5125:case 5124:d=5125;break;default:x.raise("unsupported type for element array")}i.buffer.dtype=d}i.type=d,x(5125!==d||!!n.oes_element_index_uint,"32 bit element buffers not supported, enable oes_element_index_uint first");var p=u;p<0&&(p=i.buffer.byteLength,5123===d?p>>=1:5125===d&&(p>>=2)),i.vertCount=p;var m=f;if(f<0){m=4;var h=i.buffer.dimension;1===h&&(m=0),2===h&&(m=1),3===h&&(m=4)}i.primType=m}function l(e){i.elementsCount--,x(null!==e.buffer,"must not double destroy elements"),delete a[e.id],e.buffer.destroy(),e.buffer=null}return{create:function(t,n){var a=r.create(null,34963,!0),o=new u(a._buffer);function s(t){if(t)if("number"==typeof t)a(t),o.primType=4,o.vertCount=0|t,o.type=5121;else{var n=null,r=35044,i=-1,u=-1,l=0,d=0;Array.isArray(t)||e(t)||M(t)?n=t:(x.type(t,"object","invalid arguments for elements"),"data"in t&&(n=t.data,x(Array.isArray(n)||e(n)||M(n),"invalid data for element buffer")),"usage"in t&&(x.parameter(t.usage,H,"invalid element buffer usage"),r=H[t.usage]),"primitive"in t&&(x.parameter(t.primitive,Y,"invalid element buffer primitive"),i=Y[t.primitive]),"count"in t&&(x("number"==typeof t.count&&t.count>=0,"invalid vertex count for elements"),u=0|t.count),"type"in t&&(x.parameter(t.type,f,"invalid buffer type"),d=f[t.type]),"length"in t?l=0|t.length:(l=u,5123===d||5122===d?l*=2:5125!==d&&5124!==d||(l*=4))),c(o,n,r,i,u,l,d)}else a(),o.primType=4,o.vertCount=0,o.type=5121;return s}return i.elementsCount++,s(t),s._reglType="elements",s._elements=o,s.subdata=function(e,t){return a.subdata(e,t),s},s.destroy=function(){l(o)},s},createStream:function(e){var t=s.pop();return t||(t=new u(r.create(null,34963,!0,!1)._buffer)),c(t,e,35040,-1,-1,0,0),t},destroyStream:function(e){s.push(e)},getElements:function(e){return"function"==typeof e&&e._elements instanceof u?e._elements:null},clear:function(){P(a).forEach(l)}}}(i,d,w,l),k=function(e,t,n,r){var i={},a={};function o(e,t,n,r){this.name=e,this.id=t,this.location=n,this.info=r}function f(e,t){for(var n=0;n<e.length;++n)if(e[n].id===t.id)return void(e[n].location=t.location);e.push(t)}function u(n,r,o){var f=35632===n?i:a,u=f[r];if(!u){var s=t.str(r);u=e.createShader(n),e.shaderSource(u,s),e.compileShader(u),x.shaderError(e,u,s,n,o),f[r]=u}return u}var s={},c=[],l=0;function d(e,t){this.id=l++,this.fragId=e,this.vertId=t,this.program=null,this.uniforms=[],this.attributes=[],r.profile&&(this.stats={uniformsCount:0,attributesCount:0})}function p(n,i){var a,s,c=u(35632,n.fragId),l=u(35633,n.vertId),d=n.program=e.createProgram();e.attachShader(d,c),e.attachShader(d,l),e.linkProgram(d),x.linkError(e,d,t.str(n.fragId),t.str(n.vertId),i);var p=e.getProgramParameter(d,35718);r.profile&&(n.stats.uniformsCount=p);var m=n.uniforms;for(a=0;a<p;++a)if(s=e.getActiveUniform(d,a))if(s.size>1)for(var h=0;h<s.size;++h){var b=s.name.replace("[0]","["+h+"]");f(m,new o(b,t.id(b),e.getUniformLocation(d,b),s))}else f(m,new o(s.name,t.id(s.name),e.getUniformLocation(d,s.name),s));var v=e.getProgramParameter(d,35721);r.profile&&(n.stats.attributesCount=v);var g=n.attributes;for(a=0;a<v;++a)(s=e.getActiveAttrib(d,a))&&f(g,new o(s.name,t.id(s.name),e.getAttribLocation(d,s.name),s))}return r.profile&&(n.getMaxUniformsCount=function(){var e=0;return c.forEach((function(t){t.stats.uniformsCount>e&&(e=t.stats.uniformsCount)})),e},n.getMaxAttributesCount=function(){var e=0;return c.forEach((function(t){t.stats.attributesCount>e&&(e=t.stats.attributesCount)})),e}),{clear:function(){var t=e.deleteShader.bind(e);P(i).forEach(t),i={},P(a).forEach(t),a={},c.forEach((function(t){e.deleteProgram(t.program)})),c.length=0,s={},n.shaderCount=0},program:function(e,t,r){x.command(e>=0,"missing vertex shader",r),x.command(t>=0,"missing fragment shader",r);var i=s[t];i||(i=s[t]={});var a=i[e];return a||(a=new d(t,e),n.shaderCount++,p(a,r),i[e]=a,c.push(a)),a},restore:function(){i={},a={};for(var e=0;e<c.length;++e)p(c[e])},shader:u,frag:-1,vert:-1}}(i,c,l,r),A=we(i,d,g,(function(){C.procs.poll()}),v,l,r),T=function(e,t,n,r,i){var a={rgba4:32854,rgb565:36194,"rgb5 a1":32855,depth:33189,stencil:36168,"depth stencil":34041};t.ext_srgb&&(a.srgba=35907),t.ext_color_buffer_half_float&&(a.rgba16f=34842,a.rgb16f=34843),t.webgl_color_buffer_float&&(a.rgba32f=34836);var o=[];Object.keys(a).forEach((function(e){var t=a[e];o[t]=e}));var f=0,u={};function s(e){this.id=f++,this.refCount=1,this.renderbuffer=e,this.format=32854,this.width=0,this.height=0,i.profile&&(this.stats={size:0})}function c(t){var n=t.renderbuffer;x(n,"must not double destroy renderbuffer"),e.bindRenderbuffer(36161,null),e.deleteRenderbuffer(n),t.renderbuffer=null,t.refCount=0,delete u[t.id],r.renderbufferCount--}return s.prototype.decRef=function(){--this.refCount<=0&&c(this)},i.profile&&(r.getTotalRenderbufferSize=function(){var e=0;return Object.keys(u).forEach((function(t){e+=u[t].stats.size})),e}),{create:function(t,f){var c=new s(e.createRenderbuffer());function l(t,r){var f=0,u=0,s=32854;if("object"==typeof t&&t){var d=t;if("shape"in d){var p=d.shape;x(Array.isArray(p)&&p.length>=2,"invalid renderbuffer shape"),f=0|p[0],u=0|p[1]}else"radius"in d&&(f=u=0|d.radius),"width"in d&&(f=0|d.width),"height"in d&&(u=0|d.height);"format"in d&&(x.parameter(d.format,a,"invalid renderbuffer format"),s=a[d.format])}else"number"==typeof t?(f=0|t,u="number"==typeof r?0|r:f):t?x.raise("invalid arguments to renderbuffer constructor"):f=u=1;if(x(f>0&&u>0&&f<=n.maxRenderbufferSize&&u<=n.maxRenderbufferSize,"invalid renderbuffer size"),f!==c.width||u!==c.height||s!==c.format)return l.width=c.width=f,l.height=c.height=u,c.format=s,e.bindRenderbuffer(36161,c.renderbuffer),e.renderbufferStorage(36161,s,f,u),x(0===e.getError(),"invalid render buffer format"),i.profile&&(c.stats.size=ke(c.format,c.width,c.height)),l.format=o[c.format],l}return u[c.id]=c,r.renderbufferCount++,l(t,f),l.resize=function(t,r){var a=0|t,o=0|r||a;return a===c.width&&o===c.height||(x(a>0&&o>0&&a<=n.maxRenderbufferSize&&o<=n.maxRenderbufferSize,"invalid renderbuffer size"),l.width=c.width=a,l.height=c.height=o,e.bindRenderbuffer(36161,c.renderbuffer),e.renderbufferStorage(36161,c.format,a,o),x(0===e.getError(),"invalid render buffer format"),i.profile&&(c.stats.size=ke(c.format,c.width,c.height))),l},l._reglType="renderbuffer",l._renderbuffer=c,i.profile&&(l.stats=c.stats),l.destroy=function(){c.decRef()},l},clear:function(){P(u).forEach(c)},restore:function(){P(u).forEach((function(t){t.renderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(36161,t.renderbuffer),e.renderbufferStorage(36161,t.format,t.width,t.height)})),e.bindRenderbuffer(36161,null)}}}(i,d,g,l,r),D=function(e,n,r,i,a,o){var f={cur:null,next:null,dirty:!1,setFBO:null},u=["rgba"],s=["rgba4","rgb565","rgb5 a1"];n.ext_srgb&&s.push("srgba"),n.ext_color_buffer_half_float&&s.push("rgba16f","rgb16f"),n.webgl_color_buffer_float&&s.push("rgba32f");var c=["uint8"];function l(e,t,n){this.target=e,this.texture=t,this.renderbuffer=n;var r=0,i=0;t?(r=t.width,i=t.height):n&&(r=n.width,i=n.height),this.width=r,this.height=i}function d(e){e&&(e.texture&&e.texture._texture.decRef(),e.renderbuffer&&e.renderbuffer._renderbuffer.decRef())}function p(e,t,n){if(e)if(e.texture){var r=e.texture._texture,i=Math.max(1,r.width),a=Math.max(1,r.height);x(i===t&&a===n,"inconsistent width/height for supplied texture"),r.refCount+=1}else{var o=e.renderbuffer._renderbuffer;x(o.width===t&&o.height===n,"inconsistent width/height for renderbuffer"),o.refCount+=1}}function m(t,n){n&&(n.texture?e.framebufferTexture2D(36160,t,n.target,n.texture._texture.texture,0):e.framebufferRenderbuffer(36160,t,36161,n.renderbuffer._renderbuffer.renderbuffer))}function h(e){var t=3553,n=null,r=null,i=e;"object"==typeof e&&(i=e.data,"target"in e&&(t=0|e.target)),x.type(i,"function","invalid attachment data");var a=i._reglType;return"texture2d"===a?(n=i,x(3553===t)):"textureCube"===a?(n=i,x(t>=34069&&t<34075,"invalid cube map target")):"renderbuffer"===a?(r=i,t=36161):x.raise("invalid regl object for attachment"),new l(t,n,r)}function b(e,t,n,r,o){if(n){var f=i.create2D({width:e,height:t,format:r,type:o});return f._texture.refCount=0,new l(3553,f,null)}var u=a.create({width:e,height:t,format:r});return u._renderbuffer.refCount=0,new l(36161,null,u)}function v(e){return e&&(e.texture||e.renderbuffer)}function g(e,t,n){e&&(e.texture?e.texture.resize(t,n):e.renderbuffer&&e.renderbuffer.resize(t,n),e.width=t,e.height=n)}n.oes_texture_half_float&&c.push("half float","float16"),n.oes_texture_float&&c.push("float","float32");var y=0,w={};function _(){this.id=y++,w[this.id]=this,this.framebuffer=e.createFramebuffer(),this.width=0,this.height=0,this.colorAttachments=[],this.depthAttachment=null,this.stencilAttachment=null,this.depthStencilAttachment=null}function k(e){e.colorAttachments.forEach(d),d(e.depthAttachment),d(e.stencilAttachment),d(e.depthStencilAttachment)}function A(t){var n=t.framebuffer;x(n,"must not double destroy framebuffer"),e.deleteFramebuffer(n),t.framebuffer=null,o.framebufferCount--,delete w[t.id]}function S(t){var n;e.bindFramebuffer(36160,t.framebuffer);var i=t.colorAttachments;for(n=0;n<i.length;++n)m(36064+n,i[n]);for(n=i.length;n<r.maxColorAttachments;++n)e.framebufferTexture2D(36160,36064+n,3553,null,0);e.framebufferTexture2D(36160,33306,3553,null,0),e.framebufferTexture2D(36160,36096,3553,null,0),e.framebufferTexture2D(36160,36128,3553,null,0),m(36096,t.depthAttachment),m(36128,t.stencilAttachment),m(33306,t.depthStencilAttachment);var a=e.checkFramebufferStatus(36160);e.isContextLost()||36053===a||x.raise("framebuffer configuration not supported, status = "+Te[a]),e.bindFramebuffer(36160,f.next?f.next.framebuffer:null),f.cur=f.next,e.getError()}function E(e,i){var a=new _;function l(e,t){var i;x(f.next!==a,"can not update framebuffer which is currently in use");var o=0,d=0,m=!0,g=!0,y=null,w=!0,_="rgba",A="uint8",E=1,j=null,T=null,D=null,O=!1;if("number"==typeof e)o=0|e,d=0|t||o;else if(e){x.type(e,"object","invalid arguments for framebuffer");var C=e;if("shape"in C){var z=C.shape;x(Array.isArray(z)&&z.length>=2,"invalid shape for framebuffer"),o=z[0],d=z[1]}else"radius"in C&&(o=d=C.radius),"width"in C&&(o=C.width),"height"in C&&(d=C.height);("color"in C||"colors"in C)&&(y=C.color||C.colors,Array.isArray(y)&&x(1===y.length||n.webgl_draw_buffers,"multiple render targets not supported")),y||("colorCount"in C&&(E=0|C.colorCount,x(E>0,"invalid color buffer count")),"colorTexture"in C&&(w=!!C.colorTexture,_="rgba4"),"colorType"in C&&(A=C.colorType,w?(x(n.oes_texture_float||!("float"===A||"float32"===A),"you must enable OES_texture_float in order to use floating point framebuffer objects"),x(n.oes_texture_half_float||!("half float"===A||"float16"===A),"you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects")):"half float"===A||"float16"===A?(x(n.ext_color_buffer_half_float,"you must enable EXT_color_buffer_half_float to use 16-bit render buffers"),_="rgba16f"):"float"!==A&&"float32"!==A||(x(n.webgl_color_buffer_float,"you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers"),_="rgba32f"),x.oneOf(A,c,"invalid color type")),"colorFormat"in C&&(_=C.colorFormat,u.indexOf(_)>=0?w=!0:s.indexOf(_)>=0?w=!1:w?x.oneOf(C.colorFormat,u,"invalid color format for texture"):x.oneOf(C.colorFormat,s,"invalid color format for renderbuffer"))),("depthTexture"in C||"depthStencilTexture"in C)&&(O=!(!C.depthTexture&&!C.depthStencilTexture),x(!O||n.webgl_depth_texture,"webgl_depth_texture extension not supported")),"depth"in C&&("boolean"==typeof C.depth?m=C.depth:(j=C.depth,g=!1)),"stencil"in C&&("boolean"==typeof C.stencil?g=C.stencil:(T=C.stencil,m=!1)),"depthStencil"in C&&("boolean"==typeof C.depthStencil?m=g=C.depthStencil:(D=C.depthStencil,m=!1,g=!1))}else o=d=1;var F=null,B=null,M=null,P=null;if(Array.isArray(y))F=y.map(h);else if(y)F=[h(y)];else for(F=new Array(E),i=0;i<E;++i)F[i]=b(o,d,w,_,A);x(n.webgl_draw_buffers||F.length<=1,"you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers."),x(F.length<=r.maxColorAttachments,"too many color attachments, not supported"),o=o||F[0].width,d=d||F[0].height,j?B=h(j):m&&!g&&(B=b(o,d,O,"depth","uint32")),T?M=h(T):g&&!m&&(M=b(o,d,!1,"stencil","uint8")),D?P=h(D):!j&&!T&&g&&m&&(P=b(o,d,O,"depth stencil","depth stencil")),x(!!j+!!T+!!D<=1,"invalid framebuffer configuration, can specify exactly one depth/stencil attachment");var L=null;for(i=0;i<F.length;++i)if(p(F[i],o,d),x(!F[i]||F[i].texture&&Ae.indexOf(F[i].texture._texture.format)>=0||F[i].renderbuffer&&je.indexOf(F[i].renderbuffer._renderbuffer.format)>=0,"framebuffer color attachment "+i+" is invalid"),F[i]&&F[i].texture){var R=Se[F[i].texture._texture.format]*Ee[F[i].texture._texture.type];null===L?L=R:x(L===R,"all color attachments much have the same number of bits per pixel.")}return p(B,o,d),x(!B||B.texture&&6402===B.texture._texture.format||B.renderbuffer&&33189===B.renderbuffer._renderbuffer.format,"invalid depth attachment for framebuffer object"),p(M,o,d),x(!M||M.renderbuffer&&36168===M.renderbuffer._renderbuffer.format,"invalid stencil attachment for framebuffer object"),p(P,o,d),x(!P||P.texture&&34041===P.texture._texture.format||P.renderbuffer&&34041===P.renderbuffer._renderbuffer.format,"invalid depth-stencil attachment for framebuffer object"),k(a),a.width=o,a.height=d,a.colorAttachments=F,a.depthAttachment=B,a.stencilAttachment=M,a.depthStencilAttachment=P,l.color=F.map(v),l.depth=v(B),l.stencil=v(M),l.depthStencil=v(P),l.width=a.width,l.height=a.height,S(a),l}return o.framebufferCount++,l(e,i),t(l,{resize:function(e,t){x(f.next!==a,"can not resize a framebuffer which is currently in use");var n=Math.max(0|e,1),r=Math.max(0|t||n,1);if(n===a.width&&r===a.height)return l;for(var i=a.colorAttachments,o=0;o<i.length;++o)g(i[o],n,r);return g(a.depthAttachment,n,r),g(a.stencilAttachment,n,r),g(a.depthStencilAttachment,n,r),a.width=l.width=n,a.height=l.height=r,S(a),l},_reglType:"framebuffer",_framebuffer:a,destroy:function(){A(a),k(a)},use:function(e){f.setFBO({framebuffer:l},e)}})}return t(f,{getFramebuffer:function(e){if("function"==typeof e&&"framebuffer"===e._reglType){var t=e._framebuffer;if(t instanceof _)return t}return null},create:E,createCube:function(e){var a=Array(6);function o(e){var r;x(a.indexOf(f.next)<0,"can not update framebuffer which is currently in use");var s,l={color:null},d=0,p=null,m="rgba",h="uint8",b=1;if("number"==typeof e)d=0|e;else if(e){x.type(e,"object","invalid arguments for framebuffer");var v=e;if("shape"in v){var g=v.shape;x(Array.isArray(g)&&g.length>=2,"invalid shape for framebuffer"),x(g[0]===g[1],"cube framebuffer must be square"),d=g[0]}else"radius"in v&&(d=0|v.radius),"width"in v?(d=0|v.width,"height"in v&&x(v.height===d,"must be square")):"height"in v&&(d=0|v.height);("color"in v||"colors"in v)&&(p=v.color||v.colors,Array.isArray(p)&&x(1===p.length||n.webgl_draw_buffers,"multiple render targets not supported")),p||("colorCount"in v&&(b=0|v.colorCount,x(b>0,"invalid color buffer count")),"colorType"in v&&(x.oneOf(v.colorType,c,"invalid color type"),h=v.colorType),"colorFormat"in v&&(m=v.colorFormat,x.oneOf(v.colorFormat,u,"invalid color format for texture"))),"depth"in v&&(l.depth=v.depth),"stencil"in v&&(l.stencil=v.stencil),"depthStencil"in v&&(l.depthStencil=v.depthStencil)}else d=1;if(p)if(Array.isArray(p))for(s=[],r=0;r<p.length;++r)s[r]=p[r];else s=[p];else{s=Array(b);var y={radius:d,format:m,type:h};for(r=0;r<b;++r)s[r]=i.createCube(y)}for(l.color=Array(s.length),r=0;r<s.length;++r){var w=s[r];x("function"==typeof w&&"textureCube"===w._reglType,"invalid cube map"),d=d||w.width,x(w.width===d&&w.height===d,"invalid cube map shape"),l.color[r]={target:34069,data:s[r]}}for(r=0;r<6;++r){for(var _=0;_<s.length;++_)l.color[_].target=34069+r;r>0&&(l.depth=a[0].depth,l.stencil=a[0].stencil,l.depthStencil=a[0].depthStencil),a[r]?a[r](l):a[r]=E(l)}return t(o,{width:d,height:d,color:s})}return o(e),t(o,{faces:a,resize:function(e){var t,n=0|e;if(x(n>0&&n<=r.maxCubeMapSize,"invalid radius for cube fbo"),n===o.width)return o;var i=o.color;for(t=0;t<i.length;++t)i[t].resize(n);for(t=0;t<6;++t)a[t].resize(n);return o.width=o.height=n,o},_reglType:"framebufferCube",destroy:function(){a.forEach((function(e){e.destroy()}))}})},clear:function(){P(w).forEach(A)},restore:function(){f.cur=null,f.next=null,f.dirty=!0,P(w).forEach((function(t){t.framebuffer=e.createFramebuffer(),S(t)}))}})}(i,d,g,A,T,l),C=at(i,c,d,g,w,_,0,D,{},y,k,{elements:null,primitive:4,count:-1,offset:0,instances:-1},v,p,r),z=Oe(i,D,C.procs.poll,v,a,d,g),F=C.next,L=i.canvas,R=[],I=[],X=[],$=[r.onDestroy],J=null;function K(){if(0===R.length)return p&&p.update(),void(J=null);J=E.next(K),ue();for(var e=R.length-1;e>=0;--e){var t=R[e];t&&t(v,null,0)}i.flush(),p&&p.update()}function Z(){!J&&R.length>0&&(J=E.next(K))}function ee(){J&&(E.cancel(K),J=null)}function te(e){e.preventDefault(),o=!0,ee(),I.forEach((function(e){e()}))}function ne(e){i.getError(),o=!1,f.restore(),k.restore(),w.restore(),A.restore(),T.restore(),D.restore(),p&&p.restore(),C.procs.refresh(),Z(),X.forEach((function(e){e()}))}function re(e){function n(e){var t={},n={};return Object.keys(e).forEach((function(r){var i=e[r];S.isDynamic(i)?n[r]=S.unbox(i,r):t[r]=i})),{dynamic:n,static:t}}x(!!e,"invalid args to regl({...})"),x.type(e,"object","invalid args to regl({...})");var r=n(e.context||{}),i=n(e.uniforms||{}),a=n(e.attributes||{}),f=n(function(e){var n=t({},e);function r(e){if(e in n){var t=n[e];delete n[e],Object.keys(t).forEach((function(r){n[e+"."+r]=t[r]}))}}return delete n.uniforms,delete n.attributes,delete n.context,"stencil"in n&&n.stencil.op&&(n.stencil.opBack=n.stencil.opFront=n.stencil.op,delete n.stencil.op),r("blend"),r("depth"),r("cull"),r("stencil"),r("polygonOffset"),r("scissor"),r("sample"),n}(e)),u={gpuTime:0,cpuTime:0,count:0},s=C.compile(f,a,i,r,u),c=s.draw,l=s.batch,d=s.scope,p=[];return t((function(e,t){var n;if(o&&x.raise("context lost"),"function"==typeof e)return d.call(this,null,e,0);if("function"==typeof t){if("number"==typeof e){for(n=0;n<e;++n)d.call(this,null,t,n);return}if(Array.isArray(e)){for(n=0;n<e.length;++n)d.call(this,e[n],t,n);return}return d.call(this,e,t,0)}if("number"==typeof e){if(e>0)return l.call(this,function(e){for(;p.length<e;)p.push(null);return p}(0|e),0|e)}else{if(!Array.isArray(e))return c.call(this,e);if(e.length)return l.call(this,e,e.length)}}),{stats:u})}L&&(L.addEventListener("webglcontextlost",te,!1),L.addEventListener("webglcontextrestored",ne,!1));var ie=D.setFBO=re({framebuffer:S.define.call(null,1,"framebuffer")});function ae(e,t){var n=0;C.procs.poll();var r=t.color;r&&(i.clearColor(+r[0]||0,+r[1]||0,+r[2]||0,+r[3]||0),n|=16384),"depth"in t&&(i.clearDepth(+t.depth),n|=256),"stencil"in t&&(i.clearStencil(0|t.stencil),n|=1024),x(!!n,"called regl.clear with no buffer specified"),i.clear(n)}function oe(e){return x.type(e,"function","regl.frame() callback must be a function"),R.push(e),Z(),{cancel:function(){var t=ft(R,e);x(t>=0,"cannot cancel a frame twice"),R[t]=function e(){var t=ft(R,e);R[t]=R[R.length-1],R.length-=1,R.length<=0&&ee()}}}}function fe(){var e=F.viewport,t=F.scissor_box;e[0]=e[1]=t[0]=t[1]=0,v.viewportWidth=v.framebufferWidth=v.drawingBufferWidth=e[2]=t[2]=i.drawingBufferWidth,v.viewportHeight=v.framebufferHeight=v.drawingBufferHeight=e[3]=t[3]=i.drawingBufferHeight}function ue(){v.tick+=1,v.time=ce(),fe(),C.procs.poll()}function se(){fe(),C.procs.refresh(),p&&p.update()}function ce(){return(j()-m)/1e3}se();var le=t(re,{clear:function(e){if(x("object"==typeof e&&e,"regl.clear() takes an object as input"),"framebuffer"in e)if(e.framebuffer&&"framebufferCube"===e.framebuffer_reglType)for(var n=0;n<6;++n)ie(t({framebuffer:e.framebuffer.faces[n]},e),ae);else ie(e,ae);else ae(0,e)},prop:S.define.bind(null,1),context:S.define.bind(null,2),this:S.define.bind(null,3),draw:re({}),buffer:function(e){return w.create(e,34962,!1,!1)},elements:function(e){return _.create(e,!1)},texture:A.create2D,cube:A.createCube,renderbuffer:T.create,framebuffer:D.create,framebufferCube:D.createCube,attributes:a,frame:oe,on:function(e,t){var n;switch(x.type(t,"function","listener callback must be a function"),e){case"frame":return oe(t);case"lost":n=I;break;case"restore":n=X;break;case"destroy":n=$;break;default:x.raise("invalid event, must be one of frame,lost,restore,destroy")}return n.push(t),{cancel:function(){for(var e=0;e<n.length;++e)if(n[e]===t)return n[e]=n[n.length-1],void n.pop()}}},limits:g,hasExtension:function(e){return g.extensions.indexOf(e.toLowerCase())>=0},read:z,destroy:function(){R.length=0,ee(),L&&(L.removeEventListener("webglcontextlost",te),L.removeEventListener("webglcontextrestored",ne)),k.clear(),D.clear(),T.clear(),A.clear(),_.clear(),w.clear(),p&&p.clear(),$.forEach((function(e){e()}))},_gl:i,_refresh:se,poll:function(){ue(),p&&p.update()},now:ce,stats:l});return r.onDone(null,le),le}}()},function(e,t,n){var r=n(3),i=n(4);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1},o=(r(i,a),i.locals?i.locals:{});e.exports=o},function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),o=[];function f(e){for(var t=-1,n=0;n<o.length;n++)if(o[n].identifier===e){t=n;break}return t}function u(e,t){for(var n={},r=[],i=0;i<e.length;i++){var a=e[i],u=t.base?a[0]+t.base:a[0],s=n[u]||0,c="".concat(u," ").concat(s);n[u]=s+1;var l=f(c),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==l?(o[l].references++,o[l].updater(d)):o.push({identifier:c,updater:b(d,t),references:1}),r.push(c)}return r}function s(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var c,l=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=l(t,i);else{var a=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function p(e,t,n){var r=n.css,i=n.media,a=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),a&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var m=null,h=0;function b(e,t){var n,r,i;if(t.singleton){var a=h++;n=m||(m=s(t)),r=d.bind(null,n,a,!1),i=d.bind(null,n,a,!0)}else n=s(t),r=p.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=f(n[r]);o[i].references--}for(var a=u(e,t),s=0;s<n.length;s++){var c=f(n[s]);0===o[c].references&&(o[c].updater(),o.splice(c,1))}n=a}}}},function(e,t,n){(t=n(5)(!1)).push([e.i,".slider{-webkit-appearance:none;width:100%;height:15px;border-radius:5px;background:#d3d3d3;outline:none;opacity:0.7;-webkit-transition:.2s;transition:opacity .2s}.slider::-webkit-slider-thumb{-webkit-appearance:none;appearance:none;width:25px;height:25px;border-radius:50%;background:black;cursor:pointer}.slider::-moz-range-thumb{width:25px;height:25px;border-radius:50%;background:black;cursor:pointer}.viewer_row{width:100%;display:inline-block}.viewer_row .district-viewer,.viewer_row .district-text{display:inline-block}.viewer_row .district-viewer{text-align:center;top:0px;left:2vw;width:calc(50% - 4vw)}.viewer_row .district-viewer .parcoords{text-align:initial;width:100%;height:200px}.viewer_row .district-viewer canvas{width:100%;cursor:pointer}.viewer_row .district-viewer .padding{height:20px}.viewer_row .district-viewer .view_count{font-size:1.3em;opacity:0.8}.viewer_row .district-viewer img.legend{width:100%;max-width:500px}.viewer_row .district-text{width:calc(50% - 40px);vertical-align:top;float:right;padding-top:50vh;padding-bottom:30vh}.viewer_row .district-text .district-text-inner{max-width:400px;float:left}.viewer_row .district-text .scroll_block{margin-top:150px;margin-bottom:150px;padding:25px;text-align:center;border-left:1px solid rgba(0,0,0,0)}.viewer_row .district-text .scroll_block p{text-align:left}.viewer_row .district-text .scroll_block.block_focus{border-left:1px solid}.viewer_row .district-text .scroll_block img{max-width:100%}:root{--color-red: rgba(255,35,30,100);--color-blue: #007aff}.redaction{font-family:redaction}.redaction-10{font-family:redaction-10}.redaction-20{font-family:redaction-20}.redaction-35{font-family:redaction-35}.redaction-50{font-family:redaction-50}.redaction-70{font-family:redaction-70}.redaction-100{font-family:redaction-100}.col,.col2,.line_entry .content,.line_entry .text,.col3,.col4{display:inline-block;vertical-align:middle}.col2,.line_entry .content,.line_entry .text{width:50%}.col3{width:33%}.col4{width:25%}.shadow{box-shadow:0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}.center{text-align:center}*{box-sizing:border-box}html,body{font-family:redaction;font-weight:400;-webkit-font-smoothing:antialiased;padding:0px;margin:0px}h1,h2,h3,h4,a,p{font-weight:400}a{color:black;text-decoration:none;border-bottom:1px solid}a:hover{font-family:redaction-100}.navlink a{border-bottom:none}.section_nav .navlink{margin:0px;margin-right:.5em;margin-bottom:.25em;display:inline-block}.section_nav .navlink a{padding:2px;padding-left:4px;padding-right:4px;color:#838383}.section_nav .navlink.active a{font-size:1.4em;color:white;background-color:black}.parcoords>svg,.parcoords>canvas{font-family:redaction}#derp{position:fixed;z-index:0;top:0px;width:100vw}#derp .col2,#derp .line_entry .content,.line_entry #derp .content,#derp .line_entry .text,.line_entry #derp .text{background:linear-gradient(to bottom, var(--color-red), var(--color-blue));height:100vh}#header{height:100vh}#header h1{font-family:redaction-10;margin-top:0em;margin-bottom:0em;font-size:6.0vw;letter-spacing:.3vw;text-align:left}#header .slider{margin-top:20px;width:25vw}#header h2{font-family:redaction-20;text-align:left;font-size:2.5vw;letter-spacing:.04vw}#header .attribution{position:absolute;bottom:0px}p{font-size:1.4em}p.small{font-size:1.4em}h1,h2,h3,h4{text-align:center}#header-container{color:white}#header-container h1{letter-spacing:.08em;font-size:5.5em;margin:0px}#header-container a{color:white}#header-container .main-heading img{max-width:900px}.section{position:relative;z-index:1;border-bottom:1px solid;padding-top:2vw}.flex-col{flex:1;padding:16px}.line_entry{width:100%}.line_entry .content{margin-top:1.8em;padding-left:4vw;padding-right:4vw;text-align:center}.line_entry .content img{max-width:calc(100%);max-height:calc(100%)}.line_entry .content img.medium-img{width:512px}.line_entry .content p{text-align:center}.line_entry .content .background{background-color:#ffffffa1;border-radius:5px;padding:5px}.line_entry .text{padding-left:3vw;padding-right:3vw;text-align:justify}.line_entry .text h2,.line_entry .text h3,.line_entry .text h4{text-align:left}.compactness_tile{display:inline-block;width:calc(50% - 22px);vertical-align:top;padding-left:10px;padding-right:10px}.compactness_tile p{text-align:center !important}.outer-text-container{width:100%;text-align:center}.outer-text-container .inner-text-container{width:100%;max-width:900px;display:inline-block}.outer-text-container .inner-text-container p{text-align:justify;padding-left:10px;padding-right:10px}.outer-text-container .inner-text-container img{text-align:center;width:100%;max-width:700px}.outer-text-container .inner-text-container.wide{max-width:1200px}@media only screen and (max-width: 800px){#header-container h1{font-size:3.4em;margin:0.2em}p{font-size:1.2em}p.small{font-size:1.0em}.col2,.line_entry .content,.line_entry .text{width:100%}.tag{width:150px;font-size:1.0em}.viewer_row .district-viewer{left:10px;width:calc(100% - 20px);z-index:2;background-color:white}.viewer_row .district-viewer .header{margin:0.2em;font-size:1.6em}.viewer_row .district-viewer .parcoords{height:150px}.viewer_row .district-viewer .padding{height:0px}.viewer_row .district-text{width:100%;padding-bottom:0vh}.viewer_row .district-text .district-text-inner{max-width:100%;padding:10%}}\n",""]),e.exports=t},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(o=r,f=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(f),"/*# ".concat(u," */")),a=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[n].concat(a).concat([i]).join("\n")}var o,f,u;return[n].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var f=0;f<e.length;f++){var u=[].concat(e[f]);r&&i[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},function(e,t,n){"use strict";e.exports=function(e){for(var t=new Array(e),n=0;n<e;++n)t[n]=n;return t}},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";n.r(t);n(2);function r(e){var t=new Promise((function(t,n){function r(){e.naturalWidth?t(e):n(e),e.removeEventListener("load",r),e.removeEventListener("error",r)}e.naturalWidth?t(e):e.complete?n(e):(e.addEventListener("load",r),e.addEventListener("error",r))}));return Object.assign(t,{image:e})}var i=function e(t,n){if(void 0===n&&(n={}),t instanceof HTMLImageElement)return r(t);if("string"==typeof t){var i=t,a=new Image;return Object.keys(n).forEach((function(e){return a.setAttribute(e,n[e])})),a.src=i,r(a)}if(function(e){return void 0!==e.length}(t)){var o=[].map.call(t,(function(t){return e(t,n).catch((function(e){return e}))}));return Promise.all(o).then((function(e){var t=e.filter((function(e){return e.naturalWidth}));return t.length===e.length?t:Promise.reject({loaded:t,errored:e.filter((function(e){return!e.naturalWidth}))})}))}return Promise.reject(new TypeError("input is not an image, a URL string, or an array of them."))},a=n(0),o=n.n(a),f=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{u(r.next(e))}catch(e){a(e)}}function f(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,f)}u((r=r.apply(e,t||[])).next())}))},u=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:f(0),throw:f(1),return:f(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function f(a){return function(f){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,f])}}};function s(e){return f(this,void 0,void 0,(function(){var t,n,r,a;return u(this,(function(f){switch(f.label){case 0:return[4,i(e)];case 1:return t=f.sent(),n=document.createElement("canvas"),r=n.getContext("2d"),n.width=t.naturalWidth,n.height=t.naturalHeight,r.drawImage(t,0,0),a=r.getImageData(0,0,n.width,n.height).data,[2,o()(a,[n.width,n.height,4])]}}))}))}function c(e,t){return fetch(e).then((function(e){return e.ok?e.json():null}))}function l(e,t){for(var n,r,i=e.slice(0),a=e.length;a--;)n=i[r=Math.floor((a+1)*Math.random())],i[r]=i[a],i[a]=n;return i.slice(0,t)}function d(e,t,n){return Math.min(n,Math.max(t,e))}function p(e){return new Array(e).fill(0).map((function(e,t){return t}))}function m(e){var t=e.getBoundingClientRect(),n=t.top,r=(t.left,t.bottom);t.right;return n<0&&r>0||n<window.innerHeight&&r>window.innerHeight}var h=n(1),b=n.n(h);function v(e,t,n){var r=new Array(t).fill(0),i=new Array(t).fill(0);e.forEach((function(e,t){r[e]+=n.voters[t][0],i[e]+=n.voters[t][1]}));var a=r.map((function(e,t){return d(3.5*((e-i[t])/(e+i[t]))+.5,0,1)}));return n.voters.map((function(t,n){return a[e[n]]}))}function g(e,t,n){n.voters.length;return n.voters.map((function(e){return d((e[0]-e[1])/(e[0]+e[1])+.5,0,1)}))}var y=function(){function e(e,t,n){var r,i,a,o,f=this;this.draw=e,this.nx_max=4,this.ny_max=4,this.nx=this.nx_max,this.ny=this.ny_max,this.needs_draw=!0,this.brushed_indexes=p(n.solutions.length),this.current=l(this.brushed_indexes,this.nx*this.ny),this.rundata=n,this.hover_idx=-1,this.values=n.values.map((function(e,t){var r={index:t};return e.forEach((function(e,t){return r[n.config.metrics[t]]=e})),r})),this.parcoords=(r=t.querySelector(".parcoords"),i=this.values,a=function(e){return f._onParCoordsUpdate(e)},(o=d3.parcoords()(r).alpha(.05).data(i).color("#000").composite("darker").hideAxis(["index"]).render().shadows().reorderable().brushMode("1D-axes")).on("brush",(function(e){0!=e.length&&a(e.map((function(e){return e.index})),e)})),o),this.container=t,this.viewer_div=this.container.querySelector(".district-viewer"),this.scroll_blocks=this.container.querySelectorAll(".scroll_block")}return e.prototype._onParCoordsUpdate=function(e){var t=this.current,n=this.parcoords,r=this.nx_max,i=this.ny_max;this.brushed_indexes=e,1==t.length&&n.unhighlight(),this.current=l(e,Math.min(e.length,r*i)),this.needs_draw=!0},e.prototype.onClick=function(e,t){var n=this,r=n.parcoords,i=n.nx,a=n.ny,o=n.nx_max,f=n.ny_max;if(1==this.current.length)this.current=l(p(this.rundata.solutions.length),o*f),this.needs_draw=!0,r.unhighlight();else{var u=Math.floor(e*i),s=Math.floor(t*a);this.current=[this.current[u*i+s]],this.needs_draw=!0,r.highlight([this.values[this.current[0]]])}},e.prototype.onMouseMove=function(e,t){if(1!=this.current.length){var n=this,r=n.nx,i=n.ny,a=n.values,o=n.parcoords,f=n.current,u=Math.floor(e*r)*r+Math.floor(t*i);u!=this.hover_idx&&(this.hover_idx=u,o.highlight([a[f[u]]]),this.needs_draw=!0)}},e.prototype.onMouseLeave=function(){this.current.length>1&&this.parcoords.unhighlight(),this.hover_idx=-1,this.needs_draw=!0},e.prototype.onScroll=function(){var e=this.viewer_div,t=this.container.getBoundingClientRect(),n=t.top,r=t.bottom;t.height;e.style.position="fixed",r<window.innerHeight?e.style.top=r-window.innerHeight+"px":e.style.top=n<0?"0px":n+"px",this._updateScrollBlocks()},e.prototype._updateScrollBlocks=function(){var e=null,t=window.innerWidth<800;this.scroll_blocks.forEach((function(n){var r=n.getBoundingClientRect(),i=(r.top+r.height/2)/window.innerHeight,a=d(2*Math.abs(i-(t?.75:.5)),0,1);n.style.opacity=(1-a).toString(),n.classList.remove("block_focus"),(null==e||a<e[0])&&(e=[a,n])})),e[1].classList.add("block_focus")},e.prototype.onResize=function(){var e=this.parcoords,t=this.viewer_div;e.width(t.clientWidth),e.resize(),e.render()},e.prototype.onStep=function(){var e=this,t=e.needs_draw,n=e.draw,r=e.current,i=e.rundata,a=e.viewer_div,o=e.brushed_indexes;t&&(this.nx=Math.min(Math.ceil(Math.sqrt(r.length)),this.nx_max),this.ny=this.nx,n(this.nx,this.ny,this.hover_idx,r.map((function(e){return i.solutions[e]}))),a.querySelector(".view_count").innerHTML="Viewing "+r.length+" / "+o.length,this.needs_draw=!1)},e.prototype.needsDraw=function(){this.needs_draw=!0},e}(),x=function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{u(r.next(e))}catch(e){a(e)}}function f(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,f)}u((r=r.apply(e,t||[])).next())}))},w=function(e,t){var n,r,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:f(0),throw:f(1),return:f(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function f(a){return function(f){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(i=2&a[0]?r.return:a[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,a[1])).done)return i;switch(r=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,f])}}};function _(e){return x(this,void 0,void 0,(function(){var t,n,r,i,a,o=this;return w(this,(function(f){switch(f.label){case 0:return t=[],[4,Promise.all([s("./data/wards.png"),c("./data/statedata.json")])];case 1:return n=f.sent(),r=n[0],i=n[1],a=function(e,t,n,r){var i=function(e){return e({frag:"\n        precision highp float;\n        uniform sampler2D map;\n        uniform sampler2D colors;\n        uniform sampler2D all_colors;\n        uniform vec2 u_size;\n        varying vec2 uv;\n\n        uniform float nx;\n        uniform float ny;\n        uniform float color_texture_size;\n        uniform float n_tiles;\n        uniform float selected_id;\n\n        const float s16 = 65653.0;\n        const float s8  = 256.0;\n        const vec3 RED   = vec3(1.0, 0.0, 0.0);\n        const vec3 BLUE  = vec3(0.0, 0.0, 1.0);\n        const vec3 WHITE = vec3(1.0, 1.0, 1.0);\n        const vec3 YELLOW = vec3(252.0/255.0, 198.0/255.0, 3.0/255.0);\n\n\n        // vec4 RdBu(float value) {\n            // return rdbu_colors[int(value * 512)]\n            // if (value < 0.5) {\n            //     float p = value / 0.5;\n            //     return vec4(mix(BLUE, WHITE, p), 1.0);\n            // } else {\n            //     float p = (value - 0.5) / 0.5;\n            //     return vec4(mix(WHITE, RED, p), 1.0);\n            // }\n        // }\n\n        vec2 tileIdx2colorPos(int tile_index, vec2 cell) {\n            float global_index = float(tile_index) + ((cell.y * nx)+cell.x) * n_tiles;\n            return vec2(\n                (mod( global_index, color_texture_size )) / color_texture_size,\n                floor( global_index / color_texture_size ) / color_texture_size\n            );\n        }\n\n        int get_tile_index(vec2 _uv, vec2 cell) {\n            vec2 cell_shape = vec2(1.0/nx, 1.0/ny);\n            vec2 cell_uv = vec2((_uv.x - cell.x*cell_shape.x)/cell_shape.x,\n                                (_uv.y - cell.y*cell_shape.y)/cell_shape.y);\n            vec3 value = texture2D(map, cell_uv).rgb;\n            int tile_index = int(value.r * 255.0*s16) + (int(value.g * 255.0 *s8)) + int(value.b * 255.0);\n            return tile_index;\n        }\n\n        vec3 get_color(int tile_index, vec2 cell) {\n            vec2 colorPos = tileIdx2colorPos(tile_index - 1, cell);\n            float color_value = texture2D(colors, colorPos).x;\n\n            vec3 color = texture2D(all_colors, vec2(color_value, 0.0)).rgb;\n            return color;\n            // return vec3(color_value, 0.0, 0.0);\n            // vec3 color = texture2D(colors, colorPos).rgb;\n            // return color;\n        }\n\n        void main () {\n            // We are drawing a grid of maps. First find the cell index.\n            vec2 cell = vec2(floor(uv.x * nx), floor(uv.y * ny));\n\n            // Calculate offset within this cell.\n            int tile_index = get_tile_index(uv, cell);\n            if (tile_index == 0) {\n                discard;\n            }\n\n            vec3 color = get_color(tile_index, cell);\n            int ti_left = get_tile_index(vec2(uv+vec2(0.0, -1.0)*u_size), cell);\n            int ti_top = get_tile_index(vec2(uv+vec2(-1.0, 0.0)*u_size), cell);\n            //int ti_top_left = get_tile_index(vec2(uv+vec2(-1.0, -1.0)*u_size), cell);\n\n            int ti_right = get_tile_index(vec2(uv+vec2(0.0, 1.0)*u_size), cell);\n            int ti_bottom = get_tile_index(vec2(uv+vec2(1.0, -0.0)*u_size), cell);\n\n            bool eq = all(equal(color, get_color(ti_top, cell))) &&                       all(equal(color, get_color(ti_left, cell))) &&                       all(equal(color, get_color(ti_right, cell))) &&                       all(equal(color, get_color(ti_bottom, cell)));\n\n            if (!eq) {\n                bool is_selected = floor((cell.y*nx)+cell.x) == selected_id;\n                gl_FragColor = is_selected ? vec4(YELLOW, 0.3) : vec4(WHITE, 1.0);\n            } else {\n                gl_FragColor = vec4(color, 1.0);\n            }\n        }",vert:"\n        precision highp float;\n        attribute vec2 position;\n        varying vec2 uv;\n        void main () {\n          uv = vec2(position.y, 1.0 - position.x);\n          gl_Position = vec4(1.0 - 2.0 * position, 0, 1);\n        }",attributes:{position:[-2,0,0,-2,2,2]},uniforms:{nx:e.prop("ny"),ny:e.prop("nx"),selected_id:e.prop("selected_id"),map:e.prop("map"),colors:e.prop("colors"),all_colors:e.prop("all_colors"),n_tiles:e.prop("n_tiles"),color_texture_size:e.prop("color_texture_size"),u_size:function(e){return[1/e.framebufferWidth,1/e.framebufferHeight]}},count:3})}(e),a=e.texture(t),o=new Float32Array(1048576).fill(0),f=e.texture({data:new Array(1024).fill(0).map((function(e,t){var n=d3.color(d3.interpolateRdBu(t/1024));return[n.r,n.g,n.b]})),shape:[1024,1,3]});return function(t,u,s,c){var l=0;console.time("draw");for(var d=0;d<c.length;d++){var p=void 0;p="districts"==r?v(c[d],8,n):g(c[d],0,n);for(var m=0;m<c[0].length;m++)o[l++]=p[m]}o.fill(255,l);var h=e.texture({data:o,shape:[1024,1024,1]});i({colors:h,nx:t,ny:u,all_colors:f,selected_id:s,map:a,n_tiles:n.voters.length,color_texture_size:1024}),console.timeEnd("draw")}}(e,r,i,"districts"),document.querySelectorAll(".viewer_row").forEach((function(e){return x(o,void 0,void 0,(function(){var n;return w(this,(function(r){switch(r.label){case 0:return[4,c("./data/"+e.dataset.datapath+"/rundata.json")];case 1:return n=r.sent(),t.push(new y(a,e,n)),[2]}}))}))})),[2,t]}}))}))}!function(){x(this,void 0,void 0,(function(){function e(){window.requestAnimationFrame(e),r!=window.scrollY&&(n.forEach((function(e){return e.onScroll()})),r=window.scrollY),i||(i=n.find((function(e){return m(e.container)})))&&(i.viewer_div.querySelector(".canvas_container").append(t),i.needsDraw()),i&&(i.onStep(),m(i.container)||(i=null))}var t,n,r,i,a,o=this;return w(this,(function(f){switch(f.label){case 0:return t=document.querySelector("canvas"),[4,_(b()({canvas:t,extensions:["oes_texture_float"],optionalExtensions:["oes_texture_half_float"],attributes:{antialias:!0}}))];case 1:return n=f.sent(),r=null,i=null,a=function(){return x(o,void 0,void 0,(function(){return w(this,(function(e){return n.forEach((function(e){return e.onResize()})),[2]}))}))},t.onclick=function(e){var n=e.offsetX,r=e.offsetY,a=t.clientWidth,o=t.clientHeight;i.onClick(n/a,r/o)},t.onmousemove=function(e){var n=e.offsetX,r=e.offsetY,a=t.clientWidth,o=t.clientHeight;i.onMouseMove(n/a,r/o)},t.onmouseleave=function(){i.onMouseLeave()},window.requestAnimationFrame(e),window.onresize=a,a(),[2]}}))}))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,