!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=8)}([function(e,t,r){var n=r(3),i=r(4);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1},o=(n(i,a),i.locals?i.locals:{});e.exports=o},function(e,t,r){var n=r(6),i=r(7),a="undefined"!=typeof Float64Array;function o(e,t){return e[0]-t[0]}function f(){var e,t=this.stride,r=new Array(t.length);for(e=0;e<r.length;++e)r[e]=[Math.abs(t[e]),e];r.sort(o);var n=new Array(r.length);for(e=0;e<n.length;++e)n[e]=r[e][1];return n}function u(e,t){var r=["View",t,"d",e].join("");t<0&&(r="View_Nil"+e);var i="generic"===e;if(-1===t){var a="function "+r+"(a){this.data=a;};var proto="+r+".prototype;proto.dtype='"+e+"';proto.index=function(){return -1};proto.size=0;proto.dimension=-1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function(){return new "+r+"(this.data);};proto.get=proto.set=function(){};proto.pick=function(){return null};return function construct_"+r+"(a){return new "+r+"(a);}";return new Function(a)()}if(0===t){a="function "+r+"(a,d) {this.data = a;this.offset = d};var proto="+r+".prototype;proto.dtype='"+e+"';proto.index=function(){return this.offset};proto.dimension=0;proto.size=1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function "+r+"_copy() {return new "+r+"(this.data,this.offset)};proto.pick=function "+r+"_pick(){return TrivialArray(this.data);};proto.valueOf=proto.get=function "+r+"_get(){return "+(i?"this.data.get(this.offset)":"this.data[this.offset]")+"};proto.set=function "+r+"_set(v){return "+(i?"this.data.set(this.offset,v)":"this.data[this.offset]=v")+"};return function construct_"+r+"(a,b,c,d){return new "+r+"(a,d)}";return new Function("TrivialArray",a)(s[e][0])}a=["'use strict'"];var o=n(t),u=o.map((function(e){return"i"+e})),c="this.offset+"+o.map((function(e){return"this.stride["+e+"]*i"+e})).join("+"),l=o.map((function(e){return"b"+e})).join(","),d=o.map((function(e){return"c"+e})).join(",");a.push("function "+r+"(a,"+l+","+d+",d){this.data=a","this.shape=["+l+"]","this.stride=["+d+"]","this.offset=d|0}","var proto="+r+".prototype","proto.dtype='"+e+"'","proto.dimension="+t),a.push("Object.defineProperty(proto,'size',{get:function "+r+"_size(){return "+o.map((function(e){return"this.shape["+e+"]"})).join("*"),"}})"),1===t?a.push("proto.order=[0]"):(a.push("Object.defineProperty(proto,'order',{get:"),t<4?(a.push("function "+r+"_order(){"),2===t?a.push("return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})"):3===t&&a.push("var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);if(s0>s1){if(s1>s2){return [2,1,0];}else if(s0>s2){return [1,2,0];}else{return [1,0,2];}}else if(s0>s2){return [2,0,1];}else if(s2>s1){return [0,1,2];}else{return [0,2,1];}}})")):a.push("ORDER})")),a.push("proto.set=function "+r+"_set("+u.join(",")+",v){"),i?a.push("return this.data.set("+c+",v)}"):a.push("return this.data["+c+"]=v}"),a.push("proto.get=function "+r+"_get("+u.join(",")+"){"),i?a.push("return this.data.get("+c+")}"):a.push("return this.data["+c+"]}"),a.push("proto.index=function "+r+"_index(",u.join(),"){return "+c+"}"),a.push("proto.hi=function "+r+"_hi("+u.join(",")+"){return new "+r+"(this.data,"+o.map((function(e){return["(typeof i",e,"!=='number'||i",e,"<0)?this.shape[",e,"]:i",e,"|0"].join("")})).join(",")+","+o.map((function(e){return"this.stride["+e+"]"})).join(",")+",this.offset)}");var p=o.map((function(e){return"a"+e+"=this.shape["+e+"]"})),m=o.map((function(e){return"c"+e+"=this.stride["+e+"]"}));a.push("proto.lo=function "+r+"_lo("+u.join(",")+"){var b=this.offset,d=0,"+p.join(",")+","+m.join(","));for(var h=0;h<t;++h)a.push("if(typeof i"+h+"==='number'&&i"+h+">=0){d=i"+h+"|0;b+=c"+h+"*d;a"+h+"-=d}");a.push("return new "+r+"(this.data,"+o.map((function(e){return"a"+e})).join(",")+","+o.map((function(e){return"c"+e})).join(",")+",b)}"),a.push("proto.step=function "+r+"_step("+u.join(",")+"){var "+o.map((function(e){return"a"+e+"=this.shape["+e+"]"})).join(",")+","+o.map((function(e){return"b"+e+"=this.stride["+e+"]"})).join(",")+",c=this.offset,d=0,ceil=Math.ceil");for(h=0;h<t;++h)a.push("if(typeof i"+h+"==='number'){d=i"+h+"|0;if(d<0){c+=b"+h+"*(a"+h+"-1);a"+h+"=ceil(-a"+h+"/d)}else{a"+h+"=ceil(a"+h+"/d)}b"+h+"*=d}");a.push("return new "+r+"(this.data,"+o.map((function(e){return"a"+e})).join(",")+","+o.map((function(e){return"b"+e})).join(",")+",c)}");var b=new Array(t),v=new Array(t);for(h=0;h<t;++h)b[h]="a[i"+h+"]",v[h]="b[i"+h+"]";a.push("proto.transpose=function "+r+"_transpose("+u+"){"+u.map((function(e,t){return e+"=("+e+"===undefined?"+t+":"+e+"|0)"})).join(";"),"var a=this.shape,b=this.stride;return new "+r+"(this.data,"+b.join(",")+","+v.join(",")+",this.offset)}"),a.push("proto.pick=function "+r+"_pick("+u+"){var a=[],b=[],c=this.offset");for(h=0;h<t;++h)a.push("if(typeof i"+h+"==='number'&&i"+h+">=0){c=(c+this.stride["+h+"]*i"+h+")|0}else{a.push(this.shape["+h+"]);b.push(this.stride["+h+"])}");return a.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}"),a.push("return function construct_"+r+"(data,shape,stride,offset){return new "+r+"(data,"+o.map((function(e){return"shape["+e+"]"})).join(",")+","+o.map((function(e){return"stride["+e+"]"})).join(",")+",offset)}"),new Function("CTOR_LIST","ORDER",a.join("\n"))(s[e],f)}var s={float32:[],float64:[],int8:[],int16:[],int32:[],uint8:[],uint16:[],uint32:[],array:[],uint8_clamped:[],bigint64:[],biguint64:[],buffer:[],generic:[]};e.exports=function(e,t,r,n){if(void 0===e)return(0,s.array[0])([]);"number"==typeof e&&(e=[e]),void 0===t&&(t=[e.length]);var o=t.length;if(void 0===r){r=new Array(o);for(var f=o-1,c=1;f>=0;--f)r[f]=c,c*=t[f]}if(void 0===n){n=0;for(f=0;f<o;++f)r[f]<0&&(n-=(t[f]-1)*r[f])}for(var l=function(e){if(i(e))return"buffer";if(a)switch(Object.prototype.toString.call(e)){case"[object Float64Array]":return"float64";case"[object Float32Array]":return"float32";case"[object Int8Array]":return"int8";case"[object Int16Array]":return"int16";case"[object Int32Array]":return"int32";case"[object Uint8Array]":return"uint8";case"[object Uint16Array]":return"uint16";case"[object Uint32Array]":return"uint32";case"[object Uint8ClampedArray]":return"uint8_clamped";case"[object BigInt64Array]":return"bigint64";case"[object BigUint64Array]":return"biguint64"}return Array.isArray(e)?"array":"generic"}(e),d=s[l];d.length<=o+1;)d.push(u(l,d.length-1));return(0,d[o+1])(e,t,r,n)}},function(e,t,r){e.exports=function(){"use strict";var e=function(e){return e instanceof Uint8Array||e instanceof Uint16Array||e instanceof Uint32Array||e instanceof Int8Array||e instanceof Int16Array||e instanceof Int32Array||e instanceof Float32Array||e instanceof Float64Array||e instanceof Uint8ClampedArray},t=function(e,t){for(var r=Object.keys(t),n=0;n<r.length;++n)e[r[n]]=t[r[n]];return e};function r(e){var t=new Error("(regl) "+e);throw console.error(t),t}function n(e,t){e||r(t)}function i(e){return e?": "+e:""}function a(e,t,n){t.indexOf(e)<0&&r("invalid value"+i(n)+". must be one of: "+t)}var o=["gl","canvas","container","attributes","pixelRatio","extensions","optionalExtensions","profile","onDone"];function f(e,t){for(e+="";e.length<t;)e=" "+e;return e}function u(){this.name="unknown",this.lines=[],this.index={},this.hasErrors=!1}function s(e,t){this.number=e,this.line=t,this.errors=[]}function c(e,t,r){this.file=e,this.line=t,this.message=r}function l(){var e=new Error,t=(e.stack||e).toString(),r=/compileProcedure.*\n\s*at.*\((.*)\)/.exec(t);if(r)return r[1];var n=/compileProcedure.*\n\s*at\s+(.*)(\n|$)/.exec(t);return n?n[1]:"unknown"}function d(){var e=new Error,t=(e.stack||e).toString(),r=/at REGLCommand.*\n\s+at.*\((.*)\)/.exec(t);if(r)return r[1];var n=/at REGLCommand.*\n\s+at\s+(.*)\n/.exec(t);return n?n[1]:"unknown"}function p(e,t){var r,n=e.split("\n"),i=1,a=0,o={unknown:new u,0:new u};o.unknown.name=o[0].name=t||l(),o.unknown.lines.push(new s(0,""));for(var f=0;f<n.length;++f){var c=n[f],d=/^\s*\#\s*(\w+)\s+(.+)\s*$/.exec(c);if(d)switch(d[1]){case"line":var p=/(\d+)(\s+\d+)?/.exec(d[2]);p&&(i=0|p[1],p[2]&&((a=0|p[2])in o||(o[a]=new u)));break;case"define":var m=/SHADER_NAME(_B64)?\s+(.*)$/.exec(d[2]);m&&(o[a].name=m[1]?(r=m[2],"undefined"!=typeof atob?atob(r):"base64:"+r):m[2])}o[a].lines.push(new s(i++,c))}return Object.keys(o).forEach((function(e){var t=o[e];t.lines.forEach((function(e){t.index[e.number]=e}))})),o}function m(e){e._commandRef=l()}function h(e,t){var n=d();r(e+" in command "+(t||l())+("unknown"===n?"":" called from "+n))}function b(e,t,r,n){typeof e!==t&&h("invalid parameter type"+i(r)+". expected "+t+", got "+typeof e,n||l())}var v={};function g(e,t){return 32820===e||32819===e||33635===e?2:34042===e?4:v[e]*t}function y(e){return!(e&e-1||!e)}v[5120]=v[5121]=1,v[5122]=v[5123]=v[36193]=v[33635]=v[32819]=v[32820]=2,v[5124]=v[5125]=v[5126]=v[34042]=4;var x=t(n,{optional:function(e){e()},raise:r,commandRaise:h,command:function(e,t,r){e||h(t,r||l())},parameter:function(e,t,n){e in t||r("unknown parameter ("+e+")"+i(n)+". possible values: "+Object.keys(t).join())},commandParameter:function(e,t,r,n){e in t||h("unknown parameter ("+e+")"+i(r)+". possible values: "+Object.keys(t).join(),n||l())},constructor:function(e){Object.keys(e).forEach((function(e){o.indexOf(e)<0&&r('invalid regl constructor argument "'+e+'". must be one of '+o)}))},type:function(e,t,n){typeof e!==t&&r("invalid parameter type"+i(n)+". expected "+t+", got "+typeof e)},commandType:b,isTypedArray:function(t,n){e(t)||r("invalid parameter type"+i(n)+". must be a typed array")},nni:function(e,t){e>=0&&(0|e)===e||r("invalid parameter type, ("+e+")"+i(t)+". must be a nonnegative integer")},oneOf:a,shaderError:function(e,t,r,i,a){if(!e.getShaderParameter(t,e.COMPILE_STATUS)){var o=e.getShaderInfoLog(t),u=i===e.FRAGMENT_SHADER?"fragment":"vertex";b(r,"string",u+" shader source must be a string",a);var s=p(r,a),l=function(e){var t=[];return e.split("\n").forEach((function(e){if(!(e.length<5)){var r=/^ERROR\:\s+(\d+)\:(\d+)\:\s*(.*)$/.exec(e);r?t.push(new c(0|r[1],0|r[2],r[3].trim())):e.length>0&&t.push(new c("unknown",0,e))}})),t}(o);!function(e,t){t.forEach((function(t){var r=e[t.file];if(r){var n=r.index[t.line];if(n)return n.errors.push(t),void(r.hasErrors=!0)}e.unknown.hasErrors=!0,e.unknown.lines[0].errors.push(t)}))}(s,l),Object.keys(s).forEach((function(e){var t=s[e];if(t.hasErrors){var r=[""],n=[""];i("file number "+e+": "+t.name+"\n","color:red;text-decoration:underline;font-weight:bold"),t.lines.forEach((function(e){if(e.errors.length>0){i(f(e.number,4)+"|  ","background-color:yellow; font-weight:bold"),i(e.line+"\n","color:red; background-color:yellow; font-weight:bold");var t=0;e.errors.forEach((function(r){var n=r.message,a=/^\s*\'(.*)\'\s*\:\s*(.*)$/.exec(n);if(a){var o=a[1];switch(n=a[2],o){case"assign":o="="}t=Math.max(e.line.indexOf(o,t),0)}else t=0;i(f("| ",6)),i(f("^^^",t+3)+"\n","font-weight:bold"),i(f("| ",6)),i(n+"\n","font-weight:bold")})),i(f("| ",6)+"\n")}else i(f(e.number,4)+"|  "),i(e.line+"\n","color:red")})),"undefined"==typeof document||window.chrome?console.log(r.join("")):(n[0]=r.join("%c"),console.log.apply(console,n))}function i(e,t){r.push(e),n.push(t||"")}})),n.raise("Error compiling "+u+" shader, "+s[0].name)}},linkError:function(e,t,r,i,a){if(!e.getProgramParameter(t,e.LINK_STATUS)){var o=e.getProgramInfoLog(t),f=p(r,a),u='Error linking program with vertex shader, "'+p(i,a)[0].name+'", and fragment shader "'+f[0].name+'"';"undefined"!=typeof document?console.log("%c"+u+"\n%c"+o,"color:red;text-decoration:underline;font-weight:bold","color:red"):console.log(u+"\n"+o),n.raise(u)}},callSite:d,saveCommandRef:m,saveDrawInfo:function(e,t,r,n){function i(e){return e?n.id(e):0}function a(e,t){Object.keys(t).forEach((function(t){e[n.id(t)]=!0}))}m(e),e._fragId=i(e.static.frag),e._vertId=i(e.static.vert);var o=e._uniformSet={};a(o,t.static),a(o,t.dynamic);var f=e._attributeSet={};a(f,r.static),a(f,r.dynamic),e._hasCount="count"in e.static||"count"in e.dynamic||"elements"in e.static||"elements"in e.dynamic},framebufferFormat:function(e,t,r){e.texture?a(e.texture._texture.internalformat,t,"unsupported texture format for attachment"):a(e.renderbuffer._renderbuffer.format,r,"unsupported renderbuffer format for attachment")},guessCommand:l,texture2D:function(e,t,r){var i,a=t.width,o=t.height,f=t.channels;n(a>0&&a<=r.maxTextureSize&&o>0&&o<=r.maxTextureSize,"invalid texture shape"),33071===e.wrapS&&33071===e.wrapT||n(y(a)&&y(o),"incompatible wrap mode for texture, both width and height must be power of 2"),1===t.mipmask?1!==a&&1!==o&&n(9984!==e.minFilter&&9986!==e.minFilter&&9985!==e.minFilter&&9987!==e.minFilter,"min filter requires mipmap"):(n(y(a)&&y(o),"texture must be a square power of 2 to support mipmapping"),n(t.mipmask===(a<<1)-1,"missing or incomplete mipmap data")),5126===t.type&&(r.extensions.indexOf("oes_texture_float_linear")<0&&n(9728===e.minFilter&&9728===e.magFilter,"filter not supported, must enable oes_texture_float_linear"),n(!e.genMipmaps,"mipmap generation not supported with float textures"));var u=t.images;for(i=0;i<16;++i)if(u[i]){var s=a>>i,c=o>>i;n(t.mipmask&1<<i,"missing mipmap data");var l=u[i];if(n(l.width===s&&l.height===c,"invalid shape for mip images"),n(l.format===t.format&&l.internalformat===t.internalformat&&l.type===t.type,"incompatible type for mip image"),l.compressed);else if(l.data){var d=Math.ceil(g(l.type,f)*s/l.unpackAlignment)*l.unpackAlignment;n(l.data.byteLength===d*c,"invalid data for image, buffer size is inconsistent with image format")}else l.element||l.copy}else e.genMipmaps||n(0==(t.mipmask&1<<i),"extra mipmap data");t.compressed&&n(!e.genMipmaps,"mipmap generation for compressed images not supported")},textureCube:function(e,t,r,i){var a=e.width,o=e.height,f=e.channels;n(a>0&&a<=i.maxTextureSize&&o>0&&o<=i.maxTextureSize,"invalid texture shape"),n(a===o,"cube map must be square"),n(33071===t.wrapS&&33071===t.wrapT,"wrap mode not supported by cube map");for(var u=0;u<r.length;++u){var s=r[u];n(s.width===a&&s.height===o,"inconsistent cube map face shape"),t.genMipmaps&&(n(!s.compressed,"can not generate mipmap for compressed textures"),n(1===s.mipmask,"can not specify mipmaps and generate mipmaps"));for(var c=s.images,l=0;l<16;++l){var d=c[l];if(d){var p=a>>l,m=o>>l;n(s.mipmask&1<<l,"missing mipmap data"),n(d.width===p&&d.height===m,"invalid shape for mip images"),n(d.format===e.format&&d.internalformat===e.internalformat&&d.type===e.type,"incompatible type for mip image"),d.compressed||(d.data?n(d.data.byteLength===p*m*Math.max(g(d.type,f),d.unpackAlignment),"invalid data for image, buffer size is inconsistent with image format"):d.element||d.copy)}}}}}),w=0;function _(e,t){this.id=w++,this.type=e,this.data=t}function k(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"')}function A(e){return"["+function e(t){if(0===t.length)return[];var r=t.charAt(0),n=t.charAt(t.length-1);if(t.length>1&&r===n&&('"'===r||"'"===r))return['"'+k(t.substr(1,t.length-2))+'"'];var i=/\[(false|true|null|\d+|'[^']*'|"[^"]*")\]/.exec(t);if(i)return e(t.substr(0,i.index)).concat(e(i[1])).concat(e(t.substr(i.index+i[0].length)));var a=t.split(".");if(1===a.length)return['"'+k(t)+'"'];for(var o=[],f=0;f<a.length;++f)o=o.concat(e(a[f]));return o}(e).join("][")+"]"}var S={DynamicVariable:_,define:function(e,t){return new _(e,A(t+""))},isDynamic:function(e){return"function"==typeof e&&!e._reglType||e instanceof _},unbox:function(e,t){return"function"==typeof e?new _(0,e):e},accessor:A},E={next:"function"==typeof requestAnimationFrame?function(e){return requestAnimationFrame(e)}:function(e){return setTimeout(e,16)},cancel:"function"==typeof cancelAnimationFrame?function(e){return cancelAnimationFrame(e)}:clearTimeout},j="undefined"!=typeof performance&&performance.now?function(){return performance.now()}:function(){return+new Date};function T(e){return"string"==typeof e?e.split():(x(Array.isArray(e),"invalid extension array"),e)}function D(e){return"string"==typeof e?(x("undefined"!=typeof document,"not supported outside of DOM"),document.querySelector(e)):e}function C(e){var r,n,i,a,o,f=e||{},u={},s=[],c=[],l="undefined"==typeof window?1:window.devicePixelRatio,d=!1,p=function(e){e&&x.raise(e)},m=function(){};if("string"==typeof f?(x("undefined"!=typeof document,"selector queries only supported in DOM enviroments"),r=document.querySelector(f),x(r,"invalid query string for element")):"object"==typeof f?"string"==typeof(o=f).nodeName&&"function"==typeof o.appendChild&&"function"==typeof o.getBoundingClientRect?r=f:function(e){return"function"==typeof e.drawArrays||"function"==typeof e.drawElements}(f)?i=(a=f).canvas:(x.constructor(f),"gl"in f?a=f.gl:"canvas"in f?i=D(f.canvas):"container"in f&&(n=D(f.container)),"attributes"in f&&(u=f.attributes,x.type(u,"object","invalid context attributes")),"extensions"in f&&(s=T(f.extensions)),"optionalExtensions"in f&&(c=T(f.optionalExtensions)),"onDone"in f&&(x.type(f.onDone,"function","invalid or missing onDone callback"),p=f.onDone),"profile"in f&&(d=!!f.profile),"pixelRatio"in f&&(l=+f.pixelRatio,x(l>0,"invalid pixel ratio"))):x.raise("invalid arguments to regl"),r&&("canvas"===r.nodeName.toLowerCase()?i=r:n=r),!a){if(!i){x("undefined"!=typeof document,"must manually specify webgl context outside of DOM environments");var h=function(e,r,n){var i=document.createElement("canvas");function a(){var r=window.innerWidth,a=window.innerHeight;if(e!==document.body){var o=e.getBoundingClientRect();r=o.right-o.left,a=o.bottom-o.top}i.width=n*r,i.height=n*a,t(i.style,{width:r+"px",height:a+"px"})}return t(i.style,{border:0,margin:0,padding:0,top:0,left:0}),e.appendChild(i),e===document.body&&(i.style.position="absolute",t(e.style,{margin:0,padding:0})),window.addEventListener("resize",a,!1),a(),{canvas:i,onDestroy:function(){window.removeEventListener("resize",a),e.removeChild(i)}}}(n||document.body,0,l);if(!h)return null;i=h.canvas,m=h.onDestroy}a=function(e,t){function r(r){try{return e.getContext(r,t)}catch(e){return null}}return r("webgl")||r("experimental-webgl")||r("webgl-experimental")}(i,u)}return a?{gl:a,canvas:i,container:n,extensions:s,optionalExtensions:c,pixelRatio:l,profile:d,onDone:p,onDestroy:m}:(m(),p("webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org"),null)}function O(e,t){for(var r=Array(e),n=0;n<e;++n)r[n]=t(n);return r}function z(e){var t,r;return t=(e>65535)<<4,t|=r=((e>>>=t)>255)<<3,t|=r=((e>>>=r)>15)<<2,(t|=r=((e>>>=r)>3)<<1)|(e>>>=r)>>1}function F(){var e=O(8,(function(){return[]}));function t(t){var r=function(e){for(var t=16;t<=1<<28;t*=16)if(e<=t)return t;return 0}(t),n=e[z(r)>>2];return n.length>0?n.pop():new ArrayBuffer(r)}function r(t){e[z(t.byteLength)>>2].push(t)}return{alloc:t,free:r,allocType:function(e,r){var n=null;switch(e){case 5120:n=new Int8Array(t(r),0,r);break;case 5121:n=new Uint8Array(t(r),0,r);break;case 5122:n=new Int16Array(t(2*r),0,r);break;case 5123:n=new Uint16Array(t(2*r),0,r);break;case 5124:n=new Int32Array(t(4*r),0,r);break;case 5125:n=new Uint32Array(t(4*r),0,r);break;case 5126:n=new Float32Array(t(4*r),0,r);break;default:return null}return n.length!==r?n.subarray(0,r):n},freeType:function(e){r(e.buffer)}}}var B=F();function M(t){return!!t&&"object"==typeof t&&Array.isArray(t.shape)&&Array.isArray(t.stride)&&"number"==typeof t.offset&&t.shape.length===t.stride.length&&(Array.isArray(t.data)||e(t.data))}B.zero=F();var P=function(e){return Object.keys(e).map((function(t){return e[t]}))},R={shape:function(e){for(var t=[],r=e;r.length;r=r[0])t.push(r.length);return t},flatten:function(e,t,r,n){var i=1;if(t.length)for(var a=0;a<t.length;++a)i*=t[a];else i=0;var o=n||B.allocType(r,i);switch(t.length){case 0:break;case 1:!function(e,t,r){for(var n=0;n<t;++n)r[n]=e[n]}(e,t[0],o);break;case 2:!function(e,t,r,n){for(var i=0,a=0;a<t;++a)for(var o=e[a],f=0;f<r;++f)n[i++]=o[f]}(e,t[0],t[1],o);break;case 3:I(e,t[0],t[1],t[2],o,0);break;default:!function e(t,r,n,i,a){for(var o=1,f=n+1;f<r.length;++f)o*=r[f];var u=r[n];if(r.length-n==4){var s=r[n+1],c=r[n+2],l=r[n+3];for(f=0;f<u;++f)I(t[f],s,c,l,i,a),a+=o}else for(f=0;f<u;++f)e(t[f],r,n+1,i,a),a+=o}(e,t,0,o,0)}return o}};function I(e,t,r,n,i,a){for(var o=a,f=0;f<t;++f)for(var u=e[f],s=0;s<r;++s)for(var c=u[s],l=0;l<n;++l)i[o++]=c[l]}var L={"[object Int8Array]":5120,"[object Int16Array]":5122,"[object Int32Array]":5124,"[object Uint8Array]":5121,"[object Uint8ClampedArray]":5121,"[object Uint16Array]":5123,"[object Uint32Array]":5125,"[object Float32Array]":5126,"[object Float64Array]":5121,"[object ArrayBuffer]":5121},W={int8:5120,int16:5122,int32:5124,uint8:5121,uint16:5123,uint32:5125,float:5126,float32:5126},H={dynamic:35048,stream:35040,static:35044},U=R.flatten,q=R.shape,N=[];function G(e){return 0|L[Object.prototype.toString.call(e)]}function Q(e,t){for(var r=0;r<t.length;++r)e[r]=t[r]}function V(e,t,r,n,i,a,o){for(var f=0,u=0;u<r;++u)for(var s=0;s<n;++s)e[f++]=t[i*u+a*s+o]}N[5120]=1,N[5122]=2,N[5124]=4,N[5121]=1,N[5123]=2,N[5125]=4,N[5126]=4;var Y={points:0,point:0,lines:1,line:1,triangles:4,triangle:4,"line loop":2,"line strip":3,"triangle strip":5,"triangle fan":6},X=new Float32Array(1),$=new Uint32Array(X.buffer);function J(e){for(var t=B.allocType(5123,e.length),r=0;r<e.length;++r)if(isNaN(e[r]))t[r]=65535;else if(e[r]===1/0)t[r]=31744;else if(e[r]===-1/0)t[r]=64512;else{X[0]=e[r];var n=$[0],i=n>>>31<<15,a=(n<<1>>>24)-127,o=n>>13&1023;if(a<-24)t[r]=i;else if(a<-14){var f=-14-a;t[r]=i+(o+1024>>f)}else t[r]=a>15?i+31744:i+(a+15<<10)+o}return t}function K(t){return Array.isArray(t)||e(t)}var Z=function(e){return!(e&e-1||!e)},ee=[9984,9986,9985,9987],te=[0,6409,6410,6407,6408],re={};function ne(e){return"[object "+e+"]"}re[6409]=re[6406]=re[6402]=1,re[34041]=re[6410]=2,re[6407]=re[35904]=3,re[6408]=re[35906]=4;var ie=ne("HTMLCanvasElement"),ae=ne("CanvasRenderingContext2D"),oe=ne("ImageBitmap"),fe=ne("HTMLImageElement"),ue=ne("HTMLVideoElement"),se=Object.keys(L).concat([ie,ae,oe,fe,ue]),ce=[];ce[5121]=1,ce[5126]=4,ce[36193]=2,ce[5123]=2,ce[5125]=4;var le=[];function de(e){return Array.isArray(e)&&(0===e.length||"number"==typeof e[0])}function pe(e){return!!Array.isArray(e)&&!(0===e.length||!K(e[0]))}function me(e){return Object.prototype.toString.call(e)}function he(e){return me(e)===ie}function be(e){if(!e)return!1;var t=me(e);return se.indexOf(t)>=0||de(e)||pe(e)||M(e)}function ve(e){return 0|L[Object.prototype.toString.call(e)]}function ge(e,t){return B.allocType(36193===e.type?5126:e.type,t)}function ye(e,t){36193===e.type?(e.data=J(t),B.freeType(t)):e.data=t}function xe(e,t,r,n,i,a){var o;if(o=void 0!==le[e]?le[e]:re[e]*ce[t],a&&(o*=6),i){for(var f=0,u=r;u>=1;)f+=o*u*u,u/=2;return f}return o*r*n}function we(r,n,i,a,o,f,u){var s={"don't care":4352,"dont care":4352,nice:4354,fast:4353},c={repeat:10497,clamp:33071,mirror:33648},l={nearest:9728,linear:9729},d=t({mipmap:9987,"nearest mipmap nearest":9984,"linear mipmap nearest":9985,"nearest mipmap linear":9986,"linear mipmap linear":9987},l),p={none:0,browser:37444},m={uint8:5121,rgba4:32819,rgb565:33635,"rgb5 a1":32820},h={alpha:6406,luminance:6409,"luminance alpha":6410,rgb:6407,rgba:6408,rgba4:32854,"rgb5 a1":32855,rgb565:36194},b={};n.ext_srgb&&(h.srgb=35904,h.srgba=35906),n.oes_texture_float&&(m.float32=m.float=5126),n.oes_texture_half_float&&(m.float16=m["half float"]=36193),n.webgl_depth_texture&&(t(h,{depth:6402,"depth stencil":34041}),t(m,{uint16:5123,uint32:5125,"depth stencil":34042})),n.webgl_compressed_texture_s3tc&&t(b,{"rgb s3tc dxt1":33776,"rgba s3tc dxt1":33777,"rgba s3tc dxt3":33778,"rgba s3tc dxt5":33779}),n.webgl_compressed_texture_atc&&t(b,{"rgb atc":35986,"rgba atc explicit alpha":35987,"rgba atc interpolated alpha":34798}),n.webgl_compressed_texture_pvrtc&&t(b,{"rgb pvrtc 4bppv1":35840,"rgb pvrtc 2bppv1":35841,"rgba pvrtc 4bppv1":35842,"rgba pvrtc 2bppv1":35843}),n.webgl_compressed_texture_etc1&&(b["rgb etc1"]=36196);var v=Array.prototype.slice.call(r.getParameter(34467));Object.keys(b).forEach((function(e){var t=b[e];v.indexOf(t)>=0&&(h[e]=t)}));var g=Object.keys(h);i.textureFormats=g;var y=[];Object.keys(h).forEach((function(e){var t=h[e];y[t]=e}));var w=[];Object.keys(m).forEach((function(e){var t=m[e];w[t]=e}));var _=[];Object.keys(l).forEach((function(e){_[l[e]]=e}));var k=[];Object.keys(d).forEach((function(e){var t=d[e];k[t]=e}));var A=[];Object.keys(c).forEach((function(e){A[c[e]]=e}));var S=g.reduce((function(e,t){var r=h[t];return 6409===r||6406===r||6409===r||6410===r||6402===r||34041===r?e[r]=r:32855===r||t.indexOf("rgba")>=0?e[r]=6408:e[r]=6407,e}),{});function E(){this.internalformat=6408,this.format=6408,this.type=5121,this.compressed=!1,this.premultiplyAlpha=!1,this.flipY=!1,this.unpackAlignment=1,this.colorSpace=37444,this.width=0,this.height=0,this.channels=0}function j(e,t){e.internalformat=t.internalformat,e.format=t.format,e.type=t.type,e.compressed=t.compressed,e.premultiplyAlpha=t.premultiplyAlpha,e.flipY=t.flipY,e.unpackAlignment=t.unpackAlignment,e.colorSpace=t.colorSpace,e.width=t.width,e.height=t.height,e.channels=t.channels}function T(e,t){if("object"==typeof t&&t){if("premultiplyAlpha"in t&&(x.type(t.premultiplyAlpha,"boolean","invalid premultiplyAlpha"),e.premultiplyAlpha=t.premultiplyAlpha),"flipY"in t&&(x.type(t.flipY,"boolean","invalid texture flip"),e.flipY=t.flipY),"alignment"in t&&(x.oneOf(t.alignment,[1,2,4,8],"invalid texture unpack alignment"),e.unpackAlignment=t.alignment),"colorSpace"in t&&(x.parameter(t.colorSpace,p,"invalid colorSpace"),e.colorSpace=p[t.colorSpace]),"type"in t){var r=t.type;x(n.oes_texture_float||!("float"===r||"float32"===r),"you must enable the OES_texture_float extension in order to use floating point textures."),x(n.oes_texture_half_float||!("half float"===r||"float16"===r),"you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures."),x(n.webgl_depth_texture||!("uint16"===r||"uint32"===r||"depth stencil"===r),"you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures."),x.parameter(r,m,"invalid texture type"),e.type=m[r]}var a=e.width,o=e.height,f=e.channels,u=!1;"shape"in t?(x(Array.isArray(t.shape)&&t.shape.length>=2,"shape must be an array"),a=t.shape[0],o=t.shape[1],3===t.shape.length&&(f=t.shape[2],x(f>0&&f<=4,"invalid number of channels"),u=!0),x(a>=0&&a<=i.maxTextureSize,"invalid width"),x(o>=0&&o<=i.maxTextureSize,"invalid height")):("radius"in t&&(a=o=t.radius,x(a>=0&&a<=i.maxTextureSize,"invalid radius")),"width"in t&&(a=t.width,x(a>=0&&a<=i.maxTextureSize,"invalid width")),"height"in t&&(o=t.height,x(o>=0&&o<=i.maxTextureSize,"invalid height")),"channels"in t&&(f=t.channels,x(f>0&&f<=4,"invalid number of channels"),u=!0)),e.width=0|a,e.height=0|o,e.channels=0|f;var s=!1;if("format"in t){var c=t.format;x(n.webgl_depth_texture||!("depth"===c||"depth stencil"===c),"you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures."),x.parameter(c,h,"invalid texture format");var l=e.internalformat=h[c];e.format=S[l],c in m&&("type"in t||(e.type=m[c])),c in b&&(e.compressed=!0),s=!0}!u&&s?e.channels=re[e.format]:u&&!s?e.channels!==te[e.format]&&(e.format=e.internalformat=te[e.channels]):s&&u&&x(e.channels===re[e.format],"number of channels inconsistent with specified format")}}function D(e){r.pixelStorei(37440,e.flipY),r.pixelStorei(37441,e.premultiplyAlpha),r.pixelStorei(37443,e.colorSpace),r.pixelStorei(3317,e.unpackAlignment)}function C(){E.call(this),this.xOffset=0,this.yOffset=0,this.data=null,this.needsFree=!1,this.element=null,this.needsCopy=!1}function O(t,r){var n=null;if(be(r)?n=r:r&&(x.type(r,"object","invalid pixel data type"),T(t,r),"x"in r&&(t.xOffset=0|r.x),"y"in r&&(t.yOffset=0|r.y),be(r.data)&&(n=r.data)),x(!t.compressed||n instanceof Uint8Array,"compressed texture data must be stored in a uint8array"),r.copy){x(!n,"can not specify copy and data field for the same texture");var a=o.viewportWidth,f=o.viewportHeight;t.width=t.width||a-t.xOffset,t.height=t.height||f-t.yOffset,t.needsCopy=!0,x(t.xOffset>=0&&t.xOffset<a&&t.yOffset>=0&&t.yOffset<f&&t.width>0&&t.width<=a&&t.height>0&&t.height<=f,"copy texture read out of bounds")}else if(n){if(e(n))t.channels=t.channels||4,t.data=n,"type"in r||5121!==t.type||(t.type=ve(n));else if(de(n))t.channels=t.channels||4,function(e,t){var r=t.length;switch(e.type){case 5121:case 5123:case 5125:case 5126:var n=B.allocType(e.type,r);n.set(t),e.data=n;break;case 36193:e.data=J(t);break;default:x.raise("unsupported texture type, must specify a typed array")}}(t,n),t.alignment=1,t.needsFree=!0;else if(M(n)){var u=n.data;Array.isArray(u)||5121!==t.type||(t.type=ve(u));var s,c,l,d,p,m,h=n.shape,b=n.stride;3===h.length?(l=h[2],m=b[2]):(x(2===h.length,"invalid ndarray pixel data, must be 2 or 3D"),l=1,m=1),s=h[0],c=h[1],d=b[0],p=b[1],t.alignment=1,t.width=s,t.height=c,t.channels=l,t.format=t.internalformat=te[l],t.needsFree=!0,function(e,t,r,n,i,a){for(var o=e.width,f=e.height,u=e.channels,s=ge(e,o*f*u),c=0,l=0;l<f;++l)for(var d=0;d<o;++d)for(var p=0;p<u;++p)s[c++]=t[r*d+n*l+i*p+a];ye(e,s)}(t,u,d,p,m,n.offset)}else if(he(n)||me(n)===ae)he(n)?t.element=n:t.element=n.canvas,t.width=t.element.width,t.height=t.element.height,t.channels=4;else if(function(e){return me(e)===oe}(n))t.element=n,t.width=n.width,t.height=n.height,t.channels=4;else if(function(e){return me(e)===fe}(n))t.element=n,t.width=n.naturalWidth,t.height=n.naturalHeight,t.channels=4;else if(function(e){return me(e)===ue}(n))t.element=n,t.width=n.videoWidth,t.height=n.videoHeight,t.channels=4;else if(pe(n)){var v=t.width||n[0].length,g=t.height||n.length,y=t.channels;y=K(n[0][0])?y||n[0][0].length:y||1;for(var w=R.shape(n),_=1,k=0;k<w.length;++k)_*=w[k];var A=ge(t,_);R.flatten(n,w,"",A),ye(t,A),t.alignment=1,t.width=v,t.height=g,t.channels=y,t.format=t.internalformat=te[y],t.needsFree=!0}}else t.width=t.width||1,t.height=t.height||1,t.channels=t.channels||4;5126===t.type?x(i.extensions.indexOf("oes_texture_float")>=0,"oes_texture_float extension not enabled"):36193===t.type&&x(i.extensions.indexOf("oes_texture_half_float")>=0,"oes_texture_half_float extension not enabled")}function z(e,t,n){var i=e.element,o=e.data,f=e.internalformat,u=e.format,s=e.type,c=e.width,l=e.height,d=e.channels;if(D(e),i)r.texImage2D(t,n,u,u,s,i);else if(e.compressed)r.compressedTexImage2D(t,n,f,c,l,0,o);else if(e.needsCopy)a(),r.copyTexImage2D(t,n,u,e.xOffset,e.yOffset,c,l,0);else{var p=!o;p&&(o=B.zero.allocType(s,c*l*d)),r.texImage2D(t,n,u,c,l,0,u,s,o),p&&o&&B.zero.freeType(o)}}function F(e,t,n,i,o){var f=e.element,u=e.data,s=e.internalformat,c=e.format,l=e.type,d=e.width,p=e.height;D(e),f?r.texSubImage2D(t,o,n,i,c,l,f):e.compressed?r.compressedTexSubImage2D(t,o,n,i,s,d,p,u):e.needsCopy?(a(),r.copyTexSubImage2D(t,o,n,i,e.xOffset,e.yOffset,d,p)):r.texSubImage2D(t,o,n,i,d,p,c,l,u)}var I=[];function L(){return I.pop()||new C}function W(e){e.needsFree&&B.freeType(e.data),C.call(e),I.push(e)}function H(){E.call(this),this.genMipmaps=!1,this.mipmapHint=4352,this.mipmask=0,this.images=Array(16)}function U(e,t,r){var n=e.images[0]=L();e.mipmask=1,n.width=e.width=t,n.height=e.height=r,n.channels=e.channels=4}function q(e,t){var r=null;if(be(t))j(r=e.images[0]=L(),e),O(r,t),e.mipmask=1;else if(T(e,t),Array.isArray(t.mipmap))for(var n=t.mipmap,i=0;i<n.length;++i)j(r=e.images[i]=L(),e),r.width>>=i,r.height>>=i,O(r,n[i]),e.mipmask|=1<<i;else j(r=e.images[0]=L(),e),O(r,t),e.mipmask=1;j(e,e.images[0]),(e.compressed&&33776===e.internalformat||33777===e.internalformat||33778===e.internalformat||33779===e.internalformat)&&x(e.width%4==0&&e.height%4==0,"for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4")}function N(e,t){for(var r=e.images,n=0;n<r.length;++n){if(!r[n])return;z(r[n],t,n)}}var G=[];function Q(){var e=G.pop()||new H;E.call(e),e.mipmask=0;for(var t=0;t<16;++t)e.images[t]=null;return e}function V(e){for(var t=e.images,r=0;r<t.length;++r)t[r]&&W(t[r]),t[r]=null;G.push(e)}function Y(){this.minFilter=9728,this.magFilter=9728,this.wrapS=33071,this.wrapT=33071,this.anisotropic=1,this.genMipmaps=!1,this.mipmapHint=4352}function X(e,t){if("min"in t){var r=t.min;x.parameter(r,d),e.minFilter=d[r],ee.indexOf(e.minFilter)>=0&&!("faces"in t)&&(e.genMipmaps=!0)}if("mag"in t){var n=t.mag;x.parameter(n,l),e.magFilter=l[n]}var a=e.wrapS,o=e.wrapT;if("wrap"in t){var f=t.wrap;"string"==typeof f?(x.parameter(f,c),a=o=c[f]):Array.isArray(f)&&(x.parameter(f[0],c),x.parameter(f[1],c),a=c[f[0]],o=c[f[1]])}else{if("wrapS"in t){var u=t.wrapS;x.parameter(u,c),a=c[u]}if("wrapT"in t){var p=t.wrapT;x.parameter(p,c),o=c[p]}}if(e.wrapS=a,e.wrapT=o,"anisotropic"in t){var m=t.anisotropic;x("number"==typeof m&&m>=1&&m<=i.maxAnisotropic,"aniso samples must be between 1 and "),e.anisotropic=t.anisotropic}if("mipmap"in t){var h=!1;switch(typeof t.mipmap){case"string":x.parameter(t.mipmap,s,"invalid mipmap hint"),e.mipmapHint=s[t.mipmap],e.genMipmaps=!0,h=!0;break;case"boolean":h=e.genMipmaps=t.mipmap;break;case"object":x(Array.isArray(t.mipmap),"invalid mipmap type"),e.genMipmaps=!1,h=!0;break;default:x.raise("invalid mipmap type")}!h||"min"in t||(e.minFilter=9984)}}function $(e,t){r.texParameteri(t,10241,e.minFilter),r.texParameteri(t,10240,e.magFilter),r.texParameteri(t,10242,e.wrapS),r.texParameteri(t,10243,e.wrapT),n.ext_texture_filter_anisotropic&&r.texParameteri(t,34046,e.anisotropic),e.genMipmaps&&(r.hint(33170,e.mipmapHint),r.generateMipmap(t))}var ne=0,ie={},se=i.maxTextureUnits,ce=Array(se).map((function(){return null}));function le(e){E.call(this),this.mipmask=0,this.internalformat=6408,this.id=ne++,this.refCount=1,this.target=e,this.texture=r.createTexture(),this.unit=-1,this.bindCount=0,this.texInfo=new Y,u.profile&&(this.stats={size:0})}function we(e){r.activeTexture(33984),r.bindTexture(e.target,e.texture)}function _e(){var e=ce[0];e?r.bindTexture(e.target,e.texture):r.bindTexture(3553,null)}function ke(e){var t=e.texture;x(t,"must not double destroy texture");var n=e.unit,i=e.target;n>=0&&(r.activeTexture(33984+n),r.bindTexture(i,null),ce[n]=null),r.deleteTexture(t),e.texture=null,e.params=null,e.pixels=null,e.refCount=0,delete ie[e.id],f.textureCount--}return t(le.prototype,{bind:function(){this.bindCount+=1;var e=this.unit;if(e<0){for(var t=0;t<se;++t){var n=ce[t];if(n){if(n.bindCount>0)continue;n.unit=-1}ce[t]=this,e=t;break}e>=se&&x.raise("insufficient number of texture units"),u.profile&&f.maxTextureUnits<e+1&&(f.maxTextureUnits=e+1),this.unit=e,r.activeTexture(33984+e),r.bindTexture(this.target,this.texture)}return e},unbind:function(){this.bindCount-=1},decRef:function(){--this.refCount<=0&&ke(this)}}),u.profile&&(f.getTotalTextureSize=function(){var e=0;return Object.keys(ie).forEach((function(t){e+=ie[t].stats.size})),e}),{create2D:function(e,t){var n=new le(3553);function a(e,t){var r=n.texInfo;Y.call(r);var o=Q();return"number"==typeof e?U(o,0|e,"number"==typeof t?0|t:0|e):e?(x.type(e,"object","invalid arguments to regl.texture"),X(r,e),q(o,e)):U(o,1,1),r.genMipmaps&&(o.mipmask=(o.width<<1)-1),n.mipmask=o.mipmask,j(n,o),x.texture2D(r,o,i),n.internalformat=o.internalformat,a.width=o.width,a.height=o.height,we(n),N(o,3553),$(r,3553),_e(),V(o),u.profile&&(n.stats.size=xe(n.internalformat,n.type,o.width,o.height,r.genMipmaps,!1)),a.format=y[n.internalformat],a.type=w[n.type],a.mag=_[r.magFilter],a.min=k[r.minFilter],a.wrapS=A[r.wrapS],a.wrapT=A[r.wrapT],a}return ie[n.id]=n,f.textureCount++,a(e,t),a.subimage=function(e,t,r,i){x(!!e,"must specify image data");var o=0|t,f=0|r,u=0|i,s=L();return j(s,n),s.width=0,s.height=0,O(s,e),s.width=s.width||(n.width>>u)-o,s.height=s.height||(n.height>>u)-f,x(n.type===s.type&&n.format===s.format&&n.internalformat===s.internalformat,"incompatible format for texture.subimage"),x(o>=0&&f>=0&&o+s.width<=n.width&&f+s.height<=n.height,"texture.subimage write out of bounds"),x(n.mipmask&1<<u,"missing mipmap data"),x(s.data||s.element||s.needsCopy,"missing image data"),we(n),F(s,3553,o,f,u),_e(),W(s),a},a.resize=function(e,t){var i,o=0|e,f=0|t||o;if(o===n.width&&f===n.height)return a;a.width=n.width=o,a.height=n.height=f,we(n);for(var s=n.channels,c=n.type,l=0;n.mipmask>>l;++l){var d=o>>l,p=f>>l;if(!d||!p)break;i=B.zero.allocType(c,d*p*s),r.texImage2D(3553,l,n.format,d,p,0,n.format,n.type,i),i&&B.zero.freeType(i)}return _e(),u.profile&&(n.stats.size=xe(n.internalformat,n.type,o,f,!1,!1)),a},a._reglType="texture2d",a._texture=n,u.profile&&(a.stats=n.stats),a.destroy=function(){n.decRef()},a},createCube:function(e,t,n,a,o,s){var c=new le(34067);ie[c.id]=c,f.cubeCount++;var l=new Array(6);function d(e,t,r,n,a,o){var f,s=c.texInfo;for(Y.call(s),f=0;f<6;++f)l[f]=Q();if("number"!=typeof e&&e)if("object"==typeof e)if(t)q(l[0],e),q(l[1],t),q(l[2],r),q(l[3],n),q(l[4],a),q(l[5],o);else if(X(s,e),T(c,e),"faces"in e){var p=e.faces;for(x(Array.isArray(p)&&6===p.length,"cube faces must be a length 6 array"),f=0;f<6;++f)x("object"==typeof p[f]&&!!p[f],"invalid input for cube map face"),j(l[f],c),q(l[f],p[f])}else for(f=0;f<6;++f)q(l[f],e);else x.raise("invalid arguments to cube map");else{var m=0|e||1;for(f=0;f<6;++f)U(l[f],m,m)}for(j(c,l[0]),i.npotTextureCube||x(Z(c.width)&&Z(c.height),"your browser does not support non power or two texture dimensions"),s.genMipmaps?c.mipmask=(l[0].width<<1)-1:c.mipmask=l[0].mipmask,x.textureCube(c,s,l,i),c.internalformat=l[0].internalformat,d.width=l[0].width,d.height=l[0].height,we(c),f=0;f<6;++f)N(l[f],34069+f);for($(s,34067),_e(),u.profile&&(c.stats.size=xe(c.internalformat,c.type,d.width,d.height,s.genMipmaps,!0)),d.format=y[c.internalformat],d.type=w[c.type],d.mag=_[s.magFilter],d.min=k[s.minFilter],d.wrapS=A[s.wrapS],d.wrapT=A[s.wrapT],f=0;f<6;++f)V(l[f]);return d}return d(e,t,n,a,o,s),d.subimage=function(e,t,r,n,i){x(!!t,"must specify image data"),x("number"==typeof e&&e===(0|e)&&e>=0&&e<6,"invalid face");var a=0|r,o=0|n,f=0|i,u=L();return j(u,c),u.width=0,u.height=0,O(u,t),u.width=u.width||(c.width>>f)-a,u.height=u.height||(c.height>>f)-o,x(c.type===u.type&&c.format===u.format&&c.internalformat===u.internalformat,"incompatible format for texture.subimage"),x(a>=0&&o>=0&&a+u.width<=c.width&&o+u.height<=c.height,"texture.subimage write out of bounds"),x(c.mipmask&1<<f,"missing mipmap data"),x(u.data||u.element||u.needsCopy,"missing image data"),we(c),F(u,34069+e,a,o,f),_e(),W(u),d},d.resize=function(e){var t=0|e;if(t!==c.width){d.width=c.width=t,d.height=c.height=t,we(c);for(var n=0;n<6;++n)for(var i=0;c.mipmask>>i;++i)r.texImage2D(34069+n,i,c.format,t>>i,t>>i,0,c.format,c.type,null);return _e(),u.profile&&(c.stats.size=xe(c.internalformat,c.type,d.width,d.height,!1,!0)),d}},d._reglType="textureCube",d._texture=c,u.profile&&(d.stats=c.stats),d.destroy=function(){c.decRef()},d},clear:function(){for(var e=0;e<se;++e)r.activeTexture(33984+e),r.bindTexture(3553,null),ce[e]=null;P(ie).forEach(ke),f.cubeCount=0,f.textureCount=0},getTexture:function(e){return null},restore:function(){for(var e=0;e<se;++e){var t=ce[e];t&&(t.bindCount=0,t.unit=-1,ce[e]=null)}P(ie).forEach((function(e){e.texture=r.createTexture(),r.bindTexture(e.target,e.texture);for(var t=0;t<32;++t)if(0!=(e.mipmask&1<<t))if(3553===e.target)r.texImage2D(3553,t,e.internalformat,e.width>>t,e.height>>t,0,e.internalformat,e.type,null);else for(var n=0;n<6;++n)r.texImage2D(34069+n,t,e.internalformat,e.width>>t,e.height>>t,0,e.internalformat,e.type,null);$(e.texInfo,e.target)}))}}}le[32854]=2,le[32855]=2,le[36194]=2,le[34041]=4,le[33776]=.5,le[33777]=.5,le[33778]=1,le[33779]=1,le[35986]=.5,le[35987]=1,le[34798]=1,le[35840]=.5,le[35841]=.25,le[35842]=.5,le[35843]=.25,le[36196]=.5;var _e=[];function ke(e,t,r){return _e[e]*t*r}_e[32854]=2,_e[32855]=2,_e[36194]=2,_e[33189]=2,_e[36168]=1,_e[34041]=4,_e[35907]=4,_e[34836]=16,_e[34842]=8,_e[34843]=6;var Ae=[6407,6408],Se=[];Se[6408]=4,Se[6407]=3;var Ee=[];Ee[5121]=1,Ee[5126]=4,Ee[36193]=2;var je=[32854,32855,36194,35907,34842,34843,34836],Te={};function De(){this.state=0,this.x=0,this.y=0,this.z=0,this.w=0,this.buffer=null,this.size=0,this.normalized=!1,this.type=5126,this.offset=0,this.stride=0,this.divisor=0}function Ce(t,r,n,i,a,o,f){function u(u){var s;null===r.next?(x(a.preserveDrawingBuffer,'you must create a webgl context with "preserveDrawingBuffer":true in order to read pixels from the drawing buffer'),s=5121):(x(null!==r.next.colorAttachments[0].texture,"You cannot read from a renderbuffer"),s=r.next.colorAttachments[0].texture._texture.type,o.oes_texture_float?(x(5121===s||5126===s,"Reading from a framebuffer is only allowed for the types 'uint8' and 'float'"),5126===s&&x(f.readFloat,"Reading 'float' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float")):x(5121===s,"Reading from a framebuffer is only allowed for the type 'uint8'"));var c=0,l=0,d=i.framebufferWidth,p=i.framebufferHeight,m=null;e(u)?m=u:u&&(x.type(u,"object","invalid arguments to regl.read()"),c=0|u.x,l=0|u.y,x(c>=0&&c<i.framebufferWidth,"invalid x offset for regl.read"),x(l>=0&&l<i.framebufferHeight,"invalid y offset for regl.read"),d=0|(u.width||i.framebufferWidth-c),p=0|(u.height||i.framebufferHeight-l),m=u.data||null),m&&(5121===s?x(m instanceof Uint8Array,"buffer must be 'Uint8Array' when reading from a framebuffer of type 'uint8'"):5126===s&&x(m instanceof Float32Array,"buffer must be 'Float32Array' when reading from a framebuffer of type 'float'")),x(d>0&&d+c<=i.framebufferWidth,"invalid width for read pixels"),x(p>0&&p+l<=i.framebufferHeight,"invalid height for read pixels"),n();var h=d*p*4;return m||(5121===s?m=new Uint8Array(h):5126===s&&(m=m||new Float32Array(h))),x.isTypedArray(m,"data buffer for regl.read() must be a typedarray"),x(m.byteLength>=h,"data buffer for regl.read() too small"),t.pixelStorei(3333,4),t.readPixels(c,l,d,p,6408,s,m),m}return function(e){return e&&"framebuffer"in e?function(e){var t;return r.setFBO({framebuffer:e.framebuffer},(function(){t=u(e)})),t}(e):u(e)}}function Oe(e){return Array.prototype.slice.call(e)}function ze(e){return Oe(e).join("")}Te[36053]="complete",Te[36054]="incomplete attachment",Te[36057]="incomplete dimensions",Te[36055]="incomplete, missing attachment",Te[36061]="unsupported";var Fe="xyzw".split(""),Be="profile",Me="framebuffer",Pe="vert",Re="frag",Ie="elements",Le="primitive",We="count",He="offset",Ue="instances",qe=Me+"Width",Ne=Me+"Height",Ge=["blend.func","blend.equation","stencil.func","stencil.opFront","stencil.opBack","sample.coverage","viewport","scissor.box","polygonOffset.offset"],Qe={0:0,1:1,zero:0,one:1,"src color":768,"one minus src color":769,"src alpha":770,"one minus src alpha":771,"dst color":774,"one minus dst color":775,"dst alpha":772,"one minus dst alpha":773,"constant color":32769,"one minus constant color":32770,"constant alpha":32771,"one minus constant alpha":32772,"src alpha saturate":776},Ve=["constant color, constant alpha","one minus constant color, constant alpha","constant color, one minus constant alpha","one minus constant color, one minus constant alpha","constant alpha, constant color","constant alpha, one minus constant color","one minus constant alpha, constant color","one minus constant alpha, one minus constant color"],Ye={never:512,less:513,"<":513,equal:514,"=":514,"==":514,"===":514,lequal:515,"<=":515,greater:516,">":516,notequal:517,"!=":517,"!==":517,gequal:518,">=":518,always:519},Xe={0:0,zero:0,keep:7680,replace:7681,increment:7682,decrement:7683,"increment wrap":34055,"decrement wrap":34056,invert:5386},$e={frag:35632,vert:35633},Je={cw:2304,ccw:2305};function Ke(t){return Array.isArray(t)||e(t)||M(t)}function Ze(e){return e.sort((function(e,t){return"viewport"===e?-1:"viewport"===t?1:e<t?-1:1}))}function et(e,t,r,n){this.thisDep=e,this.contextDep=t,this.propDep=r,this.append=n}function tt(e){return e&&!(e.thisDep||e.contextDep||e.propDep)}function rt(e){return new et(!1,!1,!1,e)}function nt(e,t){var r=e.type;if(0===r){var n=e.data.length;return new et(!0,n>=1,n>=2,t)}if(4===r){var i=e.data;return new et(i.thisDep,i.contextDep,i.propDep,t)}return new et(3===r,2===r,1===r,t)}var it=new et(!1,!1,!1,(function(){}));function at(e,r,n,i,a,o,f,u,s,c,l,d,p,m,h){var b=c.Record,v={add:32774,subtract:32778,"reverse subtract":32779};n.ext_blend_minmax&&(v.min=32775,v.max=32776);var g=n.angle_instanced_arrays,y=n.webgl_draw_buffers,w={dirty:!0,profile:h.profile},_={},k=[],A={},E={};function j(e){return e.replace(".","_")}function T(e,t,r){var n=j(e);k.push(e),_[n]=w[n]=!!r,A[n]=t}function D(e,t,r){var n=j(e);k.push(e),Array.isArray(r)?(w[n]=r.slice(),_[n]=r.slice()):w[n]=_[n]=r,E[n]=t}T("dither",3024),T("blend.enable",3042),D("blend.color","blendColor",[0,0,0,0]),D("blend.equation","blendEquationSeparate",[32774,32774]),D("blend.func","blendFuncSeparate",[1,0,1,0]),T("depth.enable",2929,!0),D("depth.func","depthFunc",513),D("depth.range","depthRange",[0,1]),D("depth.mask","depthMask",!0),D("colorMask","colorMask",[!0,!0,!0,!0]),T("cull.enable",2884),D("cull.face","cullFace",1029),D("frontFace","frontFace",2305),D("lineWidth","lineWidth",1),T("polygonOffset.enable",32823),D("polygonOffset.offset","polygonOffset",[0,0]),T("sample.alpha",32926),T("sample.enable",32928),D("sample.coverage","sampleCoverage",[1,!1]),T("stencil.enable",2960),D("stencil.mask","stencilMask",-1),D("stencil.func","stencilFunc",[519,0,-1]),D("stencil.opFront","stencilOpSeparate",[1028,7680,7680,7680]),D("stencil.opBack","stencilOpSeparate",[1029,7680,7680,7680]),T("scissor.enable",3089),D("scissor.box","scissor",[0,0,e.drawingBufferWidth,e.drawingBufferHeight]),D("viewport","viewport",[0,0,e.drawingBufferWidth,e.drawingBufferHeight]);var C={gl:e,context:p,strings:r,next:_,current:w,draw:d,elements:o,buffer:a,shader:l,attributes:c.state,uniforms:s,framebuffer:u,extensions:n,timer:m,isBufferArgs:Ke},z={primTypes:Y,compareFuncs:Ye,blendFuncs:Qe,blendEquations:v,stencilOps:Xe,glTypes:W,orientationType:Je};x.optional((function(){C.isArrayLike=K})),y&&(z.backBuffer=[1029],z.drawBuffer=O(i.maxDrawbuffers,(function(e){return 0===e?[0]:O(e,(function(e){return 36064+e}))})));var F=0;function B(){var e=function(){var e=0,r=[],n=[];function i(){var r=[],n=[];return t((function(){r.push.apply(r,Oe(arguments))}),{def:function(){var t="v"+e++;return n.push(t),arguments.length>0&&(r.push(t,"="),r.push.apply(r,Oe(arguments)),r.push(";")),t},toString:function(){return ze([n.length>0?"var "+n.join(",")+";":"",ze(r)])}})}function a(){var e=i(),r=i(),n=e.toString,a=r.toString;function o(t,n){r(t,n,"=",e.def(t,n),";")}return t((function(){e.apply(e,Oe(arguments))}),{def:e.def,entry:e,exit:r,save:o,set:function(t,r,n){o(t,r),e(t,r,"=",n,";")},toString:function(){return n()+a()}})}var o=i(),f={};return{global:o,link:function(t){for(var i=0;i<n.length;++i)if(n[i]===t)return r[i];var a="g"+e++;return r.push(a),n.push(t),a},block:i,proc:function(e,r){var n=[];function i(){var e="a"+n.length;return n.push(e),e}r=r||0;for(var o=0;o<r;++o)i();var u=a(),s=u.toString;return f[e]=t(u,{arg:i,toString:function(){return ze(["function(",n.join(),"){",s(),"}"])}})},scope:a,cond:function(){var e=ze(arguments),r=a(),n=a(),i=r.toString,o=n.toString;return t(r,{then:function(){return r.apply(r,Oe(arguments)),this},else:function(){return n.apply(n,Oe(arguments)),this},toString:function(){var t=o();return t&&(t="else{"+t+"}"),ze(["if(",e,"){",i(),"}",t])}})},compile:function(){var e=['"use strict";',o,"return {"];Object.keys(f).forEach((function(t){e.push('"',t,'":',f[t].toString(),",")})),e.push("}");var t=ze(e).replace(/;/g,";\n").replace(/}/g,"}\n").replace(/{/g,"{\n");return Function.apply(null,r.concat(t)).apply(null,n)}}}(),n=e.link,i=e.global;e.id=F++,e.batchId="0";var a=n(C),o=e.shared={props:"a0"};Object.keys(C).forEach((function(e){o[e]=i.def(a,".",e)})),x.optional((function(){e.CHECK=n(x),e.commandStr=x.guessCommand(),e.command=n(e.commandStr),e.assert=function(e,t,r){e("if(!(",t,"))",this.CHECK,".commandRaise(",n(r),",",this.command,");")},z.invalidBlendCombinations=Ve}));var f=e.next={},u=e.current={};Object.keys(E).forEach((function(e){Array.isArray(w[e])&&(f[e]=i.def(o.next,".",e),u[e]=i.def(o.current,".",e))}));var s=e.constants={};Object.keys(z).forEach((function(e){s[e]=i.def(JSON.stringify(z[e]))})),e.invoke=function(t,r){switch(r.type){case 0:var i=["this",o.context,o.props,e.batchId];return t.def(n(r.data),".call(",i.slice(0,Math.max(r.data.length+1,4)),")");case 1:return t.def(o.props,r.data);case 2:return t.def(o.context,r.data);case 3:return t.def("this",r.data);case 4:return r.data.append(e,t),r.data.ref}},e.attribCache={};var l={};return e.scopeAttrib=function(e){var t=r.id(e);if(t in l)return l[t];var i=c.scope[t];return i||(i=c.scope[t]=new b),l[t]=n(i)},e}function M(e,t,n,f,s){var c=e.static,d=e.dynamic;x.optional((function(){var e=[Me,Pe,Re,Ie,Le,He,We,Ue,Be].concat(k);function t(t){Object.keys(t).forEach((function(t){x.command(e.indexOf(t)>=0,'unknown parameter "'+t+'"',s.commandStr)}))}t(c),t(d)}));var p=function(e,t){var r=e.static,n=e.dynamic;if(Me in r){var i=r[Me];return i?(i=u.getFramebuffer(i),x.command(i,"invalid framebuffer object"),rt((function(e,t){var r=e.link(i),n=e.shared;t.set(n.framebuffer,".next",r);var a=n.context;return t.set(a,"."+qe,r+".width"),t.set(a,"."+Ne,r+".height"),r}))):rt((function(e,t){var r=e.shared;t.set(r.framebuffer,".next","null");var n=r.context;return t.set(n,"."+qe,n+".drawingBufferWidth"),t.set(n,"."+Ne,n+".drawingBufferHeight"),"null"}))}if(Me in n){var a=n[Me];return nt(a,(function(e,t){var r=e.invoke(t,a),n=e.shared,i=n.framebuffer,o=t.def(i,".getFramebuffer(",r,")");x.optional((function(){e.assert(t,"!"+r+"||"+o,"invalid framebuffer object")})),t.set(i,".next",o);var f=n.context;return t.set(f,"."+qe,o+"?"+o+".width:"+f+".drawingBufferWidth"),t.set(f,"."+Ne,o+"?"+o+".height:"+f+".drawingBufferHeight"),o}))}return null}(e),m=function(e,t,r){var n=e.static,i=e.dynamic;function a(e){if(e in n){var a=n[e];x.commandType(a,"object","invalid "+e,r.commandStr);var o,f,u=!0,s=0|a.x,c=0|a.y;return"width"in a?(o=0|a.width,x.command(o>=0,"invalid "+e,r.commandStr)):u=!1,"height"in a?(f=0|a.height,x.command(f>=0,"invalid "+e,r.commandStr)):u=!1,new et(!u&&t&&t.thisDep,!u&&t&&t.contextDep,!u&&t&&t.propDep,(function(e,t){var r=e.shared.context,n=o;"width"in a||(n=t.def(r,".",qe,"-",s));var i=f;return"height"in a||(i=t.def(r,".",Ne,"-",c)),[s,c,n,i]}))}if(e in i){var l=i[e],d=nt(l,(function(t,r){var n=t.invoke(r,l);x.optional((function(){t.assert(r,n+"&&typeof "+n+'==="object"',"invalid "+e)}));var i=t.shared.context,a=r.def(n,".x|0"),o=r.def(n,".y|0"),f=r.def('"width" in ',n,"?",n,".width|0:","(",i,".",qe,"-",a,")"),u=r.def('"height" in ',n,"?",n,".height|0:","(",i,".",Ne,"-",o,")");return x.optional((function(){t.assert(r,f+">=0&&"+u+">=0","invalid "+e)})),[a,o,f,u]}));return t&&(d.thisDep=d.thisDep||t.thisDep,d.contextDep=d.contextDep||t.contextDep,d.propDep=d.propDep||t.propDep),d}return t?new et(t.thisDep,t.contextDep,t.propDep,(function(e,t){var r=e.shared.context;return[0,0,t.def(r,".",qe),t.def(r,".",Ne)]})):null}var o=a("viewport");if(o){var f=o;o=new et(o.thisDep,o.contextDep,o.propDep,(function(e,t){var r=f.append(e,t),n=e.shared.context;return t.set(n,".viewportWidth",r[2]),t.set(n,".viewportHeight",r[3]),r}))}return{viewport:o,scissor_box:a("scissor.box")}}(e,p,s),h=function(e,t){var r=e.static,n=e.dynamic,i=function(){if(Ie in r){var e=r[Ie];Ke(e)?e=o.getElements(o.create(e,!0)):e&&(e=o.getElements(e),x.command(e,"invalid elements",t.commandStr));var i=rt((function(t,r){if(e){var n=t.link(e);return t.ELEMENTS=n,n}return t.ELEMENTS=null,null}));return i.value=e,i}if(Ie in n){var a=n[Ie];return nt(a,(function(e,t){var r=e.shared,n=r.isBufferArgs,i=r.elements,o=e.invoke(t,a),f=t.def("null"),u=t.def(n,"(",o,")"),s=e.cond(u).then(f,"=",i,".createStream(",o,");").else(f,"=",i,".getElements(",o,");");return x.optional((function(){e.assert(s.else,"!"+o+"||"+f,"invalid elements")})),t.entry(s),t.exit(e.cond(u).then(i,".destroyStream(",f,");")),e.ELEMENTS=f,f}))}return null}();function a(e,a){if(e in r){var o=0|r[e];return x.command(!a||o>=0,"invalid "+e,t.commandStr),rt((function(e,t){return a&&(e.OFFSET=o),o}))}if(e in n){var f=n[e];return nt(f,(function(t,r){var n=t.invoke(r,f);return a&&(t.OFFSET=n,x.optional((function(){t.assert(r,n+">=0","invalid "+e)}))),n}))}return a&&i?rt((function(e,t){return e.OFFSET="0",0})):null}var f=a(He,!0);return{elements:i,primitive:function(){if(Le in r){var e=r[Le];return x.commandParameter(e,Y,"invalid primitve",t.commandStr),rt((function(t,r){return Y[e]}))}if(Le in n){var a=n[Le];return nt(a,(function(e,t){var r=e.constants.primTypes,n=e.invoke(t,a);return x.optional((function(){e.assert(t,n+" in "+r,"invalid primitive, must be one of "+Object.keys(Y))})),t.def(r,"[",n,"]")}))}return i?tt(i)?i.value?rt((function(e,t){return t.def(e.ELEMENTS,".primType")})):rt((function(){return 4})):new et(i.thisDep,i.contextDep,i.propDep,(function(e,t){var r=e.ELEMENTS;return t.def(r,"?",r,".primType:",4)})):null}(),count:function(){if(We in r){var e=0|r[We];return x.command("number"==typeof e&&e>=0,"invalid vertex count",t.commandStr),rt((function(){return e}))}if(We in n){var a=n[We];return nt(a,(function(e,t){var r=e.invoke(t,a);return x.optional((function(){e.assert(t,"typeof "+r+'==="number"&&'+r+">=0&&"+r+"===("+r+"|0)","invalid vertex count")})),r}))}if(i){if(tt(i)){if(i)return f?new et(f.thisDep,f.contextDep,f.propDep,(function(e,t){var r=t.def(e.ELEMENTS,".vertCount-",e.OFFSET);return x.optional((function(){e.assert(t,r+">=0","invalid vertex offset/element buffer too small")})),r})):rt((function(e,t){return t.def(e.ELEMENTS,".vertCount")}));var o=rt((function(){return-1}));return x.optional((function(){o.MISSING=!0})),o}var u=new et(i.thisDep||f.thisDep,i.contextDep||f.contextDep,i.propDep||f.propDep,(function(e,t){var r=e.ELEMENTS;return e.OFFSET?t.def(r,"?",r,".vertCount-",e.OFFSET,":-1"):t.def(r,"?",r,".vertCount:-1")}));return x.optional((function(){u.DYNAMIC=!0})),u}return null}(),instances:a(Ue,!1),offset:f}}(e,s),y=function(e,t){var r=e.static,n=e.dynamic,a={};return k.forEach((function(e){var o=j(e);function f(t,i){if(e in r){var f=t(r[e]);a[o]=rt((function(){return f}))}else if(e in n){var u=n[e];a[o]=nt(u,(function(e,t){return i(e,t,e.invoke(t,u))}))}}switch(e){case"cull.enable":case"blend.enable":case"dither":case"stencil.enable":case"depth.enable":case"scissor.enable":case"polygonOffset.enable":case"sample.alpha":case"sample.enable":case"depth.mask":return f((function(r){return x.commandType(r,"boolean",e,t.commandStr),r}),(function(t,r,n){return x.optional((function(){t.assert(r,"typeof "+n+'==="boolean"',"invalid flag "+e,t.commandStr)})),n}));case"depth.func":return f((function(r){return x.commandParameter(r,Ye,"invalid "+e,t.commandStr),Ye[r]}),(function(t,r,n){var i=t.constants.compareFuncs;return x.optional((function(){t.assert(r,n+" in "+i,"invalid "+e+", must be one of "+Object.keys(Ye))})),r.def(i,"[",n,"]")}));case"depth.range":return f((function(e){return x.command(K(e)&&2===e.length&&"number"==typeof e[0]&&"number"==typeof e[1]&&e[0]<=e[1],"depth range is 2d array",t.commandStr),e}),(function(e,t,r){return x.optional((function(){e.assert(t,e.shared.isArrayLike+"("+r+")&&"+r+".length===2&&typeof "+r+'[0]==="number"&&typeof '+r+'[1]==="number"&&'+r+"[0]<="+r+"[1]","depth range must be a 2d array")})),[t.def("+",r,"[0]"),t.def("+",r,"[1]")]}));case"blend.func":return f((function(e){x.commandType(e,"object","blend.func",t.commandStr);var r="srcRGB"in e?e.srcRGB:e.src,n="srcAlpha"in e?e.srcAlpha:e.src,i="dstRGB"in e?e.dstRGB:e.dst,a="dstAlpha"in e?e.dstAlpha:e.dst;return x.commandParameter(r,Qe,o+".srcRGB",t.commandStr),x.commandParameter(n,Qe,o+".srcAlpha",t.commandStr),x.commandParameter(i,Qe,o+".dstRGB",t.commandStr),x.commandParameter(a,Qe,o+".dstAlpha",t.commandStr),x.command(-1===Ve.indexOf(r+", "+i),"unallowed blending combination (srcRGB, dstRGB) = ("+r+", "+i+")",t.commandStr),[Qe[r],Qe[i],Qe[n],Qe[a]]}),(function(t,r,n){var i=t.constants.blendFuncs;function a(a,o){var f=r.def('"',a,o,'" in ',n,"?",n,".",a,o,":",n,".",a);return x.optional((function(){t.assert(r,f+" in "+i,"invalid "+e+"."+a+o+", must be one of "+Object.keys(Qe))})),f}x.optional((function(){t.assert(r,n+"&&typeof "+n+'==="object"',"invalid blend func, must be an object")}));var o=a("src","RGB"),f=a("dst","RGB");x.optional((function(){var e=t.constants.invalidBlendCombinations;t.assert(r,e+".indexOf("+o+'+", "+'+f+") === -1 ","unallowed blending combination for (srcRGB, dstRGB)")}));var u=r.def(i,"[",o,"]"),s=r.def(i,"[",a("src","Alpha"),"]");return[u,r.def(i,"[",f,"]"),s,r.def(i,"[",a("dst","Alpha"),"]")]}));case"blend.equation":return f((function(r){return"string"==typeof r?(x.commandParameter(r,v,"invalid "+e,t.commandStr),[v[r],v[r]]):"object"==typeof r?(x.commandParameter(r.rgb,v,e+".rgb",t.commandStr),x.commandParameter(r.alpha,v,e+".alpha",t.commandStr),[v[r.rgb],v[r.alpha]]):void x.commandRaise("invalid blend.equation",t.commandStr)}),(function(t,r,n){var i=t.constants.blendEquations,a=r.def(),o=r.def(),f=t.cond("typeof ",n,'==="string"');return x.optional((function(){function r(e,r,n){t.assert(e,n+" in "+i,"invalid "+r+", must be one of "+Object.keys(v))}r(f.then,e,n),t.assert(f.else,n+"&&typeof "+n+'==="object"',"invalid "+e),r(f.else,e+".rgb",n+".rgb"),r(f.else,e+".alpha",n+".alpha")})),f.then(a,"=",o,"=",i,"[",n,"];"),f.else(a,"=",i,"[",n,".rgb];",o,"=",i,"[",n,".alpha];"),r(f),[a,o]}));case"blend.color":return f((function(e){return x.command(K(e)&&4===e.length,"blend.color must be a 4d array",t.commandStr),O(4,(function(t){return+e[t]}))}),(function(e,t,r){return x.optional((function(){e.assert(t,e.shared.isArrayLike+"("+r+")&&"+r+".length===4","blend.color must be a 4d array")})),O(4,(function(e){return t.def("+",r,"[",e,"]")}))}));case"stencil.mask":return f((function(e){return x.commandType(e,"number",o,t.commandStr),0|e}),(function(e,t,r){return x.optional((function(){e.assert(t,"typeof "+r+'==="number"',"invalid stencil.mask")})),t.def(r,"|0")}));case"stencil.func":return f((function(r){x.commandType(r,"object",o,t.commandStr);var n=r.cmp||"keep",i=r.ref||0,a="mask"in r?r.mask:-1;return x.commandParameter(n,Ye,e+".cmp",t.commandStr),x.commandType(i,"number",e+".ref",t.commandStr),x.commandType(a,"number",e+".mask",t.commandStr),[Ye[n],i,a]}),(function(e,t,r){var n=e.constants.compareFuncs;return x.optional((function(){function i(){e.assert(t,Array.prototype.join.call(arguments,""),"invalid stencil.func")}i(r+"&&typeof ",r,'==="object"'),i('!("cmp" in ',r,")||(",r,".cmp in ",n,")")})),[t.def('"cmp" in ',r,"?",n,"[",r,".cmp]",":",7680),t.def(r,".ref|0"),t.def('"mask" in ',r,"?",r,".mask|0:-1")]}));case"stencil.opFront":case"stencil.opBack":return f((function(r){x.commandType(r,"object",o,t.commandStr);var n=r.fail||"keep",i=r.zfail||"keep",a=r.zpass||"keep";return x.commandParameter(n,Xe,e+".fail",t.commandStr),x.commandParameter(i,Xe,e+".zfail",t.commandStr),x.commandParameter(a,Xe,e+".zpass",t.commandStr),["stencil.opBack"===e?1029:1028,Xe[n],Xe[i],Xe[a]]}),(function(t,r,n){var i=t.constants.stencilOps;function a(a){return x.optional((function(){t.assert(r,'!("'+a+'" in '+n+")||("+n+"."+a+" in "+i+")","invalid "+e+"."+a+", must be one of "+Object.keys(Xe))})),r.def('"',a,'" in ',n,"?",i,"[",n,".",a,"]:",7680)}return x.optional((function(){t.assert(r,n+"&&typeof "+n+'==="object"',"invalid "+e)})),["stencil.opBack"===e?1029:1028,a("fail"),a("zfail"),a("zpass")]}));case"polygonOffset.offset":return f((function(e){x.commandType(e,"object",o,t.commandStr);var r=0|e.factor,n=0|e.units;return x.commandType(r,"number",o+".factor",t.commandStr),x.commandType(n,"number",o+".units",t.commandStr),[r,n]}),(function(t,r,n){return x.optional((function(){t.assert(r,n+"&&typeof "+n+'==="object"',"invalid "+e)})),[r.def(n,".factor|0"),r.def(n,".units|0")]}));case"cull.face":return f((function(e){var r=0;return"front"===e?r=1028:"back"===e&&(r=1029),x.command(!!r,o,t.commandStr),r}),(function(e,t,r){return x.optional((function(){e.assert(t,r+'==="front"||'+r+'==="back"',"invalid cull.face")})),t.def(r,'==="front"?',1028,":",1029)}));case"lineWidth":return f((function(e){return x.command("number"==typeof e&&e>=i.lineWidthDims[0]&&e<=i.lineWidthDims[1],"invalid line width, must be a positive number between "+i.lineWidthDims[0]+" and "+i.lineWidthDims[1],t.commandStr),e}),(function(e,t,r){return x.optional((function(){e.assert(t,"typeof "+r+'==="number"&&'+r+">="+i.lineWidthDims[0]+"&&"+r+"<="+i.lineWidthDims[1],"invalid line width")})),r}));case"frontFace":return f((function(e){return x.commandParameter(e,Je,o,t.commandStr),Je[e]}),(function(e,t,r){return x.optional((function(){e.assert(t,r+'==="cw"||'+r+'==="ccw"',"invalid frontFace, must be one of cw,ccw")})),t.def(r+'==="cw"?2304:2305')}));case"colorMask":return f((function(e){return x.command(K(e)&&4===e.length,"color.mask must be length 4 array",t.commandStr),e.map((function(e){return!!e}))}),(function(e,t,r){return x.optional((function(){e.assert(t,e.shared.isArrayLike+"("+r+")&&"+r+".length===4","invalid color.mask")})),O(4,(function(e){return"!!"+r+"["+e+"]"}))}));case"sample.coverage":return f((function(e){x.command("object"==typeof e&&e,o,t.commandStr);var r="value"in e?e.value:1,n=!!e.invert;return x.command("number"==typeof r&&r>=0&&r<=1,"sample.coverage.value must be a number between 0 and 1",t.commandStr),[r,n]}),(function(e,t,r){return x.optional((function(){e.assert(t,r+"&&typeof "+r+'==="object"',"invalid sample.coverage")})),[t.def('"value" in ',r,"?+",r,".value:1"),t.def("!!",r,".invert")]}))}})),a}(e,s),w=function(e){var t=e.static,n=e.dynamic;function i(e){if(e in t){var i=r.id(t[e]);x.optional((function(){l.shader($e[e],i,x.guessCommand())}));var a=rt((function(){return i}));return a.id=i,a}if(e in n){var o=n[e];return nt(o,(function(t,r){var n=t.invoke(r,o),i=r.def(t.shared.strings,".id(",n,")");return x.optional((function(){r(t.shared.shader,".shader(",$e[e],",",i,",",t.command,");")})),i}))}return null}var a,o=i(Re),f=i(Pe),u=null;return tt(o)&&tt(f)?(u=l.program(f.id,o.id),a=rt((function(e,t){return e.link(u)}))):a=new et(o&&o.thisDep||f&&f.thisDep,o&&o.contextDep||f&&f.contextDep,o&&o.propDep||f&&f.propDep,(function(e,t){var r,n=e.shared.shader;r=o?o.append(e,t):t.def(n,".",Re);var i=n+".program("+(f?f.append(e,t):t.def(n,".",Pe))+","+r;return x.optional((function(){i+=","+e.command})),t.def(i+")")})),{frag:o,vert:f,progVar:a,program:u}}(e);function _(e){var t=m[e];t&&(y[e]=t)}_("viewport"),_(j("scissor.box"));var A=Object.keys(y).length>0,S={framebuffer:p,draw:h,shader:w,state:y,dirty:A};return S.profile=function(e){var t,r=e.static,n=e.dynamic;if(Be in r){var i=!!r[Be];(t=rt((function(e,t){return i}))).enable=i}else if(Be in n){var a=n[Be];t=nt(a,(function(e,t){return e.invoke(t,a)}))}return t}(e),S.uniforms=function(e,t){var r=e.static,n=e.dynamic,i={};return Object.keys(r).forEach((function(e){var n,a=r[e];if("number"==typeof a||"boolean"==typeof a)n=rt((function(){return a}));else if("function"==typeof a){var o=a._reglType;"texture2d"===o||"textureCube"===o?n=rt((function(e){return e.link(a)})):"framebuffer"===o||"framebufferCube"===o?(x.command(a.color.length>0,'missing color attachment for framebuffer sent to uniform "'+e+'"',t.commandStr),n=rt((function(e){return e.link(a.color[0])}))):x.commandRaise('invalid data for uniform "'+e+'"',t.commandStr)}else K(a)?n=rt((function(t){return t.global.def("[",O(a.length,(function(r){return x.command("number"==typeof a[r]||"boolean"==typeof a[r],"invalid uniform "+e,t.commandStr),a[r]})),"]")})):x.commandRaise('invalid or missing data for uniform "'+e+'"',t.commandStr);n.value=a,i[e]=n})),Object.keys(n).forEach((function(e){var t=n[e];i[e]=nt(t,(function(e,r){return e.invoke(r,t)}))})),i}(n,s),S.attributes=function(e,t){var n=e.static,i=e.dynamic,o={};return Object.keys(n).forEach((function(e){var i=n[e],f=r.id(e),u=new b;if(Ke(i))u.state=1,u.buffer=a.getBuffer(a.create(i,34962,!1,!0)),u.type=0;else{var s=a.getBuffer(i);if(s)u.state=1,u.buffer=s,u.type=0;else if(x.command("object"==typeof i&&i,"invalid data for attribute "+e,t.commandStr),"constant"in i){var c=i.constant;u.buffer="null",u.state=2,"number"==typeof c?u.x=c:(x.command(K(c)&&c.length>0&&c.length<=4,"invalid constant for attribute "+e,t.commandStr),Fe.forEach((function(e,t){t<c.length&&(u[e]=c[t])})))}else{s=Ke(i.buffer)?a.getBuffer(a.create(i.buffer,34962,!1,!0)):a.getBuffer(i.buffer),x.command(!!s,'missing buffer for attribute "'+e+'"',t.commandStr);var l=0|i.offset;x.command(l>=0,'invalid offset for attribute "'+e+'"',t.commandStr);var d=0|i.stride;x.command(d>=0&&d<256,'invalid stride for attribute "'+e+'", must be integer betweeen [0, 255]',t.commandStr);var p=0|i.size;x.command(!("size"in i)||p>0&&p<=4,'invalid size for attribute "'+e+'", must be 1,2,3,4',t.commandStr);var m=!!i.normalized,h=0;"type"in i&&(x.commandParameter(i.type,W,"invalid type for attribute "+e,t.commandStr),h=W[i.type]);var v=0|i.divisor;"divisor"in i&&(x.command(0===v||g,'cannot specify divisor for attribute "'+e+'", instancing not supported',t.commandStr),x.command(v>=0,'invalid divisor for attribute "'+e+'"',t.commandStr)),x.optional((function(){var r=t.commandStr,n=["buffer","offset","divisor","normalized","type","size","stride"];Object.keys(i).forEach((function(t){x.command(n.indexOf(t)>=0,'unknown parameter "'+t+'" for attribute pointer "'+e+'" (valid parameters are '+n+")",r)}))})),u.buffer=s,u.state=1,u.size=p,u.normalized=m,u.type=h||s.dtype,u.offset=l,u.stride=d,u.divisor=v}}o[e]=rt((function(e,t){var r=e.attribCache;if(f in r)return r[f];var n={isStream:!1};return Object.keys(u).forEach((function(e){n[e]=u[e]})),u.buffer&&(n.buffer=e.link(u.buffer),n.type=n.type||n.buffer+".dtype"),r[f]=n,n}))})),Object.keys(i).forEach((function(e){var t=i[e];o[e]=nt(t,(function(r,n){var i=r.invoke(n,t),a=r.shared,o=r.constants,f=a.isBufferArgs,u=a.buffer;x.optional((function(){r.assert(n,i+"&&(typeof "+i+'==="object"||typeof '+i+'==="function")&&('+f+"("+i+")||"+u+".getBuffer("+i+")||"+u+".getBuffer("+i+".buffer)||"+f+"("+i+'.buffer)||("constant" in '+i+"&&(typeof "+i+'.constant==="number"||'+a.isArrayLike+"("+i+".constant))))",'invalid dynamic attribute "'+e+'"')}));var s={isStream:n.def(!1)},c=new b;c.state=1,Object.keys(c).forEach((function(e){s[e]=n.def(""+c[e])}));var l=s.buffer,d=s.type;function p(e){n(s[e],"=",i,".",e,"|0;")}return n("if(",f,"(",i,")){",s.isStream,"=true;",l,"=",u,".createStream(",34962,",",i,");",d,"=",l,".dtype;","}else{",l,"=",u,".getBuffer(",i,");","if(",l,"){",d,"=",l,".dtype;",'}else if("constant" in ',i,"){",s.state,"=",2,";","if(typeof "+i+'.constant === "number"){',s[Fe[0]],"=",i,".constant;",Fe.slice(1).map((function(e){return s[e]})).join("="),"=0;","}else{",Fe.map((function(e,t){return s[e]+"="+i+".constant.length>"+t+"?"+i+".constant["+t+"]:0;"})).join(""),"}}else{","if(",f,"(",i,".buffer)){",l,"=",u,".createStream(",34962,",",i,".buffer);","}else{",l,"=",u,".getBuffer(",i,".buffer);","}",d,'="type" in ',i,"?",o.glTypes,"[",i,".type]:",l,".dtype;",s.normalized,"=!!",i,".normalized;"),p("size"),p("offset"),p("stride"),p("divisor"),n("}}"),n.exit("if(",s.isStream,"){",u,".destroyStream(",l,");","}"),s}))})),o}(t,s),S.context=function(e){var t=e.static,r=e.dynamic,n={};return Object.keys(t).forEach((function(e){var r=t[e];n[e]=rt((function(e,t){return"number"==typeof r||"boolean"==typeof r?""+r:e.link(r)}))})),Object.keys(r).forEach((function(e){var t=r[e];n[e]=nt(t,(function(e,r){return e.invoke(r,t)}))})),n}(f),S}function P(e,t,r){var n=e.shared.context,i=e.scope();Object.keys(r).forEach((function(a){t.save(n,"."+a);var o=r[a];i(n,".",a,"=",o.append(e,t),";")})),t(i)}function R(e,t,r,n){var i,a=e.shared,o=a.gl,f=a.framebuffer;y&&(i=t.def(a.extensions,".webgl_draw_buffers"));var u,s=e.constants,c=s.drawBuffer,l=s.backBuffer;u=r?r.append(e,t):t.def(f,".next"),n||t("if(",u,"!==",f,".cur){"),t("if(",u,"){",o,".bindFramebuffer(",36160,",",u,".framebuffer);"),y&&t(i,".drawBuffersWEBGL(",c,"[",u,".colorAttachments.length]);"),t("}else{",o,".bindFramebuffer(",36160,",null);"),y&&t(i,".drawBuffersWEBGL(",l,");"),t("}",f,".cur=",u,";"),n||t("}")}function I(e,t,r){var n=e.shared,i=n.gl,a=e.current,o=e.next,f=n.current,u=n.next,s=e.cond(f,".dirty");k.forEach((function(t){var n,c,l=j(t);if(!(l in r.state))if(l in o){n=o[l],c=a[l];var d=O(w[l].length,(function(e){return s.def(n,"[",e,"]")}));s(e.cond(d.map((function(e,t){return e+"!=="+c+"["+t+"]"})).join("||")).then(i,".",E[l],"(",d,");",d.map((function(e,t){return c+"["+t+"]="+e})).join(";"),";"))}else{n=s.def(u,".",l);var p=e.cond(n,"!==",f,".",l);s(p),l in A?p(e.cond(n).then(i,".enable(",A[l],");").else(i,".disable(",A[l],");"),f,".",l,"=",n,";"):p(i,".",E[l],"(",n,");",f,".",l,"=",n,";")}})),0===Object.keys(r.state).length&&s(f,".dirty=false;"),t(s)}function L(e,t,r,n){var i=e.shared,a=e.current,o=i.current,f=i.gl;Ze(Object.keys(r)).forEach((function(i){var u=r[i];if(!n||n(u)){var s=u.append(e,t);if(A[i]){var c=A[i];tt(u)?t(f,s?".enable(":".disable(",c,");"):t(e.cond(s).then(f,".enable(",c,");").else(f,".disable(",c,");")),t(o,".",i,"=",s,";")}else if(K(s)){var l=a[i];t(f,".",E[i],"(",s,");",s.map((function(e,t){return l+"["+t+"]="+e})).join(";"),";")}else t(f,".",E[i],"(",s,");",o,".",i,"=",s,";")}}))}function H(e,t){g&&(e.instancing=t.def(e.shared.extensions,".angle_instanced_arrays"))}function U(e,t,r,n,i){var a,o,f,u=e.shared,s=e.stats,c=u.current,l=u.timer,d=r.profile;function p(){return"undefined"==typeof performance?"Date.now()":"performance.now()"}function h(e){e(a=t.def(),"=",p(),";"),"string"==typeof i?e(s,".count+=",i,";"):e(s,".count++;"),m&&(n?e(o=t.def(),"=",l,".getNumPendingQueries();"):e(l,".beginQuery(",s,");"))}function b(e){e(s,".cpuTime+=",p(),"-",a,";"),m&&(n?e(l,".pushScopeStats(",o,",",l,".getNumPendingQueries(),",s,");"):e(l,".endQuery();"))}function v(e){var r=t.def(c,".profile");t(c,".profile=",e,";"),t.exit(c,".profile=",r,";")}if(d){if(tt(d))return void(d.enable?(h(t),b(t.exit),v("true")):v("false"));v(f=d.append(e,t))}else f=t.def(c,".profile");var g=e.block();h(g),t("if(",f,"){",g,"}");var y=e.block();b(y),t.exit("if(",f,"){",y,"}")}function q(e,t,r,n,i){var a=e.shared;n.forEach((function(n){var o,f=n.name,u=r.attributes[f];if(u){if(!i(u))return;o=u.append(e,t)}else{if(!i(it))return;var s=e.scopeAttrib(f);x.optional((function(){e.assert(t,s+".state","missing attribute "+f)})),o={},Object.keys(new b).forEach((function(e){o[e]=t.def(s,".",e)}))}!function(r,n,i){var o=a.gl,f=t.def(r,".location"),u=t.def(a.attributes,"[",f,"]"),s=i.state,c=i.buffer,l=[i.x,i.y,i.z,i.w],d=["buffer","normalized","offset","stride"];function p(){t("if(!",u,".buffer){",o,".enableVertexAttribArray(",f,");}");var r,a=i.type;if(r=i.size?t.def(i.size,"||",n):n,t("if(",u,".type!==",a,"||",u,".size!==",r,"||",d.map((function(e){return u+"."+e+"!=="+i[e]})).join("||"),"){",o,".bindBuffer(",34962,",",c,".buffer);",o,".vertexAttribPointer(",[f,r,a,i.normalized,i.stride,i.offset],");",u,".type=",a,";",u,".size=",r,";",d.map((function(e){return u+"."+e+"="+i[e]+";"})).join(""),"}"),g){var s=i.divisor;t("if(",u,".divisor!==",s,"){",e.instancing,".vertexAttribDivisorANGLE(",[f,s],");",u,".divisor=",s,";}")}}function m(){t("if(",u,".buffer){",o,".disableVertexAttribArray(",f,");",u,".buffer=null;","}if(",Fe.map((function(e,t){return u+"."+e+"!=="+l[t]})).join("||"),"){",o,".vertexAttrib4f(",f,",",l,");",Fe.map((function(e,t){return u+"."+e+"="+l[t]+";"})).join(""),"}")}1===s?p():2===s?m():(t("if(",s,"===",1,"){"),p(),t("}else{"),m(),t("}"))}(e.link(n),function(e){switch(e){case 35664:case 35667:case 35671:return 2;case 35665:case 35668:case 35672:return 3;case 35666:case 35669:case 35673:return 4;default:return 1}}(n.info.type),o)}))}function N(e,t,n,i,a){for(var o,f=e.shared,u=f.gl,s=0;s<i.length;++s){var c,l=i[s],d=l.name,p=l.info.type,m=n.uniforms[d],h=e.link(l)+".location";if(m){if(!a(m))continue;if(tt(m)){var b=m.value;if(x.command(null!=b,'missing uniform "'+d+'"',e.commandStr),35678===p||35680===p){x.command("function"==typeof b&&(35678===p&&("texture2d"===b._reglType||"framebuffer"===b._reglType)||35680===p&&("textureCube"===b._reglType||"framebufferCube"===b._reglType)),"invalid texture for uniform "+d,e.commandStr);var v=e.link(b._texture||b.color[0]._texture);t(u,".uniform1i(",h,",",v+".bind());"),t.exit(v,".unbind();")}else if(35674===p||35675===p||35676===p){x.optional((function(){x.command(K(b),"invalid matrix for uniform "+d,e.commandStr),x.command(35674===p&&4===b.length||35675===p&&9===b.length||35676===p&&16===b.length,"invalid length for matrix uniform "+d,e.commandStr)}));var g=e.global.def("new Float32Array(["+Array.prototype.slice.call(b)+"])"),y=2;35675===p?y=3:35676===p&&(y=4),t(u,".uniformMatrix",y,"fv(",h,",false,",g,");")}else{switch(p){case 5126:x.commandType(b,"number","uniform "+d,e.commandStr),o="1f";break;case 35664:x.command(K(b)&&2===b.length,"uniform "+d,e.commandStr),o="2f";break;case 35665:x.command(K(b)&&3===b.length,"uniform "+d,e.commandStr),o="3f";break;case 35666:x.command(K(b)&&4===b.length,"uniform "+d,e.commandStr),o="4f";break;case 35670:x.commandType(b,"boolean","uniform "+d,e.commandStr),o="1i";break;case 5124:x.commandType(b,"number","uniform "+d,e.commandStr),o="1i";break;case 35671:case 35667:x.command(K(b)&&2===b.length,"uniform "+d,e.commandStr),o="2i";break;case 35672:case 35668:x.command(K(b)&&3===b.length,"uniform "+d,e.commandStr),o="3i";break;case 35673:case 35669:x.command(K(b)&&4===b.length,"uniform "+d,e.commandStr),o="4i"}t(u,".uniform",o,"(",h,",",K(b)?Array.prototype.slice.call(b):b,");")}continue}c=m.append(e,t)}else{if(!a(it))continue;c=t.def(f.uniforms,"[",r.id(d),"]")}35678===p?t("if(",c,"&&",c,'._reglType==="framebuffer"){',c,"=",c,".color[0];","}"):35680===p&&t("if(",c,"&&",c,'._reglType==="framebufferCube"){',c,"=",c,".color[0];","}"),x.optional((function(){function r(r,n){e.assert(t,r,'bad data or missing for uniform "'+d+'".  '+n)}function n(e){r("typeof "+c+'==="'+e+'"',"invalid type, expected "+e)}function i(t,n){r(f.isArrayLike+"("+c+")&&"+c+".length==="+t,"invalid vector, should have length "+t,e.commandStr)}function a(t){r("typeof "+c+'==="function"&&'+c+'._reglType==="texture'+(3553===t?"2d":"Cube")+'"',"invalid texture type",e.commandStr)}switch(p){case 5124:n("number");break;case 35667:i(2);break;case 35668:i(3);break;case 35669:i(4);break;case 5126:n("number");break;case 35664:i(2);break;case 35665:i(3);break;case 35666:i(4);break;case 35670:n("boolean");break;case 35671:i(2);break;case 35672:i(3);break;case 35673:case 35674:i(4);break;case 35675:i(9);break;case 35676:i(16);break;case 35678:a(3553);break;case 35680:a(34067)}}));var w=1;switch(p){case 35678:case 35680:var _=t.def(c,"._texture");t(u,".uniform1i(",h,",",_,".bind());"),t.exit(_,".unbind();");continue;case 5124:case 35670:o="1i";break;case 35667:case 35671:o="2i",w=2;break;case 35668:case 35672:o="3i",w=3;break;case 35669:case 35673:o="4i",w=4;break;case 5126:o="1f";break;case 35664:o="2f",w=2;break;case 35665:o="3f",w=3;break;case 35666:o="4f",w=4;break;case 35674:o="Matrix2fv";break;case 35675:o="Matrix3fv";break;case 35676:o="Matrix4fv"}if(t(u,".uniform",o,"(",h,","),"M"===o.charAt(0)){var k=Math.pow(p-35674+2,2),A=e.global.def("new Float32Array(",k,")");t("false,(Array.isArray(",c,")||",c," instanceof Float32Array)?",c,":(",O(k,(function(e){return A+"["+e+"]="+c+"["+e+"]"})),",",A,")")}else t(w>1?O(w,(function(e){return c+"["+e+"]"})):c);t(");")}}function G(e,t,r,n){var i=e.shared,a=i.gl,o=i.draw,f=n.draw,u=function(){var i,u=f.elements,s=t;return u?((u.contextDep&&n.contextDynamic||u.propDep)&&(s=r),i=u.append(e,s)):i=s.def(o,".",Ie),i&&s("if("+i+")"+a+".bindBuffer(34963,"+i+".buffer.buffer);"),i}();function s(i){var a=f[i];return a?a.contextDep&&n.contextDynamic||a.propDep?a.append(e,r):a.append(e,t):t.def(o,".",i)}var c,l,d=s(Le),p=s(He),m=function(){var i,a=f.count,u=t;return a?((a.contextDep&&n.contextDynamic||a.propDep)&&(u=r),i=a.append(e,u),x.optional((function(){a.MISSING&&e.assert(t,"false","missing vertex count"),a.DYNAMIC&&e.assert(u,i+">=0","missing vertex count")}))):(i=u.def(o,".",We),x.optional((function(){e.assert(u,i+">=0","missing vertex count")}))),i}();if("number"==typeof m){if(0===m)return}else r("if(",m,"){"),r.exit("}");g&&(c=s(Ue),l=e.instancing);var h=u+".type",b=f.elements&&tt(f.elements);function v(){function e(){r(l,".drawElementsInstancedANGLE(",[d,m,h,p+"<<(("+h+"-5121)>>1)",c],");")}function t(){r(l,".drawArraysInstancedANGLE(",[d,p,m,c],");")}u?b?e():(r("if(",u,"){"),e(),r("}else{"),t(),r("}")):t()}function y(){function e(){r(a+".drawElements("+[d,m,h,p+"<<(("+h+"-5121)>>1)"]+");")}function t(){r(a+".drawArrays("+[d,p,m]+");")}u?b?e():(r("if(",u,"){"),e(),r("}else{"),t(),r("}")):t()}g&&("number"!=typeof c||c>=0)?"string"==typeof c?(r("if(",c,">0){"),v(),r("}else if(",c,"<0){"),y(),r("}")):v():y()}function Q(e,t,r,n,i){var a=B(),o=a.proc("body",i);return x.optional((function(){a.commandStr=t.commandStr,a.command=a.link(t.commandStr)})),g&&(a.instancing=o.def(a.shared.extensions,".angle_instanced_arrays")),e(a,o,r,n),a.compile().body}function V(e,t,r,n){H(e,t),q(e,t,r,n.attributes,(function(){return!0})),N(e,t,r,n.uniforms,(function(){return!0})),G(e,t,t,r)}function X(e,t,r,n){function i(){return!0}e.batchId="a1",H(e,t),q(e,t,r,n.attributes,i),N(e,t,r,n.uniforms,i),G(e,t,t,r)}function $(e,t,r,n){H(e,t);var i=r.contextDep,a=t.def(),o=t.def();e.shared.props=o,e.batchId=a;var f=e.scope(),u=e.scope();function s(e){return e.contextDep&&i||e.propDep}function c(e){return!s(e)}if(t(f.entry,"for(",a,"=0;",a,"<","a1",";++",a,"){",o,"=","a0","[",a,"];",u,"}",f.exit),r.needsContext&&P(e,u,r.context),r.needsFramebuffer&&R(e,u,r.framebuffer),L(e,u,r.state,s),r.profile&&s(r.profile)&&U(e,u,r,!1,!0),n)q(e,f,r,n.attributes,c),q(e,u,r,n.attributes,s),N(e,f,r,n.uniforms,c),N(e,u,r,n.uniforms,s),G(e,f,u,r);else{var l=e.global.def("{}"),d=r.shader.progVar.append(e,u),p=u.def(d,".id"),m=u.def(l,"[",p,"]");u(e.shared.gl,".useProgram(",d,".program);","if(!",m,"){",m,"=",l,"[",p,"]=",e.link((function(t){return Q(X,e,r,t,2)})),"(",d,");}",m,".call(this,a0[",a,"],",a,");")}}function J(e,t,r){var n=t.static[r];if(n&&function(e){if("object"==typeof e&&!K(e)){for(var t=Object.keys(e),r=0;r<t.length;++r)if(S.isDynamic(e[t[r]]))return!0;return!1}}(n)){var i=e.global,a=Object.keys(n),o=!1,f=!1,u=!1,s=e.global.def("{}");a.forEach((function(t){var r=n[t];if(S.isDynamic(r)){"function"==typeof r&&(r=n[t]=S.unbox(r));var a=nt(r,null);o=o||a.thisDep,u=u||a.propDep,f=f||a.contextDep}else{switch(i(s,".",t,"="),typeof r){case"number":i(r);break;case"string":i('"',r,'"');break;case"object":Array.isArray(r)&&i("[",r.join(),"]");break;default:i(e.link(r))}i(";")}})),t.dynamic[r]=new S.DynamicVariable(4,{thisDep:o,contextDep:f,propDep:u,ref:s,append:function(e,t){a.forEach((function(r){var i=n[r];if(S.isDynamic(i)){var a=e.invoke(t,i);t(s,".",r,"=",a,";")}}))}}),delete t.static[r]}}return{next:_,current:w,procs:function(){var e=B(),t=e.proc("poll"),r=e.proc("refresh"),n=e.block();t(n),r(n);var a,o=e.shared,f=o.gl,u=o.next,s=o.current;n(s,".dirty=false;"),R(e,t),R(e,r,null,!0),g&&(a=e.link(g));for(var c=0;c<i.maxAttributes;++c){var l=r.def(o.attributes,"[",c,"]"),d=e.cond(l,".buffer");d.then(f,".enableVertexAttribArray(",c,");",f,".bindBuffer(",34962,",",l,".buffer.buffer);",f,".vertexAttribPointer(",c,",",l,".size,",l,".type,",l,".normalized,",l,".stride,",l,".offset);").else(f,".disableVertexAttribArray(",c,");",f,".vertexAttrib4f(",c,",",l,".x,",l,".y,",l,".z,",l,".w);",l,".buffer=null;"),r(d),g&&r(a,".vertexAttribDivisorANGLE(",c,",",l,".divisor);")}return Object.keys(A).forEach((function(i){var a=A[i],o=n.def(u,".",i),c=e.block();c("if(",o,"){",f,".enable(",a,")}else{",f,".disable(",a,")}",s,".",i,"=",o,";"),r(c),t("if(",o,"!==",s,".",i,"){",c,"}")})),Object.keys(E).forEach((function(i){var a,o,c=E[i],l=w[i],d=e.block();if(d(f,".",c,"("),K(l)){var p=l.length;a=e.global.def(u,".",i),o=e.global.def(s,".",i),d(O(p,(function(e){return a+"["+e+"]"})),");",O(p,(function(e){return o+"["+e+"]="+a+"["+e+"];"})).join("")),t("if(",O(p,(function(e){return a+"["+e+"]!=="+o+"["+e+"]"})).join("||"),"){",d,"}")}else a=n.def(u,".",i),o=n.def(s,".",i),d(a,");",s,".",i,"=",a,";"),t("if(",a,"!==",o,"){",d,"}");r(d)})),e.compile()}(),compile:function(e,t,n,i,a){var o=B();o.stats=o.link(a),Object.keys(t.static).forEach((function(e){J(o,t,e)})),Ge.forEach((function(t){J(o,e,t)}));var f=M(e,t,n,i,o);return function(e,t){var r=e.proc("draw",1);H(e,r),P(e,r,t.context),R(e,r,t.framebuffer),I(e,r,t),L(e,r,t.state),U(e,r,t,!1,!0);var n=t.shader.progVar.append(e,r);if(r(e.shared.gl,".useProgram(",n,".program);"),t.shader.program)V(e,r,t,t.shader.program);else{var i=e.global.def("{}"),a=r.def(n,".id"),o=r.def(i,"[",a,"]");r(e.cond(o).then(o,".call(this,a0);").else(o,"=",i,"[",a,"]=",e.link((function(r){return Q(V,e,t,r,1)})),"(",n,");",o,".call(this,a0);"))}Object.keys(t.state).length>0&&r(e.shared.current,".dirty=true;")}(o,f),function(e,t){var n=e.proc("scope",3);e.batchId="a2";var i=e.shared,a=i.current;function o(r){var a=t.shader[r];a&&n.set(i.shader,"."+r,a.append(e,n))}P(e,n,t.context),t.framebuffer&&t.framebuffer.append(e,n),Ze(Object.keys(t.state)).forEach((function(r){var a=t.state[r].append(e,n);K(a)?a.forEach((function(t,i){n.set(e.next[r],"["+i+"]",t)})):n.set(i.next,"."+r,a)})),U(e,n,t,!0,!0),[Ie,He,We,Ue,Le].forEach((function(r){var a=t.draw[r];a&&n.set(i.draw,"."+r,""+a.append(e,n))})),Object.keys(t.uniforms).forEach((function(a){n.set(i.uniforms,"["+r.id(a)+"]",t.uniforms[a].append(e,n))})),Object.keys(t.attributes).forEach((function(r){var i=t.attributes[r].append(e,n),a=e.scopeAttrib(r);Object.keys(new b).forEach((function(e){n.set(a,"."+e,i[e])}))})),o(Pe),o(Re),Object.keys(t.state).length>0&&(n(a,".dirty=true;"),n.exit(a,".dirty=true;")),n("a1(",e.shared.context,",a0,",e.batchId,");")}(o,f),function(e,t){var r=e.proc("batch",2);e.batchId="0",H(e,r);var n=!1,i=!0;Object.keys(t.context).forEach((function(e){n=n||t.context[e].propDep})),n||(P(e,r,t.context),i=!1);var a=t.framebuffer,o=!1;function f(e){return e.contextDep&&n||e.propDep}a?(a.propDep?n=o=!0:a.contextDep&&n&&(o=!0),o||R(e,r,a)):R(e,r,null),t.state.viewport&&t.state.viewport.propDep&&(n=!0),I(e,r,t),L(e,r,t.state,(function(e){return!f(e)})),t.profile&&f(t.profile)||U(e,r,t,!1,"a1"),t.contextDep=n,t.needsContext=i,t.needsFramebuffer=o;var u=t.shader.progVar;if(u.contextDep&&n||u.propDep)$(e,r,t,null);else{var s=u.append(e,r);if(r(e.shared.gl,".useProgram(",s,".program);"),t.shader.program)$(e,r,t,t.shader.program);else{var c=e.global.def("{}"),l=r.def(s,".id"),d=r.def(c,"[",l,"]");r(e.cond(d).then(d,".call(this,a0,a1);").else(d,"=",c,"[",l,"]=",e.link((function(r){return Q($,e,t,r,2)})),"(",s,");",d,".call(this,a0,a1);"))}}Object.keys(t.state).length>0&&r(e.shared.current,".dirty=true;")}(o,f),o.compile()}}}var ot=function(e,t){if(!t.ext_disjoint_timer_query)return null;var r=[];function n(e){r.push(e)}var i=[];function a(){this.startQueryIndex=-1,this.endQueryIndex=-1,this.sum=0,this.stats=null}var o=[];function f(e){o.push(e)}var u=[];function s(e,t,r){var n=o.pop()||new a;n.startQueryIndex=e,n.endQueryIndex=t,n.sum=0,n.stats=r,u.push(n)}var c=[],l=[];return{beginQuery:function(e){var n=r.pop()||t.ext_disjoint_timer_query.createQueryEXT();t.ext_disjoint_timer_query.beginQueryEXT(35007,n),i.push(n),s(i.length-1,i.length,e)},endQuery:function(){t.ext_disjoint_timer_query.endQueryEXT(35007)},pushScopeStats:s,update:function(){var e,r,a=i.length;if(0!==a){l.length=Math.max(l.length,a+1),c.length=Math.max(c.length,a+1),c[0]=0,l[0]=0;var o=0;for(e=0,r=0;r<i.length;++r){var s=i[r];t.ext_disjoint_timer_query.getQueryObjectEXT(s,34919)?(o+=t.ext_disjoint_timer_query.getQueryObjectEXT(s,34918),n(s)):i[e++]=s,c[r+1]=o,l[r+1]=e}for(i.length=e,e=0,r=0;r<u.length;++r){var d=u[r],p=d.startQueryIndex,m=d.endQueryIndex;d.sum+=c[m]-c[p];var h=l[p],b=l[m];b===h?(d.stats.gpuTime+=d.sum/1e6,f(d)):(d.startQueryIndex=h,d.endQueryIndex=b,u[e++]=d)}u.length=e}},getNumPendingQueries:function(){return i.length},clear:function(){r.push.apply(r,i);for(var e=0;e<r.length;e++)t.ext_disjoint_timer_query.deleteQueryEXT(r[e]);i.length=0,r.length=0},restore:function(){i.length=0,r.length=0}}};function ft(e,t){for(var r=0;r<e.length;++r)if(e[r]===t)return r;return-1}return function(r){var n=C(r);if(!n)return null;var i=n.gl,a=i.getContextAttributes(),o=i.isContextLost(),f=function(e,t){var r={};function n(t){x.type(t,"string","extension name must be string");var n,i=t.toLowerCase();try{n=r[i]=e.getExtension(i)}catch(e){}return!!n}for(var i=0;i<t.extensions.length;++i){var a=t.extensions[i];if(!n(a))return t.onDestroy(),t.onDone('"'+a+'" extension is not supported by the current WebGL context, try upgrading your system or a different browser'),null}return t.optionalExtensions.forEach(n),{extensions:r,restore:function(){Object.keys(r).forEach((function(e){if(r[e]&&!n(e))throw new Error("(regl): error restoring extension "+e)}))}}}(i,n);if(!f)return null;var u,s,c=(u={"":0},s=[""],{id:function(e){var t=u[e];return t||(t=u[e]=s.length,s.push(e),t)},str:function(e){return s[e]}}),l={bufferCount:0,elementsCount:0,framebufferCount:0,shaderCount:0,textureCount:0,cubeCount:0,renderbufferCount:0,maxTextureUnits:0},d=f.extensions,p=ot(0,d),m=j(),h=i.drawingBufferWidth,b=i.drawingBufferHeight,v={tick:0,time:0,viewportWidth:h,viewportHeight:b,framebufferWidth:h,framebufferHeight:b,drawingBufferWidth:h,drawingBufferHeight:b,pixelRatio:n.pixelRatio},g=function(e,t){var r=1;t.ext_texture_filter_anisotropic&&(r=e.getParameter(34047));var n=1,i=1;t.webgl_draw_buffers&&(n=e.getParameter(34852),i=e.getParameter(36063));var a=!!t.oes_texture_float;if(a){var o=e.createTexture();e.bindTexture(3553,o),e.texImage2D(3553,0,6408,1,1,0,6408,5126,null);var f=e.createFramebuffer();if(e.bindFramebuffer(36160,f),e.framebufferTexture2D(36160,36064,3553,o,0),e.bindTexture(3553,null),36053!==e.checkFramebufferStatus(36160))a=!1;else{e.viewport(0,0,1,1),e.clearColor(1,0,0,1),e.clear(16384);var u=B.allocType(5126,4);e.readPixels(0,0,1,1,6408,5126,u),e.getError()?a=!1:(e.deleteFramebuffer(f),e.deleteTexture(o),a=1===u[0]),B.freeType(u)}}var s=!0;if("undefined"==typeof navigator||!(/MSIE/.test(navigator.userAgent)||/Trident\//.test(navigator.appVersion)||/Edge/.test(navigator.userAgent))){var c=e.createTexture(),l=B.allocType(5121,36);e.activeTexture(33984),e.bindTexture(34067,c),e.texImage2D(34069,0,6408,3,3,0,6408,5121,l),B.freeType(l),e.bindTexture(34067,null),e.deleteTexture(c),s=!e.getError()}return{colorBits:[e.getParameter(3410),e.getParameter(3411),e.getParameter(3412),e.getParameter(3413)],depthBits:e.getParameter(3414),stencilBits:e.getParameter(3415),subpixelBits:e.getParameter(3408),extensions:Object.keys(t).filter((function(e){return!!t[e]})),maxAnisotropic:r,maxDrawbuffers:n,maxColorAttachments:i,pointSizeDims:e.getParameter(33901),lineWidthDims:e.getParameter(33902),maxViewportDims:e.getParameter(3386),maxCombinedTextureUnits:e.getParameter(35661),maxCubeMapSize:e.getParameter(34076),maxRenderbufferSize:e.getParameter(34024),maxTextureUnits:e.getParameter(34930),maxTextureSize:e.getParameter(3379),maxAttributes:e.getParameter(34921),maxVertexUniforms:e.getParameter(36347),maxVertexTextureUnits:e.getParameter(35660),maxVaryingVectors:e.getParameter(36348),maxFragmentUniforms:e.getParameter(36349),glsl:e.getParameter(35724),renderer:e.getParameter(7937),vendor:e.getParameter(7936),version:e.getParameter(7938),readFloat:a,npotTextureCube:s}}(i,d),y=function(e,t,r,n){for(var i=r.maxAttributes,a=new Array(i),o=0;o<i;++o)a[o]=new De;return{Record:De,scope:{},state:a}}(0,0,g),w=function(t,r,n,i){var a=0,o={};function f(e){this.id=a++,this.buffer=t.createBuffer(),this.type=e,this.usage=35044,this.byteLength=0,this.dimension=1,this.dtype=5121,this.persistentData=null,n.profile&&(this.stats={size:0})}f.prototype.bind=function(){t.bindBuffer(this.type,this.buffer)},f.prototype.destroy=function(){l(this)};var u=[];function s(e,r,n){e.byteLength=r.byteLength,t.bufferData(e.type,r,n)}function c(t,r,n,i,a,o){var f,u;if(t.usage=n,Array.isArray(r)){if(t.dtype=i||5126,r.length>0)if(Array.isArray(r[0])){f=q(r);for(var c=1,l=1;l<f.length;++l)c*=f[l];t.dimension=c,s(t,u=U(r,f,t.dtype),n),o?t.persistentData=u:B.freeType(u)}else if("number"==typeof r[0]){t.dimension=a;var d=B.allocType(t.dtype,r.length);Q(d,r),s(t,d,n),o?t.persistentData=d:B.freeType(d)}else e(r[0])?(t.dimension=r[0].length,t.dtype=i||G(r[0])||5126,s(t,u=U(r,[r.length,r[0].length],t.dtype),n),o?t.persistentData=u:B.freeType(u)):x.raise("invalid buffer data")}else if(e(r))t.dtype=i||G(r),t.dimension=a,s(t,r,n),o&&(t.persistentData=new Uint8Array(new Uint8Array(r.buffer)));else if(M(r)){f=r.shape;var p=r.stride,m=r.offset,h=0,b=0,v=0,g=0;1===f.length?(h=f[0],b=1,v=p[0],g=0):2===f.length?(h=f[0],b=f[1],v=p[0],g=p[1]):x.raise("invalid shape"),t.dtype=i||G(r.data)||5126,t.dimension=b;var y=B.allocType(t.dtype,h*b);V(y,r.data,h,b,v,g,m),s(t,y,n),o?t.persistentData=y:B.freeType(y)}else r instanceof ArrayBuffer?(t.dtype=5121,t.dimension=a,s(t,r,n),o&&(t.persistentData=new Uint8Array(new Uint8Array(r)))):x.raise("invalid buffer data")}function l(e){r.bufferCount--;for(var n=0;n<i.state.length;++n){var a=i.state[n];a.buffer===e&&(t.disableVertexAttribArray(n),a.buffer=null)}var f=e.buffer;x(f,"buffer must not be deleted already"),t.deleteBuffer(f),e.buffer=null,delete o[e.id]}return n.profile&&(r.getTotalBufferSize=function(){var e=0;return Object.keys(o).forEach((function(t){e+=o[t].stats.size})),e}),{create:function(i,a,u,s){r.bufferCount++;var d=new f(a);function p(r){var i=35044,a=null,o=0,f=0,u=1;return Array.isArray(r)||e(r)||M(r)||r instanceof ArrayBuffer?a=r:"number"==typeof r?o=0|r:r&&(x.type(r,"object","buffer arguments must be an object, a number or an array"),"data"in r&&(x(null===a||Array.isArray(a)||e(a)||M(a),"invalid data for buffer"),a=r.data),"usage"in r&&(x.parameter(r.usage,H,"invalid buffer usage"),i=H[r.usage]),"type"in r&&(x.parameter(r.type,W,"invalid buffer type"),f=W[r.type]),"dimension"in r&&(x.type(r.dimension,"number","invalid dimension"),u=0|r.dimension),"length"in r&&(x.nni(o,"buffer length must be a nonnegative integer"),o=0|r.length)),d.bind(),a?c(d,a,i,f,u,s):(o&&t.bufferData(d.type,o,i),d.dtype=f||5121,d.usage=i,d.dimension=u,d.byteLength=o),n.profile&&(d.stats.size=d.byteLength*N[d.dtype]),p}function m(e,r){x(r+e.byteLength<=d.byteLength,"invalid buffer subdata call, buffer is too small.  Can't write data of size "+e.byteLength+" starting from offset "+r+" to a buffer of size "+d.byteLength),t.bufferSubData(d.type,r,e)}return o[d.id]=d,u||p(i),p._reglType="buffer",p._buffer=d,p.subdata=function(t,r){var n,i=0|(r||0);if(d.bind(),e(t)||t instanceof ArrayBuffer)m(t,i);else if(Array.isArray(t)){if(t.length>0)if("number"==typeof t[0]){var a=B.allocType(d.dtype,t.length);Q(a,t),m(a,i),B.freeType(a)}else if(Array.isArray(t[0])||e(t[0])){n=q(t);var o=U(t,n,d.dtype);m(o,i),B.freeType(o)}else x.raise("invalid buffer data")}else if(M(t)){n=t.shape;var f=t.stride,u=0,s=0,c=0,l=0;1===n.length?(u=n[0],s=1,c=f[0],l=0):2===n.length?(u=n[0],s=n[1],c=f[0],l=f[1]):x.raise("invalid shape");var h=Array.isArray(t.data)?d.dtype:G(t.data),b=B.allocType(h,u*s);V(b,t.data,u,s,c,l,t.offset),m(b,i),B.freeType(b)}else x.raise("invalid data for buffer subdata");return p},n.profile&&(p.stats=d.stats),p.destroy=function(){l(d)},p},createStream:function(e,t){var r=u.pop();return r||(r=new f(e)),r.bind(),c(r,t,35040,0,1,!1),r},destroyStream:function(e){u.push(e)},clear:function(){P(o).forEach(l),u.forEach(l)},getBuffer:function(e){return e&&e._buffer instanceof f?e._buffer:null},restore:function(){P(o).forEach((function(e){e.buffer=t.createBuffer(),t.bindBuffer(e.type,e.buffer),t.bufferData(e.type,e.persistentData||e.byteLength,e.usage)}))},_initBuffer:c}}(i,l,n,y),_=function(t,r,n,i){var a={},o=0,f={uint8:5121,uint16:5123};function u(e){this.id=o++,a[this.id]=this,this.buffer=e,this.primType=4,this.vertCount=0,this.type=0}r.oes_element_index_uint&&(f.uint32=5125),u.prototype.bind=function(){this.buffer.bind()};var s=[];function c(i,a,o,f,u,s,c){if(i.buffer.bind(),a){var l=c;c||e(a)&&(!M(a)||e(a.data))||(l=r.oes_element_index_uint?5125:5123),n._initBuffer(i.buffer,a,o,l,3)}else t.bufferData(34963,s,o),i.buffer.dtype=d||5121,i.buffer.usage=o,i.buffer.dimension=3,i.buffer.byteLength=s;var d=c;if(!c){switch(i.buffer.dtype){case 5121:case 5120:d=5121;break;case 5123:case 5122:d=5123;break;case 5125:case 5124:d=5125;break;default:x.raise("unsupported type for element array")}i.buffer.dtype=d}i.type=d,x(5125!==d||!!r.oes_element_index_uint,"32 bit element buffers not supported, enable oes_element_index_uint first");var p=u;p<0&&(p=i.buffer.byteLength,5123===d?p>>=1:5125===d&&(p>>=2)),i.vertCount=p;var m=f;if(f<0){m=4;var h=i.buffer.dimension;1===h&&(m=0),2===h&&(m=1),3===h&&(m=4)}i.primType=m}function l(e){i.elementsCount--,x(null!==e.buffer,"must not double destroy elements"),delete a[e.id],e.buffer.destroy(),e.buffer=null}return{create:function(t,r){var a=n.create(null,34963,!0),o=new u(a._buffer);function s(t){if(t)if("number"==typeof t)a(t),o.primType=4,o.vertCount=0|t,o.type=5121;else{var r=null,n=35044,i=-1,u=-1,l=0,d=0;Array.isArray(t)||e(t)||M(t)?r=t:(x.type(t,"object","invalid arguments for elements"),"data"in t&&(r=t.data,x(Array.isArray(r)||e(r)||M(r),"invalid data for element buffer")),"usage"in t&&(x.parameter(t.usage,H,"invalid element buffer usage"),n=H[t.usage]),"primitive"in t&&(x.parameter(t.primitive,Y,"invalid element buffer primitive"),i=Y[t.primitive]),"count"in t&&(x("number"==typeof t.count&&t.count>=0,"invalid vertex count for elements"),u=0|t.count),"type"in t&&(x.parameter(t.type,f,"invalid buffer type"),d=f[t.type]),"length"in t?l=0|t.length:(l=u,5123===d||5122===d?l*=2:5125!==d&&5124!==d||(l*=4))),c(o,r,n,i,u,l,d)}else a(),o.primType=4,o.vertCount=0,o.type=5121;return s}return i.elementsCount++,s(t),s._reglType="elements",s._elements=o,s.subdata=function(e,t){return a.subdata(e,t),s},s.destroy=function(){l(o)},s},createStream:function(e){var t=s.pop();return t||(t=new u(n.create(null,34963,!0,!1)._buffer)),c(t,e,35040,-1,-1,0,0),t},destroyStream:function(e){s.push(e)},getElements:function(e){return"function"==typeof e&&e._elements instanceof u?e._elements:null},clear:function(){P(a).forEach(l)}}}(i,d,w,l),k=function(e,t,r,n){var i={},a={};function o(e,t,r,n){this.name=e,this.id=t,this.location=r,this.info=n}function f(e,t){for(var r=0;r<e.length;++r)if(e[r].id===t.id)return void(e[r].location=t.location);e.push(t)}function u(r,n,o){var f=35632===r?i:a,u=f[n];if(!u){var s=t.str(n);u=e.createShader(r),e.shaderSource(u,s),e.compileShader(u),x.shaderError(e,u,s,r,o),f[n]=u}return u}var s={},c=[],l=0;function d(e,t){this.id=l++,this.fragId=e,this.vertId=t,this.program=null,this.uniforms=[],this.attributes=[],n.profile&&(this.stats={uniformsCount:0,attributesCount:0})}function p(r,i){var a,s,c=u(35632,r.fragId),l=u(35633,r.vertId),d=r.program=e.createProgram();e.attachShader(d,c),e.attachShader(d,l),e.linkProgram(d),x.linkError(e,d,t.str(r.fragId),t.str(r.vertId),i);var p=e.getProgramParameter(d,35718);n.profile&&(r.stats.uniformsCount=p);var m=r.uniforms;for(a=0;a<p;++a)if(s=e.getActiveUniform(d,a))if(s.size>1)for(var h=0;h<s.size;++h){var b=s.name.replace("[0]","["+h+"]");f(m,new o(b,t.id(b),e.getUniformLocation(d,b),s))}else f(m,new o(s.name,t.id(s.name),e.getUniformLocation(d,s.name),s));var v=e.getProgramParameter(d,35721);n.profile&&(r.stats.attributesCount=v);var g=r.attributes;for(a=0;a<v;++a)(s=e.getActiveAttrib(d,a))&&f(g,new o(s.name,t.id(s.name),e.getAttribLocation(d,s.name),s))}return n.profile&&(r.getMaxUniformsCount=function(){var e=0;return c.forEach((function(t){t.stats.uniformsCount>e&&(e=t.stats.uniformsCount)})),e},r.getMaxAttributesCount=function(){var e=0;return c.forEach((function(t){t.stats.attributesCount>e&&(e=t.stats.attributesCount)})),e}),{clear:function(){var t=e.deleteShader.bind(e);P(i).forEach(t),i={},P(a).forEach(t),a={},c.forEach((function(t){e.deleteProgram(t.program)})),c.length=0,s={},r.shaderCount=0},program:function(e,t,n){x.command(e>=0,"missing vertex shader",n),x.command(t>=0,"missing fragment shader",n);var i=s[t];i||(i=s[t]={});var a=i[e];return a||(a=new d(t,e),r.shaderCount++,p(a,n),i[e]=a,c.push(a)),a},restore:function(){i={},a={};for(var e=0;e<c.length;++e)p(c[e])},shader:u,frag:-1,vert:-1}}(i,c,l,n),A=we(i,d,g,(function(){O.procs.poll()}),v,l,n),T=function(e,t,r,n,i){var a={rgba4:32854,rgb565:36194,"rgb5 a1":32855,depth:33189,stencil:36168,"depth stencil":34041};t.ext_srgb&&(a.srgba=35907),t.ext_color_buffer_half_float&&(a.rgba16f=34842,a.rgb16f=34843),t.webgl_color_buffer_float&&(a.rgba32f=34836);var o=[];Object.keys(a).forEach((function(e){var t=a[e];o[t]=e}));var f=0,u={};function s(e){this.id=f++,this.refCount=1,this.renderbuffer=e,this.format=32854,this.width=0,this.height=0,i.profile&&(this.stats={size:0})}function c(t){var r=t.renderbuffer;x(r,"must not double destroy renderbuffer"),e.bindRenderbuffer(36161,null),e.deleteRenderbuffer(r),t.renderbuffer=null,t.refCount=0,delete u[t.id],n.renderbufferCount--}return s.prototype.decRef=function(){--this.refCount<=0&&c(this)},i.profile&&(n.getTotalRenderbufferSize=function(){var e=0;return Object.keys(u).forEach((function(t){e+=u[t].stats.size})),e}),{create:function(t,f){var c=new s(e.createRenderbuffer());function l(t,n){var f=0,u=0,s=32854;if("object"==typeof t&&t){var d=t;if("shape"in d){var p=d.shape;x(Array.isArray(p)&&p.length>=2,"invalid renderbuffer shape"),f=0|p[0],u=0|p[1]}else"radius"in d&&(f=u=0|d.radius),"width"in d&&(f=0|d.width),"height"in d&&(u=0|d.height);"format"in d&&(x.parameter(d.format,a,"invalid renderbuffer format"),s=a[d.format])}else"number"==typeof t?(f=0|t,u="number"==typeof n?0|n:f):t?x.raise("invalid arguments to renderbuffer constructor"):f=u=1;if(x(f>0&&u>0&&f<=r.maxRenderbufferSize&&u<=r.maxRenderbufferSize,"invalid renderbuffer size"),f!==c.width||u!==c.height||s!==c.format)return l.width=c.width=f,l.height=c.height=u,c.format=s,e.bindRenderbuffer(36161,c.renderbuffer),e.renderbufferStorage(36161,s,f,u),x(0===e.getError(),"invalid render buffer format"),i.profile&&(c.stats.size=ke(c.format,c.width,c.height)),l.format=o[c.format],l}return u[c.id]=c,n.renderbufferCount++,l(t,f),l.resize=function(t,n){var a=0|t,o=0|n||a;return a===c.width&&o===c.height||(x(a>0&&o>0&&a<=r.maxRenderbufferSize&&o<=r.maxRenderbufferSize,"invalid renderbuffer size"),l.width=c.width=a,l.height=c.height=o,e.bindRenderbuffer(36161,c.renderbuffer),e.renderbufferStorage(36161,c.format,a,o),x(0===e.getError(),"invalid render buffer format"),i.profile&&(c.stats.size=ke(c.format,c.width,c.height))),l},l._reglType="renderbuffer",l._renderbuffer=c,i.profile&&(l.stats=c.stats),l.destroy=function(){c.decRef()},l},clear:function(){P(u).forEach(c)},restore:function(){P(u).forEach((function(t){t.renderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(36161,t.renderbuffer),e.renderbufferStorage(36161,t.format,t.width,t.height)})),e.bindRenderbuffer(36161,null)}}}(i,d,g,l,n),D=function(e,r,n,i,a,o){var f={cur:null,next:null,dirty:!1,setFBO:null},u=["rgba"],s=["rgba4","rgb565","rgb5 a1"];r.ext_srgb&&s.push("srgba"),r.ext_color_buffer_half_float&&s.push("rgba16f","rgb16f"),r.webgl_color_buffer_float&&s.push("rgba32f");var c=["uint8"];function l(e,t,r){this.target=e,this.texture=t,this.renderbuffer=r;var n=0,i=0;t?(n=t.width,i=t.height):r&&(n=r.width,i=r.height),this.width=n,this.height=i}function d(e){e&&(e.texture&&e.texture._texture.decRef(),e.renderbuffer&&e.renderbuffer._renderbuffer.decRef())}function p(e,t,r){if(e)if(e.texture){var n=e.texture._texture,i=Math.max(1,n.width),a=Math.max(1,n.height);x(i===t&&a===r,"inconsistent width/height for supplied texture"),n.refCount+=1}else{var o=e.renderbuffer._renderbuffer;x(o.width===t&&o.height===r,"inconsistent width/height for renderbuffer"),o.refCount+=1}}function m(t,r){r&&(r.texture?e.framebufferTexture2D(36160,t,r.target,r.texture._texture.texture,0):e.framebufferRenderbuffer(36160,t,36161,r.renderbuffer._renderbuffer.renderbuffer))}function h(e){var t=3553,r=null,n=null,i=e;"object"==typeof e&&(i=e.data,"target"in e&&(t=0|e.target)),x.type(i,"function","invalid attachment data");var a=i._reglType;return"texture2d"===a?(r=i,x(3553===t)):"textureCube"===a?(r=i,x(t>=34069&&t<34075,"invalid cube map target")):"renderbuffer"===a?(n=i,t=36161):x.raise("invalid regl object for attachment"),new l(t,r,n)}function b(e,t,r,n,o){if(r){var f=i.create2D({width:e,height:t,format:n,type:o});return f._texture.refCount=0,new l(3553,f,null)}var u=a.create({width:e,height:t,format:n});return u._renderbuffer.refCount=0,new l(36161,null,u)}function v(e){return e&&(e.texture||e.renderbuffer)}function g(e,t,r){e&&(e.texture?e.texture.resize(t,r):e.renderbuffer&&e.renderbuffer.resize(t,r),e.width=t,e.height=r)}r.oes_texture_half_float&&c.push("half float","float16"),r.oes_texture_float&&c.push("float","float32");var y=0,w={};function _(){this.id=y++,w[this.id]=this,this.framebuffer=e.createFramebuffer(),this.width=0,this.height=0,this.colorAttachments=[],this.depthAttachment=null,this.stencilAttachment=null,this.depthStencilAttachment=null}function k(e){e.colorAttachments.forEach(d),d(e.depthAttachment),d(e.stencilAttachment),d(e.depthStencilAttachment)}function A(t){var r=t.framebuffer;x(r,"must not double destroy framebuffer"),e.deleteFramebuffer(r),t.framebuffer=null,o.framebufferCount--,delete w[t.id]}function S(t){var r;e.bindFramebuffer(36160,t.framebuffer);var i=t.colorAttachments;for(r=0;r<i.length;++r)m(36064+r,i[r]);for(r=i.length;r<n.maxColorAttachments;++r)e.framebufferTexture2D(36160,36064+r,3553,null,0);e.framebufferTexture2D(36160,33306,3553,null,0),e.framebufferTexture2D(36160,36096,3553,null,0),e.framebufferTexture2D(36160,36128,3553,null,0),m(36096,t.depthAttachment),m(36128,t.stencilAttachment),m(33306,t.depthStencilAttachment);var a=e.checkFramebufferStatus(36160);e.isContextLost()||36053===a||x.raise("framebuffer configuration not supported, status = "+Te[a]),e.bindFramebuffer(36160,f.next?f.next.framebuffer:null),f.cur=f.next,e.getError()}function E(e,i){var a=new _;function l(e,t){var i;x(f.next!==a,"can not update framebuffer which is currently in use");var o=0,d=0,m=!0,g=!0,y=null,w=!0,_="rgba",A="uint8",E=1,j=null,T=null,D=null,C=!1;if("number"==typeof e)o=0|e,d=0|t||o;else if(e){x.type(e,"object","invalid arguments for framebuffer");var O=e;if("shape"in O){var z=O.shape;x(Array.isArray(z)&&z.length>=2,"invalid shape for framebuffer"),o=z[0],d=z[1]}else"radius"in O&&(o=d=O.radius),"width"in O&&(o=O.width),"height"in O&&(d=O.height);("color"in O||"colors"in O)&&(y=O.color||O.colors,Array.isArray(y)&&x(1===y.length||r.webgl_draw_buffers,"multiple render targets not supported")),y||("colorCount"in O&&(E=0|O.colorCount,x(E>0,"invalid color buffer count")),"colorTexture"in O&&(w=!!O.colorTexture,_="rgba4"),"colorType"in O&&(A=O.colorType,w?(x(r.oes_texture_float||!("float"===A||"float32"===A),"you must enable OES_texture_float in order to use floating point framebuffer objects"),x(r.oes_texture_half_float||!("half float"===A||"float16"===A),"you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects")):"half float"===A||"float16"===A?(x(r.ext_color_buffer_half_float,"you must enable EXT_color_buffer_half_float to use 16-bit render buffers"),_="rgba16f"):"float"!==A&&"float32"!==A||(x(r.webgl_color_buffer_float,"you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers"),_="rgba32f"),x.oneOf(A,c,"invalid color type")),"colorFormat"in O&&(_=O.colorFormat,u.indexOf(_)>=0?w=!0:s.indexOf(_)>=0?w=!1:w?x.oneOf(O.colorFormat,u,"invalid color format for texture"):x.oneOf(O.colorFormat,s,"invalid color format for renderbuffer"))),("depthTexture"in O||"depthStencilTexture"in O)&&(C=!(!O.depthTexture&&!O.depthStencilTexture),x(!C||r.webgl_depth_texture,"webgl_depth_texture extension not supported")),"depth"in O&&("boolean"==typeof O.depth?m=O.depth:(j=O.depth,g=!1)),"stencil"in O&&("boolean"==typeof O.stencil?g=O.stencil:(T=O.stencil,m=!1)),"depthStencil"in O&&("boolean"==typeof O.depthStencil?m=g=O.depthStencil:(D=O.depthStencil,m=!1,g=!1))}else o=d=1;var F=null,B=null,M=null,P=null;if(Array.isArray(y))F=y.map(h);else if(y)F=[h(y)];else for(F=new Array(E),i=0;i<E;++i)F[i]=b(o,d,w,_,A);x(r.webgl_draw_buffers||F.length<=1,"you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers."),x(F.length<=n.maxColorAttachments,"too many color attachments, not supported"),o=o||F[0].width,d=d||F[0].height,j?B=h(j):m&&!g&&(B=b(o,d,C,"depth","uint32")),T?M=h(T):g&&!m&&(M=b(o,d,!1,"stencil","uint8")),D?P=h(D):!j&&!T&&g&&m&&(P=b(o,d,C,"depth stencil","depth stencil")),x(!!j+!!T+!!D<=1,"invalid framebuffer configuration, can specify exactly one depth/stencil attachment");var R=null;for(i=0;i<F.length;++i)if(p(F[i],o,d),x(!F[i]||F[i].texture&&Ae.indexOf(F[i].texture._texture.format)>=0||F[i].renderbuffer&&je.indexOf(F[i].renderbuffer._renderbuffer.format)>=0,"framebuffer color attachment "+i+" is invalid"),F[i]&&F[i].texture){var I=Se[F[i].texture._texture.format]*Ee[F[i].texture._texture.type];null===R?R=I:x(R===I,"all color attachments much have the same number of bits per pixel.")}return p(B,o,d),x(!B||B.texture&&6402===B.texture._texture.format||B.renderbuffer&&33189===B.renderbuffer._renderbuffer.format,"invalid depth attachment for framebuffer object"),p(M,o,d),x(!M||M.renderbuffer&&36168===M.renderbuffer._renderbuffer.format,"invalid stencil attachment for framebuffer object"),p(P,o,d),x(!P||P.texture&&34041===P.texture._texture.format||P.renderbuffer&&34041===P.renderbuffer._renderbuffer.format,"invalid depth-stencil attachment for framebuffer object"),k(a),a.width=o,a.height=d,a.colorAttachments=F,a.depthAttachment=B,a.stencilAttachment=M,a.depthStencilAttachment=P,l.color=F.map(v),l.depth=v(B),l.stencil=v(M),l.depthStencil=v(P),l.width=a.width,l.height=a.height,S(a),l}return o.framebufferCount++,l(e,i),t(l,{resize:function(e,t){x(f.next!==a,"can not resize a framebuffer which is currently in use");var r=Math.max(0|e,1),n=Math.max(0|t||r,1);if(r===a.width&&n===a.height)return l;for(var i=a.colorAttachments,o=0;o<i.length;++o)g(i[o],r,n);return g(a.depthAttachment,r,n),g(a.stencilAttachment,r,n),g(a.depthStencilAttachment,r,n),a.width=l.width=r,a.height=l.height=n,S(a),l},_reglType:"framebuffer",_framebuffer:a,destroy:function(){A(a),k(a)},use:function(e){f.setFBO({framebuffer:l},e)}})}return t(f,{getFramebuffer:function(e){if("function"==typeof e&&"framebuffer"===e._reglType){var t=e._framebuffer;if(t instanceof _)return t}return null},create:E,createCube:function(e){var a=Array(6);function o(e){var n;x(a.indexOf(f.next)<0,"can not update framebuffer which is currently in use");var s,l={color:null},d=0,p=null,m="rgba",h="uint8",b=1;if("number"==typeof e)d=0|e;else if(e){x.type(e,"object","invalid arguments for framebuffer");var v=e;if("shape"in v){var g=v.shape;x(Array.isArray(g)&&g.length>=2,"invalid shape for framebuffer"),x(g[0]===g[1],"cube framebuffer must be square"),d=g[0]}else"radius"in v&&(d=0|v.radius),"width"in v?(d=0|v.width,"height"in v&&x(v.height===d,"must be square")):"height"in v&&(d=0|v.height);("color"in v||"colors"in v)&&(p=v.color||v.colors,Array.isArray(p)&&x(1===p.length||r.webgl_draw_buffers,"multiple render targets not supported")),p||("colorCount"in v&&(b=0|v.colorCount,x(b>0,"invalid color buffer count")),"colorType"in v&&(x.oneOf(v.colorType,c,"invalid color type"),h=v.colorType),"colorFormat"in v&&(m=v.colorFormat,x.oneOf(v.colorFormat,u,"invalid color format for texture"))),"depth"in v&&(l.depth=v.depth),"stencil"in v&&(l.stencil=v.stencil),"depthStencil"in v&&(l.depthStencil=v.depthStencil)}else d=1;if(p)if(Array.isArray(p))for(s=[],n=0;n<p.length;++n)s[n]=p[n];else s=[p];else{s=Array(b);var y={radius:d,format:m,type:h};for(n=0;n<b;++n)s[n]=i.createCube(y)}for(l.color=Array(s.length),n=0;n<s.length;++n){var w=s[n];x("function"==typeof w&&"textureCube"===w._reglType,"invalid cube map"),d=d||w.width,x(w.width===d&&w.height===d,"invalid cube map shape"),l.color[n]={target:34069,data:s[n]}}for(n=0;n<6;++n){for(var _=0;_<s.length;++_)l.color[_].target=34069+n;n>0&&(l.depth=a[0].depth,l.stencil=a[0].stencil,l.depthStencil=a[0].depthStencil),a[n]?a[n](l):a[n]=E(l)}return t(o,{width:d,height:d,color:s})}return o(e),t(o,{faces:a,resize:function(e){var t,r=0|e;if(x(r>0&&r<=n.maxCubeMapSize,"invalid radius for cube fbo"),r===o.width)return o;var i=o.color;for(t=0;t<i.length;++t)i[t].resize(r);for(t=0;t<6;++t)a[t].resize(r);return o.width=o.height=r,o},_reglType:"framebufferCube",destroy:function(){a.forEach((function(e){e.destroy()}))}})},clear:function(){P(w).forEach(A)},restore:function(){f.cur=null,f.next=null,f.dirty=!0,P(w).forEach((function(t){t.framebuffer=e.createFramebuffer(),S(t)}))}})}(i,d,g,A,T,l),O=at(i,c,d,g,w,_,0,D,{},y,k,{elements:null,primitive:4,count:-1,offset:0,instances:-1},v,p,n),z=Ce(i,D,O.procs.poll,v,a,d,g),F=O.next,R=i.canvas,I=[],L=[],X=[],$=[n.onDestroy],J=null;function K(){if(0===I.length)return p&&p.update(),void(J=null);J=E.next(K),ue();for(var e=I.length-1;e>=0;--e){var t=I[e];t&&t(v,null,0)}i.flush(),p&&p.update()}function Z(){!J&&I.length>0&&(J=E.next(K))}function ee(){J&&(E.cancel(K),J=null)}function te(e){e.preventDefault(),o=!0,ee(),L.forEach((function(e){e()}))}function re(e){i.getError(),o=!1,f.restore(),k.restore(),w.restore(),A.restore(),T.restore(),D.restore(),p&&p.restore(),O.procs.refresh(),Z(),X.forEach((function(e){e()}))}function ne(e){function r(e){var t={},r={};return Object.keys(e).forEach((function(n){var i=e[n];S.isDynamic(i)?r[n]=S.unbox(i,n):t[n]=i})),{dynamic:r,static:t}}x(!!e,"invalid args to regl({...})"),x.type(e,"object","invalid args to regl({...})");var n=r(e.context||{}),i=r(e.uniforms||{}),a=r(e.attributes||{}),f=r(function(e){var r=t({},e);function n(e){if(e in r){var t=r[e];delete r[e],Object.keys(t).forEach((function(n){r[e+"."+n]=t[n]}))}}return delete r.uniforms,delete r.attributes,delete r.context,"stencil"in r&&r.stencil.op&&(r.stencil.opBack=r.stencil.opFront=r.stencil.op,delete r.stencil.op),n("blend"),n("depth"),n("cull"),n("stencil"),n("polygonOffset"),n("scissor"),n("sample"),r}(e)),u={gpuTime:0,cpuTime:0,count:0},s=O.compile(f,a,i,n,u),c=s.draw,l=s.batch,d=s.scope,p=[];return t((function(e,t){var r;if(o&&x.raise("context lost"),"function"==typeof e)return d.call(this,null,e,0);if("function"==typeof t){if("number"==typeof e){for(r=0;r<e;++r)d.call(this,null,t,r);return}if(Array.isArray(e)){for(r=0;r<e.length;++r)d.call(this,e[r],t,r);return}return d.call(this,e,t,0)}if("number"==typeof e){if(e>0)return l.call(this,function(e){for(;p.length<e;)p.push(null);return p}(0|e),0|e)}else{if(!Array.isArray(e))return c.call(this,e);if(e.length)return l.call(this,e,e.length)}}),{stats:u})}R&&(R.addEventListener("webglcontextlost",te,!1),R.addEventListener("webglcontextrestored",re,!1));var ie=D.setFBO=ne({framebuffer:S.define.call(null,1,"framebuffer")});function ae(e,t){var r=0;O.procs.poll();var n=t.color;n&&(i.clearColor(+n[0]||0,+n[1]||0,+n[2]||0,+n[3]||0),r|=16384),"depth"in t&&(i.clearDepth(+t.depth),r|=256),"stencil"in t&&(i.clearStencil(0|t.stencil),r|=1024),x(!!r,"called regl.clear with no buffer specified"),i.clear(r)}function oe(e){return x.type(e,"function","regl.frame() callback must be a function"),I.push(e),Z(),{cancel:function(){var t=ft(I,e);x(t>=0,"cannot cancel a frame twice"),I[t]=function e(){var t=ft(I,e);I[t]=I[I.length-1],I.length-=1,I.length<=0&&ee()}}}}function fe(){var e=F.viewport,t=F.scissor_box;e[0]=e[1]=t[0]=t[1]=0,v.viewportWidth=v.framebufferWidth=v.drawingBufferWidth=e[2]=t[2]=i.drawingBufferWidth,v.viewportHeight=v.framebufferHeight=v.drawingBufferHeight=e[3]=t[3]=i.drawingBufferHeight}function ue(){v.tick+=1,v.time=ce(),fe(),O.procs.poll()}function se(){fe(),O.procs.refresh(),p&&p.update()}function ce(){return(j()-m)/1e3}se();var le=t(ne,{clear:function(e){if(x("object"==typeof e&&e,"regl.clear() takes an object as input"),"framebuffer"in e)if(e.framebuffer&&"framebufferCube"===e.framebuffer_reglType)for(var r=0;r<6;++r)ie(t({framebuffer:e.framebuffer.faces[r]},e),ae);else ie(e,ae);else ae(0,e)},prop:S.define.bind(null,1),context:S.define.bind(null,2),this:S.define.bind(null,3),draw:ne({}),buffer:function(e){return w.create(e,34962,!1,!1)},elements:function(e){return _.create(e,!1)},texture:A.create2D,cube:A.createCube,renderbuffer:T.create,framebuffer:D.create,framebufferCube:D.createCube,attributes:a,frame:oe,on:function(e,t){var r;switch(x.type(t,"function","listener callback must be a function"),e){case"frame":return oe(t);case"lost":r=L;break;case"restore":r=X;break;case"destroy":r=$;break;default:x.raise("invalid event, must be one of frame,lost,restore,destroy")}return r.push(t),{cancel:function(){for(var e=0;e<r.length;++e)if(r[e]===t)return r[e]=r[r.length-1],void r.pop()}}},limits:g,hasExtension:function(e){return g.extensions.indexOf(e.toLowerCase())>=0},read:z,destroy:function(){I.length=0,ee(),R&&(R.removeEventListener("webglcontextlost",te),R.removeEventListener("webglcontextrestored",re)),k.clear(),D.clear(),T.clear(),A.clear(),_.clear(),w.clear(),p&&p.clear(),$.forEach((function(e){e()}))},_gl:i,_refresh:se,poll:function(){ue(),p&&p.update()},now:ce,stats:l});return n.onDone(null,le),le}}()},function(e,t,r){"use strict";var n,i=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},a=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}(),o=[];function f(e){for(var t=-1,r=0;r<o.length;r++)if(o[r].identifier===e){t=r;break}return t}function u(e,t){for(var r={},n=[],i=0;i<e.length;i++){var a=e[i],u=t.base?a[0]+t.base:a[0],s=r[u]||0,c="".concat(u," ").concat(s);r[u]=s+1;var l=f(c),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==l?(o[l].references++,o[l].updater(d)):o.push({identifier:c,updater:b(d,t),references:1}),n.push(c)}return n}function s(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var i=r.nc;i&&(n.nonce=i)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var c,l=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,r,n){var i=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=l(t,i);else{var a=document.createTextNode(i),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}function p(e,t,r){var n=r.css,i=r.media,a=r.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),a&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var m=null,h=0;function b(e,t){var r,n,i;if(t.singleton){var a=h++;r=m||(m=s(t)),n=d.bind(null,r,a,!1),i=d.bind(null,r,a,!0)}else r=s(t),n=p.bind(null,r,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var r=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<r.length;n++){var i=f(r[n]);o[i].references--}for(var a=u(e,t),s=0;s<r.length;s++){var c=f(r[s]);0===o[c].references&&(o[c].updater(),o.splice(c,1))}r=a}}}},function(e,t,r){(t=r(5)(!1)).push([e.i,"html,body{font-family:redaction;-webkit-font-smoothing:antialiased;padding:0px;margin:0px}body{background:linear-gradient(to right, red, purple, blue)}.inner_body{background-color:white;margin:8px;padding-left:10px;padding-right:10px}p{font-size:1.4em}p.small{font-size:1.1em}.shadow{box-shadow:0 4px 4px 0 rgba(0,0,0,0.1)}h1,h2,h3,h4{text-align:center}#header-container{color:white}#header-container h1{letter-spacing:.08em;font-size:5.5em;margin:0px}#header-container a{color:white}#header-container .main-heading img{max-width:900px}.tag{font-size:1.2em;margin:0px;margin-right:1em;margin-left:1em;display:inline-block}.center{text-align:center}.col,.col2,.col3,.col4{display:inline-block;vertical-align:top}.col2{width:50%}.col3{width:33%}.col4{width:25%}.compactness_tile{display:inline-block;width:calc(50% - 22px);vertical-align:top;padding-left:10px;padding-right:10px}.compactness_tile p{text-align:center !important}.compactness_tile:nth-child(1){border-bottom:1px dashed;border-right:1px dashed}.compactness_tile:nth-child(2){border-bottom:1px dashed}.compactness_tile:nth-child(3){border-right:1px dashed;border-bottom:1px dashed}.compactness_tile:nth-child(4){border-bottom:1px dashed}.outer-text-container{width:100%;text-align:center}.outer-text-container .inner-text-container{width:100%;max-width:900px;display:inline-block}.outer-text-container .inner-text-container p{text-align:justify;padding-left:10px;padding-right:10px}.outer-text-container .inner-text-container img{text-align:center;width:100%;max-width:700px}.outer-text-container .inner-text-container.wide{max-width:1200px}.viewer_row{width:100%;display:inline-block}.viewer_row .district-viewer,.viewer_row .district-text{display:inline-block}.viewer_row .district-viewer{text-align:center;top:0px;left:5%;width:45%}.viewer_row .district-viewer .parcoords{text-align:initial;width:100%;height:200px}.viewer_row .district-viewer canvas{width:100%;cursor:pointer}.viewer_row .district-viewer .padding{height:20px}.viewer_row .district-viewer .view_count{font-size:1.3em;opacity:0.8}.viewer_row .district-viewer img.legend{width:100%;max-width:500px}.viewer_row .district-text{width:calc(50% - 40px);vertical-align:top;float:right;padding-top:50vh;padding-bottom:30vh}.viewer_row .district-text .district-text-inner{max-width:400px;float:left}.viewer_row .district-text .scroll_block{margin-top:150px;margin-bottom:150px;padding:25px;text-align:center;border-left:1px solid rgba(0,0,0,0)}.viewer_row .district-text .scroll_block p{text-align:left}.viewer_row .district-text .scroll_block.block_focus{border-left:1px solid}.viewer_row .district-text .scroll_block img{max-width:100%}@media only screen and (max-width: 1000px){#header-container h1{font-size:3.4em;margin:0.2em}p{font-size:1.2em}p.small{font-size:1.0em}.col2{width:100%}.tag{width:150px;font-size:1.0em}.viewer_row .district-viewer{left:10px;width:calc(100% - 20px);z-index:2;background-color:white}.viewer_row .district-viewer .header{margin:0.2em;font-size:1.6em}.viewer_row .district-viewer .parcoords{height:150px}.viewer_row .district-viewer .padding{height:0px}.viewer_row .district-text{width:100%;padding-bottom:0vh}.viewer_row .district-text .district-text-inner{max-width:100%;padding:10%}}\n",""]),e.exports=t},function(e,t,r){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=function(e,t){var r=e[1]||"",n=e[3];if(!n)return r;if(t&&"function"==typeof btoa){var i=(o=n,f=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(f),"/*# ".concat(u," */")),a=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[r].concat(a).concat([i]).join("\n")}var o,f,u;return[r].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(n)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var f=0;f<e.length;f++){var u=[].concat(e[f]);n&&i[u[0]]||(r&&(u[2]?u[2]="".concat(r," and ").concat(u[2]):u[2]=r),t.push(u))}},t}},function(e,t,r){"use strict";e.exports=function(e){for(var t=new Array(e),r=0;r<e;++r)t[r]=r;return t}},function(e,t){function r(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(r(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&r(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,r){"use strict";r.r(t);r(0);function n(e){var t=new Promise((function(t,r){function n(){e.naturalWidth?t(e):r(e),e.removeEventListener("load",n),e.removeEventListener("error",n)}e.naturalWidth?t(e):e.complete?r(e):(e.addEventListener("load",n),e.addEventListener("error",n))}));return Object.assign(t,{image:e})}var i=function e(t,r){if(void 0===r&&(r={}),t instanceof HTMLImageElement)return n(t);if("string"==typeof t){var i=t,a=new Image;return Object.keys(r).forEach((function(e){return a.setAttribute(e,r[e])})),a.src=i,n(a)}if(function(e){return void 0!==e.length}(t)){var o=[].map.call(t,(function(t){return e(t,r).catch((function(e){return e}))}));return Promise.all(o).then((function(e){var t=e.filter((function(e){return e.naturalWidth}));return t.length===e.length?t:Promise.reject({loaded:t,errored:e.filter((function(e){return!e.naturalWidth}))})}))}return Promise.reject(new TypeError("input is not an image, a URL string, or an array of them."))},a=r(1),o=r.n(a),f=function(e,t,r,n){return new(r||(r=Promise))((function(i,a){function o(e){try{u(n.next(e))}catch(e){a(e)}}function f(e){try{u(n.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,f)}u((n=n.apply(e,t||[])).next())}))},u=function(e,t){var r,n,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:f(0),throw:f(1),return:f(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function f(a){return function(f){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(i=2&a[0]?n.return:a[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,a[1])).done)return i;switch(n=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,n=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],n=0}finally{r=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,f])}}};function s(e){return f(this,void 0,void 0,(function(){var t,r,n,a;return u(this,(function(f){switch(f.label){case 0:return[4,i(e)];case 1:return t=f.sent(),r=document.createElement("canvas"),n=r.getContext("2d"),r.width=t.naturalWidth,r.height=t.naturalHeight,n.drawImage(t,0,0),a=n.getImageData(0,0,r.width,r.height).data,[2,o()(a,[r.width,r.height,4])]}}))}))}function c(e,t){return fetch(e).then((function(e){return e.ok?e.json():null}))}function l(e,t){for(var r,n,i=e.slice(0),a=e.length;a--;)r=i[n=Math.floor((a+1)*Math.random())],i[n]=i[a],i[a]=r;return i.slice(0,t)}function d(e,t,r){return Math.min(r,Math.max(t,e))}function p(e){return new Array(e).fill(0).map((function(e,t){return t}))}function m(e){var t=e.getBoundingClientRect(),r=t.top,n=(t.left,t.bottom);t.right;return r<0&&n>0||r<window.innerHeight&&n>window.innerHeight}var h=r(2),b=r.n(h);function v(e,t,r){var n=new Array(t).fill(0),i=new Array(t).fill(0);e.forEach((function(e,t){n[e]+=r.voters[t][0],i[e]+=r.voters[t][1]}));var a=n.map((function(e,t){return d(3.5*((e-i[t])/(e+i[t]))+.5,0,1)}));return r.voters.map((function(t,r){return a[e[r]]}))}function g(e,t,r){r.voters.length;return r.voters.map((function(e){return d((e[0]-e[1])/(e[0]+e[1])+.5,0,1)}))}var y=function(){function e(e,t,r){var n,i,a,o,f=this;this.draw=e,this.nx_max=4,this.ny_max=4,this.nx=this.nx_max,this.ny=this.ny_max,this.needs_draw=!0,this.brushed_indexes=p(r.solutions.length),this.current=l(this.brushed_indexes,this.nx*this.ny),this.rundata=r,this.values=r.values.map((function(e,t){var n={index:t};return e.forEach((function(e,t){return n[r.config.metrics[t]]=e})),n})),this.parcoords=(n=t.querySelector(".parcoords"),i=this.values,a=function(e){return f._onParCoordsUpdate(e)},(o=d3.parcoords()(n).alpha(.15).data(i).hideAxis(["index"]).render().shadows().reorderable().brushMode("1D-axes")).on("brush",(function(e){0!=e.length&&a(e.map((function(e){return e.index})),e)})),o),this.container=t,this.viewer_div=this.container.querySelector(".district-viewer"),this.scroll_blocks=this.container.querySelectorAll(".scroll_block")}return e.prototype._onParCoordsUpdate=function(e){var t=this.current,r=this.parcoords,n=this.nx_max,i=this.ny_max;this.brushed_indexes=e,1==t.length&&r.unhighlight(),this.current=l(e,Math.min(e.length,n*i)),this.needs_draw=!0},e.prototype.onClick=function(e,t){var r=this,n=r.parcoords,i=r.nx,a=r.ny,o=r.nx_max,f=r.ny_max;if(1==this.current.length)this.current=l(p(this.rundata.solutions.length),o*f),this.needs_draw=!0,n.unhighlight();else{var u=Math.floor(e*i),s=Math.floor(t*a);this.current=[this.current[u*i+s]],this.needs_draw=!0,n.highlight([this.values[this.current[0]]])}},e.prototype.onMouseMove=function(e,t){var r=this,n=r.nx,i=r.ny,a=(r.rundata,r.values),o=r.parcoords,f=r.current[Math.floor(e*n)*n+Math.floor(t*i)];o.highlight([a[f]])},e.prototype.onMouseLeave=function(){this.current.length>1&&this.parcoords.unhighlight()},e.prototype.onScroll=function(){var e=this.viewer_div,t=this.container.getBoundingClientRect(),r=t.top,n=t.bottom;t.height;e.style.position="fixed",n<window.innerHeight?e.style.top=n-window.innerHeight+"px":e.style.top=r<0?"0px":r+"px",this._updateScrollBlocks()},e.prototype._updateScrollBlocks=function(){var e=null,t=window.innerWidth<800;this.scroll_blocks.forEach((function(r){var n=r.getBoundingClientRect(),i=(n.top+n.height/2)/window.innerHeight,a=2*Math.abs(i-(t?.75:.5));r.style.opacity=(1-d(a,0,1)).toString(),r.classList.remove("block_focus"),(null==e||a<e[0])&&(e=[a,r])})),e[1].classList.add("block_focus")},e.prototype.onResize=function(){var e=this.parcoords,t=this.viewer_div;e.width(t.clientWidth),e.resize(),e.render()},e.prototype.onStep=function(){var e=this,t=e.needs_draw,r=e.draw,n=e.current,i=e.rundata,a=e.viewer_div,o=e.brushed_indexes;t&&(this.nx=Math.min(Math.ceil(Math.sqrt(n.length)),this.nx_max),this.ny=this.nx,r(this.nx,this.ny,n.map((function(e){return i.solutions[e]}))),a.querySelector(".view_count").innerHTML="Viewing "+n.length+" / "+o.length,this.needs_draw=!1)},e.prototype.needsDraw=function(){this.needs_draw=!0},e}(),x=function(e,t,r,n){return new(r||(r=Promise))((function(i,a){function o(e){try{u(n.next(e))}catch(e){a(e)}}function f(e){try{u(n.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,f)}u((n=n.apply(e,t||[])).next())}))},w=function(e,t){var r,n,i,a,o={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return a={next:f(0),throw:f(1),return:f(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function f(a){return function(f){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(i=2&a[0]?n.return:a[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,a[1])).done)return i;switch(n=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,n=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(i=(i=o.trys).length>0&&i[i.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){o.label=a[1];break}if(6===a[0]&&o.label<i[1]){o.label=i[1],i=a;break}if(i&&o.label<i[2]){o.label=i[2],o.ops.push(a);break}i[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],n=0}finally{r=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,f])}}};function _(e){return x(this,void 0,void 0,(function(){var t,r,n,i,a,o=this;return w(this,(function(f){switch(f.label){case 0:return t=[],[4,Promise.all([s("./data/wards.png"),c("./data/statedata.json")])];case 1:return r=f.sent(),n=r[0],i=r[1],a=function(e,t,r,n){var i=function(e){return e({frag:"\n        precision highp float;\n        uniform sampler2D map;\n        uniform sampler2D colors;\n        uniform sampler2D all_colors;\n        uniform vec2 u_size;\n        varying vec2 uv;\n\n        uniform float nx;\n        uniform float ny;\n        uniform float color_texture_size;\n        uniform float n_tiles;\n\n        const float s16 = 65653.0;\n        const float s8  = 256.0;\n        const vec3 RED   = vec3(1.0, 0.0, 0.0);\n        const vec3 BLUE  = vec3(0.0, 0.0, 1.0);\n        const vec3 WHITE = vec3(1.0, 1.0, 1.0);\n\n        // vec4 RdBu(float value) {\n            // return rdbu_colors[int(value * 512)]\n            // if (value < 0.5) {\n            //     float p = value / 0.5;\n            //     return vec4(mix(BLUE, WHITE, p), 1.0);\n            // } else {\n            //     float p = (value - 0.5) / 0.5;\n            //     return vec4(mix(WHITE, RED, p), 1.0);\n            // }\n        // }\n\n        vec2 tileIdx2colorPos(int tile_index, vec2 cell) {\n            float global_index = float(tile_index) + ((cell.y * nx)+cell.x) * n_tiles;\n            return vec2(\n                (mod( global_index, color_texture_size )) / color_texture_size,\n                floor( global_index / color_texture_size ) / color_texture_size\n            );\n        }\n\n        int get_tile_index(vec2 _uv, vec2 cell) {\n            vec2 cell_shape = vec2(1.0/nx, 1.0/ny);\n            vec2 cell_uv = vec2((_uv.x - cell.x*cell_shape.x)/cell_shape.x,\n                                (_uv.y - cell.y*cell_shape.y)/cell_shape.y);\n            vec3 value = texture2D(map, cell_uv).rgb;\n            int tile_index = int(value.r * 255.0*s16) + (int(value.g * 255.0 *s8)) + int(value.b * 255.0);\n            return tile_index;\n        }\n\n        vec3 get_color(int tile_index, vec2 cell) {\n            vec2 colorPos = tileIdx2colorPos(tile_index - 1, cell);\n            float color_value = texture2D(colors, colorPos).x;\n\n            vec3 color = texture2D(all_colors, vec2(color_value, 0.0)).rgb;\n            return color;\n            // return vec3(color_value, 0.0, 0.0);\n            // vec3 color = texture2D(colors, colorPos).rgb;\n            // return color;\n        }\n\n        void main () {\n            // We are drawing a grid of maps. First find the cell index.\n            vec2 cell = vec2(floor(uv.x * nx), floor(uv.y * ny));\n\n            // Calculate offset within this cell.\n            int tile_index = get_tile_index(uv, cell);\n            if (tile_index == 0) {\n                discard;\n            }\n\n            vec3 color = get_color(tile_index, cell);\n            int ti_left = get_tile_index(vec2(uv+vec2(0.0, -1.0)*u_size), cell);\n            int ti_top = get_tile_index(vec2(uv+vec2(-1.0, 0.0)*u_size), cell);\n            //int ti_top_left = get_tile_index(vec2(uv+vec2(-1.0, -1.0)*u_size), cell);\n\n            int ti_right = get_tile_index(vec2(uv+vec2(0.0, 1.0)*u_size), cell);\n            int ti_bottom = get_tile_index(vec2(uv+vec2(1.0, -0.0)*u_size), cell);\n\n            bool eq = all(equal(color, get_color(ti_top, cell))) &&                       all(equal(color, get_color(ti_left, cell))) &&                       all(equal(color, get_color(ti_right, cell))) &&                       all(equal(color, get_color(ti_bottom, cell)));\n\n            if (!eq) {\n                gl_FragColor = vec4(WHITE, 1.0);\n            } else {\n                gl_FragColor = vec4(color, 1.0);\n            }\n        }",vert:"\n        precision highp float;\n        attribute vec2 position;\n        varying vec2 uv;\n        void main () {\n          uv = vec2(position.y, 1.0 - position.x);\n          gl_Position = vec4(1.0 - 2.0 * position, 0, 1);\n        }",attributes:{position:[-2,0,0,-2,2,2]},uniforms:{nx:e.prop("ny"),ny:e.prop("nx"),map:e.prop("map"),colors:e.prop("colors"),all_colors:e.prop("all_colors"),n_tiles:e.prop("n_tiles"),color_texture_size:e.prop("color_texture_size"),u_size:function(e){return[1/e.framebufferWidth,1/e.framebufferHeight]}},count:3})}(e),a=e.texture(t),o=new Float32Array(1048576).fill(0),f=e.texture({data:new Array(1024).fill(0).map((function(e,t){var r=d3.color(d3.interpolateRdBu(t/1024));return[r.r,r.g,r.b]})),shape:[1024,1,3]});return function(t,u,s){var c=0;console.time("draw");for(var l=0;l<s.length;l++){var d=void 0;d="districts"==n?v(s[l],8,r):g(s[l],0,r);for(var p=0;p<s[0].length;p++)o[c++]=d[p]}o.fill(255,c);var m=e.texture({data:o,shape:[1024,1024,1]});i({colors:m,nx:t,ny:u,all_colors:f,map:a,n_tiles:r.voters.length,color_texture_size:1024}),console.timeEnd("draw")}}(e,n,i,"districts"),document.querySelectorAll(".viewer_row").forEach((function(e){return x(o,void 0,void 0,(function(){var r;return w(this,(function(n){switch(n.label){case 0:return[4,c("./data/"+e.dataset.datapath+"/rundata.json")];case 1:return r=n.sent(),t.push(new y(a,e,r)),[2]}}))}))})),[2,t]}}))}))}!function(){x(this,void 0,void 0,(function(){function e(){window.requestAnimationFrame(e),n!=window.scrollY&&(r.forEach((function(e){return e.onScroll()})),n=window.scrollY),i||(i=r.find((function(e){return m(e.container)})))&&(i.viewer_div.querySelector(".canvas_container").append(t),i.needsDraw()),i&&(i.onStep(),m(i.container)||(i=null))}var t,r,n,i,a,o=this;return w(this,(function(f){switch(f.label){case 0:return t=document.querySelector("canvas"),[4,_(b()({canvas:t,extensions:["oes_texture_float"],optionalExtensions:["oes_texture_half_float"],attributes:{antialias:!0}}))];case 1:return r=f.sent(),n=null,i=null,a=function(){return x(o,void 0,void 0,(function(){return w(this,(function(e){return r.forEach((function(e){return e.onResize()})),[2]}))}))},t.onclick=function(e){var r=e.offsetX,n=e.offsetY,a=t.clientWidth,o=t.clientHeight;i.onClick(r/a,n/o)},t.onmousemove=function(e){var r=e.offsetX,n=e.offsetY,a=t.clientWidth,o=t.clientHeight;i.onMouseMove(r/a,n/o)},t.onmouseleave=function(){i.onMouseLeave()},window.requestAnimationFrame(e),window.onresize=a,a(),[2]}}))}))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlLnNjc3M/NzViYSIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbmRhcnJheS9uZGFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWdsL2Rpc3QvcmVnbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW90YS1hcnJheS9pb3RhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pcy1idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2ltYWdlLXByb21pc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLnRzIiwid2VicGFjazovLy8uL3NyYy9kcmF3X2NvbW1hbmQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BhcmFsbGVsX2Nvb3Jkcy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvUmVzdWx0Vmlld2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhZGVycy9kcmF3X21hcC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImFwaSIsImNvbnRlbnQiLCJkZWZhdWx0Iiwib3B0aW9ucyIsImV4cG9ydGVkIiwibG9jYWxzIiwiaW90YSIsImlzQnVmZmVyIiwiaGFzVHlwZWRBcnJheXMiLCJGbG9hdDY0QXJyYXkiLCJjb21wYXJlMXN0IiwiYSIsImIiLCJvcmRlciIsInN0cmlkZSIsInRoaXMiLCJ0ZXJtcyIsIkFycmF5IiwibGVuZ3RoIiwiTWF0aCIsImFicyIsInNvcnQiLCJyZXN1bHQiLCJjb21waWxlQ29uc3RydWN0b3IiLCJkdHlwZSIsImRpbWVuc2lvbiIsImNsYXNzTmFtZSIsImpvaW4iLCJ1c2VHZXR0ZXJzIiwiY29kZSIsIkZ1bmN0aW9uIiwicHJvY2VkdXJlIiwiQ0FDSEVEX0NPTlNUUlVDVE9SUyIsImluZGljZXMiLCJhcmdzIiwibWFwIiwiaW5kZXhfc3RyIiwic2hhcGVBcmciLCJzdHJpZGVBcmciLCJwdXNoIiwiYV92YXJzIiwiY192YXJzIiwidFNoYXBlIiwidFN0cmlkZSIsImlkeCIsImRhdGEiLCJzaGFwZSIsIm9mZnNldCIsInVuZGVmaW5lZCIsImN0b3IiLCJhcnJheSIsInN6IiwidG9TdHJpbmciLCJpc0FycmF5IiwiYXJyYXlEVHlwZSIsImN0b3JfbGlzdCIsImlzVHlwZWRBcnJheSIsIngiLCJVaW50OEFycmF5IiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsIkludDhBcnJheSIsIkludDE2QXJyYXkiLCJJbnQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiVWludDhDbGFtcGVkQXJyYXkiLCJleHRlbmQiLCJiYXNlIiwib3B0cyIsImtleXMiLCJyYWlzZSIsIm1lc3NhZ2UiLCJlcnJvciIsIkVycm9yIiwiY29uc29sZSIsImNoZWNrIiwicHJlZCIsImVuY29sb24iLCJjaGVja09uZU9mIiwibGlzdCIsImluZGV4T2YiLCJjb25zdHJ1Y3RvcktleXMiLCJsZWZ0UGFkIiwic3RyIiwiU2hhZGVyRmlsZSIsImxpbmVzIiwiaW5kZXgiLCJoYXNFcnJvcnMiLCJTaGFkZXJMaW5lIiwibnVtYmVyIiwibGluZSIsImVycm9ycyIsIlNoYWRlckVycm9yIiwiZmlsZU51bWJlciIsImxpbmVOdW1iZXIiLCJmaWxlIiwiZ3Vlc3NDb21tYW5kIiwic3RhY2siLCJwYXQiLCJleGVjIiwicGF0MiIsImd1ZXNzQ2FsbFNpdGUiLCJwYXJzZVNvdXJjZSIsInNvdXJjZSIsImNvbW1hbmQiLCJzcGxpdCIsImZpbGVzIiwidW5rbm93biIsIjAiLCJwYXJ0cyIsImxpbmVOdW1iZXJJbmZvIiwibmFtZUluZm8iLCJhdG9iIiwiZm9yRWFjaCIsInNhdmVDb21tYW5kUmVmIiwiX2NvbW1hbmRSZWYiLCJjb21tYW5kUmFpc2UiLCJjYWxsU2l0ZSIsImNoZWNrQ29tbWFuZFR5cGUiLCJ0eXBlIiwiVFlQRV9TSVpFIiwicGl4ZWxTaXplIiwiY2hhbm5lbHMiLCJpc1BvdzIiLCJ2IiwiY2hlY2skMSIsIm9wdGlvbmFsIiwiYmxvY2siLCJwYXJhbWV0ZXIiLCJwYXJhbSIsInBvc3NpYmlsaXRpZXMiLCJjb21tYW5kUGFyYW1ldGVyIiwiY29uc3RydWN0b3IiLCJvYmoiLCJjb21tYW5kVHlwZSIsIm5uaSIsIm9uZU9mIiwic2hhZGVyRXJyb3IiLCJnbCIsInNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiZXJyTG9nIiwiZ2V0U2hhZGVySW5mb0xvZyIsInR5cGVOYW1lIiwiRlJBR01FTlRfU0hBREVSIiwiZXJyTXNnIiwidHJpbSIsInBhcnNlRXJyb3JMb2ciLCJhbm5vdGF0ZUZpbGVzIiwic3RyaW5ncyIsInN0eWxlcyIsInRva2VuIiwidG9rZW5QYXQiLCJtYXgiLCJkb2N1bWVudCIsIndpbmRvdyIsImNocm9tZSIsImxvZyIsImFwcGx5Iiwic3R5bGUiLCJsaW5rRXJyb3IiLCJwcm9ncmFtIiwiZnJhZ1NoYWRlciIsInZlcnRTaGFkZXIiLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJnZXRQcm9ncmFtSW5mb0xvZyIsImZyYWdQYXJzZSIsImhlYWRlciIsInNhdmVEcmF3SW5mbyIsInVuaWZvcm1zIiwiYXR0cmlidXRlcyIsInN0cmluZ1N0b3JlIiwiaWQiLCJhZGRQcm9wcyIsImRpY3QiLCJzZXQiLCJ1IiwiX2ZyYWdJZCIsInN0YXRpYyIsImZyYWciLCJfdmVydElkIiwidmVydCIsInVuaWZvcm1TZXQiLCJfdW5pZm9ybVNldCIsImR5bmFtaWMiLCJhdHRyaWJ1dGVTZXQiLCJfYXR0cmlidXRlU2V0IiwiX2hhc0NvdW50IiwiZnJhbWVidWZmZXJGb3JtYXQiLCJhdHRhY2htZW50IiwidGV4Rm9ybWF0cyIsInJiRm9ybWF0cyIsInRleHR1cmUiLCJfdGV4dHVyZSIsImludGVybmFsZm9ybWF0IiwicmVuZGVyYnVmZmVyIiwiX3JlbmRlcmJ1ZmZlciIsImZvcm1hdCIsInRleHR1cmUyRCIsImluZm8iLCJtaXBEYXRhIiwibGltaXRzIiwidyIsIndpZHRoIiwiaCIsImhlaWdodCIsIm1heFRleHR1cmVTaXplIiwid3JhcFMiLCJ3cmFwVCIsIm1pcG1hc2siLCJtaW5GaWx0ZXIiLCJleHRlbnNpb25zIiwibWFnRmlsdGVyIiwiZ2VuTWlwbWFwcyIsIm1pcGltYWdlcyIsImltYWdlcyIsIm13IiwibWgiLCJpbWciLCJjb21wcmVzc2VkIiwicm93U2l6ZSIsImNlaWwiLCJ1bnBhY2tBbGlnbm1lbnQiLCJieXRlTGVuZ3RoIiwiZWxlbWVudCIsImNvcHkiLCJ0ZXh0dXJlQ3ViZSIsImZhY2VzIiwiZmFjZSIsIm1pcG1hcHMiLCJqIiwiVkFSSUFCTEVfQ09VTlRFUiIsIkR5bmFtaWNWYXJpYWJsZSIsImVzY2FwZVN0ciIsInJlcGxhY2UiLCJ0b0FjY2Vzc29yU3RyaW5nIiwic3BsaXRQYXJ0cyIsImZpcnN0Q2hhciIsImNoYXJBdCIsImxhc3RDaGFyIiwic3Vic3RyIiwiY29uY2F0Iiwic3VicGFydHMiLCJkZWZpbmUiLCJpc0R5bmFtaWMiLCJfcmVnbFR5cGUiLCJ1bmJveCIsInBhdGgiLCJhY2Nlc3NvciIsInJhZiIsIm5leHQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYiIsInNldFRpbWVvdXQiLCJjYW5jZWwiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNsZWFyVGltZW91dCIsImNsb2NrIiwicGVyZm9ybWFuY2UiLCJub3ciLCJEYXRlIiwicGFyc2VFeHRlbnNpb25zIiwiaW5wdXQiLCJnZXRFbGVtZW50IiwiZGVzYyIsInF1ZXJ5U2VsZWN0b3IiLCJwYXJzZUFyZ3MiLCJhcmdzXyIsImNvbnRhaW5lciIsImNhbnZhcyIsImNvbnRleHRBdHRyaWJ1dGVzIiwib3B0aW9uYWxFeHRlbnNpb25zIiwicGl4ZWxSYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJwcm9maWxlIiwib25Eb25lIiwiZXJyIiwib25EZXN0cm95Iiwibm9kZU5hbWUiLCJhcHBlbmRDaGlsZCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImRyYXdBcnJheXMiLCJkcmF3RWxlbWVudHMiLCJpc1dlYkdMQ29udGV4dCIsInRvTG93ZXJDYXNlIiwiY3JlYXRlRWxlbWVudCIsInJlc2l6ZSIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsImJvZHkiLCJib3VuZHMiLCJyaWdodCIsImxlZnQiLCJib3R0b20iLCJ0b3AiLCJib3JkZXIiLCJtYXJnaW4iLCJwYWRkaW5nIiwicG9zaXRpb24iLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZUNoaWxkIiwiY3JlYXRlQ2FudmFzIiwiZ2V0Q29udGV4dCIsImUiLCJjcmVhdGVDb250ZXh0IiwibG9vcCIsImYiLCJsb2cyIiwic2hpZnQiLCJjcmVhdGVQb29sIiwiYnVmZmVyUG9vbCIsImFsbG9jIiwibmV4dFBvdzE2IiwiYmluIiwicG9wIiwiQXJyYXlCdWZmZXIiLCJmcmVlIiwiYnVmIiwiYWxsb2NUeXBlIiwic3ViYXJyYXkiLCJmcmVlVHlwZSIsImJ1ZmZlciIsInBvb2wiLCJpc05EQXJyYXlMaWtlIiwiemVybyIsInZhbHVlcyIsImZsYXR0ZW5VdGlscyIsImFycmF5XyIsImZsYXR0ZW4iLCJvdXRfIiwib3V0IiwibngiLCJmbGF0dGVuMUQiLCJueSIsInB0ciIsInJvdyIsImZsYXR0ZW4yRCIsImZsYXR0ZW4zRCIsImZsYXR0ZW5SZWMiLCJsZXZlbCIsIm56IiwicHRyXyIsImNvbCIsImsiLCJhcnJheVR5cGVzIiwiZ2xUeXBlcyIsImludDgiLCJpbnQxNiIsImludDMyIiwidWludDgiLCJ1aW50MTYiLCJ1aW50MzIiLCJmbG9hdCIsImZsb2F0MzIiLCJ1c2FnZVR5cGVzIiwic3RyZWFtIiwiYXJyYXlGbGF0dGVuIiwiYXJyYXlTaGFwZSIsIkRUWVBFU19TSVpFUyIsInR5cGVkQXJyYXlDb2RlIiwiY29weUFycmF5IiwiaW5wIiwidHJhbnNwb3NlIiwic2hhcGVYIiwic2hhcGVZIiwic3RyaWRlWCIsInN0cmlkZVkiLCJwcmltVHlwZXMiLCJwb2ludHMiLCJwb2ludCIsInRyaWFuZ2xlcyIsInRyaWFuZ2xlIiwiRkxPQVQiLCJJTlQiLCJjb252ZXJ0VG9IYWxmRmxvYXQiLCJ1c2hvcnRzIiwiaXNOYU4iLCJJbmZpbml0eSIsInNnbiIsImV4cCIsImZyYWMiLCJpc0FycmF5TGlrZSIsImlzUG93MiQxIiwiTUlQTUFQX0ZJTFRFUlMiLCJDSEFOTkVMU19GT1JNQVQiLCJGT1JNQVRfQ0hBTk5FTFMiLCJvYmplY3ROYW1lIiwiQ0FOVkFTX0NMQVNTIiwiQ09OVEVYVDJEX0NMQVNTIiwiQklUTUFQX0NMQVNTIiwiSU1BR0VfQ0xBU1MiLCJWSURFT19DTEFTUyIsIlBJWEVMX0NMQVNTRVMiLCJUWVBFX1NJWkVTIiwiRk9STUFUX1NJWkVTX1NQRUNJQUwiLCJpc051bWVyaWNBcnJheSIsImFyciIsImlzUmVjdEFycmF5IiwiY2xhc3NTdHJpbmciLCJpc0NhbnZhc0VsZW1lbnQiLCJpc1BpeGVsRGF0YSIsInR5cGVkQXJyYXlDb2RlJDEiLCJwcmVDb252ZXJ0IiwiaW1hZ2UiLCJwb3N0Q29udmVydCIsImdldFRleHR1cmVTaXplIiwiaXNNaXBtYXAiLCJpc0N1YmUiLCJ0b3RhbCIsImNyZWF0ZVRleHR1cmVTZXQiLCJyZWdsUG9sbCIsImNvbnRleHRTdGF0ZSIsInN0YXRzIiwiY29uZmlnIiwibWlwbWFwSGludCIsIndyYXBNb2RlcyIsIm1hZ0ZpbHRlcnMiLCJtaW5GaWx0ZXJzIiwiY29sb3JTcGFjZSIsInRleHR1cmVUeXBlcyIsInRleHR1cmVGb3JtYXRzIiwiY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzIiwiZXh0X3NyZ2IiLCJzcmdiIiwic3JnYmEiLCJvZXNfdGV4dHVyZV9mbG9hdCIsIm9lc190ZXh0dXJlX2hhbGZfZmxvYXQiLCJ3ZWJnbF9kZXB0aF90ZXh0dXJlIiwid2ViZ2xfY29tcHJlc3NlZF90ZXh0dXJlX3MzdGMiLCJ3ZWJnbF9jb21wcmVzc2VkX3RleHR1cmVfYXRjIiwid2ViZ2xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjIiwid2ViZ2xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YzEiLCJzdXBwb3J0ZWRDb21wcmVzc2VkRm9ybWF0cyIsInNsaWNlIiwiZ2V0UGFyYW1ldGVyIiwic3VwcG9ydGVkRm9ybWF0cyIsInRleHR1cmVGb3JtYXRzSW52ZXJ0IiwidmFsIiwidGV4dHVyZVR5cGVzSW52ZXJ0IiwibWFnRmlsdGVyc0ludmVydCIsIm1pbkZpbHRlcnNJbnZlcnQiLCJ3cmFwTW9kZXNJbnZlcnQiLCJjb2xvckZvcm1hdHMiLCJyZWR1Y2UiLCJjb2xvciIsImdsZW51bSIsIlRleEZsYWdzIiwicHJlbXVsdGlwbHlBbHBoYSIsImZsaXBZIiwiY29weUZsYWdzIiwib3RoZXIiLCJwYXJzZUZsYWdzIiwiZmxhZ3MiLCJhbGlnbm1lbnQiLCJoYXNDaGFubmVscyIsInJhZGl1cyIsImhhc0Zvcm1hdCIsImZvcm1hdFN0ciIsInNldEZsYWdzIiwicGl4ZWxTdG9yZWkiLCJUZXhJbWFnZSIsInhPZmZzZXQiLCJ5T2Zmc2V0IiwibmVlZHNGcmVlIiwibmVlZHNDb3B5IiwicGFyc2VJbWFnZSIsInkiLCJ2aWV3VyIsInZpZXdwb3J0V2lkdGgiLCJ2aWV3SCIsInZpZXdwb3J0SGVpZ2h0IiwiY29udmVydGVkIiwiY29udmVydERhdGEiLCJzaGFwZUMiLCJzdHJpZGVDIiwidHJhbnNwb3NlRGF0YSIsImlzQml0bWFwIiwiaXNJbWFnZUVsZW1lbnQiLCJuYXR1cmFsV2lkdGgiLCJuYXR1cmFsSGVpZ2h0IiwiaXNWaWRlb0VsZW1lbnQiLCJ2aWRlb1dpZHRoIiwidmlkZW9IZWlnaHQiLCJkZCIsImFsbG9jRGF0YSIsInNldEltYWdlIiwidGFyZ2V0IiwibWlwbGV2ZWwiLCJ0ZXhJbWFnZTJEIiwiY29tcHJlc3NlZFRleEltYWdlMkQiLCJjb3B5VGV4SW1hZ2UyRCIsIm51bGxEYXRhIiwic2V0U3ViSW1hZ2UiLCJ0ZXhTdWJJbWFnZTJEIiwiY29tcHJlc3NlZFRleFN1YkltYWdlMkQiLCJjb3B5VGV4U3ViSW1hZ2UyRCIsImltYWdlUG9vbCIsImFsbG9jSW1hZ2UiLCJmcmVlSW1hZ2UiLCJNaXBNYXAiLCJwYXJzZU1pcE1hcEZyb21TaGFwZSIsIm1pcG1hcCIsInBhcnNlTWlwTWFwRnJvbU9iamVjdCIsImltZ0RhdGEiLCJzZXRNaXBNYXAiLCJtaXBQb29sIiwiYWxsb2NNaXBNYXAiLCJmcmVlTWlwTWFwIiwiVGV4SW5mbyIsImFuaXNvdHJvcGljIiwicGFyc2VUZXhJbmZvIiwibWluIiwibWFnIiwid3JhcCIsIm9wdFdyYXBTIiwib3B0V3JhcFQiLCJtYXhBbmlzb3Ryb3BpYyIsImhhc01pcE1hcCIsInNldFRleEluZm8iLCJ0ZXhQYXJhbWV0ZXJpIiwiZXh0X3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljIiwiaGludCIsImdlbmVyYXRlTWlwbWFwIiwidGV4dHVyZUNvdW50IiwidGV4dHVyZVNldCIsIm51bVRleFVuaXRzIiwibWF4VGV4dHVyZVVuaXRzIiwidGV4dHVyZVVuaXRzIiwiUkVHTFRleHR1cmUiLCJyZWZDb3VudCIsImNyZWF0ZVRleHR1cmUiLCJ1bml0IiwiYmluZENvdW50IiwidGV4SW5mbyIsInNpemUiLCJ0ZW1wQmluZCIsImFjdGl2ZVRleHR1cmUiLCJiaW5kVGV4dHVyZSIsInRlbXBSZXN0b3JlIiwicHJldiIsImRlc3Ryb3kiLCJoYW5kbGUiLCJkZWxldGVUZXh0dXJlIiwicGFyYW1zIiwicGl4ZWxzIiwidW5iaW5kIiwiZGVjUmVmIiwiZ2V0VG90YWxUZXh0dXJlU2l6ZSIsImNyZWF0ZTJEIiwicmVnbFRleHR1cmUyRCIsInN1YmltYWdlIiwieF8iLCJ5XyIsImxldmVsXyIsImltYWdlRGF0YSIsIndfIiwiaF8iLCJfdyIsIl9oIiwiY3JlYXRlQ3ViZSIsImEwIiwiYTEiLCJhMiIsImEzIiwiYTQiLCJhNSIsImN1YmVDb3VudCIsInJlZ2xUZXh0dXJlQ3ViZSIsImZhY2VfaW5wdXQiLCJucG90VGV4dHVyZUN1YmUiLCJyYWRpdXNfIiwiY2xlYXIiLCJnZXRUZXh0dXJlIiwid3JhcHBlciIsInJlc3RvcmUiLCJ0ZXgiLCJGT1JNQVRfU0laRVMiLCJnZXRSZW5kZXJidWZmZXJTaXplIiwiY29sb3JUZXh0dXJlRm9ybWF0RW51bXMiLCJ0ZXh0dXJlRm9ybWF0Q2hhbm5lbHMiLCJ0ZXh0dXJlVHlwZVNpemVzIiwiY29sb3JSZW5kZXJidWZmZXJGb3JtYXRFbnVtcyIsInN0YXR1c0NvZGUiLCJBdHRyaWJ1dGVSZWNvcmQiLCJzdGF0ZSIsInoiLCJub3JtYWxpemVkIiwiZGl2aXNvciIsIndyYXBSZWFkUGl4ZWxzIiwiZnJhbWVidWZmZXJTdGF0ZSIsImNvbnRleHQiLCJnbEF0dHJpYnV0ZXMiLCJyZWFkUGl4ZWxzSW1wbCIsInByZXNlcnZlRHJhd2luZ0J1ZmZlciIsImNvbG9yQXR0YWNobWVudHMiLCJyZWFkRmxvYXQiLCJmcmFtZWJ1ZmZlcldpZHRoIiwiZnJhbWVidWZmZXJIZWlnaHQiLCJyZWFkUGl4ZWxzIiwic2V0RkJPIiwiZnJhbWVidWZmZXIiLCJyZWFkUGl4ZWxzRkJPIiwiQ1VURV9DT01QT05FTlRTIiwiU19QUk9GSUxFIiwiU19GUkFNRUJVRkZFUiIsIlNfVkVSVCIsIlNfRlJBRyIsIlNfRUxFTUVOVFMiLCJTX1BSSU1JVElWRSIsIlNfQ09VTlQiLCJTX09GRlNFVCIsIlNfSU5TVEFOQ0VTIiwiU19GUkFNRUJVRkZFUl9XSURUSCIsIlNfRlJBTUVCVUZGRVJfSEVJR0hUIiwiTkVTVEVEX09QVElPTlMiLCJibGVuZEZ1bmNzIiwiaW52YWxpZEJsZW5kQ29tYmluYXRpb25zIiwiY29tcGFyZUZ1bmNzIiwic3RlbmNpbE9wcyIsInNoYWRlclR5cGUiLCJvcmllbnRhdGlvblR5cGUiLCJpc0J1ZmZlckFyZ3MiLCJzb3J0U3RhdGUiLCJEZWNsYXJhdGlvbiIsInRoaXNEZXAiLCJjb250ZXh0RGVwIiwicHJvcERlcCIsImFwcGVuZCIsImlzU3RhdGljIiwiZGVjbCIsImNyZWF0ZVN0YXRpY0RlY2wiLCJjcmVhdGVEeW5hbWljRGVjbCIsImR5biIsIm51bUFyZ3MiLCJTQ09QRV9ERUNMIiwicmVnbENvcmUiLCJidWZmZXJTdGF0ZSIsImVsZW1lbnRTdGF0ZSIsInRleHR1cmVTdGF0ZSIsInVuaWZvcm1TdGF0ZSIsImF0dHJpYnV0ZVN0YXRlIiwic2hhZGVyU3RhdGUiLCJkcmF3U3RhdGUiLCJ0aW1lciIsIlJlY29yZCIsImJsZW5kRXF1YXRpb25zIiwiZXh0X2JsZW5kX21pbm1heCIsImV4dEluc3RhbmNpbmciLCJhbmdsZV9pbnN0YW5jZWRfYXJyYXlzIiwiZXh0RHJhd0J1ZmZlcnMiLCJ3ZWJnbF9kcmF3X2J1ZmZlcnMiLCJjdXJyZW50U3RhdGUiLCJkaXJ0eSIsIm5leHRTdGF0ZSIsIkdMX1NUQVRFX05BTUVTIiwiR0xfRkxBR1MiLCJHTF9WQVJJQUJMRVMiLCJwcm9wTmFtZSIsInN0YXRlRmxhZyIsInNuYW1lIiwiY2FwIiwiaW5pdCIsInN0YXRlVmFyaWFibGUiLCJmdW5jIiwiZHJhd2luZ0J1ZmZlcldpZHRoIiwiZHJhd2luZ0J1ZmZlckhlaWdodCIsInNoYXJlZFN0YXRlIiwiY3VycmVudCIsImRyYXciLCJlbGVtZW50cyIsInNoYXJlZENvbnN0YW50cyIsImJhY2tCdWZmZXIiLCJkcmF3QnVmZmVyIiwibWF4RHJhd2J1ZmZlcnMiLCJkcmF3Q2FsbENvdW50ZXIiLCJjcmVhdGVSRUdMRW52aXJvbm1lbnQiLCJlbnYiLCJ2YXJDb3VudGVyIiwibGlua2VkTmFtZXMiLCJsaW5rZWRWYWx1ZXMiLCJ2YXJzIiwiYXJndW1lbnRzIiwiZGVmIiwic2NvcGUiLCJlbnRyeSIsImV4aXQiLCJlbnRyeVRvU3RyaW5nIiwiZXhpdFRvU3RyaW5nIiwic2F2ZSIsInByb3AiLCJnbG9iYWxCbG9jayIsInByb2NlZHVyZXMiLCJnbG9iYWwiLCJsaW5rIiwicHJvYyIsImNvdW50IiwiYXJnIiwiYm9keVRvU3RyaW5nIiwiY29uZCIsInRoZW5CbG9jayIsImVsc2VCbG9jayIsInRoZW5Ub1N0cmluZyIsImVsc2VUb1N0cmluZyIsInRoZW4iLCJlbHNlIiwiZWxzZUNsYXVzZSIsImNvbXBpbGUiLCJzcmMiLCJjcmVhdGVFbnZpcm9ubWVudCIsImJhdGNoSWQiLCJTSEFSRUQiLCJzaGFyZWQiLCJwcm9wcyIsIkNIRUNLIiwiY29tbWFuZFN0ciIsImFzc2VydCIsIm5leHRWYXJzIiwiY3VycmVudFZhcnMiLCJ2YXJpYWJsZSIsImNvbnN0YW50cyIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbnZva2UiLCJhcmdMaXN0IiwicmVmIiwiYXR0cmliQ2FjaGUiLCJzY29wZUF0dHJpYnMiLCJzY29wZUF0dHJpYiIsImJpbmRpbmciLCJwYXJzZUFyZ3VtZW50cyIsInN0YXRpY09wdGlvbnMiLCJkeW5hbWljT3B0aW9ucyIsIktFWV9OQU1FUyIsImNoZWNrS2V5cyIsImdldEZyYW1lYnVmZmVyIiwiRlJBTUVCVUZGRVIiLCJDT05URVhUIiwiRlJBTUVCVUZGRVJfRlVOQyIsIkZSQU1FQlVGRkVSX1NUQVRFIiwicGFyc2VGcmFtZWJ1ZmZlciIsInZpZXdwb3J0QW5kU2Npc3NvciIsInBhcnNlQm94IiwiYm94IiwiQk9YX1ciLCJCT1hfSCIsImR5bkJveCIsIkJPWCIsIkJPWF9YIiwiQk9YX1kiLCJ2aWV3cG9ydCIsInByZXZWaWV3cG9ydCIsIlZJRVdQT1JUIiwic2Npc3Nvcl9ib3giLCJwYXJzZVZpZXdwb3J0U2Npc3NvciIsImdldEVsZW1lbnRzIiwiRUxFTUVOVFMiLCJJU19CVUZGRVJfQVJHUyIsIkVMRU1FTlRfU1RBVEUiLCJlbGVtZW50RGVmbiIsImVsZW1lbnRTdHJlYW0iLCJpZnRlIiwicGFyc2VFbGVtZW50cyIsInBhcnNlUGFyYW0iLCJpc09mZnNldCIsIk9GRlNFVCIsImR5blZhbHVlIiwicHJpbWl0aXZlIiwiZHluUHJpbWl0aXZlIiwiUFJJTV9UWVBFUyIsInByaW0iLCJwYXJzZVByaW1pdGl2ZSIsImR5bkNvdW50IiwiTUlTU0lORyIsIkRZTkFNSUMiLCJwYXJzZVZlcnRDb3VudCIsImluc3RhbmNlcyIsInBhcnNlRHJhdyIsIlNUQVRFIiwicGFyc2VTdGF0aWMiLCJwYXJzZUR5bmFtaWMiLCJDT01QQVJFX0ZVTkNTIiwic3JjUkdCIiwic3JjQWxwaGEiLCJkc3RSR0IiLCJkc3QiLCJkc3RBbHBoYSIsIkJMRU5EX0ZVTkNTIiwicmVhZCIsInByZWZpeCIsInN1ZmZpeCIsIklOVkFMSURfQkxFTkRfQ09NQklOQVRJT05TIiwiU1JDX1JHQiIsIlNSQ19BTFBIQSIsInJnYiIsImFscGhhIiwiQkxFTkRfRVFVQVRJT05TIiwiUkdCIiwiQUxQSEEiLCJjaGVja1Byb3AiLCJjbXAiLCJtYXNrIiwiZmFpbCIsInpmYWlsIiwienBhc3MiLCJTVEVOQ0lMX09QUyIsImZhY3RvciIsInVuaXRzIiwibGluZVdpZHRoRGltcyIsInNhbXBsZVZhbHVlIiwic2FtcGxlSW52ZXJ0IiwiaW52ZXJ0IiwicGFyc2VHTFN0YXRlIiwicGFyc2VTaGFkZXIiLCJwcm9nVmFyIiwiZnJhZ0lkIiwiU0hBREVSX1NUQVRFIiwicHJvZ0RlZiIsInBhcnNlUHJvZ3JhbSIsImNvcHlCb3giLCJkZWZuIiwicHJvZmlsZUVuYWJsZSIsImVuYWJsZSIsInBhcnNlUHJvZmlsZSIsInN0YXRpY1VuaWZvcm1zIiwiZHluYW1pY1VuaWZvcm1zIiwiVU5JRk9STVMiLCJyZWdsVHlwZSIsInBhcnNlVW5pZm9ybXMiLCJzdGF0aWNBdHRyaWJ1dGVzIiwiZHluYW1pY0F0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVEZWZzIiwiYXR0cmlidXRlIiwicmVjb3JkIiwiZ2V0QnVmZmVyIiwiY29uc3RhbnQiLCJWQUxJRF9LRVlTIiwiY2FjaGUiLCJpc1N0cmVhbSIsIlZBTFVFIiwiQlVGRkVSX1NUQVRFIiwiZGVmYXVsdFJlY29yZCIsIkJVRkZFUiIsIlRZUEUiLCJlbWl0UmVhZFJlY29yZCIsInBhcnNlQXR0cmlidXRlcyIsInN0YXRpY0NvbnRleHQiLCJkeW5hbWljQ29udGV4dCIsInBhcnNlQ29udGV4dCIsImVtaXRDb250ZXh0IiwiY29udGV4dEVudGVyIiwiZW1pdFBvbGxGcmFtZWJ1ZmZlciIsInNraXBDaGVjayIsIkVYVF9EUkFXX0JVRkZFUlMiLCJHTCIsIk5FWFQiLCJEUkFXX0JVRkZFUlMiLCJCQUNLX0JVRkZFUiIsImVtaXRQb2xsU3RhdGUiLCJDVVJSRU5UX1ZBUlMiLCJORVhUX1ZBUlMiLCJDVVJSRU5UX1NUQVRFIiwiTkVYVF9TVEFURSIsIkNVUlJFTlQiLCJlbWl0U2V0T3B0aW9ucyIsImZpbHRlciIsImZsYWciLCJpbmplY3RFeHRlbnNpb25zIiwiaW5zdGFuY2luZyIsImVtaXRQcm9maWxlIiwidXNlU2NvcGUiLCJpbmNyZW1lbnRDb3VudGVyIiwiQ1BVX1NUQVJUIiwiUVVFUllfQ09VTlRFUiIsIlVTRV9QUk9GSUxFIiwiU1RBVFMiLCJUSU1FUiIsInByb2ZpbGVBcmciLCJwZXJmQ291bnRlciIsImVtaXRQcm9maWxlU3RhcnQiLCJlbWl0UHJvZmlsZUVuZCIsInNjb3BlUHJvZmlsZSIsInN0YXJ0IiwiZW5kIiwiZW1pdEF0dHJpYnV0ZXMiLCJBVFRSSUJVVEUiLCJMT0NBVElPTiIsIkJJTkRJTkciLCJDT05TVF9DT01QT05FTlRTIiwiQ09NTU9OX0tFWVMiLCJlbWl0QnVmZmVyIiwiU0laRSIsIkRJVklTT1IiLCJlbWl0Q29uc3RhbnQiLCJlbWl0QmluZEF0dHJpYnV0ZSIsInR5cGVMZW5ndGgiLCJlbWl0VW5pZm9ybXMiLCJpbmZpeCIsInVuaWZvcm0iLCJURVhfVkFMVUUiLCJNQVRfVkFMVUUiLCJkaW0iLCJjaGVja1R5cGUiLCJjaGVja1ZlY3RvciIsImNoZWNrVGV4dHVyZSIsInVucm9sbCIsIlRFWCIsIm1hdFNpemUiLCJwb3ciLCJTVE9SQUdFIiwiZW1pdERyYXciLCJvdXRlciIsImlubmVyIiwiRFJBV19TVEFURSIsImRyYXdPcHRpb25zIiwiY29udGV4dER5bmFtaWMiLCJlbWl0RWxlbWVudHMiLCJlbWl0VmFsdWUiLCJJTlNUQU5DRVMiLCJFWFRfSU5TVEFOQ0lORyIsIlBSSU1JVElWRSIsIkNPVU5UIiwiZW1pdENvdW50IiwiRUxFTUVOVF9UWVBFIiwiZWxlbWVudHNTdGF0aWMiLCJlbWl0SW5zdGFuY2luZyIsImVtaXRSZWd1bGFyIiwiY3JlYXRlQm9keSIsImVtaXRCb2R5IiwicGFyZW50RW52IiwiZW1pdERyYXdCb2R5IiwiZW1pdEJhdGNoRHluYW1pY1NoYWRlckJvZHkiLCJhbGwiLCJlbWl0QmF0Y2hCb2R5IiwiQkFUQ0hfSUQiLCJQUk9QUyIsImlzSW5uZXJEZWZuIiwiaXNPdXRlckRlZm4iLCJuZWVkc0NvbnRleHQiLCJuZWVkc0ZyYW1lYnVmZmVyIiwicHJvZ0NhY2hlIiwiUFJPR1JBTSIsIlBST0dfSUQiLCJDQUNIRURfUFJPQyIsInNwbGF0T2JqZWN0IiwiaXNEeW5hbWljT2JqZWN0IiwiZ2xvYmFscyIsIm9iamVjdFJlZiIsImRlcHMiLCJwcm9jcyIsInBvbGwiLCJyZWZyZXNoIiwiY29tbW9uIiwiSU5TVEFOQ0lORyIsIm1heEF0dHJpYnV0ZXMiLCJkcmF3Q2FjaGUiLCJlbWl0RHJhd1Byb2MiLCJzYXZlU2hhZGVyIiwib3B0IiwiZW1pdFNjb3BlUHJvYyIsImJhdGNoIiwicHJvZ0RlZm4iLCJiYXRjaENhY2hlIiwiZW1pdEJhdGNoUHJvYyIsImNyZWF0ZVRpbWVyIiwiZXh0X2Rpc2pvaW50X3RpbWVyX3F1ZXJ5IiwicXVlcnlQb29sIiwiZnJlZVF1ZXJ5IiwicXVlcnkiLCJwZW5kaW5nUXVlcmllcyIsIlBlbmRpbmdTdGF0cyIsInN0YXJ0UXVlcnlJbmRleCIsImVuZFF1ZXJ5SW5kZXgiLCJzdW0iLCJwZW5kaW5nU3RhdHNQb29sIiwiZnJlZVBlbmRpbmdTdGF0cyIsInBlbmRpbmdTdGF0cyIsInB1c2hTY29wZVN0YXRzIiwicHMiLCJ0aW1lU3VtIiwicXVlcnlQdHIiLCJiZWdpblF1ZXJ5IiwiY3JlYXRlUXVlcnlFWFQiLCJiZWdpblF1ZXJ5RVhUIiwiZW5kUXVlcnkiLCJlbmRRdWVyeUVYVCIsInVwZGF0ZSIsInF1ZXJ5VGltZSIsImdldFF1ZXJ5T2JqZWN0RVhUIiwic3RhcnRQdHIiLCJlbmRQdHIiLCJncHVUaW1lIiwiZ2V0TnVtUGVuZGluZ1F1ZXJpZXMiLCJkZWxldGVRdWVyeUVYVCIsImZpbmQiLCJoYXlzdGFjayIsIm5lZWRsZSIsImdldENvbnRleHRBdHRyaWJ1dGVzIiwiY29udGV4dExvc3QiLCJpc0NvbnRleHRMb3N0IiwiZXh0ZW5zaW9uU3RhdGUiLCJ0cnlMb2FkRXh0ZW5zaW9uIiwibmFtZV8iLCJleHQiLCJnZXRFeHRlbnNpb24iLCJjcmVhdGVFeHRlbnNpb25DYWNoZSIsInN0cmluZ0lkcyIsInN0cmluZ1ZhbHVlcyIsInN0YXRzJCQxIiwiYnVmZmVyQ291bnQiLCJlbGVtZW50c0NvdW50IiwiZnJhbWVidWZmZXJDb3VudCIsInNoYWRlckNvdW50IiwicmVuZGVyYnVmZmVyQ291bnQiLCJTVEFSVF9USU1FIiwiV0lEVEgiLCJIRUlHSFQiLCJ0aWNrIiwidGltZSIsIm1heENvbG9yQXR0YWNobWVudHMiLCJyZWFkRmxvYXRUZXh0dXJlIiwiZmJvIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJiaW5kRnJhbWVidWZmZXIiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRCIsImNoZWNrRnJhbWVidWZmZXJTdGF0dXMiLCJjbGVhckNvbG9yIiwiZ2V0RXJyb3IiLCJkZWxldGVGcmFtZWJ1ZmZlciIsIm5hdmlnYXRvciIsInRlc3QiLCJ1c2VyQWdlbnQiLCJhcHBWZXJzaW9uIiwiY3ViZVRleHR1cmUiLCJjb2xvckJpdHMiLCJkZXB0aEJpdHMiLCJzdGVuY2lsQml0cyIsInN1YnBpeGVsQml0cyIsInBvaW50U2l6ZURpbXMiLCJtYXhWaWV3cG9ydERpbXMiLCJtYXhDb21iaW5lZFRleHR1cmVVbml0cyIsIm1heEN1YmVNYXBTaXplIiwibWF4UmVuZGVyYnVmZmVyU2l6ZSIsIm1heFZlcnRleFVuaWZvcm1zIiwibWF4VmVydGV4VGV4dHVyZVVuaXRzIiwibWF4VmFyeWluZ1ZlY3RvcnMiLCJtYXhGcmFnbWVudFVuaWZvcm1zIiwiZ2xzbCIsInJlbmRlcmVyIiwidmVuZG9yIiwidmVyc2lvbiIsIndyYXBMaW1pdHMiLCJOVU1fQVRUUklCVVRFUyIsImF0dHJpYnV0ZUJpbmRpbmdzIiwid3JhcEF0dHJpYnV0ZVN0YXRlIiwiYnVmZmVyU2V0IiwiUkVHTEJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsInVzYWdlIiwicGVyc2lzdGVudERhdGEiLCJiaW5kQnVmZmVyIiwic3RyZWFtUG9vbCIsImluaXRCdWZmZXJGcm9tVHlwZWRBcnJheSIsImJ1ZmZlckRhdGEiLCJpbml0QnVmZmVyRnJvbURhdGEiLCJwZXJzaXN0IiwiZmxhdERhdGEiLCJ0eXBlZERhdGEiLCJkaXNhYmxlVmVydGV4QXR0cmliQXJyYXkiLCJkZWxldGVCdWZmZXIiLCJnZXRUb3RhbEJ1ZmZlclNpemUiLCJkZWZlckluaXQiLCJwZXJzaXN0ZW50IiwicmVnbEJ1ZmZlciIsInNldFN1YkRhdGEiLCJidWZmZXJTdWJEYXRhIiwiX2J1ZmZlciIsInN1YmRhdGEiLCJvZmZzZXRfIiwiY3JlYXRlU3RyZWFtIiwiZGVzdHJveVN0cmVhbSIsInN0cmVhbSQkMSIsIl9pbml0QnVmZmVyIiwid3JhcEJ1ZmZlclN0YXRlIiwiZWxlbWVudFNldCIsImVsZW1lbnRDb3VudCIsImVsZW1lbnRUeXBlcyIsIlJFR0xFbGVtZW50QnVmZmVyIiwicHJpbVR5cGUiLCJ2ZXJ0Q291bnQiLCJvZXNfZWxlbWVudF9pbmRleF91aW50IiwiaW5pdEVsZW1lbnRzIiwicHJlZGljdGVkVHlwZSIsImRlc3Ryb3lFbGVtZW50cyIsInJlZ2xFbGVtZW50cyIsIl9lbGVtZW50cyIsIndyYXBFbGVtZW50c1N0YXRlIiwiZnJhZ1NoYWRlcnMiLCJ2ZXJ0U2hhZGVycyIsIkFjdGl2ZUluZm8iLCJsb2NhdGlvbiIsImluc2VydEFjdGl2ZUluZm8iLCJnZXRTaGFkZXIiLCJjcmVhdGVTaGFkZXIiLCJzaGFkZXJTb3VyY2UiLCJjb21waWxlU2hhZGVyIiwicHJvZ3JhbUNhY2hlIiwicHJvZ3JhbUxpc3QiLCJQUk9HUkFNX0NPVU5URVIiLCJSRUdMUHJvZ3JhbSIsInZlcnRJZCIsInVuaWZvcm1zQ291bnQiLCJhdHRyaWJ1dGVzQ291bnQiLCJsaW5rUHJvZ3JhbSIsImNyZWF0ZVByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJudW1Vbmlmb3JtcyIsImdldEFjdGl2ZVVuaWZvcm0iLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJudW1BdHRyaWJ1dGVzIiwiZ2V0QWN0aXZlQXR0cmliIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJnZXRNYXhVbmlmb3Jtc0NvdW50IiwiZ2V0TWF4QXR0cmlidXRlc0NvdW50IiwiZGVsZXRlU2hhZGVyIiwiZGVsZXRlUHJvZ3JhbSIsIndyYXBTaGFkZXJTdGF0ZSIsImNvcmUiLCJyZW5kZXJidWZmZXJTdGF0ZSIsImZvcm1hdFR5cGVzIiwiZXh0X2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0Iiwid2ViZ2xfY29sb3JfYnVmZmVyX2Zsb2F0IiwiZm9ybWF0VHlwZXNJbnZlcnQiLCJyZW5kZXJidWZmZXJTZXQiLCJSRUdMUmVuZGVyYnVmZmVyIiwicmIiLCJiaW5kUmVuZGVyYnVmZmVyIiwiZGVsZXRlUmVuZGVyYnVmZmVyIiwiZ2V0VG90YWxSZW5kZXJidWZmZXJTaXplIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwicmVnbFJlbmRlcmJ1ZmZlciIsInJlbmRlcmJ1ZmZlclN0b3JhZ2UiLCJ3cmFwUmVuZGVyYnVmZmVycyIsImN1ciIsImNvbG9yVGV4dHVyZUZvcm1hdHMiLCJjb2xvclJlbmRlcmJ1ZmZlckZvcm1hdHMiLCJjb2xvclR5cGVzIiwiRnJhbWVidWZmZXJBdHRhY2htZW50IiwiaW5jUmVmQW5kQ2hlY2tTaGFwZSIsInR3IiwidGgiLCJhdHRhY2giLCJmcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlciIsInBhcnNlQXR0YWNobWVudCIsIkdMX1RFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCQyIiwiYWxsb2NBdHRhY2htZW50IiwiaXNUZXh0dXJlIiwidW53cmFwQXR0YWNobWVudCIsInJlc2l6ZUF0dGFjaG1lbnQiLCJmcmFtZWJ1ZmZlclNldCIsIlJFR0xGcmFtZWJ1ZmZlciIsImRlcHRoQXR0YWNobWVudCIsInN0ZW5jaWxBdHRhY2htZW50IiwiZGVwdGhTdGVuY2lsQXR0YWNobWVudCIsImRlY0ZCT1JlZnMiLCJ1cGRhdGVGcmFtZWJ1ZmZlciIsInN0YXR1cyIsImNyZWF0ZUZCTyIsInJlZ2xGcmFtZWJ1ZmZlciIsIm5lZWRzRGVwdGgiLCJuZWVkc1N0ZW5jaWwiLCJjb2xvckJ1ZmZlciIsImNvbG9yVGV4dHVyZSIsImNvbG9yRm9ybWF0IiwiY29sb3JUeXBlIiwiY29sb3JDb3VudCIsImRlcHRoQnVmZmVyIiwic3RlbmNpbEJ1ZmZlciIsImRlcHRoU3RlbmNpbEJ1ZmZlciIsImRlcHRoU3RlbmNpbFRleHR1cmUiLCJjb2xvcnMiLCJkZXB0aFRleHR1cmUiLCJkZXB0aCIsInN0ZW5jaWwiLCJkZXB0aFN0ZW5jaWwiLCJjb21tb25Db2xvckF0dGFjaG1lbnRTaXplIiwiY29sb3JBdHRhY2htZW50U2l6ZSIsIl9mcmFtZWJ1ZmZlciIsInVzZSIsInJlZ2xGcmFtZWJ1ZmZlckN1YmUiLCJjb2xvckN1YmVzIiwiY3ViZU1hcFBhcmFtcyIsImN1YmUiLCJmYiIsIndyYXBGQk9TdGF0ZSIsInJhZkNhbGxiYWNrcyIsImxvc3NDYWxsYmFja3MiLCJyZXN0b3JlQ2FsbGJhY2tzIiwiZGVzdHJveUNhbGxiYWNrcyIsImFjdGl2ZVJBRiIsImhhbmRsZVJBRiIsImZsdXNoIiwic3RhcnRSQUYiLCJzdG9wUkFGIiwiaGFuZGxlQ29udGV4dExvc3MiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiaGFuZGxlQ29udGV4dFJlc3RvcmVkIiwiY29tcGlsZVByb2NlZHVyZSIsInNlcGFyYXRlRHluYW1pYyIsInN0YXRpY0l0ZW1zIiwiZHluYW1pY0l0ZW1zIiwib3B0aW9uIiwibWVyZ2UiLCJjaGlsZCIsIm9wIiwib3BCYWNrIiwib3BGcm9udCIsImZsYXR0ZW5OZXN0ZWRPcHRpb25zIiwiY3B1VGltZSIsImNvbXBpbGVkIiwiRU1QVFlfQVJSQVkiLCJyZXNlcnZlIiwiY2xlYXJJbXBsIiwiXyIsImNsZWFyRmxhZ3MiLCJjbGVhckRlcHRoIiwiY2xlYXJTdGVuY2lsIiwiZnJhbWUiLCJwZW5kaW5nQ2FuY2VsIiwicG9sbFZpZXdwb3J0Iiwic2Npc3NvckJveCIsInJlZ2wiLCJmcmFtZWJ1ZmZlcl9yZWdsVHlwZSIsImZyYW1lYnVmZmVyQ3ViZSIsIm9uIiwiY2FsbGJhY2siLCJjYWxsYmFja3MiLCJoYXNFeHRlbnNpb24iLCJfZ2wiLCJfcmVmcmVzaCIsImZhY3RvcnkiLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJnZXRUYXJnZXQiLCJzdHlsZVRhcmdldCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaXRlbSIsImNzcyIsIm1lZGlhIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRTdHlsZSIsImluc2VydFN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0IiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJpbnNlcnRCZWZvcmUiLCJhcHBseVRvVGFnIiwicmVtb3ZlQXR0cmlidXRlIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZmlyc3RDaGlsZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZUluZGV4IiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsInNwbGljZSIsIl9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyIsInVzZVNvdXJjZU1hcCIsImNzc01hcHBpbmciLCJzb3VyY2VNYXBwaW5nIiwiYmFzZTY0Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2VSb290IiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwicmVhZEZsb2F0TEUiLCJpc1Nsb3dCdWZmZXIiLCJfaXNCdWZmZXIiLCJsb2FkU2luZ2xlSW1hZ2UiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsIiwiY29tcGxldGUiLCJhc3NpZ24iLCJsb2FkSW1hZ2VzIiwiSFRNTEltYWdlRWxlbWVudCIsImltYWdlXzEiLCJJbWFnZSIsInJlZmxlY3RlZCIsImNhdGNoIiwicmVzdWx0cyIsImxvYWRlZCIsImVycm9yZWQiLCJUeXBlRXJyb3IiLCJpbWFnZV9kYXRhIiwiaW1hZ2VfcHJvbWlzZSIsImN0eCIsImRyYXdJbWFnZSIsImdldEltYWdlRGF0YSIsImZldGNoX2pzb24iLCJ1cmwiLCJmZXRjaCIsInJlc3AiLCJvayIsImpzb24iLCJzYW1wbGUiLCJ0ZW1wIiwic2h1ZmZsZWQiLCJmbG9vciIsInJhbmRvbSIsImNsYW1wIiwicmFuZ2UiLCJmaWxsIiwiaW5WaWV3IiwiZWwiLCJkaXN0cmljdF9jb2xvcl92YWx1ZXMiLCJkaXN0cmljdCIsIm5fZGlzdHJpY3RzIiwic3RhdGVkYXRhIiwicGFydHlfMSIsInBhcnR5XzIiLCJkaSIsInRpbGVfaWR4Iiwidm90ZXJzIiwiZGlzdF92YWx1ZXMiLCJ0aWxlX2NvbG9yX3ZhbHVlcyIsImRyYXdfY29tbWFuZCIsInJ1bmRhdGEiLCJkaXYiLCJvbl9jaGFuZ2UiLCJwYXJjb29yZHMiLCJueF9tYXgiLCJueV9tYXgiLCJuZWVkc19kcmF3IiwiYnJ1c2hlZF9pbmRleGVzIiwic29sdXRpb25zIiwiX3YiLCJtZXRyaWNzIiwiX29uUGFyQ29vcmRzVXBkYXRlIiwiZDMiLCJoaWRlQXhpcyIsInJlbmRlciIsInNoYWRvd3MiLCJyZW9yZGVyYWJsZSIsImJydXNoTW9kZSIsInZpZXdlcl9kaXYiLCJzY3JvbGxfYmxvY2tzIiwicXVlcnlTZWxlY3RvckFsbCIsInVuaGlnaGxpZ2h0Iiwib25DbGljayIsImNfaSIsImNfaiIsImhpZ2hsaWdodCIsIm9uTW91c2VNb3ZlIiwib25Nb3VzZUxlYXZlIiwib25TY3JvbGwiLCJzdGlja190b3BfcG9pbnQiLCJfdXBkYXRlU2Nyb2xsQmxvY2tzIiwibW9zdF9taWRkbGUiLCJtb2JpbGUiLCJ5X3BlcmMiLCJmcm9tX21pZCIsIm9wYWNpdHkiLCJjbGFzc0xpc3QiLCJhZGQiLCJvblJlc2l6ZSIsImNsaWVudFdpZHRoIiwib25TdGVwIiwic3FydCIsImlubmVySFRNTCIsIm5lZWRzRHJhdyIsImxvYWRfdmlld2VycyIsInZpZXdlcnMiLCJtYXBkYXRhIiwiZHJhd19jbWQiLCJtYXBfZGF0YSIsIm1ldGhvZCIsImRyYXdfbWFwIiwiYWxsX2NvbG9ycyIsIm5fdGlsZXMiLCJjb2xvcl90ZXh0dXJlX3NpemUiLCJ1X3NpemUiLCJtYXBfdGV4dHVyZSIsImNvbG9yX3ZhbHVlcyIsImNvbG9yX3NpemUiLCJnIiwidGltZUVuZCIsImRyYXdfZGlzdHJpY3RzIiwiZGF0YXNldCIsImRhdGFwYXRoIiwiUmVzdWx0Vmlld2VyIiwic3RlcCIsImxhc3Rfc2Nyb2xsIiwic2Nyb2xsWSIsImFjdGl2ZV92aWV3ZXIiLCJhbnRpYWxpYXMiLCJvbmNsaWNrIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJjbGllbnRIZWlnaHQiLCJvbm1vdXNlbW92ZSIsIm9ubW91c2VsZWF2ZSIsIm9ucmVzaXplIiwibWFpbiJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIs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QUNkam5DLE9BQU0sRUFDTjFELFdBQVksQ0FBRSxxQkFDZDRELG1CQUFvQixDQUFFLDBCQUN0QnJHLFdBQVksQ0FBRTR1QyxXQUFXLE8sY0FHdkJ2QixFQUFVLFNBQ1pvQixFQUFjLEtBQ2RFLEVBQTZCLEtBdUIzQnZuQyxFQUFTLGdELGtDQWVYaW1DLEVBQVFoeEMsU0FBUSxTQUFBVyxHQUFLLE9BQUFBLEVBQUU4dkMsYyxXQUUzQjNtQyxFQUFPMG9DLFFBQVUsU0FBQyxHLElBQUUsSUFBQUMsUUFBWSxJQUFBQyxRQUNwQixJQUFBaEMsWUFBb0IsSUFBQWlDLGFBQzVCTCxFQUFjN0MsUUFBUWp6QyxFQUFJb0osRUFBT3dRLEVBQUl0USxJQUV6Q2dFLEVBQU84b0MsWUFBYyxTQUFDLEcsSUFBRSxJQUFBSCxRQUFZLElBQUFDLFFBQ3hCLElBQUFoQyxZQUFvQixJQUFBaUMsYUFDNUJMLEVBQWN6QyxZQUFZcnpDLEVBQUlvSixFQUFPd1EsRUFBSXRRLElBRTdDZ0UsRUFBTytvQyxhQUFlLFdBQ2xCUCxFQUFjeEMsZ0JBRWxCbnRDLE9BQU9pRyxzQkFBc0J1cEMsR0FDN0J4dkMsT0FBT213QyxTQUFXL25DLEVBQ2xCQSxJLFdBR0pnb0MiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDgpO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG52YXIgZXhwb3J0ZWQgPSBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDoge307XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVkOyIsInZhciBpb3RhID0gcmVxdWlyZShcImlvdGEtYXJyYXlcIilcbnZhciBpc0J1ZmZlciA9IHJlcXVpcmUoXCJpcy1idWZmZXJcIilcblxudmFyIGhhc1R5cGVkQXJyYXlzICA9ICgodHlwZW9mIEZsb2F0NjRBcnJheSkgIT09IFwidW5kZWZpbmVkXCIpXG5cbmZ1bmN0aW9uIGNvbXBhcmUxc3QoYSwgYikge1xuICByZXR1cm4gYVswXSAtIGJbMF1cbn1cblxuZnVuY3Rpb24gb3JkZXIoKSB7XG4gIHZhciBzdHJpZGUgPSB0aGlzLnN0cmlkZVxuICB2YXIgdGVybXMgPSBuZXcgQXJyYXkoc3RyaWRlLmxlbmd0aClcbiAgdmFyIGlcbiAgZm9yKGk9MDsgaTx0ZXJtcy5sZW5ndGg7ICsraSkge1xuICAgIHRlcm1zW2ldID0gW01hdGguYWJzKHN0cmlkZVtpXSksIGldXG4gIH1cbiAgdGVybXMuc29ydChjb21wYXJlMXN0KVxuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KHRlcm1zLmxlbmd0aClcbiAgZm9yKGk9MDsgaTxyZXN1bHQubGVuZ3RoOyArK2kpIHtcbiAgICByZXN1bHRbaV0gPSB0ZXJtc1tpXVsxXVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gY29tcGlsZUNvbnN0cnVjdG9yKGR0eXBlLCBkaW1lbnNpb24pIHtcbiAgdmFyIGNsYXNzTmFtZSA9IFtcIlZpZXdcIiwgZGltZW5zaW9uLCBcImRcIiwgZHR5cGVdLmpvaW4oXCJcIilcbiAgaWYoZGltZW5zaW9uIDwgMCkge1xuICAgIGNsYXNzTmFtZSA9IFwiVmlld19OaWxcIiArIGR0eXBlXG4gIH1cbiAgdmFyIHVzZUdldHRlcnMgPSAoZHR5cGUgPT09IFwiZ2VuZXJpY1wiKVxuXG4gIGlmKGRpbWVuc2lvbiA9PT0gLTEpIHtcbiAgICAvL1NwZWNpYWwgY2FzZSBmb3IgdHJpdmlhbCBhcnJheXNcbiAgICB2YXIgY29kZSA9XG4gICAgICBcImZ1bmN0aW9uIFwiK2NsYXNzTmFtZStcIihhKXt0aGlzLmRhdGE9YTt9O1xcXG52YXIgcHJvdG89XCIrY2xhc3NOYW1lK1wiLnByb3RvdHlwZTtcXFxucHJvdG8uZHR5cGU9J1wiK2R0eXBlK1wiJztcXFxucHJvdG8uaW5kZXg9ZnVuY3Rpb24oKXtyZXR1cm4gLTF9O1xcXG5wcm90by5zaXplPTA7XFxcbnByb3RvLmRpbWVuc2lvbj0tMTtcXFxucHJvdG8uc2hhcGU9cHJvdG8uc3RyaWRlPXByb3RvLm9yZGVyPVtdO1xcXG5wcm90by5sbz1wcm90by5oaT1wcm90by50cmFuc3Bvc2U9cHJvdG8uc3RlcD1cXFxuZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFwiK2NsYXNzTmFtZStcIih0aGlzLmRhdGEpO307XFxcbnByb3RvLmdldD1wcm90by5zZXQ9ZnVuY3Rpb24oKXt9O1xcXG5wcm90by5waWNrPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9O1xcXG5yZXR1cm4gZnVuY3Rpb24gY29uc3RydWN0X1wiK2NsYXNzTmFtZStcIihhKXtyZXR1cm4gbmV3IFwiK2NsYXNzTmFtZStcIihhKTt9XCJcbiAgICB2YXIgcHJvY2VkdXJlID0gbmV3IEZ1bmN0aW9uKGNvZGUpXG4gICAgcmV0dXJuIHByb2NlZHVyZSgpXG4gIH0gZWxzZSBpZihkaW1lbnNpb24gPT09IDApIHtcbiAgICAvL1NwZWNpYWwgY2FzZSBmb3IgMGQgYXJyYXlzXG4gICAgdmFyIGNvZGUgPVxuICAgICAgXCJmdW5jdGlvbiBcIitjbGFzc05hbWUrXCIoYSxkKSB7XFxcbnRoaXMuZGF0YSA9IGE7XFxcbnRoaXMub2Zmc2V0ID0gZFxcXG59O1xcXG52YXIgcHJvdG89XCIrY2xhc3NOYW1lK1wiLnByb3RvdHlwZTtcXFxucHJvdG8uZHR5cGU9J1wiK2R0eXBlK1wiJztcXFxucHJvdG8uaW5kZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vZmZzZXR9O1xcXG5wcm90by5kaW1lbnNpb249MDtcXFxucHJvdG8uc2l6ZT0xO1xcXG5wcm90by5zaGFwZT1cXFxucHJvdG8uc3RyaWRlPVxcXG5wcm90by5vcmRlcj1bXTtcXFxucHJvdG8ubG89XFxcbnByb3RvLmhpPVxcXG5wcm90by50cmFuc3Bvc2U9XFxcbnByb3RvLnN0ZXA9ZnVuY3Rpb24gXCIrY2xhc3NOYW1lK1wiX2NvcHkoKSB7XFxcbnJldHVybiBuZXcgXCIrY2xhc3NOYW1lK1wiKHRoaXMuZGF0YSx0aGlzLm9mZnNldClcXFxufTtcXFxucHJvdG8ucGljaz1mdW5jdGlvbiBcIitjbGFzc05hbWUrXCJfcGljaygpe1xcXG5yZXR1cm4gVHJpdmlhbEFycmF5KHRoaXMuZGF0YSk7XFxcbn07XFxcbnByb3RvLnZhbHVlT2Y9cHJvdG8uZ2V0PWZ1bmN0aW9uIFwiK2NsYXNzTmFtZStcIl9nZXQoKXtcXFxucmV0dXJuIFwiKyh1c2VHZXR0ZXJzID8gXCJ0aGlzLmRhdGEuZ2V0KHRoaXMub2Zmc2V0KVwiIDogXCJ0aGlzLmRhdGFbdGhpcy5vZmZzZXRdXCIpK1xuXCJ9O1xcXG5wcm90by5zZXQ9ZnVuY3Rpb24gXCIrY2xhc3NOYW1lK1wiX3NldCh2KXtcXFxucmV0dXJuIFwiKyh1c2VHZXR0ZXJzID8gXCJ0aGlzLmRhdGEuc2V0KHRoaXMub2Zmc2V0LHYpXCIgOiBcInRoaXMuZGF0YVt0aGlzLm9mZnNldF09dlwiKStcIlxcXG59O1xcXG5yZXR1cm4gZnVuY3Rpb24gY29uc3RydWN0X1wiK2NsYXNzTmFtZStcIihhLGIsYyxkKXtyZXR1cm4gbmV3IFwiK2NsYXNzTmFtZStcIihhLGQpfVwiXG4gICAgdmFyIHByb2NlZHVyZSA9IG5ldyBGdW5jdGlvbihcIlRyaXZpYWxBcnJheVwiLCBjb2RlKVxuICAgIHJldHVybiBwcm9jZWR1cmUoQ0FDSEVEX0NPTlNUUlVDVE9SU1tkdHlwZV1bMF0pXG4gIH1cblxuICB2YXIgY29kZSA9IFtcIid1c2Ugc3RyaWN0J1wiXVxuXG4gIC8vQ3JlYXRlIGNvbnN0cnVjdG9yIGZvciB2aWV3XG4gIHZhciBpbmRpY2VzID0gaW90YShkaW1lbnNpb24pXG4gIHZhciBhcmdzID0gaW5kaWNlcy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gXCJpXCIraSB9KVxuICB2YXIgaW5kZXhfc3RyID0gXCJ0aGlzLm9mZnNldCtcIiArIGluZGljZXMubWFwKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgcmV0dXJuIFwidGhpcy5zdHJpZGVbXCIgKyBpICsgXCJdKmlcIiArIGlcbiAgICAgIH0pLmpvaW4oXCIrXCIpXG4gIHZhciBzaGFwZUFyZyA9IGluZGljZXMubWFwKGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBcImJcIitpXG4gICAgfSkuam9pbihcIixcIilcbiAgdmFyIHN0cmlkZUFyZyA9IGluZGljZXMubWFwKGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBcImNcIitpXG4gICAgfSkuam9pbihcIixcIilcbiAgY29kZS5wdXNoKFxuICAgIFwiZnVuY3Rpb24gXCIrY2xhc3NOYW1lK1wiKGEsXCIgKyBzaGFwZUFyZyArIFwiLFwiICsgc3RyaWRlQXJnICsgXCIsZCl7dGhpcy5kYXRhPWFcIixcbiAgICAgIFwidGhpcy5zaGFwZT1bXCIgKyBzaGFwZUFyZyArIFwiXVwiLFxuICAgICAgXCJ0aGlzLnN0cmlkZT1bXCIgKyBzdHJpZGVBcmcgKyBcIl1cIixcbiAgICAgIFwidGhpcy5vZmZzZXQ9ZHwwfVwiLFxuICAgIFwidmFyIHByb3RvPVwiK2NsYXNzTmFtZStcIi5wcm90b3R5cGVcIixcbiAgICBcInByb3RvLmR0eXBlPSdcIitkdHlwZStcIidcIixcbiAgICBcInByb3RvLmRpbWVuc2lvbj1cIitkaW1lbnNpb24pXG5cbiAgLy92aWV3LnNpemU6XG4gIGNvZGUucHVzaChcIk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm90bywnc2l6ZScse2dldDpmdW5jdGlvbiBcIitjbGFzc05hbWUrXCJfc2l6ZSgpe1xcXG5yZXR1cm4gXCIraW5kaWNlcy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gXCJ0aGlzLnNoYXBlW1wiK2krXCJdXCIgfSkuam9pbihcIipcIiksXG5cIn19KVwiKVxuXG4gIC8vdmlldy5vcmRlcjpcbiAgaWYoZGltZW5zaW9uID09PSAxKSB7XG4gICAgY29kZS5wdXNoKFwicHJvdG8ub3JkZXI9WzBdXCIpXG4gIH0gZWxzZSB7XG4gICAgY29kZS5wdXNoKFwiT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCdvcmRlcicse2dldDpcIilcbiAgICBpZihkaW1lbnNpb24gPCA0KSB7XG4gICAgICBjb2RlLnB1c2goXCJmdW5jdGlvbiBcIitjbGFzc05hbWUrXCJfb3JkZXIoKXtcIilcbiAgICAgIGlmKGRpbWVuc2lvbiA9PT0gMikge1xuICAgICAgICBjb2RlLnB1c2goXCJyZXR1cm4gKE1hdGguYWJzKHRoaXMuc3RyaWRlWzBdKT5NYXRoLmFicyh0aGlzLnN0cmlkZVsxXSkpP1sxLDBdOlswLDFdfX0pXCIpXG4gICAgICB9IGVsc2UgaWYoZGltZW5zaW9uID09PSAzKSB7XG4gICAgICAgIGNvZGUucHVzaChcblwidmFyIHMwPU1hdGguYWJzKHRoaXMuc3RyaWRlWzBdKSxzMT1NYXRoLmFicyh0aGlzLnN0cmlkZVsxXSksczI9TWF0aC5hYnModGhpcy5zdHJpZGVbMl0pO1xcXG5pZihzMD5zMSl7XFxcbmlmKHMxPnMyKXtcXFxucmV0dXJuIFsyLDEsMF07XFxcbn1lbHNlIGlmKHMwPnMyKXtcXFxucmV0dXJuIFsxLDIsMF07XFxcbn1lbHNle1xcXG5yZXR1cm4gWzEsMCwyXTtcXFxufVxcXG59ZWxzZSBpZihzMD5zMil7XFxcbnJldHVybiBbMiwwLDFdO1xcXG59ZWxzZSBpZihzMj5zMSl7XFxcbnJldHVybiBbMCwxLDJdO1xcXG59ZWxzZXtcXFxucmV0dXJuIFswLDIsMV07XFxcbn19fSlcIilcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29kZS5wdXNoKFwiT1JERVJ9KVwiKVxuICAgIH1cbiAgfVxuXG4gIC8vdmlldy5zZXQoaTAsIC4uLiwgdik6XG4gIGNvZGUucHVzaChcblwicHJvdG8uc2V0PWZ1bmN0aW9uIFwiK2NsYXNzTmFtZStcIl9zZXQoXCIrYXJncy5qb2luKFwiLFwiKStcIix2KXtcIilcbiAgaWYodXNlR2V0dGVycykge1xuICAgIGNvZGUucHVzaChcInJldHVybiB0aGlzLmRhdGEuc2V0KFwiK2luZGV4X3N0citcIix2KX1cIilcbiAgfSBlbHNlIHtcbiAgICBjb2RlLnB1c2goXCJyZXR1cm4gdGhpcy5kYXRhW1wiK2luZGV4X3N0citcIl09dn1cIilcbiAgfVxuXG4gIC8vdmlldy5nZXQoaTAsIC4uLik6XG4gIGNvZGUucHVzaChcInByb3RvLmdldD1mdW5jdGlvbiBcIitjbGFzc05hbWUrXCJfZ2V0KFwiK2FyZ3Muam9pbihcIixcIikrXCIpe1wiKVxuICBpZih1c2VHZXR0ZXJzKSB7XG4gICAgY29kZS5wdXNoKFwicmV0dXJuIHRoaXMuZGF0YS5nZXQoXCIraW5kZXhfc3RyK1wiKX1cIilcbiAgfSBlbHNlIHtcbiAgICBjb2RlLnB1c2goXCJyZXR1cm4gdGhpcy5kYXRhW1wiK2luZGV4X3N0citcIl19XCIpXG4gIH1cblxuICAvL3ZpZXcuaW5kZXg6XG4gIGNvZGUucHVzaChcbiAgICBcInByb3RvLmluZGV4PWZ1bmN0aW9uIFwiK2NsYXNzTmFtZStcIl9pbmRleChcIiwgYXJncy5qb2luKCksIFwiKXtyZXR1cm4gXCIraW5kZXhfc3RyK1wifVwiKVxuXG4gIC8vdmlldy5oaSgpOlxuICBjb2RlLnB1c2goXCJwcm90by5oaT1mdW5jdGlvbiBcIitjbGFzc05hbWUrXCJfaGkoXCIrYXJncy5qb2luKFwiLFwiKStcIil7cmV0dXJuIG5ldyBcIitjbGFzc05hbWUrXCIodGhpcy5kYXRhLFwiK1xuICAgIGluZGljZXMubWFwKGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBbXCIodHlwZW9mIGlcIixpLFwiIT09J251bWJlcid8fGlcIixpLFwiPDApP3RoaXMuc2hhcGVbXCIsIGksIFwiXTppXCIsIGksXCJ8MFwiXS5qb2luKFwiXCIpXG4gICAgfSkuam9pbihcIixcIikrXCIsXCIrXG4gICAgaW5kaWNlcy5tYXAoZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIFwidGhpcy5zdHJpZGVbXCIraSArIFwiXVwiXG4gICAgfSkuam9pbihcIixcIikrXCIsdGhpcy5vZmZzZXQpfVwiKVxuXG4gIC8vdmlldy5sbygpOlxuICB2YXIgYV92YXJzID0gaW5kaWNlcy5tYXAoZnVuY3Rpb24oaSkgeyByZXR1cm4gXCJhXCIraStcIj10aGlzLnNoYXBlW1wiK2krXCJdXCIgfSlcbiAgdmFyIGNfdmFycyA9IGluZGljZXMubWFwKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIFwiY1wiK2krXCI9dGhpcy5zdHJpZGVbXCIraStcIl1cIiB9KVxuICBjb2RlLnB1c2goXCJwcm90by5sbz1mdW5jdGlvbiBcIitjbGFzc05hbWUrXCJfbG8oXCIrYXJncy5qb2luKFwiLFwiKStcIil7dmFyIGI9dGhpcy5vZmZzZXQsZD0wLFwiK2FfdmFycy5qb2luKFwiLFwiKStcIixcIitjX3ZhcnMuam9pbihcIixcIikpXG4gIGZvcih2YXIgaT0wOyBpPGRpbWVuc2lvbjsgKytpKSB7XG4gICAgY29kZS5wdXNoKFxuXCJpZih0eXBlb2YgaVwiK2krXCI9PT0nbnVtYmVyJyYmaVwiK2krXCI+PTApe1xcXG5kPWlcIitpK1wifDA7XFxcbmIrPWNcIitpK1wiKmQ7XFxcbmFcIitpK1wiLT1kfVwiKVxuICB9XG4gIGNvZGUucHVzaChcInJldHVybiBuZXcgXCIrY2xhc3NOYW1lK1wiKHRoaXMuZGF0YSxcIitcbiAgICBpbmRpY2VzLm1hcChmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gXCJhXCIraVxuICAgIH0pLmpvaW4oXCIsXCIpK1wiLFwiK1xuICAgIGluZGljZXMubWFwKGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBcImNcIitpXG4gICAgfSkuam9pbihcIixcIikrXCIsYil9XCIpXG5cbiAgLy92aWV3LnN0ZXAoKTpcbiAgY29kZS5wdXNoKFwicHJvdG8uc3RlcD1mdW5jdGlvbiBcIitjbGFzc05hbWUrXCJfc3RlcChcIithcmdzLmpvaW4oXCIsXCIpK1wiKXt2YXIgXCIrXG4gICAgaW5kaWNlcy5tYXAoZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIFwiYVwiK2krXCI9dGhpcy5zaGFwZVtcIitpK1wiXVwiXG4gICAgfSkuam9pbihcIixcIikrXCIsXCIrXG4gICAgaW5kaWNlcy5tYXAoZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIFwiYlwiK2krXCI9dGhpcy5zdHJpZGVbXCIraStcIl1cIlxuICAgIH0pLmpvaW4oXCIsXCIpK1wiLGM9dGhpcy5vZmZzZXQsZD0wLGNlaWw9TWF0aC5jZWlsXCIpXG4gIGZvcih2YXIgaT0wOyBpPGRpbWVuc2lvbjsgKytpKSB7XG4gICAgY29kZS5wdXNoKFxuXCJpZih0eXBlb2YgaVwiK2krXCI9PT0nbnVtYmVyJyl7XFxcbmQ9aVwiK2krXCJ8MDtcXFxuaWYoZDwwKXtcXFxuYys9YlwiK2krXCIqKGFcIitpK1wiLTEpO1xcXG5hXCIraStcIj1jZWlsKC1hXCIraStcIi9kKVxcXG59ZWxzZXtcXFxuYVwiK2krXCI9Y2VpbChhXCIraStcIi9kKVxcXG59XFxcbmJcIitpK1wiKj1kXFxcbn1cIilcbiAgfVxuICBjb2RlLnB1c2goXCJyZXR1cm4gbmV3IFwiK2NsYXNzTmFtZStcIih0aGlzLmRhdGEsXCIrXG4gICAgaW5kaWNlcy5tYXAoZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIFwiYVwiICsgaVxuICAgIH0pLmpvaW4oXCIsXCIpK1wiLFwiK1xuICAgIGluZGljZXMubWFwKGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBcImJcIiArIGlcbiAgICB9KS5qb2luKFwiLFwiKStcIixjKX1cIilcblxuICAvL3ZpZXcudHJhbnNwb3NlKCk6XG4gIHZhciB0U2hhcGUgPSBuZXcgQXJyYXkoZGltZW5zaW9uKVxuICB2YXIgdFN0cmlkZSA9IG5ldyBBcnJheShkaW1lbnNpb24pXG4gIGZvcih2YXIgaT0wOyBpPGRpbWVuc2lvbjsgKytpKSB7XG4gICAgdFNoYXBlW2ldID0gXCJhW2lcIitpK1wiXVwiXG4gICAgdFN0cmlkZVtpXSA9IFwiYltpXCIraStcIl1cIlxuICB9XG4gIGNvZGUucHVzaChcInByb3RvLnRyYW5zcG9zZT1mdW5jdGlvbiBcIitjbGFzc05hbWUrXCJfdHJhbnNwb3NlKFwiK2FyZ3MrXCIpe1wiK1xuICAgIGFyZ3MubWFwKGZ1bmN0aW9uKG4saWR4KSB7IHJldHVybiBuICsgXCI9KFwiICsgbiArIFwiPT09dW5kZWZpbmVkP1wiICsgaWR4ICsgXCI6XCIgKyBuICsgXCJ8MClcIn0pLmpvaW4oXCI7XCIpLFxuICAgIFwidmFyIGE9dGhpcy5zaGFwZSxiPXRoaXMuc3RyaWRlO3JldHVybiBuZXcgXCIrY2xhc3NOYW1lK1wiKHRoaXMuZGF0YSxcIit0U2hhcGUuam9pbihcIixcIikrXCIsXCIrdFN0cmlkZS5qb2luKFwiLFwiKStcIix0aGlzLm9mZnNldCl9XCIpXG5cbiAgLy92aWV3LnBpY2soKTpcbiAgY29kZS5wdXNoKFwicHJvdG8ucGljaz1mdW5jdGlvbiBcIitjbGFzc05hbWUrXCJfcGljayhcIithcmdzK1wiKXt2YXIgYT1bXSxiPVtdLGM9dGhpcy5vZmZzZXRcIilcbiAgZm9yKHZhciBpPTA7IGk8ZGltZW5zaW9uOyArK2kpIHtcbiAgICBjb2RlLnB1c2goXCJpZih0eXBlb2YgaVwiK2krXCI9PT0nbnVtYmVyJyYmaVwiK2krXCI+PTApe2M9KGMrdGhpcy5zdHJpZGVbXCIraStcIl0qaVwiK2krXCIpfDB9ZWxzZXthLnB1c2godGhpcy5zaGFwZVtcIitpK1wiXSk7Yi5wdXNoKHRoaXMuc3RyaWRlW1wiK2krXCJdKX1cIilcbiAgfVxuICBjb2RlLnB1c2goXCJ2YXIgY3Rvcj1DVE9SX0xJU1RbYS5sZW5ndGgrMV07cmV0dXJuIGN0b3IodGhpcy5kYXRhLGEsYixjKX1cIilcblxuICAvL0FkZCByZXR1cm4gc3RhdGVtZW50XG4gIGNvZGUucHVzaChcInJldHVybiBmdW5jdGlvbiBjb25zdHJ1Y3RfXCIrY2xhc3NOYW1lK1wiKGRhdGEsc2hhcGUsc3RyaWRlLG9mZnNldCl7cmV0dXJuIG5ldyBcIitjbGFzc05hbWUrXCIoZGF0YSxcIitcbiAgICBpbmRpY2VzLm1hcChmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gXCJzaGFwZVtcIitpK1wiXVwiXG4gICAgfSkuam9pbihcIixcIikrXCIsXCIrXG4gICAgaW5kaWNlcy5tYXAoZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIFwic3RyaWRlW1wiK2krXCJdXCJcbiAgICB9KS5qb2luKFwiLFwiKStcIixvZmZzZXQpfVwiKVxuXG4gIC8vQ29tcGlsZSBwcm9jZWR1cmVcbiAgdmFyIHByb2NlZHVyZSA9IG5ldyBGdW5jdGlvbihcIkNUT1JfTElTVFwiLCBcIk9SREVSXCIsIGNvZGUuam9pbihcIlxcblwiKSlcbiAgcmV0dXJuIHByb2NlZHVyZShDQUNIRURfQ09OU1RSVUNUT1JTW2R0eXBlXSwgb3JkZXIpXG59XG5cbmZ1bmN0aW9uIGFycmF5RFR5cGUoZGF0YSkge1xuICBpZihpc0J1ZmZlcihkYXRhKSkge1xuICAgIHJldHVybiBcImJ1ZmZlclwiXG4gIH1cbiAgaWYoaGFzVHlwZWRBcnJheXMpIHtcbiAgICBzd2l0Y2goT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRhdGEpKSB7XG4gICAgICBjYXNlIFwiW29iamVjdCBGbG9hdDY0QXJyYXldXCI6XG4gICAgICAgIHJldHVybiBcImZsb2F0NjRcIlxuICAgICAgY2FzZSBcIltvYmplY3QgRmxvYXQzMkFycmF5XVwiOlxuICAgICAgICByZXR1cm4gXCJmbG9hdDMyXCJcbiAgICAgIGNhc2UgXCJbb2JqZWN0IEludDhBcnJheV1cIjpcbiAgICAgICAgcmV0dXJuIFwiaW50OFwiXG4gICAgICBjYXNlIFwiW29iamVjdCBJbnQxNkFycmF5XVwiOlxuICAgICAgICByZXR1cm4gXCJpbnQxNlwiXG4gICAgICBjYXNlIFwiW29iamVjdCBJbnQzMkFycmF5XVwiOlxuICAgICAgICByZXR1cm4gXCJpbnQzMlwiXG4gICAgICBjYXNlIFwiW29iamVjdCBVaW50OEFycmF5XVwiOlxuICAgICAgICByZXR1cm4gXCJ1aW50OFwiXG4gICAgICBjYXNlIFwiW29iamVjdCBVaW50MTZBcnJheV1cIjpcbiAgICAgICAgcmV0dXJuIFwidWludDE2XCJcbiAgICAgIGNhc2UgXCJbb2JqZWN0IFVpbnQzMkFycmF5XVwiOlxuICAgICAgICByZXR1cm4gXCJ1aW50MzJcIlxuICAgICAgY2FzZSBcIltvYmplY3QgVWludDhDbGFtcGVkQXJyYXldXCI6XG4gICAgICAgIHJldHVybiBcInVpbnQ4X2NsYW1wZWRcIlxuICAgICAgY2FzZSBcIltvYmplY3QgQmlnSW50NjRBcnJheV1cIjpcbiAgICAgICAgcmV0dXJuIFwiYmlnaW50NjRcIlxuICAgICAgY2FzZSBcIltvYmplY3QgQmlnVWludDY0QXJyYXldXCI6XG4gICAgICAgIHJldHVybiBcImJpZ3VpbnQ2NFwiXG4gICAgfVxuICB9XG4gIGlmKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICByZXR1cm4gXCJhcnJheVwiXG4gIH1cbiAgcmV0dXJuIFwiZ2VuZXJpY1wiXG59XG5cbnZhciBDQUNIRURfQ09OU1RSVUNUT1JTID0ge1xuICBcImZsb2F0MzJcIjpbXSxcbiAgXCJmbG9hdDY0XCI6W10sXG4gIFwiaW50OFwiOltdLFxuICBcImludDE2XCI6W10sXG4gIFwiaW50MzJcIjpbXSxcbiAgXCJ1aW50OFwiOltdLFxuICBcInVpbnQxNlwiOltdLFxuICBcInVpbnQzMlwiOltdLFxuICBcImFycmF5XCI6W10sXG4gIFwidWludDhfY2xhbXBlZFwiOltdLFxuICBcImJpZ2ludDY0XCI6IFtdLFxuICBcImJpZ3VpbnQ2NFwiOiBbXSxcbiAgXCJidWZmZXJcIjpbXSxcbiAgXCJnZW5lcmljXCI6W11cbn1cblxuOyhmdW5jdGlvbigpIHtcbiAgZm9yKHZhciBpZCBpbiBDQUNIRURfQ09OU1RSVUNUT1JTKSB7XG4gICAgQ0FDSEVEX0NPTlNUUlVDVE9SU1tpZF0ucHVzaChjb21waWxlQ29uc3RydWN0b3IoaWQsIC0xKSlcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHdyYXBwZWROREFycmF5Q3RvcihkYXRhLCBzaGFwZSwgc3RyaWRlLCBvZmZzZXQpIHtcbiAgaWYoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGN0b3IgPSBDQUNIRURfQ09OU1RSVUNUT1JTLmFycmF5WzBdXG4gICAgcmV0dXJuIGN0b3IoW10pXG4gIH0gZWxzZSBpZih0eXBlb2YgZGF0YSA9PT0gXCJudW1iZXJcIikge1xuICAgIGRhdGEgPSBbZGF0YV1cbiAgfVxuICBpZihzaGFwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc2hhcGUgPSBbIGRhdGEubGVuZ3RoIF1cbiAgfVxuICB2YXIgZCA9IHNoYXBlLmxlbmd0aFxuICBpZihzdHJpZGUgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0cmlkZSA9IG5ldyBBcnJheShkKVxuICAgIGZvcih2YXIgaT1kLTEsIHN6PTE7IGk+PTA7IC0taSkge1xuICAgICAgc3RyaWRlW2ldID0gc3pcbiAgICAgIHN6ICo9IHNoYXBlW2ldXG4gICAgfVxuICB9XG4gIGlmKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgb2Zmc2V0ID0gMFxuICAgIGZvcih2YXIgaT0wOyBpPGQ7ICsraSkge1xuICAgICAgaWYoc3RyaWRlW2ldIDwgMCkge1xuICAgICAgICBvZmZzZXQgLT0gKHNoYXBlW2ldLTEpKnN0cmlkZVtpXVxuICAgICAgfVxuICAgIH1cbiAgfVxuICB2YXIgZHR5cGUgPSBhcnJheURUeXBlKGRhdGEpXG4gIHZhciBjdG9yX2xpc3QgPSBDQUNIRURfQ09OU1RSVUNUT1JTW2R0eXBlXVxuICB3aGlsZShjdG9yX2xpc3QubGVuZ3RoIDw9IGQrMSkge1xuICAgIGN0b3JfbGlzdC5wdXNoKGNvbXBpbGVDb25zdHJ1Y3RvcihkdHlwZSwgY3Rvcl9saXN0Lmxlbmd0aC0xKSlcbiAgfVxuICB2YXIgY3RvciA9IGN0b3JfbGlzdFtkKzFdXG4gIHJldHVybiBjdG9yKGRhdGEsIHNoYXBlLCBzdHJpZGUsIG9mZnNldClcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3cmFwcGVkTkRBcnJheUN0b3JcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC5jcmVhdGVSRUdMID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNUeXBlZEFycmF5ID0gZnVuY3Rpb24gKHgpIHtcbiAgcmV0dXJuIChcbiAgICB4IGluc3RhbmNlb2YgVWludDhBcnJheSB8fFxuICAgIHggaW5zdGFuY2VvZiBVaW50MTZBcnJheSB8fFxuICAgIHggaW5zdGFuY2VvZiBVaW50MzJBcnJheSB8fFxuICAgIHggaW5zdGFuY2VvZiBJbnQ4QXJyYXkgfHxcbiAgICB4IGluc3RhbmNlb2YgSW50MTZBcnJheSB8fFxuICAgIHggaW5zdGFuY2VvZiBJbnQzMkFycmF5IHx8XG4gICAgeCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSB8fFxuICAgIHggaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXkgfHxcbiAgICB4IGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXlcbiAgKVxufTtcblxudmFyIGV4dGVuZCA9IGZ1bmN0aW9uIChiYXNlLCBvcHRzKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0cyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgIGJhc2Vba2V5c1tpXV0gPSBvcHRzW2tleXNbaV1dO1xuICB9XG4gIHJldHVybiBiYXNlXG59O1xuXG4vLyBFcnJvciBjaGVja2luZyBhbmQgcGFyYW1ldGVyIHZhbGlkYXRpb24uXG4vL1xuLy8gU3RhdGVtZW50cyBmb3IgdGhlIGZvcm0gYGNoZWNrLnNvbWVQcm9jZWR1cmUoLi4uKWAgZ2V0IHJlbW92ZWQgYnlcbi8vIGEgYnJvd3NlcmlmeSB0cmFuc2Zvcm0gZm9yIG9wdGltaXplZC9taW5pZmllZCBidW5kbGVzLlxuLy9cbi8qIGdsb2JhbHMgYXRvYiAqL1xudmFyIGVuZGwgPSAnXFxuJztcblxuLy8gb25seSB1c2VkIGZvciBleHRyYWN0aW5nIHNoYWRlciBuYW1lcy4gIGlmIGF0b2Igbm90IHByZXNlbnQsIHRoZW4gZXJyb3JzXG4vLyB3aWxsIGJlIHNsaWdodGx5IGNyYXBwaWVyXG5mdW5jdGlvbiBkZWNvZGVCNjQgKHN0cikge1xuICBpZiAodHlwZW9mIGF0b2IgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGF0b2Ioc3RyKVxuICB9XG4gIHJldHVybiAnYmFzZTY0OicgKyBzdHJcbn1cblxuZnVuY3Rpb24gcmFpc2UgKG1lc3NhZ2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKCcocmVnbCkgJyArIG1lc3NhZ2UpO1xuICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgdGhyb3cgZXJyb3Jcbn1cblxuZnVuY3Rpb24gY2hlY2sgKHByZWQsIG1lc3NhZ2UpIHtcbiAgaWYgKCFwcmVkKSB7XG4gICAgcmFpc2UobWVzc2FnZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5jb2xvbiAobWVzc2FnZSkge1xuICBpZiAobWVzc2FnZSkge1xuICAgIHJldHVybiAnOiAnICsgbWVzc2FnZVxuICB9XG4gIHJldHVybiAnJ1xufVxuXG5mdW5jdGlvbiBjaGVja1BhcmFtZXRlciAocGFyYW0sIHBvc3NpYmlsaXRpZXMsIG1lc3NhZ2UpIHtcbiAgaWYgKCEocGFyYW0gaW4gcG9zc2liaWxpdGllcykpIHtcbiAgICByYWlzZSgndW5rbm93biBwYXJhbWV0ZXIgKCcgKyBwYXJhbSArICcpJyArIGVuY29sb24obWVzc2FnZSkgK1xuICAgICAgICAgICcuIHBvc3NpYmxlIHZhbHVlczogJyArIE9iamVjdC5rZXlzKHBvc3NpYmlsaXRpZXMpLmpvaW4oKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tJc1R5cGVkQXJyYXkgKGRhdGEsIG1lc3NhZ2UpIHtcbiAgaWYgKCFpc1R5cGVkQXJyYXkoZGF0YSkpIHtcbiAgICByYWlzZShcbiAgICAgICdpbnZhbGlkIHBhcmFtZXRlciB0eXBlJyArIGVuY29sb24obWVzc2FnZSkgK1xuICAgICAgJy4gbXVzdCBiZSBhIHR5cGVkIGFycmF5Jyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tUeXBlT2YgKHZhbHVlLCB0eXBlLCBtZXNzYWdlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IHR5cGUpIHtcbiAgICByYWlzZShcbiAgICAgICdpbnZhbGlkIHBhcmFtZXRlciB0eXBlJyArIGVuY29sb24obWVzc2FnZSkgK1xuICAgICAgJy4gZXhwZWN0ZWQgJyArIHR5cGUgKyAnLCBnb3QgJyArICh0eXBlb2YgdmFsdWUpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja05vbk5lZ2F0aXZlSW50ICh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAoISgodmFsdWUgPj0gMCkgJiZcbiAgICAgICAgKCh2YWx1ZSB8IDApID09PSB2YWx1ZSkpKSB7XG4gICAgcmFpc2UoJ2ludmFsaWQgcGFyYW1ldGVyIHR5cGUsICgnICsgdmFsdWUgKyAnKScgKyBlbmNvbG9uKG1lc3NhZ2UpICtcbiAgICAgICAgICAnLiBtdXN0IGJlIGEgbm9ubmVnYXRpdmUgaW50ZWdlcicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrT25lT2YgKHZhbHVlLCBsaXN0LCBtZXNzYWdlKSB7XG4gIGlmIChsaXN0LmluZGV4T2YodmFsdWUpIDwgMCkge1xuICAgIHJhaXNlKCdpbnZhbGlkIHZhbHVlJyArIGVuY29sb24obWVzc2FnZSkgKyAnLiBtdXN0IGJlIG9uZSBvZjogJyArIGxpc3QpO1xuICB9XG59XG5cbnZhciBjb25zdHJ1Y3RvcktleXMgPSBbXG4gICdnbCcsXG4gICdjYW52YXMnLFxuICAnY29udGFpbmVyJyxcbiAgJ2F0dHJpYnV0ZXMnLFxuICAncGl4ZWxSYXRpbycsXG4gICdleHRlbnNpb25zJyxcbiAgJ29wdGlvbmFsRXh0ZW5zaW9ucycsXG4gICdwcm9maWxlJyxcbiAgJ29uRG9uZSdcbl07XG5cbmZ1bmN0aW9uIGNoZWNrQ29uc3RydWN0b3IgKG9iaikge1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChjb25zdHJ1Y3RvcktleXMuaW5kZXhPZihrZXkpIDwgMCkge1xuICAgICAgcmFpc2UoJ2ludmFsaWQgcmVnbCBjb25zdHJ1Y3RvciBhcmd1bWVudCBcIicgKyBrZXkgKyAnXCIuIG11c3QgYmUgb25lIG9mICcgKyBjb25zdHJ1Y3RvcktleXMpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGxlZnRQYWQgKHN0ciwgbikge1xuICBzdHIgPSBzdHIgKyAnJztcbiAgd2hpbGUgKHN0ci5sZW5ndGggPCBuKSB7XG4gICAgc3RyID0gJyAnICsgc3RyO1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gU2hhZGVyRmlsZSAoKSB7XG4gIHRoaXMubmFtZSA9ICd1bmtub3duJztcbiAgdGhpcy5saW5lcyA9IFtdO1xuICB0aGlzLmluZGV4ID0ge307XG4gIHRoaXMuaGFzRXJyb3JzID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIFNoYWRlckxpbmUgKG51bWJlciwgbGluZSkge1xuICB0aGlzLm51bWJlciA9IG51bWJlcjtcbiAgdGhpcy5saW5lID0gbGluZTtcbiAgdGhpcy5lcnJvcnMgPSBbXTtcbn1cblxuZnVuY3Rpb24gU2hhZGVyRXJyb3IgKGZpbGVOdW1iZXIsIGxpbmVOdW1iZXIsIG1lc3NhZ2UpIHtcbiAgdGhpcy5maWxlID0gZmlsZU51bWJlcjtcbiAgdGhpcy5saW5lID0gbGluZU51bWJlcjtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuZnVuY3Rpb24gZ3Vlc3NDb21tYW5kICgpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG4gIHZhciBzdGFjayA9IChlcnJvci5zdGFjayB8fCBlcnJvcikudG9TdHJpbmcoKTtcbiAgdmFyIHBhdCA9IC9jb21waWxlUHJvY2VkdXJlLipcXG5cXHMqYXQuKlxcKCguKilcXCkvLmV4ZWMoc3RhY2spO1xuICBpZiAocGF0KSB7XG4gICAgcmV0dXJuIHBhdFsxXVxuICB9XG4gIHZhciBwYXQyID0gL2NvbXBpbGVQcm9jZWR1cmUuKlxcblxccyphdFxccysoLiopKFxcbnwkKS8uZXhlYyhzdGFjayk7XG4gIGlmIChwYXQyKSB7XG4gICAgcmV0dXJuIHBhdDJbMV1cbiAgfVxuICByZXR1cm4gJ3Vua25vd24nXG59XG5cbmZ1bmN0aW9uIGd1ZXNzQ2FsbFNpdGUgKCkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcbiAgdmFyIHN0YWNrID0gKGVycm9yLnN0YWNrIHx8IGVycm9yKS50b1N0cmluZygpO1xuICB2YXIgcGF0ID0gL2F0IFJFR0xDb21tYW5kLipcXG5cXHMrYXQuKlxcKCguKilcXCkvLmV4ZWMoc3RhY2spO1xuICBpZiAocGF0KSB7XG4gICAgcmV0dXJuIHBhdFsxXVxuICB9XG4gIHZhciBwYXQyID0gL2F0IFJFR0xDb21tYW5kLipcXG5cXHMrYXRcXHMrKC4qKVxcbi8uZXhlYyhzdGFjayk7XG4gIGlmIChwYXQyKSB7XG4gICAgcmV0dXJuIHBhdDJbMV1cbiAgfVxuICByZXR1cm4gJ3Vua25vd24nXG59XG5cbmZ1bmN0aW9uIHBhcnNlU291cmNlIChzb3VyY2UsIGNvbW1hbmQpIHtcbiAgdmFyIGxpbmVzID0gc291cmNlLnNwbGl0KCdcXG4nKTtcbiAgdmFyIGxpbmVOdW1iZXIgPSAxO1xuICB2YXIgZmlsZU51bWJlciA9IDA7XG4gIHZhciBmaWxlcyA9IHtcbiAgICB1bmtub3duOiBuZXcgU2hhZGVyRmlsZSgpLFxuICAgIDA6IG5ldyBTaGFkZXJGaWxlKClcbiAgfTtcbiAgZmlsZXMudW5rbm93bi5uYW1lID0gZmlsZXNbMF0ubmFtZSA9IGNvbW1hbmQgfHwgZ3Vlc3NDb21tYW5kKCk7XG4gIGZpbGVzLnVua25vd24ubGluZXMucHVzaChuZXcgU2hhZGVyTGluZSgwLCAnJykpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGxpbmUgPSBsaW5lc1tpXTtcbiAgICB2YXIgcGFydHMgPSAvXlxccypcXCNcXHMqKFxcdyspXFxzKyguKylcXHMqJC8uZXhlYyhsaW5lKTtcbiAgICBpZiAocGFydHMpIHtcbiAgICAgIHN3aXRjaCAocGFydHNbMV0pIHtcbiAgICAgICAgY2FzZSAnbGluZSc6XG4gICAgICAgICAgdmFyIGxpbmVOdW1iZXJJbmZvID0gLyhcXGQrKShcXHMrXFxkKyk/Ly5leGVjKHBhcnRzWzJdKTtcbiAgICAgICAgICBpZiAobGluZU51bWJlckluZm8pIHtcbiAgICAgICAgICAgIGxpbmVOdW1iZXIgPSBsaW5lTnVtYmVySW5mb1sxXSB8IDA7XG4gICAgICAgICAgICBpZiAobGluZU51bWJlckluZm9bMl0pIHtcbiAgICAgICAgICAgICAgZmlsZU51bWJlciA9IGxpbmVOdW1iZXJJbmZvWzJdIHwgMDtcbiAgICAgICAgICAgICAgaWYgKCEoZmlsZU51bWJlciBpbiBmaWxlcykpIHtcbiAgICAgICAgICAgICAgICBmaWxlc1tmaWxlTnVtYmVyXSA9IG5ldyBTaGFkZXJGaWxlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnZGVmaW5lJzpcbiAgICAgICAgICB2YXIgbmFtZUluZm8gPSAvU0hBREVSX05BTUUoX0I2NCk/XFxzKyguKikkLy5leGVjKHBhcnRzWzJdKTtcbiAgICAgICAgICBpZiAobmFtZUluZm8pIHtcbiAgICAgICAgICAgIGZpbGVzW2ZpbGVOdW1iZXJdLm5hbWUgPSAobmFtZUluZm9bMV1cbiAgICAgICAgICAgICAgICA/IGRlY29kZUI2NChuYW1lSW5mb1syXSlcbiAgICAgICAgICAgICAgICA6IG5hbWVJbmZvWzJdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgZmlsZXNbZmlsZU51bWJlcl0ubGluZXMucHVzaChuZXcgU2hhZGVyTGluZShsaW5lTnVtYmVyKyssIGxpbmUpKTtcbiAgfVxuICBPYmplY3Qua2V5cyhmaWxlcykuZm9yRWFjaChmdW5jdGlvbiAoZmlsZU51bWJlcikge1xuICAgIHZhciBmaWxlID0gZmlsZXNbZmlsZU51bWJlcl07XG4gICAgZmlsZS5saW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChsaW5lKSB7XG4gICAgICBmaWxlLmluZGV4W2xpbmUubnVtYmVyXSA9IGxpbmU7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gZmlsZXNcbn1cblxuZnVuY3Rpb24gcGFyc2VFcnJvckxvZyAoZXJyTG9nKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZXJyTG9nLnNwbGl0KCdcXG4nKS5mb3JFYWNoKGZ1bmN0aW9uIChlcnJNc2cpIHtcbiAgICBpZiAoZXJyTXNnLmxlbmd0aCA8IDUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgcGFydHMgPSAvXkVSUk9SXFw6XFxzKyhcXGQrKVxcOihcXGQrKVxcOlxccyooLiopJC8uZXhlYyhlcnJNc2cpO1xuICAgIGlmIChwYXJ0cykge1xuICAgICAgcmVzdWx0LnB1c2gobmV3IFNoYWRlckVycm9yKFxuICAgICAgICBwYXJ0c1sxXSB8IDAsXG4gICAgICAgIHBhcnRzWzJdIHwgMCxcbiAgICAgICAgcGFydHNbM10udHJpbSgpKSk7XG4gICAgfSBlbHNlIGlmIChlcnJNc2cubGVuZ3RoID4gMCkge1xuICAgICAgcmVzdWx0LnB1c2gobmV3IFNoYWRlckVycm9yKCd1bmtub3duJywgMCwgZXJyTXNnKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBhbm5vdGF0ZUZpbGVzIChmaWxlcywgZXJyb3JzKSB7XG4gIGVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHZhciBmaWxlID0gZmlsZXNbZXJyb3IuZmlsZV07XG4gICAgaWYgKGZpbGUpIHtcbiAgICAgIHZhciBsaW5lID0gZmlsZS5pbmRleFtlcnJvci5saW5lXTtcbiAgICAgIGlmIChsaW5lKSB7XG4gICAgICAgIGxpbmUuZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgICAgICBmaWxlLmhhc0Vycm9ycyA9IHRydWU7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICBmaWxlcy51bmtub3duLmhhc0Vycm9ycyA9IHRydWU7XG4gICAgZmlsZXMudW5rbm93bi5saW5lc1swXS5lcnJvcnMucHVzaChlcnJvcik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjaGVja1NoYWRlckVycm9yIChnbCwgc2hhZGVyLCBzb3VyY2UsIHR5cGUsIGNvbW1hbmQpIHtcbiAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpIHtcbiAgICB2YXIgZXJyTG9nID0gZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpO1xuICAgIHZhciB0eXBlTmFtZSA9IHR5cGUgPT09IGdsLkZSQUdNRU5UX1NIQURFUiA/ICdmcmFnbWVudCcgOiAndmVydGV4JztcbiAgICBjaGVja0NvbW1hbmRUeXBlKHNvdXJjZSwgJ3N0cmluZycsIHR5cGVOYW1lICsgJyBzaGFkZXIgc291cmNlIG11c3QgYmUgYSBzdHJpbmcnLCBjb21tYW5kKTtcbiAgICB2YXIgZmlsZXMgPSBwYXJzZVNvdXJjZShzb3VyY2UsIGNvbW1hbmQpO1xuICAgIHZhciBlcnJvcnMgPSBwYXJzZUVycm9yTG9nKGVyckxvZyk7XG4gICAgYW5ub3RhdGVGaWxlcyhmaWxlcywgZXJyb3JzKTtcblxuICAgIE9iamVjdC5rZXlzKGZpbGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChmaWxlTnVtYmVyKSB7XG4gICAgICB2YXIgZmlsZSA9IGZpbGVzW2ZpbGVOdW1iZXJdO1xuICAgICAgaWYgKCFmaWxlLmhhc0Vycm9ycykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdmFyIHN0cmluZ3MgPSBbJyddO1xuICAgICAgdmFyIHN0eWxlcyA9IFsnJ107XG5cbiAgICAgIGZ1bmN0aW9uIHB1c2ggKHN0ciwgc3R5bGUpIHtcbiAgICAgICAgc3RyaW5ncy5wdXNoKHN0cik7XG4gICAgICAgIHN0eWxlcy5wdXNoKHN0eWxlIHx8ICcnKTtcbiAgICAgIH1cblxuICAgICAgcHVzaCgnZmlsZSBudW1iZXIgJyArIGZpbGVOdW1iZXIgKyAnOiAnICsgZmlsZS5uYW1lICsgJ1xcbicsICdjb2xvcjpyZWQ7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTtmb250LXdlaWdodDpib2xkJyk7XG5cbiAgICAgIGZpbGUubGluZXMuZm9yRWFjaChmdW5jdGlvbiAobGluZSkge1xuICAgICAgICBpZiAobGluZS5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHB1c2gobGVmdFBhZChsaW5lLm51bWJlciwgNCkgKyAnfCAgJywgJ2JhY2tncm91bmQtY29sb3I6eWVsbG93OyBmb250LXdlaWdodDpib2xkJyk7XG4gICAgICAgICAgcHVzaChsaW5lLmxpbmUgKyBlbmRsLCAnY29sb3I6cmVkOyBiYWNrZ3JvdW5kLWNvbG9yOnllbGxvdzsgZm9udC13ZWlnaHQ6Ym9sZCcpO1xuXG4gICAgICAgICAgLy8gdHJ5IHRvIGd1ZXNzIHRva2VuXG4gICAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgICAgbGluZS5lcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gZXJyb3IubWVzc2FnZTtcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IC9eXFxzKlxcJyguKilcXCdcXHMqXFw6XFxzKiguKikkLy5leGVjKG1lc3NhZ2UpO1xuICAgICAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICAgIHZhciB0b2tlblBhdCA9IHRva2VuWzFdO1xuICAgICAgICAgICAgICBtZXNzYWdlID0gdG9rZW5bMl07XG4gICAgICAgICAgICAgIHN3aXRjaCAodG9rZW5QYXQpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdhc3NpZ24nOlxuICAgICAgICAgICAgICAgICAgdG9rZW5QYXQgPSAnPSc7XG4gICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG9mZnNldCA9IE1hdGgubWF4KGxpbmUubGluZS5pbmRleE9mKHRva2VuUGF0LCBvZmZzZXQpLCAwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHB1c2gobGVmdFBhZCgnfCAnLCA2KSk7XG4gICAgICAgICAgICBwdXNoKGxlZnRQYWQoJ15eXicsIG9mZnNldCArIDMpICsgZW5kbCwgJ2ZvbnQtd2VpZ2h0OmJvbGQnKTtcbiAgICAgICAgICAgIHB1c2gobGVmdFBhZCgnfCAnLCA2KSk7XG4gICAgICAgICAgICBwdXNoKG1lc3NhZ2UgKyBlbmRsLCAnZm9udC13ZWlnaHQ6Ym9sZCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHB1c2gobGVmdFBhZCgnfCAnLCA2KSArIGVuZGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHB1c2gobGVmdFBhZChsaW5lLm51bWJlciwgNCkgKyAnfCAgJyk7XG4gICAgICAgICAgcHVzaChsaW5lLmxpbmUgKyBlbmRsLCAnY29sb3I6cmVkJyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgIXdpbmRvdy5jaHJvbWUpIHtcbiAgICAgICAgc3R5bGVzWzBdID0gc3RyaW5ncy5qb2luKCclYycpO1xuICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBzdHlsZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coc3RyaW5ncy5qb2luKCcnKSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBjaGVjay5yYWlzZSgnRXJyb3IgY29tcGlsaW5nICcgKyB0eXBlTmFtZSArICcgc2hhZGVyLCAnICsgZmlsZXNbMF0ubmFtZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tMaW5rRXJyb3IgKGdsLCBwcm9ncmFtLCBmcmFnU2hhZGVyLCB2ZXJ0U2hhZGVyLCBjb21tYW5kKSB7XG4gIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpIHtcbiAgICB2YXIgZXJyTG9nID0gZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSk7XG4gICAgdmFyIGZyYWdQYXJzZSA9IHBhcnNlU291cmNlKGZyYWdTaGFkZXIsIGNvbW1hbmQpO1xuICAgIHZhciB2ZXJ0UGFyc2UgPSBwYXJzZVNvdXJjZSh2ZXJ0U2hhZGVyLCBjb21tYW5kKTtcblxuICAgIHZhciBoZWFkZXIgPSAnRXJyb3IgbGlua2luZyBwcm9ncmFtIHdpdGggdmVydGV4IHNoYWRlciwgXCInICtcbiAgICAgIHZlcnRQYXJzZVswXS5uYW1lICsgJ1wiLCBhbmQgZnJhZ21lbnQgc2hhZGVyIFwiJyArIGZyYWdQYXJzZVswXS5uYW1lICsgJ1wiJztcblxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLmxvZygnJWMnICsgaGVhZGVyICsgZW5kbCArICclYycgKyBlcnJMb2csXG4gICAgICAgICdjb2xvcjpyZWQ7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTtmb250LXdlaWdodDpib2xkJyxcbiAgICAgICAgJ2NvbG9yOnJlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhoZWFkZXIgKyBlbmRsICsgZXJyTG9nKTtcbiAgICB9XG4gICAgY2hlY2sucmFpc2UoaGVhZGVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzYXZlQ29tbWFuZFJlZiAob2JqZWN0KSB7XG4gIG9iamVjdC5fY29tbWFuZFJlZiA9IGd1ZXNzQ29tbWFuZCgpO1xufVxuXG5mdW5jdGlvbiBzYXZlRHJhd0NvbW1hbmRJbmZvIChvcHRzLCB1bmlmb3JtcywgYXR0cmlidXRlcywgc3RyaW5nU3RvcmUpIHtcbiAgc2F2ZUNvbW1hbmRSZWYob3B0cyk7XG5cbiAgZnVuY3Rpb24gaWQgKHN0cikge1xuICAgIGlmIChzdHIpIHtcbiAgICAgIHJldHVybiBzdHJpbmdTdG9yZS5pZChzdHIpXG4gICAgfVxuICAgIHJldHVybiAwXG4gIH1cbiAgb3B0cy5fZnJhZ0lkID0gaWQob3B0cy5zdGF0aWMuZnJhZyk7XG4gIG9wdHMuX3ZlcnRJZCA9IGlkKG9wdHMuc3RhdGljLnZlcnQpO1xuXG4gIGZ1bmN0aW9uIGFkZFByb3BzIChkaWN0LCBzZXQpIHtcbiAgICBPYmplY3Qua2V5cyhzZXQpLmZvckVhY2goZnVuY3Rpb24gKHUpIHtcbiAgICAgIGRpY3Rbc3RyaW5nU3RvcmUuaWQodSldID0gdHJ1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciB1bmlmb3JtU2V0ID0gb3B0cy5fdW5pZm9ybVNldCA9IHt9O1xuICBhZGRQcm9wcyh1bmlmb3JtU2V0LCB1bmlmb3Jtcy5zdGF0aWMpO1xuICBhZGRQcm9wcyh1bmlmb3JtU2V0LCB1bmlmb3Jtcy5keW5hbWljKTtcblxuICB2YXIgYXR0cmlidXRlU2V0ID0gb3B0cy5fYXR0cmlidXRlU2V0ID0ge307XG4gIGFkZFByb3BzKGF0dHJpYnV0ZVNldCwgYXR0cmlidXRlcy5zdGF0aWMpO1xuICBhZGRQcm9wcyhhdHRyaWJ1dGVTZXQsIGF0dHJpYnV0ZXMuZHluYW1pYyk7XG5cbiAgb3B0cy5faGFzQ291bnQgPSAoXG4gICAgJ2NvdW50JyBpbiBvcHRzLnN0YXRpYyB8fFxuICAgICdjb3VudCcgaW4gb3B0cy5keW5hbWljIHx8XG4gICAgJ2VsZW1lbnRzJyBpbiBvcHRzLnN0YXRpYyB8fFxuICAgICdlbGVtZW50cycgaW4gb3B0cy5keW5hbWljKTtcbn1cblxuZnVuY3Rpb24gY29tbWFuZFJhaXNlIChtZXNzYWdlLCBjb21tYW5kKSB7XG4gIHZhciBjYWxsU2l0ZSA9IGd1ZXNzQ2FsbFNpdGUoKTtcbiAgcmFpc2UobWVzc2FnZSArXG4gICAgJyBpbiBjb21tYW5kICcgKyAoY29tbWFuZCB8fCBndWVzc0NvbW1hbmQoKSkgK1xuICAgIChjYWxsU2l0ZSA9PT0gJ3Vua25vd24nID8gJycgOiAnIGNhbGxlZCBmcm9tICcgKyBjYWxsU2l0ZSkpO1xufVxuXG5mdW5jdGlvbiBjaGVja0NvbW1hbmQgKHByZWQsIG1lc3NhZ2UsIGNvbW1hbmQpIHtcbiAgaWYgKCFwcmVkKSB7XG4gICAgY29tbWFuZFJhaXNlKG1lc3NhZ2UsIGNvbW1hbmQgfHwgZ3Vlc3NDb21tYW5kKCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrUGFyYW1ldGVyQ29tbWFuZCAocGFyYW0sIHBvc3NpYmlsaXRpZXMsIG1lc3NhZ2UsIGNvbW1hbmQpIHtcbiAgaWYgKCEocGFyYW0gaW4gcG9zc2liaWxpdGllcykpIHtcbiAgICBjb21tYW5kUmFpc2UoXG4gICAgICAndW5rbm93biBwYXJhbWV0ZXIgKCcgKyBwYXJhbSArICcpJyArIGVuY29sb24obWVzc2FnZSkgK1xuICAgICAgJy4gcG9zc2libGUgdmFsdWVzOiAnICsgT2JqZWN0LmtleXMocG9zc2liaWxpdGllcykuam9pbigpLFxuICAgICAgY29tbWFuZCB8fCBndWVzc0NvbW1hbmQoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tDb21tYW5kVHlwZSAodmFsdWUsIHR5cGUsIG1lc3NhZ2UsIGNvbW1hbmQpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gdHlwZSkge1xuICAgIGNvbW1hbmRSYWlzZShcbiAgICAgICdpbnZhbGlkIHBhcmFtZXRlciB0eXBlJyArIGVuY29sb24obWVzc2FnZSkgK1xuICAgICAgJy4gZXhwZWN0ZWQgJyArIHR5cGUgKyAnLCBnb3QgJyArICh0eXBlb2YgdmFsdWUpLFxuICAgICAgY29tbWFuZCB8fCBndWVzc0NvbW1hbmQoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tPcHRpb25hbCAoYmxvY2spIHtcbiAgYmxvY2soKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tGcmFtZWJ1ZmZlckZvcm1hdCAoYXR0YWNobWVudCwgdGV4Rm9ybWF0cywgcmJGb3JtYXRzKSB7XG4gIGlmIChhdHRhY2htZW50LnRleHR1cmUpIHtcbiAgICBjaGVja09uZU9mKFxuICAgICAgYXR0YWNobWVudC50ZXh0dXJlLl90ZXh0dXJlLmludGVybmFsZm9ybWF0LFxuICAgICAgdGV4Rm9ybWF0cyxcbiAgICAgICd1bnN1cHBvcnRlZCB0ZXh0dXJlIGZvcm1hdCBmb3IgYXR0YWNobWVudCcpO1xuICB9IGVsc2Uge1xuICAgIGNoZWNrT25lT2YoXG4gICAgICBhdHRhY2htZW50LnJlbmRlcmJ1ZmZlci5fcmVuZGVyYnVmZmVyLmZvcm1hdCxcbiAgICAgIHJiRm9ybWF0cyxcbiAgICAgICd1bnN1cHBvcnRlZCByZW5kZXJidWZmZXIgZm9ybWF0IGZvciBhdHRhY2htZW50Jyk7XG4gIH1cbn1cblxudmFyIEdMX0NMQU1QX1RPX0VER0UgPSAweDgxMkY7XG5cbnZhciBHTF9ORUFSRVNUID0gMHgyNjAwO1xudmFyIEdMX05FQVJFU1RfTUlQTUFQX05FQVJFU1QgPSAweDI3MDA7XG52YXIgR0xfTElORUFSX01JUE1BUF9ORUFSRVNUID0gMHgyNzAxO1xudmFyIEdMX05FQVJFU1RfTUlQTUFQX0xJTkVBUiA9IDB4MjcwMjtcbnZhciBHTF9MSU5FQVJfTUlQTUFQX0xJTkVBUiA9IDB4MjcwMztcblxudmFyIEdMX0JZVEUgPSA1MTIwO1xudmFyIEdMX1VOU0lHTkVEX0JZVEUgPSA1MTIxO1xudmFyIEdMX1NIT1JUID0gNTEyMjtcbnZhciBHTF9VTlNJR05FRF9TSE9SVCA9IDUxMjM7XG52YXIgR0xfSU5UID0gNTEyNDtcbnZhciBHTF9VTlNJR05FRF9JTlQgPSA1MTI1O1xudmFyIEdMX0ZMT0FUID0gNTEyNjtcblxudmFyIEdMX1VOU0lHTkVEX1NIT1JUXzRfNF80XzQgPSAweDgwMzM7XG52YXIgR0xfVU5TSUdORURfU0hPUlRfNV81XzVfMSA9IDB4ODAzNDtcbnZhciBHTF9VTlNJR05FRF9TSE9SVF81XzZfNSA9IDB4ODM2MztcbnZhciBHTF9VTlNJR05FRF9JTlRfMjRfOF9XRUJHTCA9IDB4ODRGQTtcblxudmFyIEdMX0hBTEZfRkxPQVRfT0VTID0gMHg4RDYxO1xuXG52YXIgVFlQRV9TSVpFID0ge307XG5cblRZUEVfU0laRVtHTF9CWVRFXSA9XG5UWVBFX1NJWkVbR0xfVU5TSUdORURfQllURV0gPSAxO1xuXG5UWVBFX1NJWkVbR0xfU0hPUlRdID1cblRZUEVfU0laRVtHTF9VTlNJR05FRF9TSE9SVF0gPVxuVFlQRV9TSVpFW0dMX0hBTEZfRkxPQVRfT0VTXSA9XG5UWVBFX1NJWkVbR0xfVU5TSUdORURfU0hPUlRfNV82XzVdID1cblRZUEVfU0laRVtHTF9VTlNJR05FRF9TSE9SVF80XzRfNF80XSA9XG5UWVBFX1NJWkVbR0xfVU5TSUdORURfU0hPUlRfNV81XzVfMV0gPSAyO1xuXG5UWVBFX1NJWkVbR0xfSU5UXSA9XG5UWVBFX1NJWkVbR0xfVU5TSUdORURfSU5UXSA9XG5UWVBFX1NJWkVbR0xfRkxPQVRdID1cblRZUEVfU0laRVtHTF9VTlNJR05FRF9JTlRfMjRfOF9XRUJHTF0gPSA0O1xuXG5mdW5jdGlvbiBwaXhlbFNpemUgKHR5cGUsIGNoYW5uZWxzKSB7XG4gIGlmICh0eXBlID09PSBHTF9VTlNJR05FRF9TSE9SVF81XzVfNV8xIHx8XG4gICAgICB0eXBlID09PSBHTF9VTlNJR05FRF9TSE9SVF80XzRfNF80IHx8XG4gICAgICB0eXBlID09PSBHTF9VTlNJR05FRF9TSE9SVF81XzZfNSkge1xuICAgIHJldHVybiAyXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gR0xfVU5TSUdORURfSU5UXzI0XzhfV0VCR0wpIHtcbiAgICByZXR1cm4gNFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBUWVBFX1NJWkVbdHlwZV0gKiBjaGFubmVsc1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzUG93MiAodikge1xuICByZXR1cm4gISh2ICYgKHYgLSAxKSkgJiYgKCEhdilcbn1cblxuZnVuY3Rpb24gY2hlY2tUZXh0dXJlMkQgKGluZm8sIG1pcERhdGEsIGxpbWl0cykge1xuICB2YXIgaTtcbiAgdmFyIHcgPSBtaXBEYXRhLndpZHRoO1xuICB2YXIgaCA9IG1pcERhdGEuaGVpZ2h0O1xuICB2YXIgYyA9IG1pcERhdGEuY2hhbm5lbHM7XG5cbiAgLy8gQ2hlY2sgdGV4dHVyZSBzaGFwZVxuICBjaGVjayh3ID4gMCAmJiB3IDw9IGxpbWl0cy5tYXhUZXh0dXJlU2l6ZSAmJlxuICAgICAgICBoID4gMCAmJiBoIDw9IGxpbWl0cy5tYXhUZXh0dXJlU2l6ZSxcbiAgICAgICAgJ2ludmFsaWQgdGV4dHVyZSBzaGFwZScpO1xuXG4gIC8vIGNoZWNrIHdyYXAgbW9kZVxuICBpZiAoaW5mby53cmFwUyAhPT0gR0xfQ0xBTVBfVE9fRURHRSB8fCBpbmZvLndyYXBUICE9PSBHTF9DTEFNUF9UT19FREdFKSB7XG4gICAgY2hlY2soaXNQb3cyKHcpICYmIGlzUG93MihoKSxcbiAgICAgICdpbmNvbXBhdGlibGUgd3JhcCBtb2RlIGZvciB0ZXh0dXJlLCBib3RoIHdpZHRoIGFuZCBoZWlnaHQgbXVzdCBiZSBwb3dlciBvZiAyJyk7XG4gIH1cblxuICBpZiAobWlwRGF0YS5taXBtYXNrID09PSAxKSB7XG4gICAgaWYgKHcgIT09IDEgJiYgaCAhPT0gMSkge1xuICAgICAgY2hlY2soXG4gICAgICAgIGluZm8ubWluRmlsdGVyICE9PSBHTF9ORUFSRVNUX01JUE1BUF9ORUFSRVNUICYmXG4gICAgICAgIGluZm8ubWluRmlsdGVyICE9PSBHTF9ORUFSRVNUX01JUE1BUF9MSU5FQVIgJiZcbiAgICAgICAgaW5mby5taW5GaWx0ZXIgIT09IEdMX0xJTkVBUl9NSVBNQVBfTkVBUkVTVCAmJlxuICAgICAgICBpbmZvLm1pbkZpbHRlciAhPT0gR0xfTElORUFSX01JUE1BUF9MSU5FQVIsXG4gICAgICAgICdtaW4gZmlsdGVyIHJlcXVpcmVzIG1pcG1hcCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyB0ZXh0dXJlIG11c3QgYmUgcG93ZXIgb2YgMlxuICAgIGNoZWNrKGlzUG93Mih3KSAmJiBpc1BvdzIoaCksXG4gICAgICAndGV4dHVyZSBtdXN0IGJlIGEgc3F1YXJlIHBvd2VyIG9mIDIgdG8gc3VwcG9ydCBtaXBtYXBwaW5nJyk7XG4gICAgY2hlY2sobWlwRGF0YS5taXBtYXNrID09PSAodyA8PCAxKSAtIDEsXG4gICAgICAnbWlzc2luZyBvciBpbmNvbXBsZXRlIG1pcG1hcCBkYXRhJyk7XG4gIH1cblxuICBpZiAobWlwRGF0YS50eXBlID09PSBHTF9GTE9BVCkge1xuICAgIGlmIChsaW1pdHMuZXh0ZW5zaW9ucy5pbmRleE9mKCdvZXNfdGV4dHVyZV9mbG9hdF9saW5lYXInKSA8IDApIHtcbiAgICAgIGNoZWNrKGluZm8ubWluRmlsdGVyID09PSBHTF9ORUFSRVNUICYmIGluZm8ubWFnRmlsdGVyID09PSBHTF9ORUFSRVNULFxuICAgICAgICAnZmlsdGVyIG5vdCBzdXBwb3J0ZWQsIG11c3QgZW5hYmxlIG9lc190ZXh0dXJlX2Zsb2F0X2xpbmVhcicpO1xuICAgIH1cbiAgICBjaGVjayghaW5mby5nZW5NaXBtYXBzLFxuICAgICAgJ21pcG1hcCBnZW5lcmF0aW9uIG5vdCBzdXBwb3J0ZWQgd2l0aCBmbG9hdCB0ZXh0dXJlcycpO1xuICB9XG5cbiAgLy8gY2hlY2sgaW1hZ2UgY29tcGxldGVcbiAgdmFyIG1pcGltYWdlcyA9IG1pcERhdGEuaW1hZ2VzO1xuICBmb3IgKGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgIGlmIChtaXBpbWFnZXNbaV0pIHtcbiAgICAgIHZhciBtdyA9IHcgPj4gaTtcbiAgICAgIHZhciBtaCA9IGggPj4gaTtcbiAgICAgIGNoZWNrKG1pcERhdGEubWlwbWFzayAmICgxIDw8IGkpLCAnbWlzc2luZyBtaXBtYXAgZGF0YScpO1xuXG4gICAgICB2YXIgaW1nID0gbWlwaW1hZ2VzW2ldO1xuXG4gICAgICBjaGVjayhcbiAgICAgICAgaW1nLndpZHRoID09PSBtdyAmJlxuICAgICAgICBpbWcuaGVpZ2h0ID09PSBtaCxcbiAgICAgICAgJ2ludmFsaWQgc2hhcGUgZm9yIG1pcCBpbWFnZXMnKTtcblxuICAgICAgY2hlY2soXG4gICAgICAgIGltZy5mb3JtYXQgPT09IG1pcERhdGEuZm9ybWF0ICYmXG4gICAgICAgIGltZy5pbnRlcm5hbGZvcm1hdCA9PT0gbWlwRGF0YS5pbnRlcm5hbGZvcm1hdCAmJlxuICAgICAgICBpbWcudHlwZSA9PT0gbWlwRGF0YS50eXBlLFxuICAgICAgICAnaW5jb21wYXRpYmxlIHR5cGUgZm9yIG1pcCBpbWFnZScpO1xuXG4gICAgICBpZiAoaW1nLmNvbXByZXNzZWQpIHtcbiAgICAgICAgLy8gVE9ETzogY2hlY2sgc2l6ZSBmb3IgY29tcHJlc3NlZCBpbWFnZXNcbiAgICAgIH0gZWxzZSBpZiAoaW1nLmRhdGEpIHtcbiAgICAgICAgLy8gY2hlY2soaW1nLmRhdGEuYnl0ZUxlbmd0aCA9PT0gbXcgKiBtaCAqXG4gICAgICAgIC8vIE1hdGgubWF4KHBpeGVsU2l6ZShpbWcudHlwZSwgYyksIGltZy51bnBhY2tBbGlnbm1lbnQpLFxuICAgICAgICB2YXIgcm93U2l6ZSA9IE1hdGguY2VpbChwaXhlbFNpemUoaW1nLnR5cGUsIGMpICogbXcgLyBpbWcudW5wYWNrQWxpZ25tZW50KSAqIGltZy51bnBhY2tBbGlnbm1lbnQ7XG4gICAgICAgIGNoZWNrKGltZy5kYXRhLmJ5dGVMZW5ndGggPT09IHJvd1NpemUgKiBtaCxcbiAgICAgICAgICAnaW52YWxpZCBkYXRhIGZvciBpbWFnZSwgYnVmZmVyIHNpemUgaXMgaW5jb25zaXN0ZW50IHdpdGggaW1hZ2UgZm9ybWF0Jyk7XG4gICAgICB9IGVsc2UgaWYgKGltZy5lbGVtZW50KSB7XG4gICAgICAgIC8vIFRPRE86IGNoZWNrIGVsZW1lbnQgY2FuIGJlIGxvYWRlZFxuICAgICAgfSBlbHNlIGlmIChpbWcuY29weSkge1xuICAgICAgICAvLyBUT0RPOiBjaGVjayBjb21wYXRpYmxlIGZvcm1hdCBhbmQgdHlwZVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWluZm8uZ2VuTWlwbWFwcykge1xuICAgICAgY2hlY2soKG1pcERhdGEubWlwbWFzayAmICgxIDw8IGkpKSA9PT0gMCwgJ2V4dHJhIG1pcG1hcCBkYXRhJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG1pcERhdGEuY29tcHJlc3NlZCkge1xuICAgIGNoZWNrKCFpbmZvLmdlbk1pcG1hcHMsXG4gICAgICAnbWlwbWFwIGdlbmVyYXRpb24gZm9yIGNvbXByZXNzZWQgaW1hZ2VzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja1RleHR1cmVDdWJlICh0ZXh0dXJlLCBpbmZvLCBmYWNlcywgbGltaXRzKSB7XG4gIHZhciB3ID0gdGV4dHVyZS53aWR0aDtcbiAgdmFyIGggPSB0ZXh0dXJlLmhlaWdodDtcbiAgdmFyIGMgPSB0ZXh0dXJlLmNoYW5uZWxzO1xuXG4gIC8vIENoZWNrIHRleHR1cmUgc2hhcGVcbiAgY2hlY2soXG4gICAgdyA+IDAgJiYgdyA8PSBsaW1pdHMubWF4VGV4dHVyZVNpemUgJiYgaCA+IDAgJiYgaCA8PSBsaW1pdHMubWF4VGV4dHVyZVNpemUsXG4gICAgJ2ludmFsaWQgdGV4dHVyZSBzaGFwZScpO1xuICBjaGVjayhcbiAgICB3ID09PSBoLFxuICAgICdjdWJlIG1hcCBtdXN0IGJlIHNxdWFyZScpO1xuICBjaGVjayhcbiAgICBpbmZvLndyYXBTID09PSBHTF9DTEFNUF9UT19FREdFICYmIGluZm8ud3JhcFQgPT09IEdMX0NMQU1QX1RPX0VER0UsXG4gICAgJ3dyYXAgbW9kZSBub3Qgc3VwcG9ydGVkIGJ5IGN1YmUgbWFwJyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmYWNlcy5sZW5ndGg7ICsraSkge1xuICAgIHZhciBmYWNlID0gZmFjZXNbaV07XG4gICAgY2hlY2soXG4gICAgICBmYWNlLndpZHRoID09PSB3ICYmIGZhY2UuaGVpZ2h0ID09PSBoLFxuICAgICAgJ2luY29uc2lzdGVudCBjdWJlIG1hcCBmYWNlIHNoYXBlJyk7XG5cbiAgICBpZiAoaW5mby5nZW5NaXBtYXBzKSB7XG4gICAgICBjaGVjayghZmFjZS5jb21wcmVzc2VkLFxuICAgICAgICAnY2FuIG5vdCBnZW5lcmF0ZSBtaXBtYXAgZm9yIGNvbXByZXNzZWQgdGV4dHVyZXMnKTtcbiAgICAgIGNoZWNrKGZhY2UubWlwbWFzayA9PT0gMSxcbiAgICAgICAgJ2NhbiBub3Qgc3BlY2lmeSBtaXBtYXBzIGFuZCBnZW5lcmF0ZSBtaXBtYXBzJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE86IGNoZWNrIG1pcCBhbmQgZmlsdGVyIG1vZGVcbiAgICB9XG5cbiAgICB2YXIgbWlwbWFwcyA9IGZhY2UuaW1hZ2VzO1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgMTY7ICsraikge1xuICAgICAgdmFyIGltZyA9IG1pcG1hcHNbal07XG4gICAgICBpZiAoaW1nKSB7XG4gICAgICAgIHZhciBtdyA9IHcgPj4gajtcbiAgICAgICAgdmFyIG1oID0gaCA+PiBqO1xuICAgICAgICBjaGVjayhmYWNlLm1pcG1hc2sgJiAoMSA8PCBqKSwgJ21pc3NpbmcgbWlwbWFwIGRhdGEnKTtcbiAgICAgICAgY2hlY2soXG4gICAgICAgICAgaW1nLndpZHRoID09PSBtdyAmJlxuICAgICAgICAgIGltZy5oZWlnaHQgPT09IG1oLFxuICAgICAgICAgICdpbnZhbGlkIHNoYXBlIGZvciBtaXAgaW1hZ2VzJyk7XG4gICAgICAgIGNoZWNrKFxuICAgICAgICAgIGltZy5mb3JtYXQgPT09IHRleHR1cmUuZm9ybWF0ICYmXG4gICAgICAgICAgaW1nLmludGVybmFsZm9ybWF0ID09PSB0ZXh0dXJlLmludGVybmFsZm9ybWF0ICYmXG4gICAgICAgICAgaW1nLnR5cGUgPT09IHRleHR1cmUudHlwZSxcbiAgICAgICAgICAnaW5jb21wYXRpYmxlIHR5cGUgZm9yIG1pcCBpbWFnZScpO1xuXG4gICAgICAgIGlmIChpbWcuY29tcHJlc3NlZCkge1xuICAgICAgICAgIC8vIFRPRE86IGNoZWNrIHNpemUgZm9yIGNvbXByZXNzZWQgaW1hZ2VzXG4gICAgICAgIH0gZWxzZSBpZiAoaW1nLmRhdGEpIHtcbiAgICAgICAgICBjaGVjayhpbWcuZGF0YS5ieXRlTGVuZ3RoID09PSBtdyAqIG1oICpcbiAgICAgICAgICAgIE1hdGgubWF4KHBpeGVsU2l6ZShpbWcudHlwZSwgYyksIGltZy51bnBhY2tBbGlnbm1lbnQpLFxuICAgICAgICAgICAgJ2ludmFsaWQgZGF0YSBmb3IgaW1hZ2UsIGJ1ZmZlciBzaXplIGlzIGluY29uc2lzdGVudCB3aXRoIGltYWdlIGZvcm1hdCcpO1xuICAgICAgICB9IGVsc2UgaWYgKGltZy5lbGVtZW50KSB7XG4gICAgICAgICAgLy8gVE9ETzogY2hlY2sgZWxlbWVudCBjYW4gYmUgbG9hZGVkXG4gICAgICAgIH0gZWxzZSBpZiAoaW1nLmNvcHkpIHtcbiAgICAgICAgICAvLyBUT0RPOiBjaGVjayBjb21wYXRpYmxlIGZvcm1hdCBhbmQgdHlwZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBjaGVjayQxID0gZXh0ZW5kKGNoZWNrLCB7XG4gIG9wdGlvbmFsOiBjaGVja09wdGlvbmFsLFxuICByYWlzZTogcmFpc2UsXG4gIGNvbW1hbmRSYWlzZTogY29tbWFuZFJhaXNlLFxuICBjb21tYW5kOiBjaGVja0NvbW1hbmQsXG4gIHBhcmFtZXRlcjogY2hlY2tQYXJhbWV0ZXIsXG4gIGNvbW1hbmRQYXJhbWV0ZXI6IGNoZWNrUGFyYW1ldGVyQ29tbWFuZCxcbiAgY29uc3RydWN0b3I6IGNoZWNrQ29uc3RydWN0b3IsXG4gIHR5cGU6IGNoZWNrVHlwZU9mLFxuICBjb21tYW5kVHlwZTogY2hlY2tDb21tYW5kVHlwZSxcbiAgaXNUeXBlZEFycmF5OiBjaGVja0lzVHlwZWRBcnJheSxcbiAgbm5pOiBjaGVja05vbk5lZ2F0aXZlSW50LFxuICBvbmVPZjogY2hlY2tPbmVPZixcbiAgc2hhZGVyRXJyb3I6IGNoZWNrU2hhZGVyRXJyb3IsXG4gIGxpbmtFcnJvcjogY2hlY2tMaW5rRXJyb3IsXG4gIGNhbGxTaXRlOiBndWVzc0NhbGxTaXRlLFxuICBzYXZlQ29tbWFuZFJlZjogc2F2ZUNvbW1hbmRSZWYsXG4gIHNhdmVEcmF3SW5mbzogc2F2ZURyYXdDb21tYW5kSW5mbyxcbiAgZnJhbWVidWZmZXJGb3JtYXQ6IGNoZWNrRnJhbWVidWZmZXJGb3JtYXQsXG4gIGd1ZXNzQ29tbWFuZDogZ3Vlc3NDb21tYW5kLFxuICB0ZXh0dXJlMkQ6IGNoZWNrVGV4dHVyZTJELFxuICB0ZXh0dXJlQ3ViZTogY2hlY2tUZXh0dXJlQ3ViZVxufSk7XG5cbnZhciBWQVJJQUJMRV9DT1VOVEVSID0gMDtcblxudmFyIERZTl9GVU5DID0gMDtcblxuZnVuY3Rpb24gRHluYW1pY1ZhcmlhYmxlICh0eXBlLCBkYXRhKSB7XG4gIHRoaXMuaWQgPSAoVkFSSUFCTEVfQ09VTlRFUisrKTtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5kYXRhID0gZGF0YTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlU3RyIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKVxufVxuXG5mdW5jdGlvbiBzcGxpdFBhcnRzIChzdHIpIHtcbiAgaWYgKHN0ci5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIHZhciBmaXJzdENoYXIgPSBzdHIuY2hhckF0KDApO1xuICB2YXIgbGFzdENoYXIgPSBzdHIuY2hhckF0KHN0ci5sZW5ndGggLSAxKTtcblxuICBpZiAoc3RyLmxlbmd0aCA+IDEgJiZcbiAgICAgIGZpcnN0Q2hhciA9PT0gbGFzdENoYXIgJiZcbiAgICAgIChmaXJzdENoYXIgPT09ICdcIicgfHwgZmlyc3RDaGFyID09PSBcIidcIikpIHtcbiAgICByZXR1cm4gWydcIicgKyBlc2NhcGVTdHIoc3RyLnN1YnN0cigxLCBzdHIubGVuZ3RoIC0gMikpICsgJ1wiJ11cbiAgfVxuXG4gIHZhciBwYXJ0cyA9IC9cXFsoZmFsc2V8dHJ1ZXxudWxsfFxcZCt8J1teJ10qJ3xcIlteXCJdKlwiKVxcXS8uZXhlYyhzdHIpO1xuICBpZiAocGFydHMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgc3BsaXRQYXJ0cyhzdHIuc3Vic3RyKDAsIHBhcnRzLmluZGV4KSlcbiAgICAgIC5jb25jYXQoc3BsaXRQYXJ0cyhwYXJ0c1sxXSkpXG4gICAgICAuY29uY2F0KHNwbGl0UGFydHMoc3RyLnN1YnN0cihwYXJ0cy5pbmRleCArIHBhcnRzWzBdLmxlbmd0aCkpKVxuICAgIClcbiAgfVxuXG4gIHZhciBzdWJwYXJ0cyA9IHN0ci5zcGxpdCgnLicpO1xuICBpZiAoc3VicGFydHMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIFsnXCInICsgZXNjYXBlU3RyKHN0cikgKyAnXCInXVxuICB9XG5cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YnBhcnRzLmxlbmd0aDsgKytpKSB7XG4gICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdChzcGxpdFBhcnRzKHN1YnBhcnRzW2ldKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiB0b0FjY2Vzc29yU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuICdbJyArIHNwbGl0UGFydHMoc3RyKS5qb2luKCddWycpICsgJ10nXG59XG5cbmZ1bmN0aW9uIGRlZmluZUR5bmFtaWMgKHR5cGUsIGRhdGEpIHtcbiAgcmV0dXJuIG5ldyBEeW5hbWljVmFyaWFibGUodHlwZSwgdG9BY2Nlc3NvclN0cmluZyhkYXRhICsgJycpKVxufVxuXG5mdW5jdGlvbiBpc0R5bmFtaWMgKHgpIHtcbiAgcmV0dXJuICh0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJyAmJiAheC5fcmVnbFR5cGUpIHx8XG4gICAgICAgICB4IGluc3RhbmNlb2YgRHluYW1pY1ZhcmlhYmxlXG59XG5cbmZ1bmN0aW9uIHVuYm94ICh4LCBwYXRoKSB7XG4gIGlmICh0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBuZXcgRHluYW1pY1ZhcmlhYmxlKERZTl9GVU5DLCB4KVxuICB9XG4gIHJldHVybiB4XG59XG5cbnZhciBkeW5hbWljID0ge1xuICBEeW5hbWljVmFyaWFibGU6IER5bmFtaWNWYXJpYWJsZSxcbiAgZGVmaW5lOiBkZWZpbmVEeW5hbWljLFxuICBpc0R5bmFtaWM6IGlzRHluYW1pYyxcbiAgdW5ib3g6IHVuYm94LFxuICBhY2Nlc3NvcjogdG9BY2Nlc3NvclN0cmluZ1xufTtcblxuLyogZ2xvYmFscyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUsIGNhbmNlbEFuaW1hdGlvbkZyYW1lICovXG52YXIgcmFmID0ge1xuICBuZXh0OiB0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID09PSAnZnVuY3Rpb24nXG4gICAgPyBmdW5jdGlvbiAoY2IpIHsgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYikgfVxuICAgIDogZnVuY3Rpb24gKGNiKSB7IHJldHVybiBzZXRUaW1lb3V0KGNiLCAxNikgfSxcbiAgY2FuY2VsOiB0eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWUgPT09ICdmdW5jdGlvbidcbiAgICA/IGZ1bmN0aW9uIChyYWYpIHsgcmV0dXJuIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZikgfVxuICAgIDogY2xlYXJUaW1lb3V0XG59O1xuXG4vKiBnbG9iYWxzIHBlcmZvcm1hbmNlICovXG52YXIgY2xvY2sgPSAodHlwZW9mIHBlcmZvcm1hbmNlICE9PSAndW5kZWZpbmVkJyAmJiBwZXJmb3JtYW5jZS5ub3cpXG4gID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCkgfVxuICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICsobmV3IERhdGUoKSkgfTtcblxuZnVuY3Rpb24gY3JlYXRlU3RyaW5nU3RvcmUgKCkge1xuICB2YXIgc3RyaW5nSWRzID0geycnOiAwfTtcbiAgdmFyIHN0cmluZ1ZhbHVlcyA9IFsnJ107XG4gIHJldHVybiB7XG4gICAgaWQ6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgIHZhciByZXN1bHQgPSBzdHJpbmdJZHNbc3RyXTtcbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfVxuICAgICAgcmVzdWx0ID0gc3RyaW5nSWRzW3N0cl0gPSBzdHJpbmdWYWx1ZXMubGVuZ3RoO1xuICAgICAgc3RyaW5nVmFsdWVzLnB1c2goc3RyKTtcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9LFxuXG4gICAgc3RyOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHJldHVybiBzdHJpbmdWYWx1ZXNbaWRdXG4gICAgfVxuICB9XG59XG5cbi8vIENvbnRleHQgYW5kIGNhbnZhcyBjcmVhdGlvbiBoZWxwZXIgZnVuY3Rpb25zXG5mdW5jdGlvbiBjcmVhdGVDYW52YXMgKGVsZW1lbnQsIG9uRG9uZSwgcGl4ZWxSYXRpbykge1xuICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIGV4dGVuZChjYW52YXMuc3R5bGUsIHtcbiAgICBib3JkZXI6IDAsXG4gICAgbWFyZ2luOiAwLFxuICAgIHBhZGRpbmc6IDAsXG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDBcbiAgfSk7XG4gIGVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FudmFzKTtcblxuICBpZiAoZWxlbWVudCA9PT0gZG9jdW1lbnQuYm9keSkge1xuICAgIGNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgZXh0ZW5kKGVsZW1lbnQuc3R5bGUsIHtcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2l6ZSAoKSB7XG4gICAgdmFyIHcgPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICB2YXIgaCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICBpZiAoZWxlbWVudCAhPT0gZG9jdW1lbnQuYm9keSkge1xuICAgICAgdmFyIGJvdW5kcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB3ID0gYm91bmRzLnJpZ2h0IC0gYm91bmRzLmxlZnQ7XG4gICAgICBoID0gYm91bmRzLmJvdHRvbSAtIGJvdW5kcy50b3A7XG4gICAgfVxuICAgIGNhbnZhcy53aWR0aCA9IHBpeGVsUmF0aW8gKiB3O1xuICAgIGNhbnZhcy5oZWlnaHQgPSBwaXhlbFJhdGlvICogaDtcbiAgICBleHRlbmQoY2FudmFzLnN0eWxlLCB7XG4gICAgICB3aWR0aDogdyArICdweCcsXG4gICAgICBoZWlnaHQ6IGggKyAncHgnXG4gICAgfSk7XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplLCBmYWxzZSk7XG5cbiAgZnVuY3Rpb24gb25EZXN0cm95ICgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplKTtcbiAgICBlbGVtZW50LnJlbW92ZUNoaWxkKGNhbnZhcyk7XG4gIH1cblxuICByZXNpemUoKTtcblxuICByZXR1cm4ge1xuICAgIGNhbnZhczogY2FudmFzLFxuICAgIG9uRGVzdHJveTogb25EZXN0cm95XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29udGV4dCAoY2FudmFzLCBjb250ZXh0QXR0cmlidXRlcykge1xuICBmdW5jdGlvbiBnZXQgKG5hbWUpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNhbnZhcy5nZXRDb250ZXh0KG5hbWUsIGNvbnRleHRBdHRyaWJ1dGVzKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9XG4gIHJldHVybiAoXG4gICAgZ2V0KCd3ZWJnbCcpIHx8XG4gICAgZ2V0KCdleHBlcmltZW50YWwtd2ViZ2wnKSB8fFxuICAgIGdldCgnd2ViZ2wtZXhwZXJpbWVudGFsJylcbiAgKVxufVxuXG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50IChvYmopIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygb2JqLm5vZGVOYW1lID09PSAnc3RyaW5nJyAmJlxuICAgIHR5cGVvZiBvYmouYXBwZW5kQ2hpbGQgPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2Ygb2JqLmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJ1xuICApXG59XG5cbmZ1bmN0aW9uIGlzV2ViR0xDb250ZXh0IChvYmopIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygb2JqLmRyYXdBcnJheXMgPT09ICdmdW5jdGlvbicgfHxcbiAgICB0eXBlb2Ygb2JqLmRyYXdFbGVtZW50cyA9PT0gJ2Z1bmN0aW9uJ1xuICApXG59XG5cbmZ1bmN0aW9uIHBhcnNlRXh0ZW5zaW9ucyAoaW5wdXQpIHtcbiAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gaW5wdXQuc3BsaXQoKVxuICB9XG4gIGNoZWNrJDEoQXJyYXkuaXNBcnJheShpbnB1dCksICdpbnZhbGlkIGV4dGVuc2lvbiBhcnJheScpO1xuICByZXR1cm4gaW5wdXRcbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudCAoZGVzYykge1xuICBpZiAodHlwZW9mIGRlc2MgPT09ICdzdHJpbmcnKSB7XG4gICAgY2hlY2skMSh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnLCAnbm90IHN1cHBvcnRlZCBvdXRzaWRlIG9mIERPTScpO1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGRlc2MpXG4gIH1cbiAgcmV0dXJuIGRlc2Ncbn1cblxuZnVuY3Rpb24gcGFyc2VBcmdzIChhcmdzXykge1xuICB2YXIgYXJncyA9IGFyZ3NfIHx8IHt9O1xuICB2YXIgZWxlbWVudCwgY29udGFpbmVyLCBjYW52YXMsIGdsO1xuICB2YXIgY29udGV4dEF0dHJpYnV0ZXMgPSB7fTtcbiAgdmFyIGV4dGVuc2lvbnMgPSBbXTtcbiAgdmFyIG9wdGlvbmFsRXh0ZW5zaW9ucyA9IFtdO1xuICB2YXIgcGl4ZWxSYXRpbyA9ICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IDEgOiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyk7XG4gIHZhciBwcm9maWxlID0gZmFsc2U7XG4gIHZhciBvbkRvbmUgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2hlY2skMS5yYWlzZShlcnIpO1xuICAgIH1cbiAgfTtcbiAgdmFyIG9uRGVzdHJveSA9IGZ1bmN0aW9uICgpIHt9O1xuICBpZiAodHlwZW9mIGFyZ3MgPT09ICdzdHJpbmcnKSB7XG4gICAgY2hlY2skMShcbiAgICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgICAnc2VsZWN0b3IgcXVlcmllcyBvbmx5IHN1cHBvcnRlZCBpbiBET00gZW52aXJvbWVudHMnKTtcbiAgICBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihhcmdzKTtcbiAgICBjaGVjayQxKGVsZW1lbnQsICdpbnZhbGlkIHF1ZXJ5IHN0cmluZyBmb3IgZWxlbWVudCcpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmdzID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChpc0hUTUxFbGVtZW50KGFyZ3MpKSB7XG4gICAgICBlbGVtZW50ID0gYXJncztcbiAgICB9IGVsc2UgaWYgKGlzV2ViR0xDb250ZXh0KGFyZ3MpKSB7XG4gICAgICBnbCA9IGFyZ3M7XG4gICAgICBjYW52YXMgPSBnbC5jYW52YXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoZWNrJDEuY29uc3RydWN0b3IoYXJncyk7XG4gICAgICBpZiAoJ2dsJyBpbiBhcmdzKSB7XG4gICAgICAgIGdsID0gYXJncy5nbDtcbiAgICAgIH0gZWxzZSBpZiAoJ2NhbnZhcycgaW4gYXJncykge1xuICAgICAgICBjYW52YXMgPSBnZXRFbGVtZW50KGFyZ3MuY2FudmFzKTtcbiAgICAgIH0gZWxzZSBpZiAoJ2NvbnRhaW5lcicgaW4gYXJncykge1xuICAgICAgICBjb250YWluZXIgPSBnZXRFbGVtZW50KGFyZ3MuY29udGFpbmVyKTtcbiAgICAgIH1cbiAgICAgIGlmICgnYXR0cmlidXRlcycgaW4gYXJncykge1xuICAgICAgICBjb250ZXh0QXR0cmlidXRlcyA9IGFyZ3MuYXR0cmlidXRlcztcbiAgICAgICAgY2hlY2skMS50eXBlKGNvbnRleHRBdHRyaWJ1dGVzLCAnb2JqZWN0JywgJ2ludmFsaWQgY29udGV4dCBhdHRyaWJ1dGVzJyk7XG4gICAgICB9XG4gICAgICBpZiAoJ2V4dGVuc2lvbnMnIGluIGFyZ3MpIHtcbiAgICAgICAgZXh0ZW5zaW9ucyA9IHBhcnNlRXh0ZW5zaW9ucyhhcmdzLmV4dGVuc2lvbnMpO1xuICAgICAgfVxuICAgICAgaWYgKCdvcHRpb25hbEV4dGVuc2lvbnMnIGluIGFyZ3MpIHtcbiAgICAgICAgb3B0aW9uYWxFeHRlbnNpb25zID0gcGFyc2VFeHRlbnNpb25zKGFyZ3Mub3B0aW9uYWxFeHRlbnNpb25zKTtcbiAgICAgIH1cbiAgICAgIGlmICgnb25Eb25lJyBpbiBhcmdzKSB7XG4gICAgICAgIGNoZWNrJDEudHlwZShcbiAgICAgICAgICBhcmdzLm9uRG9uZSwgJ2Z1bmN0aW9uJyxcbiAgICAgICAgICAnaW52YWxpZCBvciBtaXNzaW5nIG9uRG9uZSBjYWxsYmFjaycpO1xuICAgICAgICBvbkRvbmUgPSBhcmdzLm9uRG9uZTtcbiAgICAgIH1cbiAgICAgIGlmICgncHJvZmlsZScgaW4gYXJncykge1xuICAgICAgICBwcm9maWxlID0gISFhcmdzLnByb2ZpbGU7XG4gICAgICB9XG4gICAgICBpZiAoJ3BpeGVsUmF0aW8nIGluIGFyZ3MpIHtcbiAgICAgICAgcGl4ZWxSYXRpbyA9ICthcmdzLnBpeGVsUmF0aW87XG4gICAgICAgIGNoZWNrJDEocGl4ZWxSYXRpbyA+IDAsICdpbnZhbGlkIHBpeGVsIHJhdGlvJyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGNoZWNrJDEucmFpc2UoJ2ludmFsaWQgYXJndW1lbnRzIHRvIHJlZ2wnKTtcbiAgfVxuXG4gIGlmIChlbGVtZW50KSB7XG4gICAgaWYgKGVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2NhbnZhcycpIHtcbiAgICAgIGNhbnZhcyA9IGVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRhaW5lciA9IGVsZW1lbnQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFnbCkge1xuICAgIGlmICghY2FudmFzKSB7XG4gICAgICBjaGVjayQxKFxuICAgICAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnLFxuICAgICAgICAnbXVzdCBtYW51YWxseSBzcGVjaWZ5IHdlYmdsIGNvbnRleHQgb3V0c2lkZSBvZiBET00gZW52aXJvbm1lbnRzJyk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlQ2FudmFzKGNvbnRhaW5lciB8fCBkb2N1bWVudC5ib2R5LCBvbkRvbmUsIHBpeGVsUmF0aW8pO1xuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cbiAgICAgIGNhbnZhcyA9IHJlc3VsdC5jYW52YXM7XG4gICAgICBvbkRlc3Ryb3kgPSByZXN1bHQub25EZXN0cm95O1xuICAgIH1cbiAgICBnbCA9IGNyZWF0ZUNvbnRleHQoY2FudmFzLCBjb250ZXh0QXR0cmlidXRlcyk7XG4gIH1cblxuICBpZiAoIWdsKSB7XG4gICAgb25EZXN0cm95KCk7XG4gICAgb25Eb25lKCd3ZWJnbCBub3Qgc3VwcG9ydGVkLCB0cnkgdXBncmFkaW5nIHlvdXIgYnJvd3NlciBvciBncmFwaGljcyBkcml2ZXJzIGh0dHA6Ly9nZXQud2ViZ2wub3JnJyk7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2w6IGdsLFxuICAgIGNhbnZhczogY2FudmFzLFxuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgIGV4dGVuc2lvbnM6IGV4dGVuc2lvbnMsXG4gICAgb3B0aW9uYWxFeHRlbnNpb25zOiBvcHRpb25hbEV4dGVuc2lvbnMsXG4gICAgcGl4ZWxSYXRpbzogcGl4ZWxSYXRpbyxcbiAgICBwcm9maWxlOiBwcm9maWxlLFxuICAgIG9uRG9uZTogb25Eb25lLFxuICAgIG9uRGVzdHJveTogb25EZXN0cm95XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRXh0ZW5zaW9uQ2FjaGUgKGdsLCBjb25maWcpIHtcbiAgdmFyIGV4dGVuc2lvbnMgPSB7fTtcblxuICBmdW5jdGlvbiB0cnlMb2FkRXh0ZW5zaW9uIChuYW1lXykge1xuICAgIGNoZWNrJDEudHlwZShuYW1lXywgJ3N0cmluZycsICdleHRlbnNpb24gbmFtZSBtdXN0IGJlIHN0cmluZycpO1xuICAgIHZhciBuYW1lID0gbmFtZV8udG9Mb3dlckNhc2UoKTtcbiAgICB2YXIgZXh0O1xuICAgIHRyeSB7XG4gICAgICBleHQgPSBleHRlbnNpb25zW25hbWVdID0gZ2wuZ2V0RXh0ZW5zaW9uKG5hbWUpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuICEhZXh0XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbmZpZy5leHRlbnNpb25zLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIG5hbWUgPSBjb25maWcuZXh0ZW5zaW9uc1tpXTtcbiAgICBpZiAoIXRyeUxvYWRFeHRlbnNpb24obmFtZSkpIHtcbiAgICAgIGNvbmZpZy5vbkRlc3Ryb3koKTtcbiAgICAgIGNvbmZpZy5vbkRvbmUoJ1wiJyArIG5hbWUgKyAnXCIgZXh0ZW5zaW9uIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGN1cnJlbnQgV2ViR0wgY29udGV4dCwgdHJ5IHVwZ3JhZGluZyB5b3VyIHN5c3RlbSBvciBhIGRpZmZlcmVudCBicm93c2VyJyk7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIGNvbmZpZy5vcHRpb25hbEV4dGVuc2lvbnMuZm9yRWFjaCh0cnlMb2FkRXh0ZW5zaW9uKTtcblxuICByZXR1cm4ge1xuICAgIGV4dGVuc2lvbnM6IGV4dGVuc2lvbnMsXG4gICAgcmVzdG9yZTogZnVuY3Rpb24gKCkge1xuICAgICAgT2JqZWN0LmtleXMoZXh0ZW5zaW9ucykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICBpZiAoZXh0ZW5zaW9uc1tuYW1lXSAmJiAhdHJ5TG9hZEV4dGVuc2lvbihuYW1lKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignKHJlZ2wpOiBlcnJvciByZXN0b3JpbmcgZXh0ZW5zaW9uICcgKyBuYW1lKVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbG9vcCAobiwgZikge1xuICB2YXIgcmVzdWx0ID0gQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgcmVzdWx0W2ldID0gZihpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbnZhciBHTF9CWVRFJDEgPSA1MTIwO1xudmFyIEdMX1VOU0lHTkVEX0JZVEUkMiA9IDUxMjE7XG52YXIgR0xfU0hPUlQkMSA9IDUxMjI7XG52YXIgR0xfVU5TSUdORURfU0hPUlQkMSA9IDUxMjM7XG52YXIgR0xfSU5UJDEgPSA1MTI0O1xudmFyIEdMX1VOU0lHTkVEX0lOVCQxID0gNTEyNTtcbnZhciBHTF9GTE9BVCQyID0gNTEyNjtcblxuZnVuY3Rpb24gbmV4dFBvdzE2ICh2KSB7XG4gIGZvciAodmFyIGkgPSAxNjsgaSA8PSAoMSA8PCAyOCk7IGkgKj0gMTYpIHtcbiAgICBpZiAodiA8PSBpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gMFxufVxuXG5mdW5jdGlvbiBsb2cyICh2KSB7XG4gIHZhciByLCBzaGlmdDtcbiAgciA9ICh2ID4gMHhGRkZGKSA8PCA0O1xuICB2ID4+Pj0gcjtcbiAgc2hpZnQgPSAodiA+IDB4RkYpIDw8IDM7XG4gIHYgPj4+PSBzaGlmdDsgciB8PSBzaGlmdDtcbiAgc2hpZnQgPSAodiA+IDB4RikgPDwgMjtcbiAgdiA+Pj49IHNoaWZ0OyByIHw9IHNoaWZ0O1xuICBzaGlmdCA9ICh2ID4gMHgzKSA8PCAxO1xuICB2ID4+Pj0gc2hpZnQ7IHIgfD0gc2hpZnQ7XG4gIHJldHVybiByIHwgKHYgPj4gMSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlUG9vbCAoKSB7XG4gIHZhciBidWZmZXJQb29sID0gbG9vcCg4LCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtdXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGFsbG9jIChuKSB7XG4gICAgdmFyIHN6ID0gbmV4dFBvdzE2KG4pO1xuICAgIHZhciBiaW4gPSBidWZmZXJQb29sW2xvZzIoc3opID4+IDJdO1xuICAgIGlmIChiaW4ubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIGJpbi5wb3AoKVxuICAgIH1cbiAgICByZXR1cm4gbmV3IEFycmF5QnVmZmVyKHN6KVxuICB9XG5cbiAgZnVuY3Rpb24gZnJlZSAoYnVmKSB7XG4gICAgYnVmZmVyUG9vbFtsb2cyKGJ1Zi5ieXRlTGVuZ3RoKSA+PiAyXS5wdXNoKGJ1Zik7XG4gIH1cblxuICBmdW5jdGlvbiBhbGxvY1R5cGUgKHR5cGUsIG4pIHtcbiAgICB2YXIgcmVzdWx0ID0gbnVsbDtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgR0xfQllURSQxOlxuICAgICAgICByZXN1bHQgPSBuZXcgSW50OEFycmF5KGFsbG9jKG4pLCAwLCBuKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgR0xfVU5TSUdORURfQllURSQyOlxuICAgICAgICByZXN1bHQgPSBuZXcgVWludDhBcnJheShhbGxvYyhuKSwgMCwgbik7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIEdMX1NIT1JUJDE6XG4gICAgICAgIHJlc3VsdCA9IG5ldyBJbnQxNkFycmF5KGFsbG9jKDIgKiBuKSwgMCwgbik7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIEdMX1VOU0lHTkVEX1NIT1JUJDE6XG4gICAgICAgIHJlc3VsdCA9IG5ldyBVaW50MTZBcnJheShhbGxvYygyICogbiksIDAsIG4pO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSBHTF9JTlQkMTpcbiAgICAgICAgcmVzdWx0ID0gbmV3IEludDMyQXJyYXkoYWxsb2MoNCAqIG4pLCAwLCBuKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgR0xfVU5TSUdORURfSU5UJDE6XG4gICAgICAgIHJlc3VsdCA9IG5ldyBVaW50MzJBcnJheShhbGxvYyg0ICogbiksIDAsIG4pO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSBHTF9GTE9BVCQyOlxuICAgICAgICByZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KGFsbG9jKDQgKiBuKSwgMCwgbik7XG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgICBpZiAocmVzdWx0Lmxlbmd0aCAhPT0gbikge1xuICAgICAgcmV0dXJuIHJlc3VsdC5zdWJhcnJheSgwLCBuKVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBmdW5jdGlvbiBmcmVlVHlwZSAoYXJyYXkpIHtcbiAgICBmcmVlKGFycmF5LmJ1ZmZlcik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGFsbG9jOiBhbGxvYyxcbiAgICBmcmVlOiBmcmVlLFxuICAgIGFsbG9jVHlwZTogYWxsb2NUeXBlLFxuICAgIGZyZWVUeXBlOiBmcmVlVHlwZVxuICB9XG59XG5cbnZhciBwb29sID0gY3JlYXRlUG9vbCgpO1xuXG4vLyB6ZXJvIHBvb2wgZm9yIGluaXRpYWwgemVybyBkYXRhXG5wb29sLnplcm8gPSBjcmVhdGVQb29sKCk7XG5cbnZhciBHTF9TVUJQSVhFTF9CSVRTID0gMHgwRDUwO1xudmFyIEdMX1JFRF9CSVRTID0gMHgwRDUyO1xudmFyIEdMX0dSRUVOX0JJVFMgPSAweDBENTM7XG52YXIgR0xfQkxVRV9CSVRTID0gMHgwRDU0O1xudmFyIEdMX0FMUEhBX0JJVFMgPSAweDBENTU7XG52YXIgR0xfREVQVEhfQklUUyA9IDB4MEQ1NjtcbnZhciBHTF9TVEVOQ0lMX0JJVFMgPSAweDBENTc7XG5cbnZhciBHTF9BTElBU0VEX1BPSU5UX1NJWkVfUkFOR0UgPSAweDg0NkQ7XG52YXIgR0xfQUxJQVNFRF9MSU5FX1dJRFRIX1JBTkdFID0gMHg4NDZFO1xuXG52YXIgR0xfTUFYX1RFWFRVUkVfU0laRSA9IDB4MEQzMztcbnZhciBHTF9NQVhfVklFV1BPUlRfRElNUyA9IDB4MEQzQTtcbnZhciBHTF9NQVhfVkVSVEVYX0FUVFJJQlMgPSAweDg4Njk7XG52YXIgR0xfTUFYX1ZFUlRFWF9VTklGT1JNX1ZFQ1RPUlMgPSAweDhERkI7XG52YXIgR0xfTUFYX1ZBUllJTkdfVkVDVE9SUyA9IDB4OERGQztcbnZhciBHTF9NQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUyA9IDB4OEI0RDtcbnZhciBHTF9NQVhfVkVSVEVYX1RFWFRVUkVfSU1BR0VfVU5JVFMgPSAweDhCNEM7XG52YXIgR0xfTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMgPSAweDg4NzI7XG52YXIgR0xfTUFYX0ZSQUdNRU5UX1VOSUZPUk1fVkVDVE9SUyA9IDB4OERGRDtcbnZhciBHTF9NQVhfQ1VCRV9NQVBfVEVYVFVSRV9TSVpFID0gMHg4NTFDO1xudmFyIEdMX01BWF9SRU5ERVJCVUZGRVJfU0laRSA9IDB4ODRFODtcblxudmFyIEdMX1ZFTkRPUiA9IDB4MUYwMDtcbnZhciBHTF9SRU5ERVJFUiA9IDB4MUYwMTtcbnZhciBHTF9WRVJTSU9OID0gMHgxRjAyO1xudmFyIEdMX1NIQURJTkdfTEFOR1VBR0VfVkVSU0lPTiA9IDB4OEI4QztcblxudmFyIEdMX01BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCA9IDB4ODRGRjtcblxudmFyIEdMX01BWF9DT0xPUl9BVFRBQ0hNRU5UU19XRUJHTCA9IDB4OENERjtcbnZhciBHTF9NQVhfRFJBV19CVUZGRVJTX1dFQkdMID0gMHg4ODI0O1xuXG52YXIgR0xfVEVYVFVSRV8yRCA9IDB4MERFMTtcbnZhciBHTF9URVhUVVJFX0NVQkVfTUFQID0gMHg4NTEzO1xudmFyIEdMX1RFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCA9IDB4ODUxNTtcbnZhciBHTF9URVhUVVJFMCA9IDB4ODRDMDtcbnZhciBHTF9SR0JBID0gMHgxOTA4O1xudmFyIEdMX0ZMT0FUJDEgPSAweDE0MDY7XG52YXIgR0xfVU5TSUdORURfQllURSQxID0gMHgxNDAxO1xudmFyIEdMX0ZSQU1FQlVGRkVSID0gMHg4RDQwO1xudmFyIEdMX0ZSQU1FQlVGRkVSX0NPTVBMRVRFID0gMHg4Q0Q1O1xudmFyIEdMX0NPTE9SX0FUVEFDSE1FTlQwID0gMHg4Q0UwO1xudmFyIEdMX0NPTE9SX0JVRkZFUl9CSVQkMSA9IDB4NDAwMDtcblxudmFyIHdyYXBMaW1pdHMgPSBmdW5jdGlvbiAoZ2wsIGV4dGVuc2lvbnMpIHtcbiAgdmFyIG1heEFuaXNvdHJvcGljID0gMTtcbiAgaWYgKGV4dGVuc2lvbnMuZXh0X3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljKSB7XG4gICAgbWF4QW5pc290cm9waWMgPSBnbC5nZXRQYXJhbWV0ZXIoR0xfTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUKTtcbiAgfVxuXG4gIHZhciBtYXhEcmF3YnVmZmVycyA9IDE7XG4gIHZhciBtYXhDb2xvckF0dGFjaG1lbnRzID0gMTtcbiAgaWYgKGV4dGVuc2lvbnMud2ViZ2xfZHJhd19idWZmZXJzKSB7XG4gICAgbWF4RHJhd2J1ZmZlcnMgPSBnbC5nZXRQYXJhbWV0ZXIoR0xfTUFYX0RSQVdfQlVGRkVSU19XRUJHTCk7XG4gICAgbWF4Q29sb3JBdHRhY2htZW50cyA9IGdsLmdldFBhcmFtZXRlcihHTF9NQVhfQ09MT1JfQVRUQUNITUVOVFNfV0VCR0wpO1xuICB9XG5cbiAgLy8gZGV0ZWN0IGlmIHJlYWRpbmcgZmxvYXQgdGV4dHVyZXMgaXMgYXZhaWxhYmxlIChTYWZhcmkgZG9lc24ndCBzdXBwb3J0KVxuICB2YXIgcmVhZEZsb2F0ID0gISFleHRlbnNpb25zLm9lc190ZXh0dXJlX2Zsb2F0O1xuICBpZiAocmVhZEZsb2F0KSB7XG4gICAgdmFyIHJlYWRGbG9hdFRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgZ2wuYmluZFRleHR1cmUoR0xfVEVYVFVSRV8yRCwgcmVhZEZsb2F0VGV4dHVyZSk7XG4gICAgZ2wudGV4SW1hZ2UyRChHTF9URVhUVVJFXzJELCAwLCBHTF9SR0JBLCAxLCAxLCAwLCBHTF9SR0JBLCBHTF9GTE9BVCQxLCBudWxsKTtcblxuICAgIHZhciBmYm8gPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihHTF9GUkFNRUJVRkZFUiwgZmJvKTtcbiAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChHTF9GUkFNRUJVRkZFUiwgR0xfQ09MT1JfQVRUQUNITUVOVDAsIEdMX1RFWFRVUkVfMkQsIHJlYWRGbG9hdFRleHR1cmUsIDApO1xuICAgIGdsLmJpbmRUZXh0dXJlKEdMX1RFWFRVUkVfMkQsIG51bGwpO1xuXG4gICAgaWYgKGdsLmNoZWNrRnJhbWVidWZmZXJTdGF0dXMoR0xfRlJBTUVCVUZGRVIpICE9PSBHTF9GUkFNRUJVRkZFUl9DT01QTEVURSkgcmVhZEZsb2F0ID0gZmFsc2U7XG5cbiAgICBlbHNlIHtcbiAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIDEsIDEpO1xuICAgICAgZ2wuY2xlYXJDb2xvcigxLjAsIDAuMCwgMC4wLCAxLjApO1xuICAgICAgZ2wuY2xlYXIoR0xfQ09MT1JfQlVGRkVSX0JJVCQxKTtcbiAgICAgIHZhciBwaXhlbHMgPSBwb29sLmFsbG9jVHlwZShHTF9GTE9BVCQxLCA0KTtcbiAgICAgIGdsLnJlYWRQaXhlbHMoMCwgMCwgMSwgMSwgR0xfUkdCQSwgR0xfRkxPQVQkMSwgcGl4ZWxzKTtcblxuICAgICAgaWYgKGdsLmdldEVycm9yKCkpIHJlYWRGbG9hdCA9IGZhbHNlO1xuICAgICAgZWxzZSB7XG4gICAgICAgIGdsLmRlbGV0ZUZyYW1lYnVmZmVyKGZibyk7XG4gICAgICAgIGdsLmRlbGV0ZVRleHR1cmUocmVhZEZsb2F0VGV4dHVyZSk7XG5cbiAgICAgICAgcmVhZEZsb2F0ID0gcGl4ZWxzWzBdID09PSAxLjA7XG4gICAgICB9XG5cbiAgICAgIHBvb2wuZnJlZVR5cGUocGl4ZWxzKTtcbiAgICB9XG4gIH1cblxuICAvLyBkZXRlY3Qgbm9uIHBvd2VyIG9mIHR3byBjdWJlIHRleHR1cmVzIHN1cHBvcnQgKElFIGRvZXNuJ3Qgc3VwcG9ydClcbiAgdmFyIGlzSUUgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAoL01TSUUvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgL1RyaWRlbnRcXC8vLnRlc3QobmF2aWdhdG9yLmFwcFZlcnNpb24pIHx8IC9FZGdlLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKTtcblxuICB2YXIgbnBvdFRleHR1cmVDdWJlID0gdHJ1ZTtcblxuICBpZiAoIWlzSUUpIHtcbiAgICB2YXIgY3ViZVRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XG4gICAgdmFyIGRhdGEgPSBwb29sLmFsbG9jVHlwZShHTF9VTlNJR05FRF9CWVRFJDEsIDM2KTtcbiAgICBnbC5hY3RpdmVUZXh0dXJlKEdMX1RFWFRVUkUwKTtcbiAgICBnbC5iaW5kVGV4dHVyZShHTF9URVhUVVJFX0NVQkVfTUFQLCBjdWJlVGV4dHVyZSk7XG4gICAgZ2wudGV4SW1hZ2UyRChHTF9URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1gsIDAsIEdMX1JHQkEsIDMsIDMsIDAsIEdMX1JHQkEsIEdMX1VOU0lHTkVEX0JZVEUkMSwgZGF0YSk7XG4gICAgcG9vbC5mcmVlVHlwZShkYXRhKTtcbiAgICBnbC5iaW5kVGV4dHVyZShHTF9URVhUVVJFX0NVQkVfTUFQLCBudWxsKTtcbiAgICBnbC5kZWxldGVUZXh0dXJlKGN1YmVUZXh0dXJlKTtcbiAgICBucG90VGV4dHVyZUN1YmUgPSAhZ2wuZ2V0RXJyb3IoKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgLy8gZHJhd2luZyBidWZmZXIgYml0IGRlcHRoXG4gICAgY29sb3JCaXRzOiBbXG4gICAgICBnbC5nZXRQYXJhbWV0ZXIoR0xfUkVEX0JJVFMpLFxuICAgICAgZ2wuZ2V0UGFyYW1ldGVyKEdMX0dSRUVOX0JJVFMpLFxuICAgICAgZ2wuZ2V0UGFyYW1ldGVyKEdMX0JMVUVfQklUUyksXG4gICAgICBnbC5nZXRQYXJhbWV0ZXIoR0xfQUxQSEFfQklUUylcbiAgICBdLFxuICAgIGRlcHRoQml0czogZ2wuZ2V0UGFyYW1ldGVyKEdMX0RFUFRIX0JJVFMpLFxuICAgIHN0ZW5jaWxCaXRzOiBnbC5nZXRQYXJhbWV0ZXIoR0xfU1RFTkNJTF9CSVRTKSxcbiAgICBzdWJwaXhlbEJpdHM6IGdsLmdldFBhcmFtZXRlcihHTF9TVUJQSVhFTF9CSVRTKSxcblxuICAgIC8vIHN1cHBvcnRlZCBleHRlbnNpb25zXG4gICAgZXh0ZW5zaW9uczogT2JqZWN0LmtleXMoZXh0ZW5zaW9ucykuZmlsdGVyKGZ1bmN0aW9uIChleHQpIHtcbiAgICAgIHJldHVybiAhIWV4dGVuc2lvbnNbZXh0XVxuICAgIH0pLFxuXG4gICAgLy8gbWF4IGFuaXNvIHNhbXBsZXNcbiAgICBtYXhBbmlzb3Ryb3BpYzogbWF4QW5pc290cm9waWMsXG5cbiAgICAvLyBtYXggZHJhdyBidWZmZXJzXG4gICAgbWF4RHJhd2J1ZmZlcnM6IG1heERyYXdidWZmZXJzLFxuICAgIG1heENvbG9yQXR0YWNobWVudHM6IG1heENvbG9yQXR0YWNobWVudHMsXG5cbiAgICAvLyBwb2ludCBhbmQgbGluZSBzaXplIHJhbmdlc1xuICAgIHBvaW50U2l6ZURpbXM6IGdsLmdldFBhcmFtZXRlcihHTF9BTElBU0VEX1BPSU5UX1NJWkVfUkFOR0UpLFxuICAgIGxpbmVXaWR0aERpbXM6IGdsLmdldFBhcmFtZXRlcihHTF9BTElBU0VEX0xJTkVfV0lEVEhfUkFOR0UpLFxuICAgIG1heFZpZXdwb3J0RGltczogZ2wuZ2V0UGFyYW1ldGVyKEdMX01BWF9WSUVXUE9SVF9ESU1TKSxcbiAgICBtYXhDb21iaW5lZFRleHR1cmVVbml0czogZ2wuZ2V0UGFyYW1ldGVyKEdMX01BWF9DT01CSU5FRF9URVhUVVJFX0lNQUdFX1VOSVRTKSxcbiAgICBtYXhDdWJlTWFwU2l6ZTogZ2wuZ2V0UGFyYW1ldGVyKEdMX01BWF9DVUJFX01BUF9URVhUVVJFX1NJWkUpLFxuICAgIG1heFJlbmRlcmJ1ZmZlclNpemU6IGdsLmdldFBhcmFtZXRlcihHTF9NQVhfUkVOREVSQlVGRkVSX1NJWkUpLFxuICAgIG1heFRleHR1cmVVbml0czogZ2wuZ2V0UGFyYW1ldGVyKEdMX01BWF9URVhUVVJFX0lNQUdFX1VOSVRTKSxcbiAgICBtYXhUZXh0dXJlU2l6ZTogZ2wuZ2V0UGFyYW1ldGVyKEdMX01BWF9URVhUVVJFX1NJWkUpLFxuICAgIG1heEF0dHJpYnV0ZXM6IGdsLmdldFBhcmFtZXRlcihHTF9NQVhfVkVSVEVYX0FUVFJJQlMpLFxuICAgIG1heFZlcnRleFVuaWZvcm1zOiBnbC5nZXRQYXJhbWV0ZXIoR0xfTUFYX1ZFUlRFWF9VTklGT1JNX1ZFQ1RPUlMpLFxuICAgIG1heFZlcnRleFRleHR1cmVVbml0czogZ2wuZ2V0UGFyYW1ldGVyKEdMX01BWF9WRVJURVhfVEVYVFVSRV9JTUFHRV9VTklUUyksXG4gICAgbWF4VmFyeWluZ1ZlY3RvcnM6IGdsLmdldFBhcmFtZXRlcihHTF9NQVhfVkFSWUlOR19WRUNUT1JTKSxcbiAgICBtYXhGcmFnbWVudFVuaWZvcm1zOiBnbC5nZXRQYXJhbWV0ZXIoR0xfTUFYX0ZSQUdNRU5UX1VOSUZPUk1fVkVDVE9SUyksXG5cbiAgICAvLyB2ZW5kb3IgaW5mb1xuICAgIGdsc2w6IGdsLmdldFBhcmFtZXRlcihHTF9TSEFESU5HX0xBTkdVQUdFX1ZFUlNJT04pLFxuICAgIHJlbmRlcmVyOiBnbC5nZXRQYXJhbWV0ZXIoR0xfUkVOREVSRVIpLFxuICAgIHZlbmRvcjogZ2wuZ2V0UGFyYW1ldGVyKEdMX1ZFTkRPUiksXG4gICAgdmVyc2lvbjogZ2wuZ2V0UGFyYW1ldGVyKEdMX1ZFUlNJT04pLFxuXG4gICAgLy8gcXVpcmtzXG4gICAgcmVhZEZsb2F0OiByZWFkRmxvYXQsXG4gICAgbnBvdFRleHR1cmVDdWJlOiBucG90VGV4dHVyZUN1YmVcbiAgfVxufTtcblxuZnVuY3Rpb24gaXNOREFycmF5TGlrZSAob2JqKSB7XG4gIHJldHVybiAoXG4gICAgISFvYmogJiZcbiAgICB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJlxuICAgIEFycmF5LmlzQXJyYXkob2JqLnNoYXBlKSAmJlxuICAgIEFycmF5LmlzQXJyYXkob2JqLnN0cmlkZSkgJiZcbiAgICB0eXBlb2Ygb2JqLm9mZnNldCA9PT0gJ251bWJlcicgJiZcbiAgICBvYmouc2hhcGUubGVuZ3RoID09PSBvYmouc3RyaWRlLmxlbmd0aCAmJlxuICAgIChBcnJheS5pc0FycmF5KG9iai5kYXRhKSB8fFxuICAgICAgaXNUeXBlZEFycmF5KG9iai5kYXRhKSkpXG59XG5cbnZhciB2YWx1ZXMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBvYmpba2V5XSB9KVxufTtcblxudmFyIGZsYXR0ZW5VdGlscyA9IHtcbiAgc2hhcGU6IGFycmF5U2hhcGUkMSxcbiAgZmxhdHRlbjogZmxhdHRlbkFycmF5XG59O1xuXG5mdW5jdGlvbiBmbGF0dGVuMUQgKGFycmF5LCBueCwgb3V0KSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbng7ICsraSkge1xuICAgIG91dFtpXSA9IGFycmF5W2ldO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4yRCAoYXJyYXksIG54LCBueSwgb3V0KSB7XG4gIHZhciBwdHIgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG54OyArK2kpIHtcbiAgICB2YXIgcm93ID0gYXJyYXlbaV07XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBueTsgKytqKSB7XG4gICAgICBvdXRbcHRyKytdID0gcm93W2pdO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmbGF0dGVuM0QgKGFycmF5LCBueCwgbnksIG56LCBvdXQsIHB0cl8pIHtcbiAgdmFyIHB0ciA9IHB0cl87XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbng7ICsraSkge1xuICAgIHZhciByb3cgPSBhcnJheVtpXTtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG55OyArK2opIHtcbiAgICAgIHZhciBjb2wgPSByb3dbal07XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IG56OyArK2spIHtcbiAgICAgICAgb3V0W3B0cisrXSA9IGNvbFtrXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmxhdHRlblJlYyAoYXJyYXksIHNoYXBlLCBsZXZlbCwgb3V0LCBwdHIpIHtcbiAgdmFyIHN0cmlkZSA9IDE7XG4gIGZvciAodmFyIGkgPSBsZXZlbCArIDE7IGkgPCBzaGFwZS5sZW5ndGg7ICsraSkge1xuICAgIHN0cmlkZSAqPSBzaGFwZVtpXTtcbiAgfVxuICB2YXIgbiA9IHNoYXBlW2xldmVsXTtcbiAgaWYgKHNoYXBlLmxlbmd0aCAtIGxldmVsID09PSA0KSB7XG4gICAgdmFyIG54ID0gc2hhcGVbbGV2ZWwgKyAxXTtcbiAgICB2YXIgbnkgPSBzaGFwZVtsZXZlbCArIDJdO1xuICAgIHZhciBueiA9IHNoYXBlW2xldmVsICsgM107XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgZmxhdHRlbjNEKGFycmF5W2ldLCBueCwgbnksIG56LCBvdXQsIHB0cik7XG4gICAgICBwdHIgKz0gc3RyaWRlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBmbGF0dGVuUmVjKGFycmF5W2ldLCBzaGFwZSwgbGV2ZWwgKyAxLCBvdXQsIHB0cik7XG4gICAgICBwdHIgKz0gc3RyaWRlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmbGF0dGVuQXJyYXkgKGFycmF5LCBzaGFwZSwgdHlwZSwgb3V0Xykge1xuICB2YXIgc3ogPSAxO1xuICBpZiAoc2hhcGUubGVuZ3RoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaGFwZS5sZW5ndGg7ICsraSkge1xuICAgICAgc3ogKj0gc2hhcGVbaV07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN6ID0gMDtcbiAgfVxuICB2YXIgb3V0ID0gb3V0XyB8fCBwb29sLmFsbG9jVHlwZSh0eXBlLCBzeik7XG4gIHN3aXRjaCAoc2hhcGUubGVuZ3RoKSB7XG4gICAgY2FzZSAwOlxuICAgICAgYnJlYWtcbiAgICBjYXNlIDE6XG4gICAgICBmbGF0dGVuMUQoYXJyYXksIHNoYXBlWzBdLCBvdXQpO1xuICAgICAgYnJlYWtcbiAgICBjYXNlIDI6XG4gICAgICBmbGF0dGVuMkQoYXJyYXksIHNoYXBlWzBdLCBzaGFwZVsxXSwgb3V0KTtcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAzOlxuICAgICAgZmxhdHRlbjNEKGFycmF5LCBzaGFwZVswXSwgc2hhcGVbMV0sIHNoYXBlWzJdLCBvdXQsIDApO1xuICAgICAgYnJlYWtcbiAgICBkZWZhdWx0OlxuICAgICAgZmxhdHRlblJlYyhhcnJheSwgc2hhcGUsIDAsIG91dCwgMCk7XG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBhcnJheVNoYXBlJDEgKGFycmF5Xykge1xuICB2YXIgc2hhcGUgPSBbXTtcbiAgZm9yICh2YXIgYXJyYXkgPSBhcnJheV87IGFycmF5Lmxlbmd0aDsgYXJyYXkgPSBhcnJheVswXSkge1xuICAgIHNoYXBlLnB1c2goYXJyYXkubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gc2hhcGVcbn1cblxudmFyIGFycmF5VHlwZXMgPSB7XG5cdFwiW29iamVjdCBJbnQ4QXJyYXldXCI6IDUxMjAsXG5cdFwiW29iamVjdCBJbnQxNkFycmF5XVwiOiA1MTIyLFxuXHRcIltvYmplY3QgSW50MzJBcnJheV1cIjogNTEyNCxcblx0XCJbb2JqZWN0IFVpbnQ4QXJyYXldXCI6IDUxMjEsXG5cdFwiW29iamVjdCBVaW50OENsYW1wZWRBcnJheV1cIjogNTEyMSxcblx0XCJbb2JqZWN0IFVpbnQxNkFycmF5XVwiOiA1MTIzLFxuXHRcIltvYmplY3QgVWludDMyQXJyYXldXCI6IDUxMjUsXG5cdFwiW29iamVjdCBGbG9hdDMyQXJyYXldXCI6IDUxMjYsXG5cdFwiW29iamVjdCBGbG9hdDY0QXJyYXldXCI6IDUxMjEsXG5cdFwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIjogNTEyMVxufTtcblxudmFyIGludDggPSA1MTIwO1xudmFyIGludDE2ID0gNTEyMjtcbnZhciBpbnQzMiA9IDUxMjQ7XG52YXIgdWludDggPSA1MTIxO1xudmFyIHVpbnQxNiA9IDUxMjM7XG52YXIgdWludDMyID0gNTEyNTtcbnZhciBmbG9hdCA9IDUxMjY7XG52YXIgZmxvYXQzMiA9IDUxMjY7XG52YXIgZ2xUeXBlcyA9IHtcblx0aW50ODogaW50OCxcblx0aW50MTY6IGludDE2LFxuXHRpbnQzMjogaW50MzIsXG5cdHVpbnQ4OiB1aW50OCxcblx0dWludDE2OiB1aW50MTYsXG5cdHVpbnQzMjogdWludDMyLFxuXHRmbG9hdDogZmxvYXQsXG5cdGZsb2F0MzI6IGZsb2F0MzJcbn07XG5cbnZhciBkeW5hbWljJDEgPSAzNTA0ODtcbnZhciBzdHJlYW0gPSAzNTA0MDtcbnZhciB1c2FnZVR5cGVzID0ge1xuXHRkeW5hbWljOiBkeW5hbWljJDEsXG5cdHN0cmVhbTogc3RyZWFtLFxuXHRcInN0YXRpY1wiOiAzNTA0NFxufTtcblxudmFyIGFycmF5RmxhdHRlbiA9IGZsYXR0ZW5VdGlscy5mbGF0dGVuO1xudmFyIGFycmF5U2hhcGUgPSBmbGF0dGVuVXRpbHMuc2hhcGU7XG5cbnZhciBHTF9TVEFUSUNfRFJBVyA9IDB4ODhFNDtcbnZhciBHTF9TVFJFQU1fRFJBVyA9IDB4ODhFMDtcblxudmFyIEdMX1VOU0lHTkVEX0JZVEUkMyA9IDUxMjE7XG52YXIgR0xfRkxPQVQkMyA9IDUxMjY7XG5cbnZhciBEVFlQRVNfU0laRVMgPSBbXTtcbkRUWVBFU19TSVpFU1s1MTIwXSA9IDE7IC8vIGludDhcbkRUWVBFU19TSVpFU1s1MTIyXSA9IDI7IC8vIGludDE2XG5EVFlQRVNfU0laRVNbNTEyNF0gPSA0OyAvLyBpbnQzMlxuRFRZUEVTX1NJWkVTWzUxMjFdID0gMTsgLy8gdWludDhcbkRUWVBFU19TSVpFU1s1MTIzXSA9IDI7IC8vIHVpbnQxNlxuRFRZUEVTX1NJWkVTWzUxMjVdID0gNDsgLy8gdWludDMyXG5EVFlQRVNfU0laRVNbNTEyNl0gPSA0OyAvLyBmbG9hdDMyXG5cbmZ1bmN0aW9uIHR5cGVkQXJyYXlDb2RlIChkYXRhKSB7XG4gIHJldHVybiBhcnJheVR5cGVzW09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkYXRhKV0gfCAwXG59XG5cbmZ1bmN0aW9uIGNvcHlBcnJheSAob3V0LCBpbnApIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnAubGVuZ3RoOyArK2kpIHtcbiAgICBvdXRbaV0gPSBpbnBbaV07XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJhbnNwb3NlIChcbiAgcmVzdWx0LCBkYXRhLCBzaGFwZVgsIHNoYXBlWSwgc3RyaWRlWCwgc3RyaWRlWSwgb2Zmc2V0KSB7XG4gIHZhciBwdHIgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNoYXBlWDsgKytpKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBzaGFwZVk7ICsraikge1xuICAgICAgcmVzdWx0W3B0cisrXSA9IGRhdGFbc3RyaWRlWCAqIGkgKyBzdHJpZGVZICogaiArIG9mZnNldF07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHdyYXBCdWZmZXJTdGF0ZSAoZ2wsIHN0YXRzLCBjb25maWcsIGF0dHJpYnV0ZVN0YXRlKSB7XG4gIHZhciBidWZmZXJDb3VudCA9IDA7XG4gIHZhciBidWZmZXJTZXQgPSB7fTtcblxuICBmdW5jdGlvbiBSRUdMQnVmZmVyICh0eXBlKSB7XG4gICAgdGhpcy5pZCA9IGJ1ZmZlckNvdW50Kys7XG4gICAgdGhpcy5idWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMudXNhZ2UgPSBHTF9TVEFUSUNfRFJBVztcbiAgICB0aGlzLmJ5dGVMZW5ndGggPSAwO1xuICAgIHRoaXMuZGltZW5zaW9uID0gMTtcbiAgICB0aGlzLmR0eXBlID0gR0xfVU5TSUdORURfQllURSQzO1xuXG4gICAgdGhpcy5wZXJzaXN0ZW50RGF0YSA9IG51bGw7XG5cbiAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcbiAgICAgIHRoaXMuc3RhdHMgPSB7c2l6ZTogMH07XG4gICAgfVxuICB9XG5cbiAgUkVHTEJ1ZmZlci5wcm90b3R5cGUuYmluZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBnbC5iaW5kQnVmZmVyKHRoaXMudHlwZSwgdGhpcy5idWZmZXIpO1xuICB9O1xuXG4gIFJFR0xCdWZmZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgZGVzdHJveSh0aGlzKTtcbiAgfTtcblxuICB2YXIgc3RyZWFtUG9vbCA9IFtdO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZVN0cmVhbSAodHlwZSwgZGF0YSkge1xuICAgIHZhciBidWZmZXIgPSBzdHJlYW1Qb29sLnBvcCgpO1xuICAgIGlmICghYnVmZmVyKSB7XG4gICAgICBidWZmZXIgPSBuZXcgUkVHTEJ1ZmZlcih0eXBlKTtcbiAgICB9XG4gICAgYnVmZmVyLmJpbmQoKTtcbiAgICBpbml0QnVmZmVyRnJvbURhdGEoYnVmZmVyLCBkYXRhLCBHTF9TVFJFQU1fRFJBVywgMCwgMSwgZmFsc2UpO1xuICAgIHJldHVybiBidWZmZXJcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3lTdHJlYW0gKHN0cmVhbSQkMSkge1xuICAgIHN0cmVhbVBvb2wucHVzaChzdHJlYW0kJDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdEJ1ZmZlckZyb21UeXBlZEFycmF5IChidWZmZXIsIGRhdGEsIHVzYWdlKSB7XG4gICAgYnVmZmVyLmJ5dGVMZW5ndGggPSBkYXRhLmJ5dGVMZW5ndGg7XG4gICAgZ2wuYnVmZmVyRGF0YShidWZmZXIudHlwZSwgZGF0YSwgdXNhZ2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdEJ1ZmZlckZyb21EYXRhIChidWZmZXIsIGRhdGEsIHVzYWdlLCBkdHlwZSwgZGltZW5zaW9uLCBwZXJzaXN0KSB7XG4gICAgdmFyIHNoYXBlO1xuICAgIGJ1ZmZlci51c2FnZSA9IHVzYWdlO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICBidWZmZXIuZHR5cGUgPSBkdHlwZSB8fCBHTF9GTE9BVCQzO1xuICAgICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgZmxhdERhdGE7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGFbMF0pKSB7XG4gICAgICAgICAgc2hhcGUgPSBhcnJheVNoYXBlKGRhdGEpO1xuICAgICAgICAgIHZhciBkaW0gPSAxO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgc2hhcGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGRpbSAqPSBzaGFwZVtpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnVmZmVyLmRpbWVuc2lvbiA9IGRpbTtcbiAgICAgICAgICBmbGF0RGF0YSA9IGFycmF5RmxhdHRlbihkYXRhLCBzaGFwZSwgYnVmZmVyLmR0eXBlKTtcbiAgICAgICAgICBpbml0QnVmZmVyRnJvbVR5cGVkQXJyYXkoYnVmZmVyLCBmbGF0RGF0YSwgdXNhZ2UpO1xuICAgICAgICAgIGlmIChwZXJzaXN0KSB7XG4gICAgICAgICAgICBidWZmZXIucGVyc2lzdGVudERhdGEgPSBmbGF0RGF0YTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9vbC5mcmVlVHlwZShmbGF0RGF0YSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhWzBdID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGJ1ZmZlci5kaW1lbnNpb24gPSBkaW1lbnNpb247XG4gICAgICAgICAgdmFyIHR5cGVkRGF0YSA9IHBvb2wuYWxsb2NUeXBlKGJ1ZmZlci5kdHlwZSwgZGF0YS5sZW5ndGgpO1xuICAgICAgICAgIGNvcHlBcnJheSh0eXBlZERhdGEsIGRhdGEpO1xuICAgICAgICAgIGluaXRCdWZmZXJGcm9tVHlwZWRBcnJheShidWZmZXIsIHR5cGVkRGF0YSwgdXNhZ2UpO1xuICAgICAgICAgIGlmIChwZXJzaXN0KSB7XG4gICAgICAgICAgICBidWZmZXIucGVyc2lzdGVudERhdGEgPSB0eXBlZERhdGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvb2wuZnJlZVR5cGUodHlwZWREYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaXNUeXBlZEFycmF5KGRhdGFbMF0pKSB7XG4gICAgICAgICAgYnVmZmVyLmRpbWVuc2lvbiA9IGRhdGFbMF0ubGVuZ3RoO1xuICAgICAgICAgIGJ1ZmZlci5kdHlwZSA9IGR0eXBlIHx8IHR5cGVkQXJyYXlDb2RlKGRhdGFbMF0pIHx8IEdMX0ZMT0FUJDM7XG4gICAgICAgICAgZmxhdERhdGEgPSBhcnJheUZsYXR0ZW4oXG4gICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgW2RhdGEubGVuZ3RoLCBkYXRhWzBdLmxlbmd0aF0sXG4gICAgICAgICAgICBidWZmZXIuZHR5cGUpO1xuICAgICAgICAgIGluaXRCdWZmZXJGcm9tVHlwZWRBcnJheShidWZmZXIsIGZsYXREYXRhLCB1c2FnZSk7XG4gICAgICAgICAgaWYgKHBlcnNpc3QpIHtcbiAgICAgICAgICAgIGJ1ZmZlci5wZXJzaXN0ZW50RGF0YSA9IGZsYXREYXRhO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb29sLmZyZWVUeXBlKGZsYXREYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hlY2skMS5yYWlzZSgnaW52YWxpZCBidWZmZXIgZGF0YScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1R5cGVkQXJyYXkoZGF0YSkpIHtcbiAgICAgIGJ1ZmZlci5kdHlwZSA9IGR0eXBlIHx8IHR5cGVkQXJyYXlDb2RlKGRhdGEpO1xuICAgICAgYnVmZmVyLmRpbWVuc2lvbiA9IGRpbWVuc2lvbjtcbiAgICAgIGluaXRCdWZmZXJGcm9tVHlwZWRBcnJheShidWZmZXIsIGRhdGEsIHVzYWdlKTtcbiAgICAgIGlmIChwZXJzaXN0KSB7XG4gICAgICAgIGJ1ZmZlci5wZXJzaXN0ZW50RGF0YSA9IG5ldyBVaW50OEFycmF5KG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc05EQXJyYXlMaWtlKGRhdGEpKSB7XG4gICAgICBzaGFwZSA9IGRhdGEuc2hhcGU7XG4gICAgICB2YXIgc3RyaWRlID0gZGF0YS5zdHJpZGU7XG4gICAgICB2YXIgb2Zmc2V0ID0gZGF0YS5vZmZzZXQ7XG5cbiAgICAgIHZhciBzaGFwZVggPSAwO1xuICAgICAgdmFyIHNoYXBlWSA9IDA7XG4gICAgICB2YXIgc3RyaWRlWCA9IDA7XG4gICAgICB2YXIgc3RyaWRlWSA9IDA7XG4gICAgICBpZiAoc2hhcGUubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHNoYXBlWCA9IHNoYXBlWzBdO1xuICAgICAgICBzaGFwZVkgPSAxO1xuICAgICAgICBzdHJpZGVYID0gc3RyaWRlWzBdO1xuICAgICAgICBzdHJpZGVZID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoc2hhcGUubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHNoYXBlWCA9IHNoYXBlWzBdO1xuICAgICAgICBzaGFwZVkgPSBzaGFwZVsxXTtcbiAgICAgICAgc3RyaWRlWCA9IHN0cmlkZVswXTtcbiAgICAgICAgc3RyaWRlWSA9IHN0cmlkZVsxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoZWNrJDEucmFpc2UoJ2ludmFsaWQgc2hhcGUnKTtcbiAgICAgIH1cblxuICAgICAgYnVmZmVyLmR0eXBlID0gZHR5cGUgfHwgdHlwZWRBcnJheUNvZGUoZGF0YS5kYXRhKSB8fCBHTF9GTE9BVCQzO1xuICAgICAgYnVmZmVyLmRpbWVuc2lvbiA9IHNoYXBlWTtcblxuICAgICAgdmFyIHRyYW5zcG9zZURhdGEgPSBwb29sLmFsbG9jVHlwZShidWZmZXIuZHR5cGUsIHNoYXBlWCAqIHNoYXBlWSk7XG4gICAgICB0cmFuc3Bvc2UodHJhbnNwb3NlRGF0YSxcbiAgICAgICAgZGF0YS5kYXRhLFxuICAgICAgICBzaGFwZVgsIHNoYXBlWSxcbiAgICAgICAgc3RyaWRlWCwgc3RyaWRlWSxcbiAgICAgICAgb2Zmc2V0KTtcbiAgICAgIGluaXRCdWZmZXJGcm9tVHlwZWRBcnJheShidWZmZXIsIHRyYW5zcG9zZURhdGEsIHVzYWdlKTtcbiAgICAgIGlmIChwZXJzaXN0KSB7XG4gICAgICAgIGJ1ZmZlci5wZXJzaXN0ZW50RGF0YSA9IHRyYW5zcG9zZURhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb29sLmZyZWVUeXBlKHRyYW5zcG9zZURhdGEpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICBidWZmZXIuZHR5cGUgPSBHTF9VTlNJR05FRF9CWVRFJDM7XG4gICAgICBidWZmZXIuZGltZW5zaW9uID0gZGltZW5zaW9uO1xuICAgICAgaW5pdEJ1ZmZlckZyb21UeXBlZEFycmF5KGJ1ZmZlciwgZGF0YSwgdXNhZ2UpO1xuICAgICAgaWYgKHBlcnNpc3QpIHtcbiAgICAgICAgYnVmZmVyLnBlcnNpc3RlbnREYXRhID0gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQ4QXJyYXkoZGF0YSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjaGVjayQxLnJhaXNlKCdpbnZhbGlkIGJ1ZmZlciBkYXRhJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSAoYnVmZmVyKSB7XG4gICAgc3RhdHMuYnVmZmVyQ291bnQtLTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cmlidXRlU3RhdGUuc3RhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciByZWNvcmQgPSBhdHRyaWJ1dGVTdGF0ZS5zdGF0ZVtpXTtcbiAgICAgIGlmIChyZWNvcmQuYnVmZmVyID09PSBidWZmZXIpIHtcbiAgICAgICAgZ2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KGkpO1xuICAgICAgICByZWNvcmQuYnVmZmVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFuZGxlID0gYnVmZmVyLmJ1ZmZlcjtcbiAgICBjaGVjayQxKGhhbmRsZSwgJ2J1ZmZlciBtdXN0IG5vdCBiZSBkZWxldGVkIGFscmVhZHknKTtcbiAgICBnbC5kZWxldGVCdWZmZXIoaGFuZGxlKTtcbiAgICBidWZmZXIuYnVmZmVyID0gbnVsbDtcbiAgICBkZWxldGUgYnVmZmVyU2V0W2J1ZmZlci5pZF07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCdWZmZXIgKG9wdGlvbnMsIHR5cGUsIGRlZmVySW5pdCwgcGVyc2lzdGVudCkge1xuICAgIHN0YXRzLmJ1ZmZlckNvdW50Kys7XG5cbiAgICB2YXIgYnVmZmVyID0gbmV3IFJFR0xCdWZmZXIodHlwZSk7XG4gICAgYnVmZmVyU2V0W2J1ZmZlci5pZF0gPSBidWZmZXI7XG5cbiAgICBmdW5jdGlvbiByZWdsQnVmZmVyIChvcHRpb25zKSB7XG4gICAgICB2YXIgdXNhZ2UgPSBHTF9TVEFUSUNfRFJBVztcbiAgICAgIHZhciBkYXRhID0gbnVsbDtcbiAgICAgIHZhciBieXRlTGVuZ3RoID0gMDtcbiAgICAgIHZhciBkdHlwZSA9IDA7XG4gICAgICB2YXIgZGltZW5zaW9uID0gMTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMpIHx8XG4gICAgICAgICAgaXNUeXBlZEFycmF5KG9wdGlvbnMpIHx8XG4gICAgICAgICAgaXNOREFycmF5TGlrZShvcHRpb25zKSB8fFxuICAgICAgICAgIG9wdGlvbnMgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgICAgICBkYXRhID0gb3B0aW9ucztcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGJ5dGVMZW5ndGggPSBvcHRpb25zIHwgMDtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucykge1xuICAgICAgICBjaGVjayQxLnR5cGUoXG4gICAgICAgICAgb3B0aW9ucywgJ29iamVjdCcsXG4gICAgICAgICAgJ2J1ZmZlciBhcmd1bWVudHMgbXVzdCBiZSBhbiBvYmplY3QsIGEgbnVtYmVyIG9yIGFuIGFycmF5Jyk7XG5cbiAgICAgICAgaWYgKCdkYXRhJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgY2hlY2skMShcbiAgICAgICAgICAgIGRhdGEgPT09IG51bGwgfHxcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkoZGF0YSkgfHxcbiAgICAgICAgICAgIGlzVHlwZWRBcnJheShkYXRhKSB8fFxuICAgICAgICAgICAgaXNOREFycmF5TGlrZShkYXRhKSxcbiAgICAgICAgICAgICdpbnZhbGlkIGRhdGEgZm9yIGJ1ZmZlcicpO1xuICAgICAgICAgIGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ3VzYWdlJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgY2hlY2skMS5wYXJhbWV0ZXIob3B0aW9ucy51c2FnZSwgdXNhZ2VUeXBlcywgJ2ludmFsaWQgYnVmZmVyIHVzYWdlJyk7XG4gICAgICAgICAgdXNhZ2UgPSB1c2FnZVR5cGVzW29wdGlvbnMudXNhZ2VdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCd0eXBlJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgY2hlY2skMS5wYXJhbWV0ZXIob3B0aW9ucy50eXBlLCBnbFR5cGVzLCAnaW52YWxpZCBidWZmZXIgdHlwZScpO1xuICAgICAgICAgIGR0eXBlID0gZ2xUeXBlc1tvcHRpb25zLnR5cGVdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCdkaW1lbnNpb24nIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICBjaGVjayQxLnR5cGUob3B0aW9ucy5kaW1lbnNpb24sICdudW1iZXInLCAnaW52YWxpZCBkaW1lbnNpb24nKTtcbiAgICAgICAgICBkaW1lbnNpb24gPSBvcHRpb25zLmRpbWVuc2lvbiB8IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ2xlbmd0aCcgaW4gb3B0aW9ucykge1xuICAgICAgICAgIGNoZWNrJDEubm5pKGJ5dGVMZW5ndGgsICdidWZmZXIgbGVuZ3RoIG11c3QgYmUgYSBub25uZWdhdGl2ZSBpbnRlZ2VyJyk7XG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IG9wdGlvbnMubGVuZ3RoIHwgMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBidWZmZXIuYmluZCgpO1xuICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgIC8vICM0NzVcbiAgICAgICAgaWYgKGJ5dGVMZW5ndGgpIGdsLmJ1ZmZlckRhdGEoYnVmZmVyLnR5cGUsIGJ5dGVMZW5ndGgsIHVzYWdlKTtcbiAgICAgICAgYnVmZmVyLmR0eXBlID0gZHR5cGUgfHwgR0xfVU5TSUdORURfQllURSQzO1xuICAgICAgICBidWZmZXIudXNhZ2UgPSB1c2FnZTtcbiAgICAgICAgYnVmZmVyLmRpbWVuc2lvbiA9IGRpbWVuc2lvbjtcbiAgICAgICAgYnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5pdEJ1ZmZlckZyb21EYXRhKGJ1ZmZlciwgZGF0YSwgdXNhZ2UsIGR0eXBlLCBkaW1lbnNpb24sIHBlcnNpc3RlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcbiAgICAgICAgYnVmZmVyLnN0YXRzLnNpemUgPSBidWZmZXIuYnl0ZUxlbmd0aCAqIERUWVBFU19TSVpFU1tidWZmZXIuZHR5cGVdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVnbEJ1ZmZlclxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFN1YkRhdGEgKGRhdGEsIG9mZnNldCkge1xuICAgICAgY2hlY2skMShvZmZzZXQgKyBkYXRhLmJ5dGVMZW5ndGggPD0gYnVmZmVyLmJ5dGVMZW5ndGgsXG4gICAgICAgICdpbnZhbGlkIGJ1ZmZlciBzdWJkYXRhIGNhbGwsIGJ1ZmZlciBpcyB0b28gc21hbGwuICcgKyAnIENhblxcJ3Qgd3JpdGUgZGF0YSBvZiBzaXplICcgKyBkYXRhLmJ5dGVMZW5ndGggKyAnIHN0YXJ0aW5nIGZyb20gb2Zmc2V0ICcgKyBvZmZzZXQgKyAnIHRvIGEgYnVmZmVyIG9mIHNpemUgJyArIGJ1ZmZlci5ieXRlTGVuZ3RoKTtcblxuICAgICAgZ2wuYnVmZmVyU3ViRGF0YShidWZmZXIudHlwZSwgb2Zmc2V0LCBkYXRhKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdWJkYXRhIChkYXRhLCBvZmZzZXRfKSB7XG4gICAgICB2YXIgb2Zmc2V0ID0gKG9mZnNldF8gfHwgMCkgfCAwO1xuICAgICAgdmFyIHNoYXBlO1xuICAgICAgYnVmZmVyLmJpbmQoKTtcbiAgICAgIGlmIChpc1R5cGVkQXJyYXkoZGF0YSkgfHwgZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgICAgIHNldFN1YkRhdGEoZGF0YSwgb2Zmc2V0KTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICBpZiAoZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhWzBdID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgdmFyIGNvbnZlcnRlZCA9IHBvb2wuYWxsb2NUeXBlKGJ1ZmZlci5kdHlwZSwgZGF0YS5sZW5ndGgpO1xuICAgICAgICAgICAgY29weUFycmF5KGNvbnZlcnRlZCwgZGF0YSk7XG4gICAgICAgICAgICBzZXRTdWJEYXRhKGNvbnZlcnRlZCwgb2Zmc2V0KTtcbiAgICAgICAgICAgIHBvb2wuZnJlZVR5cGUoY29udmVydGVkKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YVswXSkgfHwgaXNUeXBlZEFycmF5KGRhdGFbMF0pKSB7XG4gICAgICAgICAgICBzaGFwZSA9IGFycmF5U2hhcGUoZGF0YSk7XG4gICAgICAgICAgICB2YXIgZmxhdERhdGEgPSBhcnJheUZsYXR0ZW4oZGF0YSwgc2hhcGUsIGJ1ZmZlci5kdHlwZSk7XG4gICAgICAgICAgICBzZXRTdWJEYXRhKGZsYXREYXRhLCBvZmZzZXQpO1xuICAgICAgICAgICAgcG9vbC5mcmVlVHlwZShmbGF0RGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoZWNrJDEucmFpc2UoJ2ludmFsaWQgYnVmZmVyIGRhdGEnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNOREFycmF5TGlrZShkYXRhKSkge1xuICAgICAgICBzaGFwZSA9IGRhdGEuc2hhcGU7XG4gICAgICAgIHZhciBzdHJpZGUgPSBkYXRhLnN0cmlkZTtcblxuICAgICAgICB2YXIgc2hhcGVYID0gMDtcbiAgICAgICAgdmFyIHNoYXBlWSA9IDA7XG4gICAgICAgIHZhciBzdHJpZGVYID0gMDtcbiAgICAgICAgdmFyIHN0cmlkZVkgPSAwO1xuICAgICAgICBpZiAoc2hhcGUubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgc2hhcGVYID0gc2hhcGVbMF07XG4gICAgICAgICAgc2hhcGVZID0gMTtcbiAgICAgICAgICBzdHJpZGVYID0gc3RyaWRlWzBdO1xuICAgICAgICAgIHN0cmlkZVkgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgIHNoYXBlWCA9IHNoYXBlWzBdO1xuICAgICAgICAgIHNoYXBlWSA9IHNoYXBlWzFdO1xuICAgICAgICAgIHN0cmlkZVggPSBzdHJpZGVbMF07XG4gICAgICAgICAgc3RyaWRlWSA9IHN0cmlkZVsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGVjayQxLnJhaXNlKCdpbnZhbGlkIHNoYXBlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGR0eXBlID0gQXJyYXkuaXNBcnJheShkYXRhLmRhdGEpXG4gICAgICAgICAgPyBidWZmZXIuZHR5cGVcbiAgICAgICAgICA6IHR5cGVkQXJyYXlDb2RlKGRhdGEuZGF0YSk7XG5cbiAgICAgICAgdmFyIHRyYW5zcG9zZURhdGEgPSBwb29sLmFsbG9jVHlwZShkdHlwZSwgc2hhcGVYICogc2hhcGVZKTtcbiAgICAgICAgdHJhbnNwb3NlKHRyYW5zcG9zZURhdGEsXG4gICAgICAgICAgZGF0YS5kYXRhLFxuICAgICAgICAgIHNoYXBlWCwgc2hhcGVZLFxuICAgICAgICAgIHN0cmlkZVgsIHN0cmlkZVksXG4gICAgICAgICAgZGF0YS5vZmZzZXQpO1xuICAgICAgICBzZXRTdWJEYXRhKHRyYW5zcG9zZURhdGEsIG9mZnNldCk7XG4gICAgICAgIHBvb2wuZnJlZVR5cGUodHJhbnNwb3NlRGF0YSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGVjayQxLnJhaXNlKCdpbnZhbGlkIGRhdGEgZm9yIGJ1ZmZlciBzdWJkYXRhJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVnbEJ1ZmZlclxuICAgIH1cblxuICAgIGlmICghZGVmZXJJbml0KSB7XG4gICAgICByZWdsQnVmZmVyKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJlZ2xCdWZmZXIuX3JlZ2xUeXBlID0gJ2J1ZmZlcic7XG4gICAgcmVnbEJ1ZmZlci5fYnVmZmVyID0gYnVmZmVyO1xuICAgIHJlZ2xCdWZmZXIuc3ViZGF0YSA9IHN1YmRhdGE7XG4gICAgaWYgKGNvbmZpZy5wcm9maWxlKSB7XG4gICAgICByZWdsQnVmZmVyLnN0YXRzID0gYnVmZmVyLnN0YXRzO1xuICAgIH1cbiAgICByZWdsQnVmZmVyLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7IGRlc3Ryb3koYnVmZmVyKTsgfTtcblxuICAgIHJldHVybiByZWdsQnVmZmVyXG4gIH1cblxuICBmdW5jdGlvbiByZXN0b3JlQnVmZmVycyAoKSB7XG4gICAgdmFsdWVzKGJ1ZmZlclNldCkuZm9yRWFjaChmdW5jdGlvbiAoYnVmZmVyKSB7XG4gICAgICBidWZmZXIuYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICBnbC5iaW5kQnVmZmVyKGJ1ZmZlci50eXBlLCBidWZmZXIuYnVmZmVyKTtcbiAgICAgIGdsLmJ1ZmZlckRhdGEoXG4gICAgICAgIGJ1ZmZlci50eXBlLCBidWZmZXIucGVyc2lzdGVudERhdGEgfHwgYnVmZmVyLmJ5dGVMZW5ndGgsIGJ1ZmZlci51c2FnZSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcbiAgICBzdGF0cy5nZXRUb3RhbEJ1ZmZlclNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdG90YWwgPSAwO1xuICAgICAgLy8gVE9ETzogUmlnaHQgbm93LCB0aGUgc3RyZWFtcyBhcmUgbm90IHBhcnQgb2YgdGhlIHRvdGFsIGNvdW50LlxuICAgICAgT2JqZWN0LmtleXMoYnVmZmVyU2V0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdG90YWwgKz0gYnVmZmVyU2V0W2tleV0uc3RhdHMuc2l6ZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRvdGFsXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiBjcmVhdGVCdWZmZXIsXG5cbiAgICBjcmVhdGVTdHJlYW06IGNyZWF0ZVN0cmVhbSxcbiAgICBkZXN0cm95U3RyZWFtOiBkZXN0cm95U3RyZWFtLFxuXG4gICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhbHVlcyhidWZmZXJTZXQpLmZvckVhY2goZGVzdHJveSk7XG4gICAgICBzdHJlYW1Qb29sLmZvckVhY2goZGVzdHJveSk7XG4gICAgfSxcblxuICAgIGdldEJ1ZmZlcjogZnVuY3Rpb24gKHdyYXBwZXIpIHtcbiAgICAgIGlmICh3cmFwcGVyICYmIHdyYXBwZXIuX2J1ZmZlciBpbnN0YW5jZW9mIFJFR0xCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuX2J1ZmZlclxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9LFxuXG4gICAgcmVzdG9yZTogcmVzdG9yZUJ1ZmZlcnMsXG5cbiAgICBfaW5pdEJ1ZmZlcjogaW5pdEJ1ZmZlckZyb21EYXRhXG4gIH1cbn1cblxudmFyIHBvaW50cyA9IDA7XG52YXIgcG9pbnQgPSAwO1xudmFyIGxpbmVzID0gMTtcbnZhciBsaW5lID0gMTtcbnZhciB0cmlhbmdsZXMgPSA0O1xudmFyIHRyaWFuZ2xlID0gNDtcbnZhciBwcmltVHlwZXMgPSB7XG5cdHBvaW50czogcG9pbnRzLFxuXHRwb2ludDogcG9pbnQsXG5cdGxpbmVzOiBsaW5lcyxcblx0bGluZTogbGluZSxcblx0dHJpYW5nbGVzOiB0cmlhbmdsZXMsXG5cdHRyaWFuZ2xlOiB0cmlhbmdsZSxcblx0XCJsaW5lIGxvb3BcIjogMixcblx0XCJsaW5lIHN0cmlwXCI6IDMsXG5cdFwidHJpYW5nbGUgc3RyaXBcIjogNSxcblx0XCJ0cmlhbmdsZSBmYW5cIjogNlxufTtcblxudmFyIEdMX1BPSU5UUyA9IDA7XG52YXIgR0xfTElORVMgPSAxO1xudmFyIEdMX1RSSUFOR0xFUyA9IDQ7XG5cbnZhciBHTF9CWVRFJDIgPSA1MTIwO1xudmFyIEdMX1VOU0lHTkVEX0JZVEUkNCA9IDUxMjE7XG52YXIgR0xfU0hPUlQkMiA9IDUxMjI7XG52YXIgR0xfVU5TSUdORURfU0hPUlQkMiA9IDUxMjM7XG52YXIgR0xfSU5UJDIgPSA1MTI0O1xudmFyIEdMX1VOU0lHTkVEX0lOVCQyID0gNTEyNTtcblxudmFyIEdMX0VMRU1FTlRfQVJSQVlfQlVGRkVSID0gMzQ5NjM7XG5cbnZhciBHTF9TVFJFQU1fRFJBVyQxID0gMHg4OEUwO1xudmFyIEdMX1NUQVRJQ19EUkFXJDEgPSAweDg4RTQ7XG5cbmZ1bmN0aW9uIHdyYXBFbGVtZW50c1N0YXRlIChnbCwgZXh0ZW5zaW9ucywgYnVmZmVyU3RhdGUsIHN0YXRzKSB7XG4gIHZhciBlbGVtZW50U2V0ID0ge307XG4gIHZhciBlbGVtZW50Q291bnQgPSAwO1xuXG4gIHZhciBlbGVtZW50VHlwZXMgPSB7XG4gICAgJ3VpbnQ4JzogR0xfVU5TSUdORURfQllURSQ0LFxuICAgICd1aW50MTYnOiBHTF9VTlNJR05FRF9TSE9SVCQyXG4gIH07XG5cbiAgaWYgKGV4dGVuc2lvbnMub2VzX2VsZW1lbnRfaW5kZXhfdWludCkge1xuICAgIGVsZW1lbnRUeXBlcy51aW50MzIgPSBHTF9VTlNJR05FRF9JTlQkMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIFJFR0xFbGVtZW50QnVmZmVyIChidWZmZXIpIHtcbiAgICB0aGlzLmlkID0gZWxlbWVudENvdW50Kys7XG4gICAgZWxlbWVudFNldFt0aGlzLmlkXSA9IHRoaXM7XG4gICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgdGhpcy5wcmltVHlwZSA9IEdMX1RSSUFOR0xFUztcbiAgICB0aGlzLnZlcnRDb3VudCA9IDA7XG4gICAgdGhpcy50eXBlID0gMDtcbiAgfVxuXG4gIFJFR0xFbGVtZW50QnVmZmVyLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYnVmZmVyLmJpbmQoKTtcbiAgfTtcblxuICB2YXIgYnVmZmVyUG9vbCA9IFtdO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRTdHJlYW0gKGRhdGEpIHtcbiAgICB2YXIgcmVzdWx0ID0gYnVmZmVyUG9vbC5wb3AoKTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgcmVzdWx0ID0gbmV3IFJFR0xFbGVtZW50QnVmZmVyKGJ1ZmZlclN0YXRlLmNyZWF0ZShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgR0xfRUxFTUVOVF9BUlJBWV9CVUZGRVIsXG4gICAgICAgIHRydWUsXG4gICAgICAgIGZhbHNlKS5fYnVmZmVyKTtcbiAgICB9XG4gICAgaW5pdEVsZW1lbnRzKHJlc3VsdCwgZGF0YSwgR0xfU1RSRUFNX0RSQVckMSwgLTEsIC0xLCAwLCAwKTtcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95RWxlbWVudFN0cmVhbSAoZWxlbWVudHMpIHtcbiAgICBidWZmZXJQb29sLnB1c2goZWxlbWVudHMpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdEVsZW1lbnRzIChcbiAgICBlbGVtZW50cyxcbiAgICBkYXRhLFxuICAgIHVzYWdlLFxuICAgIHByaW0sXG4gICAgY291bnQsXG4gICAgYnl0ZUxlbmd0aCxcbiAgICB0eXBlKSB7XG4gICAgZWxlbWVudHMuYnVmZmVyLmJpbmQoKTtcbiAgICBpZiAoZGF0YSkge1xuICAgICAgdmFyIHByZWRpY3RlZFR5cGUgPSB0eXBlO1xuICAgICAgaWYgKCF0eXBlICYmIChcbiAgICAgICAgICAhaXNUeXBlZEFycmF5KGRhdGEpIHx8XG4gICAgICAgICAoaXNOREFycmF5TGlrZShkYXRhKSAmJiAhaXNUeXBlZEFycmF5KGRhdGEuZGF0YSkpKSkge1xuICAgICAgICBwcmVkaWN0ZWRUeXBlID0gZXh0ZW5zaW9ucy5vZXNfZWxlbWVudF9pbmRleF91aW50XG4gICAgICAgICAgPyBHTF9VTlNJR05FRF9JTlQkMlxuICAgICAgICAgIDogR0xfVU5TSUdORURfU0hPUlQkMjtcbiAgICAgIH1cbiAgICAgIGJ1ZmZlclN0YXRlLl9pbml0QnVmZmVyKFxuICAgICAgICBlbGVtZW50cy5idWZmZXIsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHVzYWdlLFxuICAgICAgICBwcmVkaWN0ZWRUeXBlLFxuICAgICAgICAzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2wuYnVmZmVyRGF0YShHTF9FTEVNRU5UX0FSUkFZX0JVRkZFUiwgYnl0ZUxlbmd0aCwgdXNhZ2UpO1xuICAgICAgZWxlbWVudHMuYnVmZmVyLmR0eXBlID0gZHR5cGUgfHwgR0xfVU5TSUdORURfQllURSQ0O1xuICAgICAgZWxlbWVudHMuYnVmZmVyLnVzYWdlID0gdXNhZ2U7XG4gICAgICBlbGVtZW50cy5idWZmZXIuZGltZW5zaW9uID0gMztcbiAgICAgIGVsZW1lbnRzLmJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcbiAgICB9XG5cbiAgICB2YXIgZHR5cGUgPSB0eXBlO1xuICAgIGlmICghdHlwZSkge1xuICAgICAgc3dpdGNoIChlbGVtZW50cy5idWZmZXIuZHR5cGUpIHtcbiAgICAgICAgY2FzZSBHTF9VTlNJR05FRF9CWVRFJDQ6XG4gICAgICAgIGNhc2UgR0xfQllURSQyOlxuICAgICAgICAgIGR0eXBlID0gR0xfVU5TSUdORURfQllURSQ0O1xuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSBHTF9VTlNJR05FRF9TSE9SVCQyOlxuICAgICAgICBjYXNlIEdMX1NIT1JUJDI6XG4gICAgICAgICAgZHR5cGUgPSBHTF9VTlNJR05FRF9TSE9SVCQyO1xuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSBHTF9VTlNJR05FRF9JTlQkMjpcbiAgICAgICAgY2FzZSBHTF9JTlQkMjpcbiAgICAgICAgICBkdHlwZSA9IEdMX1VOU0lHTkVEX0lOVCQyO1xuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjaGVjayQxLnJhaXNlKCd1bnN1cHBvcnRlZCB0eXBlIGZvciBlbGVtZW50IGFycmF5Jyk7XG4gICAgICB9XG4gICAgICBlbGVtZW50cy5idWZmZXIuZHR5cGUgPSBkdHlwZTtcbiAgICB9XG4gICAgZWxlbWVudHMudHlwZSA9IGR0eXBlO1xuXG4gICAgLy8gQ2hlY2sgb2VzX2VsZW1lbnRfaW5kZXhfdWludCBleHRlbnNpb25cbiAgICBjaGVjayQxKFxuICAgICAgZHR5cGUgIT09IEdMX1VOU0lHTkVEX0lOVCQyIHx8XG4gICAgICAhIWV4dGVuc2lvbnMub2VzX2VsZW1lbnRfaW5kZXhfdWludCxcbiAgICAgICczMiBiaXQgZWxlbWVudCBidWZmZXJzIG5vdCBzdXBwb3J0ZWQsIGVuYWJsZSBvZXNfZWxlbWVudF9pbmRleF91aW50IGZpcnN0Jyk7XG5cbiAgICAvLyB0cnkgdG8gZ3Vlc3MgZGVmYXVsdCBwcmltaXRpdmUgdHlwZSBhbmQgYXJndW1lbnRzXG4gICAgdmFyIHZlcnRDb3VudCA9IGNvdW50O1xuICAgIGlmICh2ZXJ0Q291bnQgPCAwKSB7XG4gICAgICB2ZXJ0Q291bnQgPSBlbGVtZW50cy5idWZmZXIuYnl0ZUxlbmd0aDtcbiAgICAgIGlmIChkdHlwZSA9PT0gR0xfVU5TSUdORURfU0hPUlQkMikge1xuICAgICAgICB2ZXJ0Q291bnQgPj49IDE7XG4gICAgICB9IGVsc2UgaWYgKGR0eXBlID09PSBHTF9VTlNJR05FRF9JTlQkMikge1xuICAgICAgICB2ZXJ0Q291bnQgPj49IDI7XG4gICAgICB9XG4gICAgfVxuICAgIGVsZW1lbnRzLnZlcnRDb3VudCA9IHZlcnRDb3VudDtcblxuICAgIC8vIHRyeSB0byBndWVzcyBwcmltaXRpdmUgdHlwZSBmcm9tIGNlbGwgZGltZW5zaW9uXG4gICAgdmFyIHByaW1UeXBlID0gcHJpbTtcbiAgICBpZiAocHJpbSA8IDApIHtcbiAgICAgIHByaW1UeXBlID0gR0xfVFJJQU5HTEVTO1xuICAgICAgdmFyIGRpbWVuc2lvbiA9IGVsZW1lbnRzLmJ1ZmZlci5kaW1lbnNpb247XG4gICAgICBpZiAoZGltZW5zaW9uID09PSAxKSBwcmltVHlwZSA9IEdMX1BPSU5UUztcbiAgICAgIGlmIChkaW1lbnNpb24gPT09IDIpIHByaW1UeXBlID0gR0xfTElORVM7XG4gICAgICBpZiAoZGltZW5zaW9uID09PSAzKSBwcmltVHlwZSA9IEdMX1RSSUFOR0xFUztcbiAgICB9XG4gICAgZWxlbWVudHMucHJpbVR5cGUgPSBwcmltVHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3lFbGVtZW50cyAoZWxlbWVudHMpIHtcbiAgICBzdGF0cy5lbGVtZW50c0NvdW50LS07XG5cbiAgICBjaGVjayQxKGVsZW1lbnRzLmJ1ZmZlciAhPT0gbnVsbCwgJ211c3Qgbm90IGRvdWJsZSBkZXN0cm95IGVsZW1lbnRzJyk7XG4gICAgZGVsZXRlIGVsZW1lbnRTZXRbZWxlbWVudHMuaWRdO1xuICAgIGVsZW1lbnRzLmJ1ZmZlci5kZXN0cm95KCk7XG4gICAgZWxlbWVudHMuYnVmZmVyID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRzIChvcHRpb25zLCBwZXJzaXN0ZW50KSB7XG4gICAgdmFyIGJ1ZmZlciA9IGJ1ZmZlclN0YXRlLmNyZWF0ZShudWxsLCBHTF9FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdHJ1ZSk7XG4gICAgdmFyIGVsZW1lbnRzID0gbmV3IFJFR0xFbGVtZW50QnVmZmVyKGJ1ZmZlci5fYnVmZmVyKTtcbiAgICBzdGF0cy5lbGVtZW50c0NvdW50Kys7XG5cbiAgICBmdW5jdGlvbiByZWdsRWxlbWVudHMgKG9wdGlvbnMpIHtcbiAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICBidWZmZXIoKTtcbiAgICAgICAgZWxlbWVudHMucHJpbVR5cGUgPSBHTF9UUklBTkdMRVM7XG4gICAgICAgIGVsZW1lbnRzLnZlcnRDb3VudCA9IDA7XG4gICAgICAgIGVsZW1lbnRzLnR5cGUgPSBHTF9VTlNJR05FRF9CWVRFJDQ7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJykge1xuICAgICAgICBidWZmZXIob3B0aW9ucyk7XG4gICAgICAgIGVsZW1lbnRzLnByaW1UeXBlID0gR0xfVFJJQU5HTEVTO1xuICAgICAgICBlbGVtZW50cy52ZXJ0Q291bnQgPSBvcHRpb25zIHwgMDtcbiAgICAgICAgZWxlbWVudHMudHlwZSA9IEdMX1VOU0lHTkVEX0JZVEUkNDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBkYXRhID0gbnVsbDtcbiAgICAgICAgdmFyIHVzYWdlID0gR0xfU1RBVElDX0RSQVckMTtcbiAgICAgICAgdmFyIHByaW1UeXBlID0gLTE7XG4gICAgICAgIHZhciB2ZXJ0Q291bnQgPSAtMTtcbiAgICAgICAgdmFyIGJ5dGVMZW5ndGggPSAwO1xuICAgICAgICB2YXIgZHR5cGUgPSAwO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zKSB8fFxuICAgICAgICAgICAgaXNUeXBlZEFycmF5KG9wdGlvbnMpIHx8XG4gICAgICAgICAgICBpc05EQXJyYXlMaWtlKG9wdGlvbnMpKSB7XG4gICAgICAgICAgZGF0YSA9IG9wdGlvbnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hlY2skMS50eXBlKG9wdGlvbnMsICdvYmplY3QnLCAnaW52YWxpZCBhcmd1bWVudHMgZm9yIGVsZW1lbnRzJyk7XG4gICAgICAgICAgaWYgKCdkYXRhJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBkYXRhID0gb3B0aW9ucy5kYXRhO1xuICAgICAgICAgICAgY2hlY2skMShcbiAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KGRhdGEpIHx8XG4gICAgICAgICAgICAgICAgaXNUeXBlZEFycmF5KGRhdGEpIHx8XG4gICAgICAgICAgICAgICAgaXNOREFycmF5TGlrZShkYXRhKSxcbiAgICAgICAgICAgICAgICAnaW52YWxpZCBkYXRhIGZvciBlbGVtZW50IGJ1ZmZlcicpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoJ3VzYWdlJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBjaGVjayQxLnBhcmFtZXRlcihcbiAgICAgICAgICAgICAgb3B0aW9ucy51c2FnZSxcbiAgICAgICAgICAgICAgdXNhZ2VUeXBlcyxcbiAgICAgICAgICAgICAgJ2ludmFsaWQgZWxlbWVudCBidWZmZXIgdXNhZ2UnKTtcbiAgICAgICAgICAgIHVzYWdlID0gdXNhZ2VUeXBlc1tvcHRpb25zLnVzYWdlXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCdwcmltaXRpdmUnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNoZWNrJDEucGFyYW1ldGVyKFxuICAgICAgICAgICAgICBvcHRpb25zLnByaW1pdGl2ZSxcbiAgICAgICAgICAgICAgcHJpbVR5cGVzLFxuICAgICAgICAgICAgICAnaW52YWxpZCBlbGVtZW50IGJ1ZmZlciBwcmltaXRpdmUnKTtcbiAgICAgICAgICAgIHByaW1UeXBlID0gcHJpbVR5cGVzW29wdGlvbnMucHJpbWl0aXZlXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCdjb3VudCcgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgY2hlY2skMShcbiAgICAgICAgICAgICAgdHlwZW9mIG9wdGlvbnMuY291bnQgPT09ICdudW1iZXInICYmIG9wdGlvbnMuY291bnQgPj0gMCxcbiAgICAgICAgICAgICAgJ2ludmFsaWQgdmVydGV4IGNvdW50IGZvciBlbGVtZW50cycpO1xuICAgICAgICAgICAgdmVydENvdW50ID0gb3B0aW9ucy5jb3VudCB8IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgndHlwZScgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgY2hlY2skMS5wYXJhbWV0ZXIoXG4gICAgICAgICAgICAgIG9wdGlvbnMudHlwZSxcbiAgICAgICAgICAgICAgZWxlbWVudFR5cGVzLFxuICAgICAgICAgICAgICAnaW52YWxpZCBidWZmZXIgdHlwZScpO1xuICAgICAgICAgICAgZHR5cGUgPSBlbGVtZW50VHlwZXNbb3B0aW9ucy50eXBlXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCdsZW5ndGgnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSBvcHRpb25zLmxlbmd0aCB8IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB2ZXJ0Q291bnQ7XG4gICAgICAgICAgICBpZiAoZHR5cGUgPT09IEdMX1VOU0lHTkVEX1NIT1JUJDIgfHwgZHR5cGUgPT09IEdMX1NIT1JUJDIpIHtcbiAgICAgICAgICAgICAgYnl0ZUxlbmd0aCAqPSAyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChkdHlwZSA9PT0gR0xfVU5TSUdORURfSU5UJDIgfHwgZHR5cGUgPT09IEdMX0lOVCQyKSB7XG4gICAgICAgICAgICAgIGJ5dGVMZW5ndGggKj0gNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5pdEVsZW1lbnRzKFxuICAgICAgICAgIGVsZW1lbnRzLFxuICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgdXNhZ2UsXG4gICAgICAgICAgcHJpbVR5cGUsXG4gICAgICAgICAgdmVydENvdW50LFxuICAgICAgICAgIGJ5dGVMZW5ndGgsXG4gICAgICAgICAgZHR5cGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVnbEVsZW1lbnRzXG4gICAgfVxuXG4gICAgcmVnbEVsZW1lbnRzKG9wdGlvbnMpO1xuXG4gICAgcmVnbEVsZW1lbnRzLl9yZWdsVHlwZSA9ICdlbGVtZW50cyc7XG4gICAgcmVnbEVsZW1lbnRzLl9lbGVtZW50cyA9IGVsZW1lbnRzO1xuICAgIHJlZ2xFbGVtZW50cy5zdWJkYXRhID0gZnVuY3Rpb24gKGRhdGEsIG9mZnNldCkge1xuICAgICAgYnVmZmVyLnN1YmRhdGEoZGF0YSwgb2Zmc2V0KTtcbiAgICAgIHJldHVybiByZWdsRWxlbWVudHNcbiAgICB9O1xuICAgIHJlZ2xFbGVtZW50cy5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZGVzdHJveUVsZW1lbnRzKGVsZW1lbnRzKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJlZ2xFbGVtZW50c1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGU6IGNyZWF0ZUVsZW1lbnRzLFxuICAgIGNyZWF0ZVN0cmVhbTogY3JlYXRlRWxlbWVudFN0cmVhbSxcbiAgICBkZXN0cm95U3RyZWFtOiBkZXN0cm95RWxlbWVudFN0cmVhbSxcbiAgICBnZXRFbGVtZW50czogZnVuY3Rpb24gKGVsZW1lbnRzKSB7XG4gICAgICBpZiAodHlwZW9mIGVsZW1lbnRzID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgZWxlbWVudHMuX2VsZW1lbnRzIGluc3RhbmNlb2YgUkVHTEVsZW1lbnRCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRzLl9lbGVtZW50c1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9LFxuICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YWx1ZXMoZWxlbWVudFNldCkuZm9yRWFjaChkZXN0cm95RWxlbWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgRkxPQVQgPSBuZXcgRmxvYXQzMkFycmF5KDEpO1xudmFyIElOVCA9IG5ldyBVaW50MzJBcnJheShGTE9BVC5idWZmZXIpO1xuXG52YXIgR0xfVU5TSUdORURfU0hPUlQkNCA9IDUxMjM7XG5cbmZ1bmN0aW9uIGNvbnZlcnRUb0hhbGZGbG9hdCAoYXJyYXkpIHtcbiAgdmFyIHVzaG9ydHMgPSBwb29sLmFsbG9jVHlwZShHTF9VTlNJR05FRF9TSE9SVCQ0LCBhcnJheS5sZW5ndGgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoaXNOYU4oYXJyYXlbaV0pKSB7XG4gICAgICB1c2hvcnRzW2ldID0gMHhmZmZmO1xuICAgIH0gZWxzZSBpZiAoYXJyYXlbaV0gPT09IEluZmluaXR5KSB7XG4gICAgICB1c2hvcnRzW2ldID0gMHg3YzAwO1xuICAgIH0gZWxzZSBpZiAoYXJyYXlbaV0gPT09IC1JbmZpbml0eSkge1xuICAgICAgdXNob3J0c1tpXSA9IDB4ZmMwMDtcbiAgICB9IGVsc2Uge1xuICAgICAgRkxPQVRbMF0gPSBhcnJheVtpXTtcbiAgICAgIHZhciB4ID0gSU5UWzBdO1xuXG4gICAgICB2YXIgc2duID0gKHggPj4+IDMxKSA8PCAxNTtcbiAgICAgIHZhciBleHAgPSAoKHggPDwgMSkgPj4+IDI0KSAtIDEyNztcbiAgICAgIHZhciBmcmFjID0gKHggPj4gMTMpICYgKCgxIDw8IDEwKSAtIDEpO1xuXG4gICAgICBpZiAoZXhwIDwgLTI0KSB7XG4gICAgICAgIC8vIHJvdW5kIG5vbi1yZXByZXNlbnRhYmxlIGRlbm9ybWFscyB0byAwXG4gICAgICAgIHVzaG9ydHNbaV0gPSBzZ247XG4gICAgICB9IGVsc2UgaWYgKGV4cCA8IC0xNCkge1xuICAgICAgICAvLyBoYW5kbGUgZGVub3JtYWxzXG4gICAgICAgIHZhciBzID0gLTE0IC0gZXhwO1xuICAgICAgICB1c2hvcnRzW2ldID0gc2duICsgKChmcmFjICsgKDEgPDwgMTApKSA+PiBzKTtcbiAgICAgIH0gZWxzZSBpZiAoZXhwID4gMTUpIHtcbiAgICAgICAgLy8gcm91bmQgb3ZlcmZsb3cgdG8gKy8tIEluZmluaXR5XG4gICAgICAgIHVzaG9ydHNbaV0gPSBzZ24gKyAweDdjMDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBvdGhlcndpc2UgY29udmVydCBkaXJlY3RseVxuICAgICAgICB1c2hvcnRzW2ldID0gc2duICsgKChleHAgKyAxNSkgPDwgMTApICsgZnJhYztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdXNob3J0c1xufVxuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSAocykge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShzKSB8fCBpc1R5cGVkQXJyYXkocylcbn1cblxudmFyIGlzUG93MiQxID0gZnVuY3Rpb24gKHYpIHtcbiAgcmV0dXJuICEodiAmICh2IC0gMSkpICYmICghIXYpXG59O1xuXG52YXIgR0xfQ09NUFJFU1NFRF9URVhUVVJFX0ZPUk1BVFMgPSAweDg2QTM7XG5cbnZhciBHTF9URVhUVVJFXzJEJDEgPSAweDBERTE7XG52YXIgR0xfVEVYVFVSRV9DVUJFX01BUCQxID0gMHg4NTEzO1xudmFyIEdMX1RFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCQxID0gMHg4NTE1O1xuXG52YXIgR0xfUkdCQSQxID0gMHgxOTA4O1xudmFyIEdMX0FMUEhBID0gMHgxOTA2O1xudmFyIEdMX1JHQiA9IDB4MTkwNztcbnZhciBHTF9MVU1JTkFOQ0UgPSAweDE5MDk7XG52YXIgR0xfTFVNSU5BTkNFX0FMUEhBID0gMHgxOTBBO1xuXG52YXIgR0xfUkdCQTQgPSAweDgwNTY7XG52YXIgR0xfUkdCNV9BMSA9IDB4ODA1NztcbnZhciBHTF9SR0I1NjUgPSAweDhENjI7XG5cbnZhciBHTF9VTlNJR05FRF9TSE9SVF80XzRfNF80JDEgPSAweDgwMzM7XG52YXIgR0xfVU5TSUdORURfU0hPUlRfNV81XzVfMSQxID0gMHg4MDM0O1xudmFyIEdMX1VOU0lHTkVEX1NIT1JUXzVfNl81JDEgPSAweDgzNjM7XG52YXIgR0xfVU5TSUdORURfSU5UXzI0XzhfV0VCR0wkMSA9IDB4ODRGQTtcblxudmFyIEdMX0RFUFRIX0NPTVBPTkVOVCA9IDB4MTkwMjtcbnZhciBHTF9ERVBUSF9TVEVOQ0lMID0gMHg4NEY5O1xuXG52YXIgR0xfU1JHQl9FWFQgPSAweDhDNDA7XG52YXIgR0xfU1JHQl9BTFBIQV9FWFQgPSAweDhDNDI7XG5cbnZhciBHTF9IQUxGX0ZMT0FUX09FUyQxID0gMHg4RDYxO1xuXG52YXIgR0xfQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVCA9IDB4ODNGMDtcbnZhciBHTF9DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVCA9IDB4ODNGMTtcbnZhciBHTF9DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVCA9IDB4ODNGMjtcbnZhciBHTF9DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVCA9IDB4ODNGMztcblxudmFyIEdMX0NPTVBSRVNTRURfUkdCX0FUQ19XRUJHTCA9IDB4OEM5MjtcbnZhciBHTF9DT01QUkVTU0VEX1JHQkFfQVRDX0VYUExJQ0lUX0FMUEhBX1dFQkdMID0gMHg4QzkzO1xudmFyIEdMX0NPTVBSRVNTRURfUkdCQV9BVENfSU5URVJQT0xBVEVEX0FMUEhBX1dFQkdMID0gMHg4N0VFO1xuXG52YXIgR0xfQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRyA9IDB4OEMwMDtcbnZhciBHTF9DT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HID0gMHg4QzAxO1xudmFyIEdMX0NPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HID0gMHg4QzAyO1xudmFyIEdMX0NPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HID0gMHg4QzAzO1xuXG52YXIgR0xfQ09NUFJFU1NFRF9SR0JfRVRDMV9XRUJHTCA9IDB4OEQ2NDtcblxudmFyIEdMX1VOU0lHTkVEX0JZVEUkNSA9IDB4MTQwMTtcbnZhciBHTF9VTlNJR05FRF9TSE9SVCQzID0gMHgxNDAzO1xudmFyIEdMX1VOU0lHTkVEX0lOVCQzID0gMHgxNDA1O1xudmFyIEdMX0ZMT0FUJDQgPSAweDE0MDY7XG5cbnZhciBHTF9URVhUVVJFX1dSQVBfUyA9IDB4MjgwMjtcbnZhciBHTF9URVhUVVJFX1dSQVBfVCA9IDB4MjgwMztcblxudmFyIEdMX1JFUEVBVCA9IDB4MjkwMTtcbnZhciBHTF9DTEFNUF9UT19FREdFJDEgPSAweDgxMkY7XG52YXIgR0xfTUlSUk9SRURfUkVQRUFUID0gMHg4MzcwO1xuXG52YXIgR0xfVEVYVFVSRV9NQUdfRklMVEVSID0gMHgyODAwO1xudmFyIEdMX1RFWFRVUkVfTUlOX0ZJTFRFUiA9IDB4MjgwMTtcblxudmFyIEdMX05FQVJFU1QkMSA9IDB4MjYwMDtcbnZhciBHTF9MSU5FQVIgPSAweDI2MDE7XG52YXIgR0xfTkVBUkVTVF9NSVBNQVBfTkVBUkVTVCQxID0gMHgyNzAwO1xudmFyIEdMX0xJTkVBUl9NSVBNQVBfTkVBUkVTVCQxID0gMHgyNzAxO1xudmFyIEdMX05FQVJFU1RfTUlQTUFQX0xJTkVBUiQxID0gMHgyNzAyO1xudmFyIEdMX0xJTkVBUl9NSVBNQVBfTElORUFSJDEgPSAweDI3MDM7XG5cbnZhciBHTF9HRU5FUkFURV9NSVBNQVBfSElOVCA9IDB4ODE5MjtcbnZhciBHTF9ET05UX0NBUkUgPSAweDExMDA7XG52YXIgR0xfRkFTVEVTVCA9IDB4MTEwMTtcbnZhciBHTF9OSUNFU1QgPSAweDExMDI7XG5cbnZhciBHTF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCA9IDB4ODRGRTtcblxudmFyIEdMX1VOUEFDS19BTElHTk1FTlQgPSAweDBDRjU7XG52YXIgR0xfVU5QQUNLX0ZMSVBfWV9XRUJHTCA9IDB4OTI0MDtcbnZhciBHTF9VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wgPSAweDkyNDE7XG52YXIgR0xfVU5QQUNLX0NPTE9SU1BBQ0VfQ09OVkVSU0lPTl9XRUJHTCA9IDB4OTI0MztcblxudmFyIEdMX0JST1dTRVJfREVGQVVMVF9XRUJHTCA9IDB4OTI0NDtcblxudmFyIEdMX1RFWFRVUkUwJDEgPSAweDg0QzA7XG5cbnZhciBNSVBNQVBfRklMVEVSUyA9IFtcbiAgR0xfTkVBUkVTVF9NSVBNQVBfTkVBUkVTVCQxLFxuICBHTF9ORUFSRVNUX01JUE1BUF9MSU5FQVIkMSxcbiAgR0xfTElORUFSX01JUE1BUF9ORUFSRVNUJDEsXG4gIEdMX0xJTkVBUl9NSVBNQVBfTElORUFSJDFcbl07XG5cbnZhciBDSEFOTkVMU19GT1JNQVQgPSBbXG4gIDAsXG4gIEdMX0xVTUlOQU5DRSxcbiAgR0xfTFVNSU5BTkNFX0FMUEhBLFxuICBHTF9SR0IsXG4gIEdMX1JHQkEkMVxuXTtcblxudmFyIEZPUk1BVF9DSEFOTkVMUyA9IHt9O1xuRk9STUFUX0NIQU5ORUxTW0dMX0xVTUlOQU5DRV0gPVxuRk9STUFUX0NIQU5ORUxTW0dMX0FMUEhBXSA9XG5GT1JNQVRfQ0hBTk5FTFNbR0xfREVQVEhfQ09NUE9ORU5UXSA9IDE7XG5GT1JNQVRfQ0hBTk5FTFNbR0xfREVQVEhfU1RFTkNJTF0gPVxuRk9STUFUX0NIQU5ORUxTW0dMX0xVTUlOQU5DRV9BTFBIQV0gPSAyO1xuRk9STUFUX0NIQU5ORUxTW0dMX1JHQl0gPVxuRk9STUFUX0NIQU5ORUxTW0dMX1NSR0JfRVhUXSA9IDM7XG5GT1JNQVRfQ0hBTk5FTFNbR0xfUkdCQSQxXSA9XG5GT1JNQVRfQ0hBTk5FTFNbR0xfU1JHQl9BTFBIQV9FWFRdID0gNDtcblxuZnVuY3Rpb24gb2JqZWN0TmFtZSAoc3RyKSB7XG4gIHJldHVybiAnW29iamVjdCAnICsgc3RyICsgJ10nXG59XG5cbnZhciBDQU5WQVNfQ0xBU1MgPSBvYmplY3ROYW1lKCdIVE1MQ2FudmFzRWxlbWVudCcpO1xudmFyIENPTlRFWFQyRF9DTEFTUyA9IG9iamVjdE5hbWUoJ0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCcpO1xudmFyIEJJVE1BUF9DTEFTUyA9IG9iamVjdE5hbWUoJ0ltYWdlQml0bWFwJyk7XG52YXIgSU1BR0VfQ0xBU1MgPSBvYmplY3ROYW1lKCdIVE1MSW1hZ2VFbGVtZW50Jyk7XG52YXIgVklERU9fQ0xBU1MgPSBvYmplY3ROYW1lKCdIVE1MVmlkZW9FbGVtZW50Jyk7XG5cbnZhciBQSVhFTF9DTEFTU0VTID0gT2JqZWN0LmtleXMoYXJyYXlUeXBlcykuY29uY2F0KFtcbiAgQ0FOVkFTX0NMQVNTLFxuICBDT05URVhUMkRfQ0xBU1MsXG4gIEJJVE1BUF9DTEFTUyxcbiAgSU1BR0VfQ0xBU1MsXG4gIFZJREVPX0NMQVNTXG5dKTtcblxuLy8gZm9yIGV2ZXJ5IHRleHR1cmUgdHlwZSwgc3RvcmVcbi8vIHRoZSBzaXplIGluIGJ5dGVzLlxudmFyIFRZUEVfU0laRVMgPSBbXTtcblRZUEVfU0laRVNbR0xfVU5TSUdORURfQllURSQ1XSA9IDE7XG5UWVBFX1NJWkVTW0dMX0ZMT0FUJDRdID0gNDtcblRZUEVfU0laRVNbR0xfSEFMRl9GTE9BVF9PRVMkMV0gPSAyO1xuXG5UWVBFX1NJWkVTW0dMX1VOU0lHTkVEX1NIT1JUJDNdID0gMjtcblRZUEVfU0laRVNbR0xfVU5TSUdORURfSU5UJDNdID0gNDtcblxudmFyIEZPUk1BVF9TSVpFU19TUEVDSUFMID0gW107XG5GT1JNQVRfU0laRVNfU1BFQ0lBTFtHTF9SR0JBNF0gPSAyO1xuRk9STUFUX1NJWkVTX1NQRUNJQUxbR0xfUkdCNV9BMV0gPSAyO1xuRk9STUFUX1NJWkVTX1NQRUNJQUxbR0xfUkdCNTY1XSA9IDI7XG5GT1JNQVRfU0laRVNfU1BFQ0lBTFtHTF9ERVBUSF9TVEVOQ0lMXSA9IDQ7XG5cbkZPUk1BVF9TSVpFU19TUEVDSUFMW0dMX0NPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFRdID0gMC41O1xuRk9STUFUX1NJWkVTX1NQRUNJQUxbR0xfQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFRdID0gMC41O1xuRk9STUFUX1NJWkVTX1NQRUNJQUxbR0xfQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFRdID0gMTtcbkZPUk1BVF9TSVpFU19TUEVDSUFMW0dMX0NPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUXSA9IDE7XG5cbkZPUk1BVF9TSVpFU19TUEVDSUFMW0dMX0NPTVBSRVNTRURfUkdCX0FUQ19XRUJHTF0gPSAwLjU7XG5GT1JNQVRfU0laRVNfU1BFQ0lBTFtHTF9DT01QUkVTU0VEX1JHQkFfQVRDX0VYUExJQ0lUX0FMUEhBX1dFQkdMXSA9IDE7XG5GT1JNQVRfU0laRVNfU1BFQ0lBTFtHTF9DT01QUkVTU0VEX1JHQkFfQVRDX0lOVEVSUE9MQVRFRF9BTFBIQV9XRUJHTF0gPSAxO1xuXG5GT1JNQVRfU0laRVNfU1BFQ0lBTFtHTF9DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HXSA9IDAuNTtcbkZPUk1BVF9TSVpFU19TUEVDSUFMW0dMX0NPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUddID0gMC4yNTtcbkZPUk1BVF9TSVpFU19TUEVDSUFMW0dMX0NPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HXSA9IDAuNTtcbkZPUk1BVF9TSVpFU19TUEVDSUFMW0dMX0NPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HXSA9IDAuMjU7XG5cbkZPUk1BVF9TSVpFU19TUEVDSUFMW0dMX0NPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0xdID0gMC41O1xuXG5mdW5jdGlvbiBpc051bWVyaWNBcnJheSAoYXJyKSB7XG4gIHJldHVybiAoXG4gICAgQXJyYXkuaXNBcnJheShhcnIpICYmXG4gICAgKGFyci5sZW5ndGggPT09IDAgfHxcbiAgICB0eXBlb2YgYXJyWzBdID09PSAnbnVtYmVyJykpXG59XG5cbmZ1bmN0aW9uIGlzUmVjdEFycmF5IChhcnIpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB2YXIgd2lkdGggPSBhcnIubGVuZ3RoO1xuICBpZiAod2lkdGggPT09IDAgfHwgIWlzQXJyYXlMaWtlKGFyclswXSkpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBjbGFzc1N0cmluZyAoeCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHgpXG59XG5cbmZ1bmN0aW9uIGlzQ2FudmFzRWxlbWVudCAob2JqZWN0KSB7XG4gIHJldHVybiBjbGFzc1N0cmluZyhvYmplY3QpID09PSBDQU5WQVNfQ0xBU1Ncbn1cblxuZnVuY3Rpb24gaXNDb250ZXh0MkQgKG9iamVjdCkge1xuICByZXR1cm4gY2xhc3NTdHJpbmcob2JqZWN0KSA9PT0gQ09OVEVYVDJEX0NMQVNTXG59XG5cbmZ1bmN0aW9uIGlzQml0bWFwIChvYmplY3QpIHtcbiAgcmV0dXJuIGNsYXNzU3RyaW5nKG9iamVjdCkgPT09IEJJVE1BUF9DTEFTU1xufVxuXG5mdW5jdGlvbiBpc0ltYWdlRWxlbWVudCAob2JqZWN0KSB7XG4gIHJldHVybiBjbGFzc1N0cmluZyhvYmplY3QpID09PSBJTUFHRV9DTEFTU1xufVxuXG5mdW5jdGlvbiBpc1ZpZGVvRWxlbWVudCAob2JqZWN0KSB7XG4gIHJldHVybiBjbGFzc1N0cmluZyhvYmplY3QpID09PSBWSURFT19DTEFTU1xufVxuXG5mdW5jdGlvbiBpc1BpeGVsRGF0YSAob2JqZWN0KSB7XG4gIGlmICghb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIGNsYXNzTmFtZSA9IGNsYXNzU3RyaW5nKG9iamVjdCk7XG4gIGlmIChQSVhFTF9DTEFTU0VTLmluZGV4T2YoY2xhc3NOYW1lKSA+PSAwKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICByZXR1cm4gKFxuICAgIGlzTnVtZXJpY0FycmF5KG9iamVjdCkgfHxcbiAgICBpc1JlY3RBcnJheShvYmplY3QpIHx8XG4gICAgaXNOREFycmF5TGlrZShvYmplY3QpKVxufVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5Q29kZSQxIChkYXRhKSB7XG4gIHJldHVybiBhcnJheVR5cGVzW09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkYXRhKV0gfCAwXG59XG5cbmZ1bmN0aW9uIGNvbnZlcnREYXRhIChyZXN1bHQsIGRhdGEpIHtcbiAgdmFyIG4gPSBkYXRhLmxlbmd0aDtcbiAgc3dpdGNoIChyZXN1bHQudHlwZSkge1xuICAgIGNhc2UgR0xfVU5TSUdORURfQllURSQ1OlxuICAgIGNhc2UgR0xfVU5TSUdORURfU0hPUlQkMzpcbiAgICBjYXNlIEdMX1VOU0lHTkVEX0lOVCQzOlxuICAgIGNhc2UgR0xfRkxPQVQkNDpcbiAgICAgIHZhciBjb252ZXJ0ZWQgPSBwb29sLmFsbG9jVHlwZShyZXN1bHQudHlwZSwgbik7XG4gICAgICBjb252ZXJ0ZWQuc2V0KGRhdGEpO1xuICAgICAgcmVzdWx0LmRhdGEgPSBjb252ZXJ0ZWQ7XG4gICAgICBicmVha1xuXG4gICAgY2FzZSBHTF9IQUxGX0ZMT0FUX09FUyQxOlxuICAgICAgcmVzdWx0LmRhdGEgPSBjb252ZXJ0VG9IYWxmRmxvYXQoZGF0YSk7XG4gICAgICBicmVha1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIGNoZWNrJDEucmFpc2UoJ3Vuc3VwcG9ydGVkIHRleHR1cmUgdHlwZSwgbXVzdCBzcGVjaWZ5IGEgdHlwZWQgYXJyYXknKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVDb252ZXJ0IChpbWFnZSwgbikge1xuICByZXR1cm4gcG9vbC5hbGxvY1R5cGUoXG4gICAgaW1hZ2UudHlwZSA9PT0gR0xfSEFMRl9GTE9BVF9PRVMkMVxuICAgICAgPyBHTF9GTE9BVCQ0XG4gICAgICA6IGltYWdlLnR5cGUsIG4pXG59XG5cbmZ1bmN0aW9uIHBvc3RDb252ZXJ0IChpbWFnZSwgZGF0YSkge1xuICBpZiAoaW1hZ2UudHlwZSA9PT0gR0xfSEFMRl9GTE9BVF9PRVMkMSkge1xuICAgIGltYWdlLmRhdGEgPSBjb252ZXJ0VG9IYWxmRmxvYXQoZGF0YSk7XG4gICAgcG9vbC5mcmVlVHlwZShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICBpbWFnZS5kYXRhID0gZGF0YTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFuc3Bvc2VEYXRhIChpbWFnZSwgYXJyYXksIHN0cmlkZVgsIHN0cmlkZVksIHN0cmlkZUMsIG9mZnNldCkge1xuICB2YXIgdyA9IGltYWdlLndpZHRoO1xuICB2YXIgaCA9IGltYWdlLmhlaWdodDtcbiAgdmFyIGMgPSBpbWFnZS5jaGFubmVscztcbiAgdmFyIG4gPSB3ICogaCAqIGM7XG4gIHZhciBkYXRhID0gcHJlQ29udmVydChpbWFnZSwgbik7XG5cbiAgdmFyIHAgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGg7ICsraSkge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgdzsgKytqKSB7XG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGM7ICsraykge1xuICAgICAgICBkYXRhW3ArK10gPSBhcnJheVtzdHJpZGVYICogaiArIHN0cmlkZVkgKiBpICsgc3RyaWRlQyAqIGsgKyBvZmZzZXRdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHBvc3RDb252ZXJ0KGltYWdlLCBkYXRhKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGV4dHVyZVNpemUgKGZvcm1hdCwgdHlwZSwgd2lkdGgsIGhlaWdodCwgaXNNaXBtYXAsIGlzQ3ViZSkge1xuICB2YXIgcztcbiAgaWYgKHR5cGVvZiBGT1JNQVRfU0laRVNfU1BFQ0lBTFtmb3JtYXRdICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIHdlIGhhdmUgYSBzcGVjaWFsIGFycmF5IGZvciBkZWFsaW5nIHdpdGggd2VpcmQgY29sb3IgZm9ybWF0cyBzdWNoIGFzIFJHQjVBMVxuICAgIHMgPSBGT1JNQVRfU0laRVNfU1BFQ0lBTFtmb3JtYXRdO1xuICB9IGVsc2Uge1xuICAgIHMgPSBGT1JNQVRfQ0hBTk5FTFNbZm9ybWF0XSAqIFRZUEVfU0laRVNbdHlwZV07XG4gIH1cblxuICBpZiAoaXNDdWJlKSB7XG4gICAgcyAqPSA2O1xuICB9XG5cbiAgaWYgKGlzTWlwbWFwKSB7XG4gICAgLy8gY29tcHV0ZSB0aGUgdG90YWwgc2l6ZSBvZiBhbGwgdGhlIG1pcG1hcHMuXG4gICAgdmFyIHRvdGFsID0gMDtcblxuICAgIHZhciB3ID0gd2lkdGg7XG4gICAgd2hpbGUgKHcgPj0gMSkge1xuICAgICAgLy8gd2UgY2FuIG9ubHkgdXNlIG1pcG1hcHMgb24gYSBzcXVhcmUgaW1hZ2UsXG4gICAgICAvLyBzbyB3ZSBjYW4gc2ltcGx5IHVzZSB0aGUgd2lkdGggYW5kIGlnbm9yZSB0aGUgaGVpZ2h0OlxuICAgICAgdG90YWwgKz0gcyAqIHcgKiB3O1xuICAgICAgdyAvPSAyO1xuICAgIH1cbiAgICByZXR1cm4gdG90YWxcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcyAqIHdpZHRoICogaGVpZ2h0XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dHVyZVNldCAoXG4gIGdsLCBleHRlbnNpb25zLCBsaW1pdHMsIHJlZ2xQb2xsLCBjb250ZXh0U3RhdGUsIHN0YXRzLCBjb25maWcpIHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBJbml0aWFsaXplIGNvbnN0YW50cyBhbmQgcGFyYW1ldGVyIHRhYmxlcyBoZXJlXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgdmFyIG1pcG1hcEhpbnQgPSB7XG4gICAgXCJkb24ndCBjYXJlXCI6IEdMX0RPTlRfQ0FSRSxcbiAgICAnZG9udCBjYXJlJzogR0xfRE9OVF9DQVJFLFxuICAgICduaWNlJzogR0xfTklDRVNULFxuICAgICdmYXN0JzogR0xfRkFTVEVTVFxuICB9O1xuXG4gIHZhciB3cmFwTW9kZXMgPSB7XG4gICAgJ3JlcGVhdCc6IEdMX1JFUEVBVCxcbiAgICAnY2xhbXAnOiBHTF9DTEFNUF9UT19FREdFJDEsXG4gICAgJ21pcnJvcic6IEdMX01JUlJPUkVEX1JFUEVBVFxuICB9O1xuXG4gIHZhciBtYWdGaWx0ZXJzID0ge1xuICAgICduZWFyZXN0JzogR0xfTkVBUkVTVCQxLFxuICAgICdsaW5lYXInOiBHTF9MSU5FQVJcbiAgfTtcblxuICB2YXIgbWluRmlsdGVycyA9IGV4dGVuZCh7XG4gICAgJ21pcG1hcCc6IEdMX0xJTkVBUl9NSVBNQVBfTElORUFSJDEsXG4gICAgJ25lYXJlc3QgbWlwbWFwIG5lYXJlc3QnOiBHTF9ORUFSRVNUX01JUE1BUF9ORUFSRVNUJDEsXG4gICAgJ2xpbmVhciBtaXBtYXAgbmVhcmVzdCc6IEdMX0xJTkVBUl9NSVBNQVBfTkVBUkVTVCQxLFxuICAgICduZWFyZXN0IG1pcG1hcCBsaW5lYXInOiBHTF9ORUFSRVNUX01JUE1BUF9MSU5FQVIkMSxcbiAgICAnbGluZWFyIG1pcG1hcCBsaW5lYXInOiBHTF9MSU5FQVJfTUlQTUFQX0xJTkVBUiQxXG4gIH0sIG1hZ0ZpbHRlcnMpO1xuXG4gIHZhciBjb2xvclNwYWNlID0ge1xuICAgICdub25lJzogMCxcbiAgICAnYnJvd3Nlcic6IEdMX0JST1dTRVJfREVGQVVMVF9XRUJHTFxuICB9O1xuXG4gIHZhciB0ZXh0dXJlVHlwZXMgPSB7XG4gICAgJ3VpbnQ4JzogR0xfVU5TSUdORURfQllURSQ1LFxuICAgICdyZ2JhNCc6IEdMX1VOU0lHTkVEX1NIT1JUXzRfNF80XzQkMSxcbiAgICAncmdiNTY1JzogR0xfVU5TSUdORURfU0hPUlRfNV82XzUkMSxcbiAgICAncmdiNSBhMSc6IEdMX1VOU0lHTkVEX1NIT1JUXzVfNV81XzEkMVxuICB9O1xuXG4gIHZhciB0ZXh0dXJlRm9ybWF0cyA9IHtcbiAgICAnYWxwaGEnOiBHTF9BTFBIQSxcbiAgICAnbHVtaW5hbmNlJzogR0xfTFVNSU5BTkNFLFxuICAgICdsdW1pbmFuY2UgYWxwaGEnOiBHTF9MVU1JTkFOQ0VfQUxQSEEsXG4gICAgJ3JnYic6IEdMX1JHQixcbiAgICAncmdiYSc6IEdMX1JHQkEkMSxcbiAgICAncmdiYTQnOiBHTF9SR0JBNCxcbiAgICAncmdiNSBhMSc6IEdMX1JHQjVfQTEsXG4gICAgJ3JnYjU2NSc6IEdMX1JHQjU2NVxuICB9O1xuXG4gIHZhciBjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMgPSB7fTtcblxuICBpZiAoZXh0ZW5zaW9ucy5leHRfc3JnYikge1xuICAgIHRleHR1cmVGb3JtYXRzLnNyZ2IgPSBHTF9TUkdCX0VYVDtcbiAgICB0ZXh0dXJlRm9ybWF0cy5zcmdiYSA9IEdMX1NSR0JfQUxQSEFfRVhUO1xuICB9XG5cbiAgaWYgKGV4dGVuc2lvbnMub2VzX3RleHR1cmVfZmxvYXQpIHtcbiAgICB0ZXh0dXJlVHlwZXMuZmxvYXQzMiA9IHRleHR1cmVUeXBlcy5mbG9hdCA9IEdMX0ZMT0FUJDQ7XG4gIH1cblxuICBpZiAoZXh0ZW5zaW9ucy5vZXNfdGV4dHVyZV9oYWxmX2Zsb2F0KSB7XG4gICAgdGV4dHVyZVR5cGVzWydmbG9hdDE2J10gPSB0ZXh0dXJlVHlwZXNbJ2hhbGYgZmxvYXQnXSA9IEdMX0hBTEZfRkxPQVRfT0VTJDE7XG4gIH1cblxuICBpZiAoZXh0ZW5zaW9ucy53ZWJnbF9kZXB0aF90ZXh0dXJlKSB7XG4gICAgZXh0ZW5kKHRleHR1cmVGb3JtYXRzLCB7XG4gICAgICAnZGVwdGgnOiBHTF9ERVBUSF9DT01QT05FTlQsXG4gICAgICAnZGVwdGggc3RlbmNpbCc6IEdMX0RFUFRIX1NURU5DSUxcbiAgICB9KTtcblxuICAgIGV4dGVuZCh0ZXh0dXJlVHlwZXMsIHtcbiAgICAgICd1aW50MTYnOiBHTF9VTlNJR05FRF9TSE9SVCQzLFxuICAgICAgJ3VpbnQzMic6IEdMX1VOU0lHTkVEX0lOVCQzLFxuICAgICAgJ2RlcHRoIHN0ZW5jaWwnOiBHTF9VTlNJR05FRF9JTlRfMjRfOF9XRUJHTCQxXG4gICAgfSk7XG4gIH1cblxuICBpZiAoZXh0ZW5zaW9ucy53ZWJnbF9jb21wcmVzc2VkX3RleHR1cmVfczN0Yykge1xuICAgIGV4dGVuZChjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMsIHtcbiAgICAgICdyZ2IgczN0YyBkeHQxJzogR0xfQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVCxcbiAgICAgICdyZ2JhIHMzdGMgZHh0MSc6IEdMX0NPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDFfRVhULFxuICAgICAgJ3JnYmEgczN0YyBkeHQzJzogR0xfQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQsXG4gICAgICAncmdiYSBzM3RjIGR4dDUnOiBHTF9DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGV4dGVuc2lvbnMud2ViZ2xfY29tcHJlc3NlZF90ZXh0dXJlX2F0Yykge1xuICAgIGV4dGVuZChjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMsIHtcbiAgICAgICdyZ2IgYXRjJzogR0xfQ09NUFJFU1NFRF9SR0JfQVRDX1dFQkdMLFxuICAgICAgJ3JnYmEgYXRjIGV4cGxpY2l0IGFscGhhJzogR0xfQ09NUFJFU1NFRF9SR0JBX0FUQ19FWFBMSUNJVF9BTFBIQV9XRUJHTCxcbiAgICAgICdyZ2JhIGF0YyBpbnRlcnBvbGF0ZWQgYWxwaGEnOiBHTF9DT01QUkVTU0VEX1JHQkFfQVRDX0lOVEVSUE9MQVRFRF9BTFBIQV9XRUJHTFxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGV4dGVuc2lvbnMud2ViZ2xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjKSB7XG4gICAgZXh0ZW5kKGNvbXByZXNzZWRUZXh0dXJlRm9ybWF0cywge1xuICAgICAgJ3JnYiBwdnJ0YyA0YnBwdjEnOiBHTF9DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HLFxuICAgICAgJ3JnYiBwdnJ0YyAyYnBwdjEnOiBHTF9DT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HLFxuICAgICAgJ3JnYmEgcHZydGMgNGJwcHYxJzogR0xfQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUcsXG4gICAgICAncmdiYSBwdnJ0YyAyYnBwdjEnOiBHTF9DT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNR1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGV4dGVuc2lvbnMud2ViZ2xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YzEpIHtcbiAgICBjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHNbJ3JnYiBldGMxJ10gPSBHTF9DT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMO1xuICB9XG5cbiAgLy8gQ29weSBvdmVyIGFsbCB0ZXh0dXJlIGZvcm1hdHNcbiAgdmFyIHN1cHBvcnRlZENvbXByZXNzZWRGb3JtYXRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXG4gICAgZ2wuZ2V0UGFyYW1ldGVyKEdMX0NPTVBSRVNTRURfVEVYVFVSRV9GT1JNQVRTKSk7XG4gIE9iamVjdC5rZXlzKGNvbXByZXNzZWRUZXh0dXJlRm9ybWF0cykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBmb3JtYXQgPSBjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHNbbmFtZV07XG4gICAgaWYgKHN1cHBvcnRlZENvbXByZXNzZWRGb3JtYXRzLmluZGV4T2YoZm9ybWF0KSA+PSAwKSB7XG4gICAgICB0ZXh0dXJlRm9ybWF0c1tuYW1lXSA9IGZvcm1hdDtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBzdXBwb3J0ZWRGb3JtYXRzID0gT2JqZWN0LmtleXModGV4dHVyZUZvcm1hdHMpO1xuICBsaW1pdHMudGV4dHVyZUZvcm1hdHMgPSBzdXBwb3J0ZWRGb3JtYXRzO1xuXG4gIC8vIGFzc29jaWF0ZSB3aXRoIGV2ZXJ5IGZvcm1hdCBzdHJpbmcgaXRzXG4gIC8vIGNvcnJlc3BvbmRpbmcgR0wtdmFsdWUuXG4gIHZhciB0ZXh0dXJlRm9ybWF0c0ludmVydCA9IFtdO1xuICBPYmplY3Qua2V5cyh0ZXh0dXJlRm9ybWF0cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHZhbCA9IHRleHR1cmVGb3JtYXRzW2tleV07XG4gICAgdGV4dHVyZUZvcm1hdHNJbnZlcnRbdmFsXSA9IGtleTtcbiAgfSk7XG5cbiAgLy8gYXNzb2NpYXRlIHdpdGggZXZlcnkgdHlwZSBzdHJpbmcgaXRzXG4gIC8vIGNvcnJlc3BvbmRpbmcgR0wtdmFsdWUuXG4gIHZhciB0ZXh0dXJlVHlwZXNJbnZlcnQgPSBbXTtcbiAgT2JqZWN0LmtleXModGV4dHVyZVR5cGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgdmFsID0gdGV4dHVyZVR5cGVzW2tleV07XG4gICAgdGV4dHVyZVR5cGVzSW52ZXJ0W3ZhbF0gPSBrZXk7XG4gIH0pO1xuXG4gIHZhciBtYWdGaWx0ZXJzSW52ZXJ0ID0gW107XG4gIE9iamVjdC5rZXlzKG1hZ0ZpbHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWwgPSBtYWdGaWx0ZXJzW2tleV07XG4gICAgbWFnRmlsdGVyc0ludmVydFt2YWxdID0ga2V5O1xuICB9KTtcblxuICB2YXIgbWluRmlsdGVyc0ludmVydCA9IFtdO1xuICBPYmplY3Qua2V5cyhtaW5GaWx0ZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgdmFsID0gbWluRmlsdGVyc1trZXldO1xuICAgIG1pbkZpbHRlcnNJbnZlcnRbdmFsXSA9IGtleTtcbiAgfSk7XG5cbiAgdmFyIHdyYXBNb2Rlc0ludmVydCA9IFtdO1xuICBPYmplY3Qua2V5cyh3cmFwTW9kZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWwgPSB3cmFwTW9kZXNba2V5XTtcbiAgICB3cmFwTW9kZXNJbnZlcnRbdmFsXSA9IGtleTtcbiAgfSk7XG5cbiAgLy8gY29sb3JGb3JtYXRzW10gZ2l2ZXMgdGhlIGZvcm1hdCAoY2hhbm5lbHMpIGFzc29jaWF0ZWQgdG8gYW5cbiAgLy8gaW50ZXJuYWxmb3JtYXRcbiAgdmFyIGNvbG9yRm9ybWF0cyA9IHN1cHBvcnRlZEZvcm1hdHMucmVkdWNlKGZ1bmN0aW9uIChjb2xvciwga2V5KSB7XG4gICAgdmFyIGdsZW51bSA9IHRleHR1cmVGb3JtYXRzW2tleV07XG4gICAgaWYgKGdsZW51bSA9PT0gR0xfTFVNSU5BTkNFIHx8XG4gICAgICAgIGdsZW51bSA9PT0gR0xfQUxQSEEgfHxcbiAgICAgICAgZ2xlbnVtID09PSBHTF9MVU1JTkFOQ0UgfHxcbiAgICAgICAgZ2xlbnVtID09PSBHTF9MVU1JTkFOQ0VfQUxQSEEgfHxcbiAgICAgICAgZ2xlbnVtID09PSBHTF9ERVBUSF9DT01QT05FTlQgfHxcbiAgICAgICAgZ2xlbnVtID09PSBHTF9ERVBUSF9TVEVOQ0lMKSB7XG4gICAgICBjb2xvcltnbGVudW1dID0gZ2xlbnVtO1xuICAgIH0gZWxzZSBpZiAoZ2xlbnVtID09PSBHTF9SR0I1X0ExIHx8IGtleS5pbmRleE9mKCdyZ2JhJykgPj0gMCkge1xuICAgICAgY29sb3JbZ2xlbnVtXSA9IEdMX1JHQkEkMTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29sb3JbZ2xlbnVtXSA9IEdMX1JHQjtcbiAgICB9XG4gICAgcmV0dXJuIGNvbG9yXG4gIH0sIHt9KTtcblxuICBmdW5jdGlvbiBUZXhGbGFncyAoKSB7XG4gICAgLy8gZm9ybWF0IGluZm9cbiAgICB0aGlzLmludGVybmFsZm9ybWF0ID0gR0xfUkdCQSQxO1xuICAgIHRoaXMuZm9ybWF0ID0gR0xfUkdCQSQxO1xuICAgIHRoaXMudHlwZSA9IEdMX1VOU0lHTkVEX0JZVEUkNTtcbiAgICB0aGlzLmNvbXByZXNzZWQgPSBmYWxzZTtcblxuICAgIC8vIHBpeGVsIHN0b3JhZ2VcbiAgICB0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBmYWxzZTtcbiAgICB0aGlzLmZsaXBZID0gZmFsc2U7XG4gICAgdGhpcy51bnBhY2tBbGlnbm1lbnQgPSAxO1xuICAgIHRoaXMuY29sb3JTcGFjZSA9IEdMX0JST1dTRVJfREVGQVVMVF9XRUJHTDtcblxuICAgIC8vIHNoYXBlIGluZm9cbiAgICB0aGlzLndpZHRoID0gMDtcbiAgICB0aGlzLmhlaWdodCA9IDA7XG4gICAgdGhpcy5jaGFubmVscyA9IDA7XG4gIH1cblxuICBmdW5jdGlvbiBjb3B5RmxhZ3MgKHJlc3VsdCwgb3RoZXIpIHtcbiAgICByZXN1bHQuaW50ZXJuYWxmb3JtYXQgPSBvdGhlci5pbnRlcm5hbGZvcm1hdDtcbiAgICByZXN1bHQuZm9ybWF0ID0gb3RoZXIuZm9ybWF0O1xuICAgIHJlc3VsdC50eXBlID0gb3RoZXIudHlwZTtcbiAgICByZXN1bHQuY29tcHJlc3NlZCA9IG90aGVyLmNvbXByZXNzZWQ7XG5cbiAgICByZXN1bHQucHJlbXVsdGlwbHlBbHBoYSA9IG90aGVyLnByZW11bHRpcGx5QWxwaGE7XG4gICAgcmVzdWx0LmZsaXBZID0gb3RoZXIuZmxpcFk7XG4gICAgcmVzdWx0LnVucGFja0FsaWdubWVudCA9IG90aGVyLnVucGFja0FsaWdubWVudDtcbiAgICByZXN1bHQuY29sb3JTcGFjZSA9IG90aGVyLmNvbG9yU3BhY2U7XG5cbiAgICByZXN1bHQud2lkdGggPSBvdGhlci53aWR0aDtcbiAgICByZXN1bHQuaGVpZ2h0ID0gb3RoZXIuaGVpZ2h0O1xuICAgIHJlc3VsdC5jaGFubmVscyA9IG90aGVyLmNoYW5uZWxzO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VGbGFncyAoZmxhZ3MsIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnIHx8ICFvcHRpb25zKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAoJ3ByZW11bHRpcGx5QWxwaGEnIGluIG9wdGlvbnMpIHtcbiAgICAgIGNoZWNrJDEudHlwZShvcHRpb25zLnByZW11bHRpcGx5QWxwaGEsICdib29sZWFuJyxcbiAgICAgICAgJ2ludmFsaWQgcHJlbXVsdGlwbHlBbHBoYScpO1xuICAgICAgZmxhZ3MucHJlbXVsdGlwbHlBbHBoYSA9IG9wdGlvbnMucHJlbXVsdGlwbHlBbHBoYTtcbiAgICB9XG5cbiAgICBpZiAoJ2ZsaXBZJyBpbiBvcHRpb25zKSB7XG4gICAgICBjaGVjayQxLnR5cGUob3B0aW9ucy5mbGlwWSwgJ2Jvb2xlYW4nLFxuICAgICAgICAnaW52YWxpZCB0ZXh0dXJlIGZsaXAnKTtcbiAgICAgIGZsYWdzLmZsaXBZID0gb3B0aW9ucy5mbGlwWTtcbiAgICB9XG5cbiAgICBpZiAoJ2FsaWdubWVudCcgaW4gb3B0aW9ucykge1xuICAgICAgY2hlY2skMS5vbmVPZihvcHRpb25zLmFsaWdubWVudCwgWzEsIDIsIDQsIDhdLFxuICAgICAgICAnaW52YWxpZCB0ZXh0dXJlIHVucGFjayBhbGlnbm1lbnQnKTtcbiAgICAgIGZsYWdzLnVucGFja0FsaWdubWVudCA9IG9wdGlvbnMuYWxpZ25tZW50O1xuICAgIH1cblxuICAgIGlmICgnY29sb3JTcGFjZScgaW4gb3B0aW9ucykge1xuICAgICAgY2hlY2skMS5wYXJhbWV0ZXIob3B0aW9ucy5jb2xvclNwYWNlLCBjb2xvclNwYWNlLFxuICAgICAgICAnaW52YWxpZCBjb2xvclNwYWNlJyk7XG4gICAgICBmbGFncy5jb2xvclNwYWNlID0gY29sb3JTcGFjZVtvcHRpb25zLmNvbG9yU3BhY2VdO1xuICAgIH1cblxuICAgIGlmICgndHlwZScgaW4gb3B0aW9ucykge1xuICAgICAgdmFyIHR5cGUgPSBvcHRpb25zLnR5cGU7XG4gICAgICBjaGVjayQxKGV4dGVuc2lvbnMub2VzX3RleHR1cmVfZmxvYXQgfHxcbiAgICAgICAgISh0eXBlID09PSAnZmxvYXQnIHx8IHR5cGUgPT09ICdmbG9hdDMyJyksXG4gICAgICAgICd5b3UgbXVzdCBlbmFibGUgdGhlIE9FU190ZXh0dXJlX2Zsb2F0IGV4dGVuc2lvbiBpbiBvcmRlciB0byB1c2UgZmxvYXRpbmcgcG9pbnQgdGV4dHVyZXMuJyk7XG4gICAgICBjaGVjayQxKGV4dGVuc2lvbnMub2VzX3RleHR1cmVfaGFsZl9mbG9hdCB8fFxuICAgICAgICAhKHR5cGUgPT09ICdoYWxmIGZsb2F0JyB8fCB0eXBlID09PSAnZmxvYXQxNicpLFxuICAgICAgICAneW91IG11c3QgZW5hYmxlIHRoZSBPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0IGV4dGVuc2lvbiBpbiBvcmRlciB0byB1c2UgMTYtYml0IGZsb2F0aW5nIHBvaW50IHRleHR1cmVzLicpO1xuICAgICAgY2hlY2skMShleHRlbnNpb25zLndlYmdsX2RlcHRoX3RleHR1cmUgfHxcbiAgICAgICAgISh0eXBlID09PSAndWludDE2JyB8fCB0eXBlID09PSAndWludDMyJyB8fCB0eXBlID09PSAnZGVwdGggc3RlbmNpbCcpLFxuICAgICAgICAneW91IG11c3QgZW5hYmxlIHRoZSBXRUJHTF9kZXB0aF90ZXh0dXJlIGV4dGVuc2lvbiBpbiBvcmRlciB0byB1c2UgZGVwdGgvc3RlbmNpbCB0ZXh0dXJlcy4nKTtcbiAgICAgIGNoZWNrJDEucGFyYW1ldGVyKHR5cGUsIHRleHR1cmVUeXBlcyxcbiAgICAgICAgJ2ludmFsaWQgdGV4dHVyZSB0eXBlJyk7XG4gICAgICBmbGFncy50eXBlID0gdGV4dHVyZVR5cGVzW3R5cGVdO1xuICAgIH1cblxuICAgIHZhciB3ID0gZmxhZ3Mud2lkdGg7XG4gICAgdmFyIGggPSBmbGFncy5oZWlnaHQ7XG4gICAgdmFyIGMgPSBmbGFncy5jaGFubmVscztcbiAgICB2YXIgaGFzQ2hhbm5lbHMgPSBmYWxzZTtcbiAgICBpZiAoJ3NoYXBlJyBpbiBvcHRpb25zKSB7XG4gICAgICBjaGVjayQxKEFycmF5LmlzQXJyYXkob3B0aW9ucy5zaGFwZSkgJiYgb3B0aW9ucy5zaGFwZS5sZW5ndGggPj0gMixcbiAgICAgICAgJ3NoYXBlIG11c3QgYmUgYW4gYXJyYXknKTtcbiAgICAgIHcgPSBvcHRpb25zLnNoYXBlWzBdO1xuICAgICAgaCA9IG9wdGlvbnMuc2hhcGVbMV07XG4gICAgICBpZiAob3B0aW9ucy5zaGFwZS5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgYyA9IG9wdGlvbnMuc2hhcGVbMl07XG4gICAgICAgIGNoZWNrJDEoYyA+IDAgJiYgYyA8PSA0LCAnaW52YWxpZCBudW1iZXIgb2YgY2hhbm5lbHMnKTtcbiAgICAgICAgaGFzQ2hhbm5lbHMgPSB0cnVlO1xuICAgICAgfVxuICAgICAgY2hlY2skMSh3ID49IDAgJiYgdyA8PSBsaW1pdHMubWF4VGV4dHVyZVNpemUsICdpbnZhbGlkIHdpZHRoJyk7XG4gICAgICBjaGVjayQxKGggPj0gMCAmJiBoIDw9IGxpbWl0cy5tYXhUZXh0dXJlU2l6ZSwgJ2ludmFsaWQgaGVpZ2h0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICgncmFkaXVzJyBpbiBvcHRpb25zKSB7XG4gICAgICAgIHcgPSBoID0gb3B0aW9ucy5yYWRpdXM7XG4gICAgICAgIGNoZWNrJDEodyA+PSAwICYmIHcgPD0gbGltaXRzLm1heFRleHR1cmVTaXplLCAnaW52YWxpZCByYWRpdXMnKTtcbiAgICAgIH1cbiAgICAgIGlmICgnd2lkdGgnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgdyA9IG9wdGlvbnMud2lkdGg7XG4gICAgICAgIGNoZWNrJDEodyA+PSAwICYmIHcgPD0gbGltaXRzLm1heFRleHR1cmVTaXplLCAnaW52YWxpZCB3aWR0aCcpO1xuICAgICAgfVxuICAgICAgaWYgKCdoZWlnaHQnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgaCA9IG9wdGlvbnMuaGVpZ2h0O1xuICAgICAgICBjaGVjayQxKGggPj0gMCAmJiBoIDw9IGxpbWl0cy5tYXhUZXh0dXJlU2l6ZSwgJ2ludmFsaWQgaGVpZ2h0Jyk7XG4gICAgICB9XG4gICAgICBpZiAoJ2NoYW5uZWxzJyBpbiBvcHRpb25zKSB7XG4gICAgICAgIGMgPSBvcHRpb25zLmNoYW5uZWxzO1xuICAgICAgICBjaGVjayQxKGMgPiAwICYmIGMgPD0gNCwgJ2ludmFsaWQgbnVtYmVyIG9mIGNoYW5uZWxzJyk7XG4gICAgICAgIGhhc0NoYW5uZWxzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZmxhZ3Mud2lkdGggPSB3IHwgMDtcbiAgICBmbGFncy5oZWlnaHQgPSBoIHwgMDtcbiAgICBmbGFncy5jaGFubmVscyA9IGMgfCAwO1xuXG4gICAgdmFyIGhhc0Zvcm1hdCA9IGZhbHNlO1xuICAgIGlmICgnZm9ybWF0JyBpbiBvcHRpb25zKSB7XG4gICAgICB2YXIgZm9ybWF0U3RyID0gb3B0aW9ucy5mb3JtYXQ7XG4gICAgICBjaGVjayQxKGV4dGVuc2lvbnMud2ViZ2xfZGVwdGhfdGV4dHVyZSB8fFxuICAgICAgICAhKGZvcm1hdFN0ciA9PT0gJ2RlcHRoJyB8fCBmb3JtYXRTdHIgPT09ICdkZXB0aCBzdGVuY2lsJyksXG4gICAgICAgICd5b3UgbXVzdCBlbmFibGUgdGhlIFdFQkdMX2RlcHRoX3RleHR1cmUgZXh0ZW5zaW9uIGluIG9yZGVyIHRvIHVzZSBkZXB0aC9zdGVuY2lsIHRleHR1cmVzLicpO1xuICAgICAgY2hlY2skMS5wYXJhbWV0ZXIoZm9ybWF0U3RyLCB0ZXh0dXJlRm9ybWF0cyxcbiAgICAgICAgJ2ludmFsaWQgdGV4dHVyZSBmb3JtYXQnKTtcbiAgICAgIHZhciBpbnRlcm5hbGZvcm1hdCA9IGZsYWdzLmludGVybmFsZm9ybWF0ID0gdGV4dHVyZUZvcm1hdHNbZm9ybWF0U3RyXTtcbiAgICAgIGZsYWdzLmZvcm1hdCA9IGNvbG9yRm9ybWF0c1tpbnRlcm5hbGZvcm1hdF07XG4gICAgICBpZiAoZm9ybWF0U3RyIGluIHRleHR1cmVUeXBlcykge1xuICAgICAgICBpZiAoISgndHlwZScgaW4gb3B0aW9ucykpIHtcbiAgICAgICAgICBmbGFncy50eXBlID0gdGV4dHVyZVR5cGVzW2Zvcm1hdFN0cl07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3JtYXRTdHIgaW4gY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzKSB7XG4gICAgICAgIGZsYWdzLmNvbXByZXNzZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaGFzRm9ybWF0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBSZWNvbmNpbGUgY2hhbm5lbHMgYW5kIGZvcm1hdFxuICAgIGlmICghaGFzQ2hhbm5lbHMgJiYgaGFzRm9ybWF0KSB7XG4gICAgICBmbGFncy5jaGFubmVscyA9IEZPUk1BVF9DSEFOTkVMU1tmbGFncy5mb3JtYXRdO1xuICAgIH0gZWxzZSBpZiAoaGFzQ2hhbm5lbHMgJiYgIWhhc0Zvcm1hdCkge1xuICAgICAgaWYgKGZsYWdzLmNoYW5uZWxzICE9PSBDSEFOTkVMU19GT1JNQVRbZmxhZ3MuZm9ybWF0XSkge1xuICAgICAgICBmbGFncy5mb3JtYXQgPSBmbGFncy5pbnRlcm5hbGZvcm1hdCA9IENIQU5ORUxTX0ZPUk1BVFtmbGFncy5jaGFubmVsc107XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChoYXNGb3JtYXQgJiYgaGFzQ2hhbm5lbHMpIHtcbiAgICAgIGNoZWNrJDEoXG4gICAgICAgIGZsYWdzLmNoYW5uZWxzID09PSBGT1JNQVRfQ0hBTk5FTFNbZmxhZ3MuZm9ybWF0XSxcbiAgICAgICAgJ251bWJlciBvZiBjaGFubmVscyBpbmNvbnNpc3RlbnQgd2l0aCBzcGVjaWZpZWQgZm9ybWF0Jyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0RmxhZ3MgKGZsYWdzKSB7XG4gICAgZ2wucGl4ZWxTdG9yZWkoR0xfVU5QQUNLX0ZMSVBfWV9XRUJHTCwgZmxhZ3MuZmxpcFkpO1xuICAgIGdsLnBpeGVsU3RvcmVpKEdMX1VOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTCwgZmxhZ3MucHJlbXVsdGlwbHlBbHBoYSk7XG4gICAgZ2wucGl4ZWxTdG9yZWkoR0xfVU5QQUNLX0NPTE9SU1BBQ0VfQ09OVkVSU0lPTl9XRUJHTCwgZmxhZ3MuY29sb3JTcGFjZSk7XG4gICAgZ2wucGl4ZWxTdG9yZWkoR0xfVU5QQUNLX0FMSUdOTUVOVCwgZmxhZ3MudW5wYWNrQWxpZ25tZW50KTtcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gVGV4IGltYWdlIGRhdGFcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICBmdW5jdGlvbiBUZXhJbWFnZSAoKSB7XG4gICAgVGV4RmxhZ3MuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMueE9mZnNldCA9IDA7XG4gICAgdGhpcy55T2Zmc2V0ID0gMDtcblxuICAgIC8vIGRhdGFcbiAgICB0aGlzLmRhdGEgPSBudWxsO1xuICAgIHRoaXMubmVlZHNGcmVlID0gZmFsc2U7XG5cbiAgICAvLyBodG1sIGVsZW1lbnRcbiAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuXG4gICAgLy8gY29weVRleEltYWdlIGluZm9cbiAgICB0aGlzLm5lZWRzQ29weSA9IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VJbWFnZSAoaW1hZ2UsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF0YSA9IG51bGw7XG4gICAgaWYgKGlzUGl4ZWxEYXRhKG9wdGlvbnMpKSB7XG4gICAgICBkYXRhID0gb3B0aW9ucztcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMpIHtcbiAgICAgIGNoZWNrJDEudHlwZShvcHRpb25zLCAnb2JqZWN0JywgJ2ludmFsaWQgcGl4ZWwgZGF0YSB0eXBlJyk7XG4gICAgICBwYXJzZUZsYWdzKGltYWdlLCBvcHRpb25zKTtcbiAgICAgIGlmICgneCcgaW4gb3B0aW9ucykge1xuICAgICAgICBpbWFnZS54T2Zmc2V0ID0gb3B0aW9ucy54IHwgMDtcbiAgICAgIH1cbiAgICAgIGlmICgneScgaW4gb3B0aW9ucykge1xuICAgICAgICBpbWFnZS55T2Zmc2V0ID0gb3B0aW9ucy55IHwgMDtcbiAgICAgIH1cbiAgICAgIGlmIChpc1BpeGVsRGF0YShvcHRpb25zLmRhdGEpKSB7XG4gICAgICAgIGRhdGEgPSBvcHRpb25zLmRhdGE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hlY2skMShcbiAgICAgICFpbWFnZS5jb21wcmVzc2VkIHx8XG4gICAgICBkYXRhIGluc3RhbmNlb2YgVWludDhBcnJheSxcbiAgICAgICdjb21wcmVzc2VkIHRleHR1cmUgZGF0YSBtdXN0IGJlIHN0b3JlZCBpbiBhIHVpbnQ4YXJyYXknKTtcblxuICAgIGlmIChvcHRpb25zLmNvcHkpIHtcbiAgICAgIGNoZWNrJDEoIWRhdGEsICdjYW4gbm90IHNwZWNpZnkgY29weSBhbmQgZGF0YSBmaWVsZCBmb3IgdGhlIHNhbWUgdGV4dHVyZScpO1xuICAgICAgdmFyIHZpZXdXID0gY29udGV4dFN0YXRlLnZpZXdwb3J0V2lkdGg7XG4gICAgICB2YXIgdmlld0ggPSBjb250ZXh0U3RhdGUudmlld3BvcnRIZWlnaHQ7XG4gICAgICBpbWFnZS53aWR0aCA9IGltYWdlLndpZHRoIHx8ICh2aWV3VyAtIGltYWdlLnhPZmZzZXQpO1xuICAgICAgaW1hZ2UuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0IHx8ICh2aWV3SCAtIGltYWdlLnlPZmZzZXQpO1xuICAgICAgaW1hZ2UubmVlZHNDb3B5ID0gdHJ1ZTtcbiAgICAgIGNoZWNrJDEoaW1hZ2UueE9mZnNldCA+PSAwICYmIGltYWdlLnhPZmZzZXQgPCB2aWV3VyAmJlxuICAgICAgICAgICAgaW1hZ2UueU9mZnNldCA+PSAwICYmIGltYWdlLnlPZmZzZXQgPCB2aWV3SCAmJlxuICAgICAgICAgICAgaW1hZ2Uud2lkdGggPiAwICYmIGltYWdlLndpZHRoIDw9IHZpZXdXICYmXG4gICAgICAgICAgICBpbWFnZS5oZWlnaHQgPiAwICYmIGltYWdlLmhlaWdodCA8PSB2aWV3SCxcbiAgICAgICAgICAgICdjb3B5IHRleHR1cmUgcmVhZCBvdXQgb2YgYm91bmRzJyk7XG4gICAgfSBlbHNlIGlmICghZGF0YSkge1xuICAgICAgaW1hZ2Uud2lkdGggPSBpbWFnZS53aWR0aCB8fCAxO1xuICAgICAgaW1hZ2UuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0IHx8IDE7XG4gICAgICBpbWFnZS5jaGFubmVscyA9IGltYWdlLmNoYW5uZWxzIHx8IDQ7XG4gICAgfSBlbHNlIGlmIChpc1R5cGVkQXJyYXkoZGF0YSkpIHtcbiAgICAgIGltYWdlLmNoYW5uZWxzID0gaW1hZ2UuY2hhbm5lbHMgfHwgNDtcbiAgICAgIGltYWdlLmRhdGEgPSBkYXRhO1xuICAgICAgaWYgKCEoJ3R5cGUnIGluIG9wdGlvbnMpICYmIGltYWdlLnR5cGUgPT09IEdMX1VOU0lHTkVEX0JZVEUkNSkge1xuICAgICAgICBpbWFnZS50eXBlID0gdHlwZWRBcnJheUNvZGUkMShkYXRhKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzTnVtZXJpY0FycmF5KGRhdGEpKSB7XG4gICAgICBpbWFnZS5jaGFubmVscyA9IGltYWdlLmNoYW5uZWxzIHx8IDQ7XG4gICAgICBjb252ZXJ0RGF0YShpbWFnZSwgZGF0YSk7XG4gICAgICBpbWFnZS5hbGlnbm1lbnQgPSAxO1xuICAgICAgaW1hZ2UubmVlZHNGcmVlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGlzTkRBcnJheUxpa2UoZGF0YSkpIHtcbiAgICAgIHZhciBhcnJheSA9IGRhdGEuZGF0YTtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkgJiYgaW1hZ2UudHlwZSA9PT0gR0xfVU5TSUdORURfQllURSQ1KSB7XG4gICAgICAgIGltYWdlLnR5cGUgPSB0eXBlZEFycmF5Q29kZSQxKGFycmF5KTtcbiAgICAgIH1cbiAgICAgIHZhciBzaGFwZSA9IGRhdGEuc2hhcGU7XG4gICAgICB2YXIgc3RyaWRlID0gZGF0YS5zdHJpZGU7XG4gICAgICB2YXIgc2hhcGVYLCBzaGFwZVksIHNoYXBlQywgc3RyaWRlWCwgc3RyaWRlWSwgc3RyaWRlQztcbiAgICAgIGlmIChzaGFwZS5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgc2hhcGVDID0gc2hhcGVbMl07XG4gICAgICAgIHN0cmlkZUMgPSBzdHJpZGVbMl07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGVjayQxKHNoYXBlLmxlbmd0aCA9PT0gMiwgJ2ludmFsaWQgbmRhcnJheSBwaXhlbCBkYXRhLCBtdXN0IGJlIDIgb3IgM0QnKTtcbiAgICAgICAgc2hhcGVDID0gMTtcbiAgICAgICAgc3RyaWRlQyA9IDE7XG4gICAgICB9XG4gICAgICBzaGFwZVggPSBzaGFwZVswXTtcbiAgICAgIHNoYXBlWSA9IHNoYXBlWzFdO1xuICAgICAgc3RyaWRlWCA9IHN0cmlkZVswXTtcbiAgICAgIHN0cmlkZVkgPSBzdHJpZGVbMV07XG4gICAgICBpbWFnZS5hbGlnbm1lbnQgPSAxO1xuICAgICAgaW1hZ2Uud2lkdGggPSBzaGFwZVg7XG4gICAgICBpbWFnZS5oZWlnaHQgPSBzaGFwZVk7XG4gICAgICBpbWFnZS5jaGFubmVscyA9IHNoYXBlQztcbiAgICAgIGltYWdlLmZvcm1hdCA9IGltYWdlLmludGVybmFsZm9ybWF0ID0gQ0hBTk5FTFNfRk9STUFUW3NoYXBlQ107XG4gICAgICBpbWFnZS5uZWVkc0ZyZWUgPSB0cnVlO1xuICAgICAgdHJhbnNwb3NlRGF0YShpbWFnZSwgYXJyYXksIHN0cmlkZVgsIHN0cmlkZVksIHN0cmlkZUMsIGRhdGEub2Zmc2V0KTtcbiAgICB9IGVsc2UgaWYgKGlzQ2FudmFzRWxlbWVudChkYXRhKSB8fCBpc0NvbnRleHQyRChkYXRhKSkge1xuICAgICAgaWYgKGlzQ2FudmFzRWxlbWVudChkYXRhKSkge1xuICAgICAgICBpbWFnZS5lbGVtZW50ID0gZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltYWdlLmVsZW1lbnQgPSBkYXRhLmNhbnZhcztcbiAgICAgIH1cbiAgICAgIGltYWdlLndpZHRoID0gaW1hZ2UuZWxlbWVudC53aWR0aDtcbiAgICAgIGltYWdlLmhlaWdodCA9IGltYWdlLmVsZW1lbnQuaGVpZ2h0O1xuICAgICAgaW1hZ2UuY2hhbm5lbHMgPSA0O1xuICAgIH0gZWxzZSBpZiAoaXNCaXRtYXAoZGF0YSkpIHtcbiAgICAgIGltYWdlLmVsZW1lbnQgPSBkYXRhO1xuICAgICAgaW1hZ2Uud2lkdGggPSBkYXRhLndpZHRoO1xuICAgICAgaW1hZ2UuaGVpZ2h0ID0gZGF0YS5oZWlnaHQ7XG4gICAgICBpbWFnZS5jaGFubmVscyA9IDQ7XG4gICAgfSBlbHNlIGlmIChpc0ltYWdlRWxlbWVudChkYXRhKSkge1xuICAgICAgaW1hZ2UuZWxlbWVudCA9IGRhdGE7XG4gICAgICBpbWFnZS53aWR0aCA9IGRhdGEubmF0dXJhbFdpZHRoO1xuICAgICAgaW1hZ2UuaGVpZ2h0ID0gZGF0YS5uYXR1cmFsSGVpZ2h0O1xuICAgICAgaW1hZ2UuY2hhbm5lbHMgPSA0O1xuICAgIH0gZWxzZSBpZiAoaXNWaWRlb0VsZW1lbnQoZGF0YSkpIHtcbiAgICAgIGltYWdlLmVsZW1lbnQgPSBkYXRhO1xuICAgICAgaW1hZ2Uud2lkdGggPSBkYXRhLnZpZGVvV2lkdGg7XG4gICAgICBpbWFnZS5oZWlnaHQgPSBkYXRhLnZpZGVvSGVpZ2h0O1xuICAgICAgaW1hZ2UuY2hhbm5lbHMgPSA0O1xuICAgIH0gZWxzZSBpZiAoaXNSZWN0QXJyYXkoZGF0YSkpIHtcbiAgICAgIHZhciB3ID0gaW1hZ2Uud2lkdGggfHwgZGF0YVswXS5sZW5ndGg7XG4gICAgICB2YXIgaCA9IGltYWdlLmhlaWdodCB8fCBkYXRhLmxlbmd0aDtcbiAgICAgIHZhciBjID0gaW1hZ2UuY2hhbm5lbHM7XG4gICAgICBpZiAoaXNBcnJheUxpa2UoZGF0YVswXVswXSkpIHtcbiAgICAgICAgYyA9IGMgfHwgZGF0YVswXVswXS5sZW5ndGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjID0gYyB8fCAxO1xuICAgICAgfVxuICAgICAgdmFyIGFycmF5U2hhcGUgPSBmbGF0dGVuVXRpbHMuc2hhcGUoZGF0YSk7XG4gICAgICB2YXIgbiA9IDE7XG4gICAgICBmb3IgKHZhciBkZCA9IDA7IGRkIDwgYXJyYXlTaGFwZS5sZW5ndGg7ICsrZGQpIHtcbiAgICAgICAgbiAqPSBhcnJheVNoYXBlW2RkXTtcbiAgICAgIH1cbiAgICAgIHZhciBhbGxvY0RhdGEgPSBwcmVDb252ZXJ0KGltYWdlLCBuKTtcbiAgICAgIGZsYXR0ZW5VdGlscy5mbGF0dGVuKGRhdGEsIGFycmF5U2hhcGUsICcnLCBhbGxvY0RhdGEpO1xuICAgICAgcG9zdENvbnZlcnQoaW1hZ2UsIGFsbG9jRGF0YSk7XG4gICAgICBpbWFnZS5hbGlnbm1lbnQgPSAxO1xuICAgICAgaW1hZ2Uud2lkdGggPSB3O1xuICAgICAgaW1hZ2UuaGVpZ2h0ID0gaDtcbiAgICAgIGltYWdlLmNoYW5uZWxzID0gYztcbiAgICAgIGltYWdlLmZvcm1hdCA9IGltYWdlLmludGVybmFsZm9ybWF0ID0gQ0hBTk5FTFNfRk9STUFUW2NdO1xuICAgICAgaW1hZ2UubmVlZHNGcmVlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaW1hZ2UudHlwZSA9PT0gR0xfRkxPQVQkNCkge1xuICAgICAgY2hlY2skMShsaW1pdHMuZXh0ZW5zaW9ucy5pbmRleE9mKCdvZXNfdGV4dHVyZV9mbG9hdCcpID49IDAsXG4gICAgICAgICdvZXNfdGV4dHVyZV9mbG9hdCBleHRlbnNpb24gbm90IGVuYWJsZWQnKTtcbiAgICB9IGVsc2UgaWYgKGltYWdlLnR5cGUgPT09IEdMX0hBTEZfRkxPQVRfT0VTJDEpIHtcbiAgICAgIGNoZWNrJDEobGltaXRzLmV4dGVuc2lvbnMuaW5kZXhPZignb2VzX3RleHR1cmVfaGFsZl9mbG9hdCcpID49IDAsXG4gICAgICAgICdvZXNfdGV4dHVyZV9oYWxmX2Zsb2F0IGV4dGVuc2lvbiBub3QgZW5hYmxlZCcpO1xuICAgIH1cblxuICAgIC8vIGRvIGNvbXByZXNzZWQgdGV4dHVyZSAgdmFsaWRhdGlvbiBoZXJlLlxuICB9XG5cbiAgZnVuY3Rpb24gc2V0SW1hZ2UgKGluZm8sIHRhcmdldCwgbWlwbGV2ZWwpIHtcbiAgICB2YXIgZWxlbWVudCA9IGluZm8uZWxlbWVudDtcbiAgICB2YXIgZGF0YSA9IGluZm8uZGF0YTtcbiAgICB2YXIgaW50ZXJuYWxmb3JtYXQgPSBpbmZvLmludGVybmFsZm9ybWF0O1xuICAgIHZhciBmb3JtYXQgPSBpbmZvLmZvcm1hdDtcbiAgICB2YXIgdHlwZSA9IGluZm8udHlwZTtcbiAgICB2YXIgd2lkdGggPSBpbmZvLndpZHRoO1xuICAgIHZhciBoZWlnaHQgPSBpbmZvLmhlaWdodDtcbiAgICB2YXIgY2hhbm5lbHMgPSBpbmZvLmNoYW5uZWxzO1xuXG4gICAgc2V0RmxhZ3MoaW5mbyk7XG5cbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgZ2wudGV4SW1hZ2UyRCh0YXJnZXQsIG1pcGxldmVsLCBmb3JtYXQsIGZvcm1hdCwgdHlwZSwgZWxlbWVudCk7XG4gICAgfSBlbHNlIGlmIChpbmZvLmNvbXByZXNzZWQpIHtcbiAgICAgIGdsLmNvbXByZXNzZWRUZXhJbWFnZTJEKHRhcmdldCwgbWlwbGV2ZWwsIGludGVybmFsZm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCAwLCBkYXRhKTtcbiAgICB9IGVsc2UgaWYgKGluZm8ubmVlZHNDb3B5KSB7XG4gICAgICByZWdsUG9sbCgpO1xuICAgICAgZ2wuY29weVRleEltYWdlMkQoXG4gICAgICAgIHRhcmdldCwgbWlwbGV2ZWwsIGZvcm1hdCwgaW5mby54T2Zmc2V0LCBpbmZvLnlPZmZzZXQsIHdpZHRoLCBoZWlnaHQsIDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbnVsbERhdGEgPSAhZGF0YTtcbiAgICAgIGlmIChudWxsRGF0YSkge1xuICAgICAgICBkYXRhID0gcG9vbC56ZXJvLmFsbG9jVHlwZSh0eXBlLCB3aWR0aCAqIGhlaWdodCAqIGNoYW5uZWxzKTtcbiAgICAgIH1cblxuICAgICAgZ2wudGV4SW1hZ2UyRCh0YXJnZXQsIG1pcGxldmVsLCBmb3JtYXQsIHdpZHRoLCBoZWlnaHQsIDAsIGZvcm1hdCwgdHlwZSwgZGF0YSk7XG5cbiAgICAgIGlmIChudWxsRGF0YSAmJiBkYXRhKSB7XG4gICAgICAgIHBvb2wuemVyby5mcmVlVHlwZShkYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRTdWJJbWFnZSAoaW5mbywgdGFyZ2V0LCB4LCB5LCBtaXBsZXZlbCkge1xuICAgIHZhciBlbGVtZW50ID0gaW5mby5lbGVtZW50O1xuICAgIHZhciBkYXRhID0gaW5mby5kYXRhO1xuICAgIHZhciBpbnRlcm5hbGZvcm1hdCA9IGluZm8uaW50ZXJuYWxmb3JtYXQ7XG4gICAgdmFyIGZvcm1hdCA9IGluZm8uZm9ybWF0O1xuICAgIHZhciB0eXBlID0gaW5mby50eXBlO1xuICAgIHZhciB3aWR0aCA9IGluZm8ud2lkdGg7XG4gICAgdmFyIGhlaWdodCA9IGluZm8uaGVpZ2h0O1xuXG4gICAgc2V0RmxhZ3MoaW5mbyk7XG5cbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgZ2wudGV4U3ViSW1hZ2UyRChcbiAgICAgICAgdGFyZ2V0LCBtaXBsZXZlbCwgeCwgeSwgZm9ybWF0LCB0eXBlLCBlbGVtZW50KTtcbiAgICB9IGVsc2UgaWYgKGluZm8uY29tcHJlc3NlZCkge1xuICAgICAgZ2wuY29tcHJlc3NlZFRleFN1YkltYWdlMkQoXG4gICAgICAgIHRhcmdldCwgbWlwbGV2ZWwsIHgsIHksIGludGVybmFsZm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCBkYXRhKTtcbiAgICB9IGVsc2UgaWYgKGluZm8ubmVlZHNDb3B5KSB7XG4gICAgICByZWdsUG9sbCgpO1xuICAgICAgZ2wuY29weVRleFN1YkltYWdlMkQoXG4gICAgICAgIHRhcmdldCwgbWlwbGV2ZWwsIHgsIHksIGluZm8ueE9mZnNldCwgaW5mby55T2Zmc2V0LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2wudGV4U3ViSW1hZ2UyRChcbiAgICAgICAgdGFyZ2V0LCBtaXBsZXZlbCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgZm9ybWF0LCB0eXBlLCBkYXRhKTtcbiAgICB9XG4gIH1cblxuICAvLyB0ZXhJbWFnZSBwb29sXG4gIHZhciBpbWFnZVBvb2wgPSBbXTtcblxuICBmdW5jdGlvbiBhbGxvY0ltYWdlICgpIHtcbiAgICByZXR1cm4gaW1hZ2VQb29sLnBvcCgpIHx8IG5ldyBUZXhJbWFnZSgpXG4gIH1cblxuICBmdW5jdGlvbiBmcmVlSW1hZ2UgKGltYWdlKSB7XG4gICAgaWYgKGltYWdlLm5lZWRzRnJlZSkge1xuICAgICAgcG9vbC5mcmVlVHlwZShpbWFnZS5kYXRhKTtcbiAgICB9XG4gICAgVGV4SW1hZ2UuY2FsbChpbWFnZSk7XG4gICAgaW1hZ2VQb29sLnB1c2goaW1hZ2UpO1xuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBNaXAgbWFwXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgZnVuY3Rpb24gTWlwTWFwICgpIHtcbiAgICBUZXhGbGFncy5jYWxsKHRoaXMpO1xuXG4gICAgdGhpcy5nZW5NaXBtYXBzID0gZmFsc2U7XG4gICAgdGhpcy5taXBtYXBIaW50ID0gR0xfRE9OVF9DQVJFO1xuICAgIHRoaXMubWlwbWFzayA9IDA7XG4gICAgdGhpcy5pbWFnZXMgPSBBcnJheSgxNik7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1pcE1hcEZyb21TaGFwZSAobWlwbWFwLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgdmFyIGltZyA9IG1pcG1hcC5pbWFnZXNbMF0gPSBhbGxvY0ltYWdlKCk7XG4gICAgbWlwbWFwLm1pcG1hc2sgPSAxO1xuICAgIGltZy53aWR0aCA9IG1pcG1hcC53aWR0aCA9IHdpZHRoO1xuICAgIGltZy5oZWlnaHQgPSBtaXBtYXAuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIGltZy5jaGFubmVscyA9IG1pcG1hcC5jaGFubmVscyA9IDQ7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1pcE1hcEZyb21PYmplY3QgKG1pcG1hcCwgb3B0aW9ucykge1xuICAgIHZhciBpbWdEYXRhID0gbnVsbDtcbiAgICBpZiAoaXNQaXhlbERhdGEob3B0aW9ucykpIHtcbiAgICAgIGltZ0RhdGEgPSBtaXBtYXAuaW1hZ2VzWzBdID0gYWxsb2NJbWFnZSgpO1xuICAgICAgY29weUZsYWdzKGltZ0RhdGEsIG1pcG1hcCk7XG4gICAgICBwYXJzZUltYWdlKGltZ0RhdGEsIG9wdGlvbnMpO1xuICAgICAgbWlwbWFwLm1pcG1hc2sgPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZUZsYWdzKG1pcG1hcCwgb3B0aW9ucyk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zLm1pcG1hcCkpIHtcbiAgICAgICAgdmFyIG1pcERhdGEgPSBvcHRpb25zLm1pcG1hcDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaXBEYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgaW1nRGF0YSA9IG1pcG1hcC5pbWFnZXNbaV0gPSBhbGxvY0ltYWdlKCk7XG4gICAgICAgICAgY29weUZsYWdzKGltZ0RhdGEsIG1pcG1hcCk7XG4gICAgICAgICAgaW1nRGF0YS53aWR0aCA+Pj0gaTtcbiAgICAgICAgICBpbWdEYXRhLmhlaWdodCA+Pj0gaTtcbiAgICAgICAgICBwYXJzZUltYWdlKGltZ0RhdGEsIG1pcERhdGFbaV0pO1xuICAgICAgICAgIG1pcG1hcC5taXBtYXNrIHw9ICgxIDw8IGkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbWdEYXRhID0gbWlwbWFwLmltYWdlc1swXSA9IGFsbG9jSW1hZ2UoKTtcbiAgICAgICAgY29weUZsYWdzKGltZ0RhdGEsIG1pcG1hcCk7XG4gICAgICAgIHBhcnNlSW1hZ2UoaW1nRGF0YSwgb3B0aW9ucyk7XG4gICAgICAgIG1pcG1hcC5taXBtYXNrID0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29weUZsYWdzKG1pcG1hcCwgbWlwbWFwLmltYWdlc1swXSk7XG5cbiAgICAvLyBGb3IgdGV4dHVyZXMgb2YgdGhlIGNvbXByZXNzZWQgZm9ybWF0IFdFQkdMX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjXG4gICAgLy8gd2UgbXVzdCBoYXZlIHRoYXRcbiAgICAvL1xuICAgIC8vIFwiV2hlbiBsZXZlbCBlcXVhbHMgemVybyB3aWR0aCBhbmQgaGVpZ2h0IG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0LlxuICAgIC8vIFdoZW4gbGV2ZWwgaXMgZ3JlYXRlciB0aGFuIDAgd2lkdGggYW5kIGhlaWdodCBtdXN0IGJlIDAsIDEsIDIgb3IgYSBtdWx0aXBsZSBvZiA0LiBcIlxuICAgIC8vXG4gICAgLy8gYnV0IHdlIGRvIG5vdCB5ZXQgc3VwcG9ydCBoYXZpbmcgbXVsdGlwbGUgbWlwbWFwIGxldmVscyBmb3IgY29tcHJlc3NlZCB0ZXh0dXJlcyxcbiAgICAvLyBzbyB3ZSBvbmx5IHRlc3QgZm9yIGxldmVsIHplcm8uXG5cbiAgICBpZiAobWlwbWFwLmNvbXByZXNzZWQgJiZcbiAgICAgICAgKG1pcG1hcC5pbnRlcm5hbGZvcm1hdCA9PT0gR0xfQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVCkgfHxcbiAgICAgICAgKG1pcG1hcC5pbnRlcm5hbGZvcm1hdCA9PT0gR0xfQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQpIHx8XG4gICAgICAgIChtaXBtYXAuaW50ZXJuYWxmb3JtYXQgPT09IEdMX0NPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUKSB8fFxuICAgICAgICAobWlwbWFwLmludGVybmFsZm9ybWF0ID09PSBHTF9DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVCkpIHtcbiAgICAgIGNoZWNrJDEobWlwbWFwLndpZHRoICUgNCA9PT0gMCAmJlxuICAgICAgICAgICAgbWlwbWFwLmhlaWdodCAlIDQgPT09IDAsXG4gICAgICAgICAgICAnZm9yIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXRzLCBtaXBtYXAgbGV2ZWwgMCBtdXN0IGhhdmUgd2lkdGggYW5kIGhlaWdodCB0aGF0IGFyZSBhIG11bHRpcGxlIG9mIDQnKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRNaXBNYXAgKG1pcG1hcCwgdGFyZ2V0KSB7XG4gICAgdmFyIGltYWdlcyA9IG1pcG1hcC5pbWFnZXM7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbWFnZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmICghaW1hZ2VzW2ldKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgc2V0SW1hZ2UoaW1hZ2VzW2ldLCB0YXJnZXQsIGkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBtaXBQb29sID0gW107XG5cbiAgZnVuY3Rpb24gYWxsb2NNaXBNYXAgKCkge1xuICAgIHZhciByZXN1bHQgPSBtaXBQb29sLnBvcCgpIHx8IG5ldyBNaXBNYXAoKTtcbiAgICBUZXhGbGFncy5jYWxsKHJlc3VsdCk7XG4gICAgcmVzdWx0Lm1pcG1hc2sgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgcmVzdWx0LmltYWdlc1tpXSA9IG51bGw7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGZ1bmN0aW9uIGZyZWVNaXBNYXAgKG1pcG1hcCkge1xuICAgIHZhciBpbWFnZXMgPSBtaXBtYXAuaW1hZ2VzO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW1hZ2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAoaW1hZ2VzW2ldKSB7XG4gICAgICAgIGZyZWVJbWFnZShpbWFnZXNbaV0pO1xuICAgICAgfVxuICAgICAgaW1hZ2VzW2ldID0gbnVsbDtcbiAgICB9XG4gICAgbWlwUG9vbC5wdXNoKG1pcG1hcCk7XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFRleCBpbmZvXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgZnVuY3Rpb24gVGV4SW5mbyAoKSB7XG4gICAgdGhpcy5taW5GaWx0ZXIgPSBHTF9ORUFSRVNUJDE7XG4gICAgdGhpcy5tYWdGaWx0ZXIgPSBHTF9ORUFSRVNUJDE7XG5cbiAgICB0aGlzLndyYXBTID0gR0xfQ0xBTVBfVE9fRURHRSQxO1xuICAgIHRoaXMud3JhcFQgPSBHTF9DTEFNUF9UT19FREdFJDE7XG5cbiAgICB0aGlzLmFuaXNvdHJvcGljID0gMTtcblxuICAgIHRoaXMuZ2VuTWlwbWFwcyA9IGZhbHNlO1xuICAgIHRoaXMubWlwbWFwSGludCA9IEdMX0RPTlRfQ0FSRTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlVGV4SW5mbyAoaW5mbywgb3B0aW9ucykge1xuICAgIGlmICgnbWluJyBpbiBvcHRpb25zKSB7XG4gICAgICB2YXIgbWluRmlsdGVyID0gb3B0aW9ucy5taW47XG4gICAgICBjaGVjayQxLnBhcmFtZXRlcihtaW5GaWx0ZXIsIG1pbkZpbHRlcnMpO1xuICAgICAgaW5mby5taW5GaWx0ZXIgPSBtaW5GaWx0ZXJzW21pbkZpbHRlcl07XG4gICAgICBpZiAoTUlQTUFQX0ZJTFRFUlMuaW5kZXhPZihpbmZvLm1pbkZpbHRlcikgPj0gMCAmJiAhKCdmYWNlcycgaW4gb3B0aW9ucykpIHtcbiAgICAgICAgaW5mby5nZW5NaXBtYXBzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoJ21hZycgaW4gb3B0aW9ucykge1xuICAgICAgdmFyIG1hZ0ZpbHRlciA9IG9wdGlvbnMubWFnO1xuICAgICAgY2hlY2skMS5wYXJhbWV0ZXIobWFnRmlsdGVyLCBtYWdGaWx0ZXJzKTtcbiAgICAgIGluZm8ubWFnRmlsdGVyID0gbWFnRmlsdGVyc1ttYWdGaWx0ZXJdO1xuICAgIH1cblxuICAgIHZhciB3cmFwUyA9IGluZm8ud3JhcFM7XG4gICAgdmFyIHdyYXBUID0gaW5mby53cmFwVDtcbiAgICBpZiAoJ3dyYXAnIGluIG9wdGlvbnMpIHtcbiAgICAgIHZhciB3cmFwID0gb3B0aW9ucy53cmFwO1xuICAgICAgaWYgKHR5cGVvZiB3cmFwID09PSAnc3RyaW5nJykge1xuICAgICAgICBjaGVjayQxLnBhcmFtZXRlcih3cmFwLCB3cmFwTW9kZXMpO1xuICAgICAgICB3cmFwUyA9IHdyYXBUID0gd3JhcE1vZGVzW3dyYXBdO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHdyYXApKSB7XG4gICAgICAgIGNoZWNrJDEucGFyYW1ldGVyKHdyYXBbMF0sIHdyYXBNb2Rlcyk7XG4gICAgICAgIGNoZWNrJDEucGFyYW1ldGVyKHdyYXBbMV0sIHdyYXBNb2Rlcyk7XG4gICAgICAgIHdyYXBTID0gd3JhcE1vZGVzW3dyYXBbMF1dO1xuICAgICAgICB3cmFwVCA9IHdyYXBNb2Rlc1t3cmFwWzFdXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCd3cmFwUycgaW4gb3B0aW9ucykge1xuICAgICAgICB2YXIgb3B0V3JhcFMgPSBvcHRpb25zLndyYXBTO1xuICAgICAgICBjaGVjayQxLnBhcmFtZXRlcihvcHRXcmFwUywgd3JhcE1vZGVzKTtcbiAgICAgICAgd3JhcFMgPSB3cmFwTW9kZXNbb3B0V3JhcFNdO1xuICAgICAgfVxuICAgICAgaWYgKCd3cmFwVCcgaW4gb3B0aW9ucykge1xuICAgICAgICB2YXIgb3B0V3JhcFQgPSBvcHRpb25zLndyYXBUO1xuICAgICAgICBjaGVjayQxLnBhcmFtZXRlcihvcHRXcmFwVCwgd3JhcE1vZGVzKTtcbiAgICAgICAgd3JhcFQgPSB3cmFwTW9kZXNbb3B0V3JhcFRdO1xuICAgICAgfVxuICAgIH1cbiAgICBpbmZvLndyYXBTID0gd3JhcFM7XG4gICAgaW5mby53cmFwVCA9IHdyYXBUO1xuXG4gICAgaWYgKCdhbmlzb3Ryb3BpYycgaW4gb3B0aW9ucykge1xuICAgICAgdmFyIGFuaXNvdHJvcGljID0gb3B0aW9ucy5hbmlzb3Ryb3BpYztcbiAgICAgIGNoZWNrJDEodHlwZW9mIGFuaXNvdHJvcGljID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgYW5pc290cm9waWMgPj0gMSAmJiBhbmlzb3Ryb3BpYyA8PSBsaW1pdHMubWF4QW5pc290cm9waWMsXG4gICAgICAgICdhbmlzbyBzYW1wbGVzIG11c3QgYmUgYmV0d2VlbiAxIGFuZCAnKTtcbiAgICAgIGluZm8uYW5pc290cm9waWMgPSBvcHRpb25zLmFuaXNvdHJvcGljO1xuICAgIH1cblxuICAgIGlmICgnbWlwbWFwJyBpbiBvcHRpb25zKSB7XG4gICAgICB2YXIgaGFzTWlwTWFwID0gZmFsc2U7XG4gICAgICBzd2l0Y2ggKHR5cGVvZiBvcHRpb25zLm1pcG1hcCkge1xuICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgIGNoZWNrJDEucGFyYW1ldGVyKG9wdGlvbnMubWlwbWFwLCBtaXBtYXBIaW50LFxuICAgICAgICAgICAgJ2ludmFsaWQgbWlwbWFwIGhpbnQnKTtcbiAgICAgICAgICBpbmZvLm1pcG1hcEhpbnQgPSBtaXBtYXBIaW50W29wdGlvbnMubWlwbWFwXTtcbiAgICAgICAgICBpbmZvLmdlbk1pcG1hcHMgPSB0cnVlO1xuICAgICAgICAgIGhhc01pcE1hcCA9IHRydWU7XG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgICBoYXNNaXBNYXAgPSBpbmZvLmdlbk1pcG1hcHMgPSBvcHRpb25zLm1pcG1hcDtcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgY2hlY2skMShBcnJheS5pc0FycmF5KG9wdGlvbnMubWlwbWFwKSwgJ2ludmFsaWQgbWlwbWFwIHR5cGUnKTtcbiAgICAgICAgICBpbmZvLmdlbk1pcG1hcHMgPSBmYWxzZTtcbiAgICAgICAgICBoYXNNaXBNYXAgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjaGVjayQxLnJhaXNlKCdpbnZhbGlkIG1pcG1hcCB0eXBlJyk7XG4gICAgICB9XG4gICAgICBpZiAoaGFzTWlwTWFwICYmICEoJ21pbicgaW4gb3B0aW9ucykpIHtcbiAgICAgICAgaW5mby5taW5GaWx0ZXIgPSBHTF9ORUFSRVNUX01JUE1BUF9ORUFSRVNUJDE7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0VGV4SW5mbyAoaW5mbywgdGFyZ2V0KSB7XG4gICAgZ2wudGV4UGFyYW1ldGVyaSh0YXJnZXQsIEdMX1RFWFRVUkVfTUlOX0ZJTFRFUiwgaW5mby5taW5GaWx0ZXIpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkodGFyZ2V0LCBHTF9URVhUVVJFX01BR19GSUxURVIsIGluZm8ubWFnRmlsdGVyKTtcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKHRhcmdldCwgR0xfVEVYVFVSRV9XUkFQX1MsIGluZm8ud3JhcFMpO1xuICAgIGdsLnRleFBhcmFtZXRlcmkodGFyZ2V0LCBHTF9URVhUVVJFX1dSQVBfVCwgaW5mby53cmFwVCk7XG4gICAgaWYgKGV4dGVuc2lvbnMuZXh0X3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljKSB7XG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKHRhcmdldCwgR0xfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIGluZm8uYW5pc290cm9waWMpO1xuICAgIH1cbiAgICBpZiAoaW5mby5nZW5NaXBtYXBzKSB7XG4gICAgICBnbC5oaW50KEdMX0dFTkVSQVRFX01JUE1BUF9ISU5ULCBpbmZvLm1pcG1hcEhpbnQpO1xuICAgICAgZ2wuZ2VuZXJhdGVNaXBtYXAodGFyZ2V0KTtcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEZ1bGwgdGV4dHVyZSBvYmplY3RcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB2YXIgdGV4dHVyZUNvdW50ID0gMDtcbiAgdmFyIHRleHR1cmVTZXQgPSB7fTtcbiAgdmFyIG51bVRleFVuaXRzID0gbGltaXRzLm1heFRleHR1cmVVbml0cztcbiAgdmFyIHRleHR1cmVVbml0cyA9IEFycmF5KG51bVRleFVuaXRzKS5tYXAoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBudWxsXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIFJFR0xUZXh0dXJlICh0YXJnZXQpIHtcbiAgICBUZXhGbGFncy5jYWxsKHRoaXMpO1xuICAgIHRoaXMubWlwbWFzayA9IDA7XG4gICAgdGhpcy5pbnRlcm5hbGZvcm1hdCA9IEdMX1JHQkEkMTtcblxuICAgIHRoaXMuaWQgPSB0ZXh0dXJlQ291bnQrKztcblxuICAgIHRoaXMucmVmQ291bnQgPSAxO1xuXG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy50ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuXG4gICAgdGhpcy51bml0ID0gLTE7XG4gICAgdGhpcy5iaW5kQ291bnQgPSAwO1xuXG4gICAgdGhpcy50ZXhJbmZvID0gbmV3IFRleEluZm8oKTtcblxuICAgIGlmIChjb25maWcucHJvZmlsZSkge1xuICAgICAgdGhpcy5zdGF0cyA9IHtzaXplOiAwfTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB0ZW1wQmluZCAodGV4dHVyZSkge1xuICAgIGdsLmFjdGl2ZVRleHR1cmUoR0xfVEVYVFVSRTAkMSk7XG4gICAgZ2wuYmluZFRleHR1cmUodGV4dHVyZS50YXJnZXQsIHRleHR1cmUudGV4dHVyZSk7XG4gIH1cblxuICBmdW5jdGlvbiB0ZW1wUmVzdG9yZSAoKSB7XG4gICAgdmFyIHByZXYgPSB0ZXh0dXJlVW5pdHNbMF07XG4gICAgaWYgKHByZXYpIHtcbiAgICAgIGdsLmJpbmRUZXh0dXJlKHByZXYudGFyZ2V0LCBwcmV2LnRleHR1cmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnbC5iaW5kVGV4dHVyZShHTF9URVhUVVJFXzJEJDEsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3kgKHRleHR1cmUpIHtcbiAgICB2YXIgaGFuZGxlID0gdGV4dHVyZS50ZXh0dXJlO1xuICAgIGNoZWNrJDEoaGFuZGxlLCAnbXVzdCBub3QgZG91YmxlIGRlc3Ryb3kgdGV4dHVyZScpO1xuICAgIHZhciB1bml0ID0gdGV4dHVyZS51bml0O1xuICAgIHZhciB0YXJnZXQgPSB0ZXh0dXJlLnRhcmdldDtcbiAgICBpZiAodW5pdCA+PSAwKSB7XG4gICAgICBnbC5hY3RpdmVUZXh0dXJlKEdMX1RFWFRVUkUwJDEgKyB1bml0KTtcbiAgICAgIGdsLmJpbmRUZXh0dXJlKHRhcmdldCwgbnVsbCk7XG4gICAgICB0ZXh0dXJlVW5pdHNbdW5pdF0gPSBudWxsO1xuICAgIH1cbiAgICBnbC5kZWxldGVUZXh0dXJlKGhhbmRsZSk7XG4gICAgdGV4dHVyZS50ZXh0dXJlID0gbnVsbDtcbiAgICB0ZXh0dXJlLnBhcmFtcyA9IG51bGw7XG4gICAgdGV4dHVyZS5waXhlbHMgPSBudWxsO1xuICAgIHRleHR1cmUucmVmQ291bnQgPSAwO1xuICAgIGRlbGV0ZSB0ZXh0dXJlU2V0W3RleHR1cmUuaWRdO1xuICAgIHN0YXRzLnRleHR1cmVDb3VudC0tO1xuICB9XG5cbiAgZXh0ZW5kKFJFR0xUZXh0dXJlLnByb3RvdHlwZSwge1xuICAgIGJpbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0ZXh0dXJlID0gdGhpcztcbiAgICAgIHRleHR1cmUuYmluZENvdW50ICs9IDE7XG4gICAgICB2YXIgdW5pdCA9IHRleHR1cmUudW5pdDtcbiAgICAgIGlmICh1bml0IDwgMCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVRleFVuaXRzOyArK2kpIHtcbiAgICAgICAgICB2YXIgb3RoZXIgPSB0ZXh0dXJlVW5pdHNbaV07XG4gICAgICAgICAgaWYgKG90aGVyKSB7XG4gICAgICAgICAgICBpZiAob3RoZXIuYmluZENvdW50ID4gMCkge1xuICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3RoZXIudW5pdCA9IC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0ZXh0dXJlVW5pdHNbaV0gPSB0ZXh0dXJlO1xuICAgICAgICAgIHVuaXQgPSBpO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVuaXQgPj0gbnVtVGV4VW5pdHMpIHtcbiAgICAgICAgICBjaGVjayQxLnJhaXNlKCdpbnN1ZmZpY2llbnQgbnVtYmVyIG9mIHRleHR1cmUgdW5pdHMnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLnByb2ZpbGUgJiYgc3RhdHMubWF4VGV4dHVyZVVuaXRzIDwgKHVuaXQgKyAxKSkge1xuICAgICAgICAgIHN0YXRzLm1heFRleHR1cmVVbml0cyA9IHVuaXQgKyAxOyAvLyArMSwgc2luY2UgdGhlIHVuaXRzIGFyZSB6ZXJvLWJhc2VkXG4gICAgICAgIH1cbiAgICAgICAgdGV4dHVyZS51bml0ID0gdW5pdDtcbiAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZShHTF9URVhUVVJFMCQxICsgdW5pdCk7XG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKHRleHR1cmUudGFyZ2V0LCB0ZXh0dXJlLnRleHR1cmUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuaXRcbiAgICB9LFxuXG4gICAgdW5iaW5kOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmJpbmRDb3VudCAtPSAxO1xuICAgIH0sXG5cbiAgICBkZWNSZWY6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICgtLXRoaXMucmVmQ291bnQgPD0gMCkge1xuICAgICAgICBkZXN0cm95KHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gY3JlYXRlVGV4dHVyZTJEIChhLCBiKSB7XG4gICAgdmFyIHRleHR1cmUgPSBuZXcgUkVHTFRleHR1cmUoR0xfVEVYVFVSRV8yRCQxKTtcbiAgICB0ZXh0dXJlU2V0W3RleHR1cmUuaWRdID0gdGV4dHVyZTtcbiAgICBzdGF0cy50ZXh0dXJlQ291bnQrKztcblxuICAgIGZ1bmN0aW9uIHJlZ2xUZXh0dXJlMkQgKGEsIGIpIHtcbiAgICAgIHZhciB0ZXhJbmZvID0gdGV4dHVyZS50ZXhJbmZvO1xuICAgICAgVGV4SW5mby5jYWxsKHRleEluZm8pO1xuICAgICAgdmFyIG1pcERhdGEgPSBhbGxvY01pcE1hcCgpO1xuXG4gICAgICBpZiAodHlwZW9mIGEgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBwYXJzZU1pcE1hcEZyb21TaGFwZShtaXBEYXRhLCBhIHwgMCwgYiB8IDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhcnNlTWlwTWFwRnJvbVNoYXBlKG1pcERhdGEsIGEgfCAwLCBhIHwgMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYSkge1xuICAgICAgICBjaGVjayQxLnR5cGUoYSwgJ29iamVjdCcsICdpbnZhbGlkIGFyZ3VtZW50cyB0byByZWdsLnRleHR1cmUnKTtcbiAgICAgICAgcGFyc2VUZXhJbmZvKHRleEluZm8sIGEpO1xuICAgICAgICBwYXJzZU1pcE1hcEZyb21PYmplY3QobWlwRGF0YSwgYSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlbXB0eSB0ZXh0dXJlcyBnZXQgYXNzaWduZWQgYSBkZWZhdWx0IHNoYXBlIG9mIDF4MVxuICAgICAgICBwYXJzZU1pcE1hcEZyb21TaGFwZShtaXBEYXRhLCAxLCAxKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRleEluZm8uZ2VuTWlwbWFwcykge1xuICAgICAgICBtaXBEYXRhLm1pcG1hc2sgPSAobWlwRGF0YS53aWR0aCA8PCAxKSAtIDE7XG4gICAgICB9XG4gICAgICB0ZXh0dXJlLm1pcG1hc2sgPSBtaXBEYXRhLm1pcG1hc2s7XG5cbiAgICAgIGNvcHlGbGFncyh0ZXh0dXJlLCBtaXBEYXRhKTtcblxuICAgICAgY2hlY2skMS50ZXh0dXJlMkQodGV4SW5mbywgbWlwRGF0YSwgbGltaXRzKTtcbiAgICAgIHRleHR1cmUuaW50ZXJuYWxmb3JtYXQgPSBtaXBEYXRhLmludGVybmFsZm9ybWF0O1xuXG4gICAgICByZWdsVGV4dHVyZTJELndpZHRoID0gbWlwRGF0YS53aWR0aDtcbiAgICAgIHJlZ2xUZXh0dXJlMkQuaGVpZ2h0ID0gbWlwRGF0YS5oZWlnaHQ7XG5cbiAgICAgIHRlbXBCaW5kKHRleHR1cmUpO1xuICAgICAgc2V0TWlwTWFwKG1pcERhdGEsIEdMX1RFWFRVUkVfMkQkMSk7XG4gICAgICBzZXRUZXhJbmZvKHRleEluZm8sIEdMX1RFWFRVUkVfMkQkMSk7XG4gICAgICB0ZW1wUmVzdG9yZSgpO1xuXG4gICAgICBmcmVlTWlwTWFwKG1pcERhdGEpO1xuXG4gICAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcbiAgICAgICAgdGV4dHVyZS5zdGF0cy5zaXplID0gZ2V0VGV4dHVyZVNpemUoXG4gICAgICAgICAgdGV4dHVyZS5pbnRlcm5hbGZvcm1hdCxcbiAgICAgICAgICB0ZXh0dXJlLnR5cGUsXG4gICAgICAgICAgbWlwRGF0YS53aWR0aCxcbiAgICAgICAgICBtaXBEYXRhLmhlaWdodCxcbiAgICAgICAgICB0ZXhJbmZvLmdlbk1pcG1hcHMsXG4gICAgICAgICAgZmFsc2UpO1xuICAgICAgfVxuICAgICAgcmVnbFRleHR1cmUyRC5mb3JtYXQgPSB0ZXh0dXJlRm9ybWF0c0ludmVydFt0ZXh0dXJlLmludGVybmFsZm9ybWF0XTtcbiAgICAgIHJlZ2xUZXh0dXJlMkQudHlwZSA9IHRleHR1cmVUeXBlc0ludmVydFt0ZXh0dXJlLnR5cGVdO1xuXG4gICAgICByZWdsVGV4dHVyZTJELm1hZyA9IG1hZ0ZpbHRlcnNJbnZlcnRbdGV4SW5mby5tYWdGaWx0ZXJdO1xuICAgICAgcmVnbFRleHR1cmUyRC5taW4gPSBtaW5GaWx0ZXJzSW52ZXJ0W3RleEluZm8ubWluRmlsdGVyXTtcblxuICAgICAgcmVnbFRleHR1cmUyRC53cmFwUyA9IHdyYXBNb2Rlc0ludmVydFt0ZXhJbmZvLndyYXBTXTtcbiAgICAgIHJlZ2xUZXh0dXJlMkQud3JhcFQgPSB3cmFwTW9kZXNJbnZlcnRbdGV4SW5mby53cmFwVF07XG5cbiAgICAgIHJldHVybiByZWdsVGV4dHVyZTJEXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3ViaW1hZ2UgKGltYWdlLCB4XywgeV8sIGxldmVsXykge1xuICAgICAgY2hlY2skMSghIWltYWdlLCAnbXVzdCBzcGVjaWZ5IGltYWdlIGRhdGEnKTtcblxuICAgICAgdmFyIHggPSB4XyB8IDA7XG4gICAgICB2YXIgeSA9IHlfIHwgMDtcbiAgICAgIHZhciBsZXZlbCA9IGxldmVsXyB8IDA7XG5cbiAgICAgIHZhciBpbWFnZURhdGEgPSBhbGxvY0ltYWdlKCk7XG4gICAgICBjb3B5RmxhZ3MoaW1hZ2VEYXRhLCB0ZXh0dXJlKTtcbiAgICAgIGltYWdlRGF0YS53aWR0aCA9IDA7XG4gICAgICBpbWFnZURhdGEuaGVpZ2h0ID0gMDtcbiAgICAgIHBhcnNlSW1hZ2UoaW1hZ2VEYXRhLCBpbWFnZSk7XG4gICAgICBpbWFnZURhdGEud2lkdGggPSBpbWFnZURhdGEud2lkdGggfHwgKCh0ZXh0dXJlLndpZHRoID4+IGxldmVsKSAtIHgpO1xuICAgICAgaW1hZ2VEYXRhLmhlaWdodCA9IGltYWdlRGF0YS5oZWlnaHQgfHwgKCh0ZXh0dXJlLmhlaWdodCA+PiBsZXZlbCkgLSB5KTtcblxuICAgICAgY2hlY2skMShcbiAgICAgICAgdGV4dHVyZS50eXBlID09PSBpbWFnZURhdGEudHlwZSAmJlxuICAgICAgICB0ZXh0dXJlLmZvcm1hdCA9PT0gaW1hZ2VEYXRhLmZvcm1hdCAmJlxuICAgICAgICB0ZXh0dXJlLmludGVybmFsZm9ybWF0ID09PSBpbWFnZURhdGEuaW50ZXJuYWxmb3JtYXQsXG4gICAgICAgICdpbmNvbXBhdGlibGUgZm9ybWF0IGZvciB0ZXh0dXJlLnN1YmltYWdlJyk7XG4gICAgICBjaGVjayQxKFxuICAgICAgICB4ID49IDAgJiYgeSA+PSAwICYmXG4gICAgICAgIHggKyBpbWFnZURhdGEud2lkdGggPD0gdGV4dHVyZS53aWR0aCAmJlxuICAgICAgICB5ICsgaW1hZ2VEYXRhLmhlaWdodCA8PSB0ZXh0dXJlLmhlaWdodCxcbiAgICAgICAgJ3RleHR1cmUuc3ViaW1hZ2Ugd3JpdGUgb3V0IG9mIGJvdW5kcycpO1xuICAgICAgY2hlY2skMShcbiAgICAgICAgdGV4dHVyZS5taXBtYXNrICYgKDEgPDwgbGV2ZWwpLFxuICAgICAgICAnbWlzc2luZyBtaXBtYXAgZGF0YScpO1xuICAgICAgY2hlY2skMShcbiAgICAgICAgaW1hZ2VEYXRhLmRhdGEgfHwgaW1hZ2VEYXRhLmVsZW1lbnQgfHwgaW1hZ2VEYXRhLm5lZWRzQ29weSxcbiAgICAgICAgJ21pc3NpbmcgaW1hZ2UgZGF0YScpO1xuXG4gICAgICB0ZW1wQmluZCh0ZXh0dXJlKTtcbiAgICAgIHNldFN1YkltYWdlKGltYWdlRGF0YSwgR0xfVEVYVFVSRV8yRCQxLCB4LCB5LCBsZXZlbCk7XG4gICAgICB0ZW1wUmVzdG9yZSgpO1xuXG4gICAgICBmcmVlSW1hZ2UoaW1hZ2VEYXRhKTtcblxuICAgICAgcmV0dXJuIHJlZ2xUZXh0dXJlMkRcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNpemUgKHdfLCBoXykge1xuICAgICAgdmFyIHcgPSB3XyB8IDA7XG4gICAgICB2YXIgaCA9IChoXyB8IDApIHx8IHc7XG4gICAgICBpZiAodyA9PT0gdGV4dHVyZS53aWR0aCAmJiBoID09PSB0ZXh0dXJlLmhlaWdodCkge1xuICAgICAgICByZXR1cm4gcmVnbFRleHR1cmUyRFxuICAgICAgfVxuXG4gICAgICByZWdsVGV4dHVyZTJELndpZHRoID0gdGV4dHVyZS53aWR0aCA9IHc7XG4gICAgICByZWdsVGV4dHVyZTJELmhlaWdodCA9IHRleHR1cmUuaGVpZ2h0ID0gaDtcblxuICAgICAgdGVtcEJpbmQodGV4dHVyZSk7XG5cbiAgICAgIHZhciBkYXRhO1xuICAgICAgdmFyIGNoYW5uZWxzID0gdGV4dHVyZS5jaGFubmVscztcbiAgICAgIHZhciB0eXBlID0gdGV4dHVyZS50eXBlO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgdGV4dHVyZS5taXBtYXNrID4+IGk7ICsraSkge1xuICAgICAgICB2YXIgX3cgPSB3ID4+IGk7XG4gICAgICAgIHZhciBfaCA9IGggPj4gaTtcbiAgICAgICAgaWYgKCFfdyB8fCAhX2gpIGJyZWFrXG4gICAgICAgIGRhdGEgPSBwb29sLnplcm8uYWxsb2NUeXBlKHR5cGUsIF93ICogX2ggKiBjaGFubmVscyk7XG4gICAgICAgIGdsLnRleEltYWdlMkQoXG4gICAgICAgICAgR0xfVEVYVFVSRV8yRCQxLFxuICAgICAgICAgIGksXG4gICAgICAgICAgdGV4dHVyZS5mb3JtYXQsXG4gICAgICAgICAgX3csXG4gICAgICAgICAgX2gsXG4gICAgICAgICAgMCxcbiAgICAgICAgICB0ZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgICB0ZXh0dXJlLnR5cGUsXG4gICAgICAgICAgZGF0YSk7XG4gICAgICAgIGlmIChkYXRhKSBwb29sLnplcm8uZnJlZVR5cGUoZGF0YSk7XG4gICAgICB9XG4gICAgICB0ZW1wUmVzdG9yZSgpO1xuXG4gICAgICAvLyBhbHNvLCByZWNvbXB1dGUgdGhlIHRleHR1cmUgc2l6ZS5cbiAgICAgIGlmIChjb25maWcucHJvZmlsZSkge1xuICAgICAgICB0ZXh0dXJlLnN0YXRzLnNpemUgPSBnZXRUZXh0dXJlU2l6ZShcbiAgICAgICAgICB0ZXh0dXJlLmludGVybmFsZm9ybWF0LFxuICAgICAgICAgIHRleHR1cmUudHlwZSxcbiAgICAgICAgICB3LFxuICAgICAgICAgIGgsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVnbFRleHR1cmUyRFxuICAgIH1cblxuICAgIHJlZ2xUZXh0dXJlMkQoYSwgYik7XG5cbiAgICByZWdsVGV4dHVyZTJELnN1YmltYWdlID0gc3ViaW1hZ2U7XG4gICAgcmVnbFRleHR1cmUyRC5yZXNpemUgPSByZXNpemU7XG4gICAgcmVnbFRleHR1cmUyRC5fcmVnbFR5cGUgPSAndGV4dHVyZTJkJztcbiAgICByZWdsVGV4dHVyZTJELl90ZXh0dXJlID0gdGV4dHVyZTtcbiAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcbiAgICAgIHJlZ2xUZXh0dXJlMkQuc3RhdHMgPSB0ZXh0dXJlLnN0YXRzO1xuICAgIH1cbiAgICByZWdsVGV4dHVyZTJELmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0ZXh0dXJlLmRlY1JlZigpO1xuICAgIH07XG5cbiAgICByZXR1cm4gcmVnbFRleHR1cmUyRFxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlVGV4dHVyZUN1YmUgKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpIHtcbiAgICB2YXIgdGV4dHVyZSA9IG5ldyBSRUdMVGV4dHVyZShHTF9URVhUVVJFX0NVQkVfTUFQJDEpO1xuICAgIHRleHR1cmVTZXRbdGV4dHVyZS5pZF0gPSB0ZXh0dXJlO1xuICAgIHN0YXRzLmN1YmVDb3VudCsrO1xuXG4gICAgdmFyIGZhY2VzID0gbmV3IEFycmF5KDYpO1xuXG4gICAgZnVuY3Rpb24gcmVnbFRleHR1cmVDdWJlIChhMCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciB0ZXhJbmZvID0gdGV4dHVyZS50ZXhJbmZvO1xuICAgICAgVGV4SW5mby5jYWxsKHRleEluZm8pO1xuICAgICAgZm9yIChpID0gMDsgaSA8IDY7ICsraSkge1xuICAgICAgICBmYWNlc1tpXSA9IGFsbG9jTWlwTWFwKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgYTAgPT09ICdudW1iZXInIHx8ICFhMCkge1xuICAgICAgICB2YXIgcyA9IChhMCB8IDApIHx8IDE7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA2OyArK2kpIHtcbiAgICAgICAgICBwYXJzZU1pcE1hcEZyb21TaGFwZShmYWNlc1tpXSwgcywgcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGEwID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoYTEpIHtcbiAgICAgICAgICBwYXJzZU1pcE1hcEZyb21PYmplY3QoZmFjZXNbMF0sIGEwKTtcbiAgICAgICAgICBwYXJzZU1pcE1hcEZyb21PYmplY3QoZmFjZXNbMV0sIGExKTtcbiAgICAgICAgICBwYXJzZU1pcE1hcEZyb21PYmplY3QoZmFjZXNbMl0sIGEyKTtcbiAgICAgICAgICBwYXJzZU1pcE1hcEZyb21PYmplY3QoZmFjZXNbM10sIGEzKTtcbiAgICAgICAgICBwYXJzZU1pcE1hcEZyb21PYmplY3QoZmFjZXNbNF0sIGE0KTtcbiAgICAgICAgICBwYXJzZU1pcE1hcEZyb21PYmplY3QoZmFjZXNbNV0sIGE1KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJzZVRleEluZm8odGV4SW5mbywgYTApO1xuICAgICAgICAgIHBhcnNlRmxhZ3ModGV4dHVyZSwgYTApO1xuICAgICAgICAgIGlmICgnZmFjZXMnIGluIGEwKSB7XG4gICAgICAgICAgICB2YXIgZmFjZV9pbnB1dCA9IGEwLmZhY2VzO1xuICAgICAgICAgICAgY2hlY2skMShBcnJheS5pc0FycmF5KGZhY2VfaW5wdXQpICYmIGZhY2VfaW5wdXQubGVuZ3RoID09PSA2LFxuICAgICAgICAgICAgICAnY3ViZSBmYWNlcyBtdXN0IGJlIGEgbGVuZ3RoIDYgYXJyYXknKTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA2OyArK2kpIHtcbiAgICAgICAgICAgICAgY2hlY2skMSh0eXBlb2YgZmFjZV9pbnB1dFtpXSA9PT0gJ29iamVjdCcgJiYgISFmYWNlX2lucHV0W2ldLFxuICAgICAgICAgICAgICAgICdpbnZhbGlkIGlucHV0IGZvciBjdWJlIG1hcCBmYWNlJyk7XG4gICAgICAgICAgICAgIGNvcHlGbGFncyhmYWNlc1tpXSwgdGV4dHVyZSk7XG4gICAgICAgICAgICAgIHBhcnNlTWlwTWFwRnJvbU9iamVjdChmYWNlc1tpXSwgZmFjZV9pbnB1dFtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA2OyArK2kpIHtcbiAgICAgICAgICAgICAgcGFyc2VNaXBNYXBGcm9tT2JqZWN0KGZhY2VzW2ldLCBhMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGVjayQxLnJhaXNlKCdpbnZhbGlkIGFyZ3VtZW50cyB0byBjdWJlIG1hcCcpO1xuICAgICAgfVxuXG4gICAgICBjb3B5RmxhZ3ModGV4dHVyZSwgZmFjZXNbMF0pO1xuXG4gICAgICBpZiAoIWxpbWl0cy5ucG90VGV4dHVyZUN1YmUpIHtcbiAgICAgICAgY2hlY2skMShpc1BvdzIkMSh0ZXh0dXJlLndpZHRoKSAmJiBpc1BvdzIkMSh0ZXh0dXJlLmhlaWdodCksICd5b3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBub24gcG93ZXIgb3IgdHdvIHRleHR1cmUgZGltZW5zaW9ucycpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGV4SW5mby5nZW5NaXBtYXBzKSB7XG4gICAgICAgIHRleHR1cmUubWlwbWFzayA9IChmYWNlc1swXS53aWR0aCA8PCAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0dXJlLm1pcG1hc2sgPSBmYWNlc1swXS5taXBtYXNrO1xuICAgICAgfVxuXG4gICAgICBjaGVjayQxLnRleHR1cmVDdWJlKHRleHR1cmUsIHRleEluZm8sIGZhY2VzLCBsaW1pdHMpO1xuICAgICAgdGV4dHVyZS5pbnRlcm5hbGZvcm1hdCA9IGZhY2VzWzBdLmludGVybmFsZm9ybWF0O1xuXG4gICAgICByZWdsVGV4dHVyZUN1YmUud2lkdGggPSBmYWNlc1swXS53aWR0aDtcbiAgICAgIHJlZ2xUZXh0dXJlQ3ViZS5oZWlnaHQgPSBmYWNlc1swXS5oZWlnaHQ7XG5cbiAgICAgIHRlbXBCaW5kKHRleHR1cmUpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IDY7ICsraSkge1xuICAgICAgICBzZXRNaXBNYXAoZmFjZXNbaV0sIEdMX1RFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCQxICsgaSk7XG4gICAgICB9XG4gICAgICBzZXRUZXhJbmZvKHRleEluZm8sIEdMX1RFWFRVUkVfQ1VCRV9NQVAkMSk7XG4gICAgICB0ZW1wUmVzdG9yZSgpO1xuXG4gICAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcbiAgICAgICAgdGV4dHVyZS5zdGF0cy5zaXplID0gZ2V0VGV4dHVyZVNpemUoXG4gICAgICAgICAgdGV4dHVyZS5pbnRlcm5hbGZvcm1hdCxcbiAgICAgICAgICB0ZXh0dXJlLnR5cGUsXG4gICAgICAgICAgcmVnbFRleHR1cmVDdWJlLndpZHRoLFxuICAgICAgICAgIHJlZ2xUZXh0dXJlQ3ViZS5oZWlnaHQsXG4gICAgICAgICAgdGV4SW5mby5nZW5NaXBtYXBzLFxuICAgICAgICAgIHRydWUpO1xuICAgICAgfVxuXG4gICAgICByZWdsVGV4dHVyZUN1YmUuZm9ybWF0ID0gdGV4dHVyZUZvcm1hdHNJbnZlcnRbdGV4dHVyZS5pbnRlcm5hbGZvcm1hdF07XG4gICAgICByZWdsVGV4dHVyZUN1YmUudHlwZSA9IHRleHR1cmVUeXBlc0ludmVydFt0ZXh0dXJlLnR5cGVdO1xuXG4gICAgICByZWdsVGV4dHVyZUN1YmUubWFnID0gbWFnRmlsdGVyc0ludmVydFt0ZXhJbmZvLm1hZ0ZpbHRlcl07XG4gICAgICByZWdsVGV4dHVyZUN1YmUubWluID0gbWluRmlsdGVyc0ludmVydFt0ZXhJbmZvLm1pbkZpbHRlcl07XG5cbiAgICAgIHJlZ2xUZXh0dXJlQ3ViZS53cmFwUyA9IHdyYXBNb2Rlc0ludmVydFt0ZXhJbmZvLndyYXBTXTtcbiAgICAgIHJlZ2xUZXh0dXJlQ3ViZS53cmFwVCA9IHdyYXBNb2Rlc0ludmVydFt0ZXhJbmZvLndyYXBUXTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IDY7ICsraSkge1xuICAgICAgICBmcmVlTWlwTWFwKGZhY2VzW2ldKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlZ2xUZXh0dXJlQ3ViZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN1YmltYWdlIChmYWNlLCBpbWFnZSwgeF8sIHlfLCBsZXZlbF8pIHtcbiAgICAgIGNoZWNrJDEoISFpbWFnZSwgJ211c3Qgc3BlY2lmeSBpbWFnZSBkYXRhJyk7XG4gICAgICBjaGVjayQxKHR5cGVvZiBmYWNlID09PSAnbnVtYmVyJyAmJiBmYWNlID09PSAoZmFjZSB8IDApICYmXG4gICAgICAgIGZhY2UgPj0gMCAmJiBmYWNlIDwgNiwgJ2ludmFsaWQgZmFjZScpO1xuXG4gICAgICB2YXIgeCA9IHhfIHwgMDtcbiAgICAgIHZhciB5ID0geV8gfCAwO1xuICAgICAgdmFyIGxldmVsID0gbGV2ZWxfIHwgMDtcblxuICAgICAgdmFyIGltYWdlRGF0YSA9IGFsbG9jSW1hZ2UoKTtcbiAgICAgIGNvcHlGbGFncyhpbWFnZURhdGEsIHRleHR1cmUpO1xuICAgICAgaW1hZ2VEYXRhLndpZHRoID0gMDtcbiAgICAgIGltYWdlRGF0YS5oZWlnaHQgPSAwO1xuICAgICAgcGFyc2VJbWFnZShpbWFnZURhdGEsIGltYWdlKTtcbiAgICAgIGltYWdlRGF0YS53aWR0aCA9IGltYWdlRGF0YS53aWR0aCB8fCAoKHRleHR1cmUud2lkdGggPj4gbGV2ZWwpIC0geCk7XG4gICAgICBpbWFnZURhdGEuaGVpZ2h0ID0gaW1hZ2VEYXRhLmhlaWdodCB8fCAoKHRleHR1cmUuaGVpZ2h0ID4+IGxldmVsKSAtIHkpO1xuXG4gICAgICBjaGVjayQxKFxuICAgICAgICB0ZXh0dXJlLnR5cGUgPT09IGltYWdlRGF0YS50eXBlICYmXG4gICAgICAgIHRleHR1cmUuZm9ybWF0ID09PSBpbWFnZURhdGEuZm9ybWF0ICYmXG4gICAgICAgIHRleHR1cmUuaW50ZXJuYWxmb3JtYXQgPT09IGltYWdlRGF0YS5pbnRlcm5hbGZvcm1hdCxcbiAgICAgICAgJ2luY29tcGF0aWJsZSBmb3JtYXQgZm9yIHRleHR1cmUuc3ViaW1hZ2UnKTtcbiAgICAgIGNoZWNrJDEoXG4gICAgICAgIHggPj0gMCAmJiB5ID49IDAgJiZcbiAgICAgICAgeCArIGltYWdlRGF0YS53aWR0aCA8PSB0ZXh0dXJlLndpZHRoICYmXG4gICAgICAgIHkgKyBpbWFnZURhdGEuaGVpZ2h0IDw9IHRleHR1cmUuaGVpZ2h0LFxuICAgICAgICAndGV4dHVyZS5zdWJpbWFnZSB3cml0ZSBvdXQgb2YgYm91bmRzJyk7XG4gICAgICBjaGVjayQxKFxuICAgICAgICB0ZXh0dXJlLm1pcG1hc2sgJiAoMSA8PCBsZXZlbCksXG4gICAgICAgICdtaXNzaW5nIG1pcG1hcCBkYXRhJyk7XG4gICAgICBjaGVjayQxKFxuICAgICAgICBpbWFnZURhdGEuZGF0YSB8fCBpbWFnZURhdGEuZWxlbWVudCB8fCBpbWFnZURhdGEubmVlZHNDb3B5LFxuICAgICAgICAnbWlzc2luZyBpbWFnZSBkYXRhJyk7XG5cbiAgICAgIHRlbXBCaW5kKHRleHR1cmUpO1xuICAgICAgc2V0U3ViSW1hZ2UoaW1hZ2VEYXRhLCBHTF9URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1gkMSArIGZhY2UsIHgsIHksIGxldmVsKTtcbiAgICAgIHRlbXBSZXN0b3JlKCk7XG5cbiAgICAgIGZyZWVJbWFnZShpbWFnZURhdGEpO1xuXG4gICAgICByZXR1cm4gcmVnbFRleHR1cmVDdWJlXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzaXplIChyYWRpdXNfKSB7XG4gICAgICB2YXIgcmFkaXVzID0gcmFkaXVzXyB8IDA7XG4gICAgICBpZiAocmFkaXVzID09PSB0ZXh0dXJlLndpZHRoKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICByZWdsVGV4dHVyZUN1YmUud2lkdGggPSB0ZXh0dXJlLndpZHRoID0gcmFkaXVzO1xuICAgICAgcmVnbFRleHR1cmVDdWJlLmhlaWdodCA9IHRleHR1cmUuaGVpZ2h0ID0gcmFkaXVzO1xuXG4gICAgICB0ZW1wQmluZCh0ZXh0dXJlKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjsgKytpKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyB0ZXh0dXJlLm1pcG1hc2sgPj4gajsgKytqKSB7XG4gICAgICAgICAgZ2wudGV4SW1hZ2UyRChcbiAgICAgICAgICAgIEdMX1RFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCQxICsgaSxcbiAgICAgICAgICAgIGosXG4gICAgICAgICAgICB0ZXh0dXJlLmZvcm1hdCxcbiAgICAgICAgICAgIHJhZGl1cyA+PiBqLFxuICAgICAgICAgICAgcmFkaXVzID4+IGosXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgdGV4dHVyZS5mb3JtYXQsXG4gICAgICAgICAgICB0ZXh0dXJlLnR5cGUsXG4gICAgICAgICAgICBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGVtcFJlc3RvcmUoKTtcblxuICAgICAgaWYgKGNvbmZpZy5wcm9maWxlKSB7XG4gICAgICAgIHRleHR1cmUuc3RhdHMuc2l6ZSA9IGdldFRleHR1cmVTaXplKFxuICAgICAgICAgIHRleHR1cmUuaW50ZXJuYWxmb3JtYXQsXG4gICAgICAgICAgdGV4dHVyZS50eXBlLFxuICAgICAgICAgIHJlZ2xUZXh0dXJlQ3ViZS53aWR0aCxcbiAgICAgICAgICByZWdsVGV4dHVyZUN1YmUuaGVpZ2h0LFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIHRydWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVnbFRleHR1cmVDdWJlXG4gICAgfVxuXG4gICAgcmVnbFRleHR1cmVDdWJlKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpO1xuXG4gICAgcmVnbFRleHR1cmVDdWJlLnN1YmltYWdlID0gc3ViaW1hZ2U7XG4gICAgcmVnbFRleHR1cmVDdWJlLnJlc2l6ZSA9IHJlc2l6ZTtcbiAgICByZWdsVGV4dHVyZUN1YmUuX3JlZ2xUeXBlID0gJ3RleHR1cmVDdWJlJztcbiAgICByZWdsVGV4dHVyZUN1YmUuX3RleHR1cmUgPSB0ZXh0dXJlO1xuICAgIGlmIChjb25maWcucHJvZmlsZSkge1xuICAgICAgcmVnbFRleHR1cmVDdWJlLnN0YXRzID0gdGV4dHVyZS5zdGF0cztcbiAgICB9XG4gICAgcmVnbFRleHR1cmVDdWJlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0ZXh0dXJlLmRlY1JlZigpO1xuICAgIH07XG5cbiAgICByZXR1cm4gcmVnbFRleHR1cmVDdWJlXG4gIH1cblxuICAvLyBDYWxsZWQgd2hlbiByZWdsIGlzIGRlc3Ryb3llZFxuICBmdW5jdGlvbiBkZXN0cm95VGV4dHVyZXMgKCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtVGV4VW5pdHM7ICsraSkge1xuICAgICAgZ2wuYWN0aXZlVGV4dHVyZShHTF9URVhUVVJFMCQxICsgaSk7XG4gICAgICBnbC5iaW5kVGV4dHVyZShHTF9URVhUVVJFXzJEJDEsIG51bGwpO1xuICAgICAgdGV4dHVyZVVuaXRzW2ldID0gbnVsbDtcbiAgICB9XG4gICAgdmFsdWVzKHRleHR1cmVTZXQpLmZvckVhY2goZGVzdHJveSk7XG5cbiAgICBzdGF0cy5jdWJlQ291bnQgPSAwO1xuICAgIHN0YXRzLnRleHR1cmVDb3VudCA9IDA7XG4gIH1cblxuICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcbiAgICBzdGF0cy5nZXRUb3RhbFRleHR1cmVTaXplID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRvdGFsID0gMDtcbiAgICAgIE9iamVjdC5rZXlzKHRleHR1cmVTZXQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB0b3RhbCArPSB0ZXh0dXJlU2V0W2tleV0uc3RhdHMuc2l6ZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRvdGFsXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc3RvcmVUZXh0dXJlcyAoKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBudW1UZXhVbml0czsgKytpKSB7XG4gICAgICB2YXIgdGV4ID0gdGV4dHVyZVVuaXRzW2ldO1xuICAgICAgaWYgKHRleCkge1xuICAgICAgICB0ZXguYmluZENvdW50ID0gMDtcbiAgICAgICAgdGV4LnVuaXQgPSAtMTtcbiAgICAgICAgdGV4dHVyZVVuaXRzW2ldID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YWx1ZXModGV4dHVyZVNldCkuZm9yRWFjaChmdW5jdGlvbiAodGV4dHVyZSkge1xuICAgICAgdGV4dHVyZS50ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgICAgZ2wuYmluZFRleHR1cmUodGV4dHVyZS50YXJnZXQsIHRleHR1cmUudGV4dHVyZSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDMyOyArK2kpIHtcbiAgICAgICAgaWYgKCh0ZXh0dXJlLm1pcG1hc2sgJiAoMSA8PCBpKSkgPT09IDApIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIGlmICh0ZXh0dXJlLnRhcmdldCA9PT0gR0xfVEVYVFVSRV8yRCQxKSB7XG4gICAgICAgICAgZ2wudGV4SW1hZ2UyRChHTF9URVhUVVJFXzJEJDEsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgdGV4dHVyZS5pbnRlcm5hbGZvcm1hdCxcbiAgICAgICAgICAgIHRleHR1cmUud2lkdGggPj4gaSxcbiAgICAgICAgICAgIHRleHR1cmUuaGVpZ2h0ID4+IGksXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICAgdGV4dHVyZS5pbnRlcm5hbGZvcm1hdCxcbiAgICAgICAgICAgIHRleHR1cmUudHlwZSxcbiAgICAgICAgICAgIG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgNjsgKytqKSB7XG4gICAgICAgICAgICBnbC50ZXhJbWFnZTJEKEdMX1RFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCQxICsgaixcbiAgICAgICAgICAgICAgaSxcbiAgICAgICAgICAgICAgdGV4dHVyZS5pbnRlcm5hbGZvcm1hdCxcbiAgICAgICAgICAgICAgdGV4dHVyZS53aWR0aCA+PiBpLFxuICAgICAgICAgICAgICB0ZXh0dXJlLmhlaWdodCA+PiBpLFxuICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICB0ZXh0dXJlLmludGVybmFsZm9ybWF0LFxuICAgICAgICAgICAgICB0ZXh0dXJlLnR5cGUsXG4gICAgICAgICAgICAgIG51bGwpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2V0VGV4SW5mbyh0ZXh0dXJlLnRleEluZm8sIHRleHR1cmUudGFyZ2V0KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlMkQ6IGNyZWF0ZVRleHR1cmUyRCxcbiAgICBjcmVhdGVDdWJlOiBjcmVhdGVUZXh0dXJlQ3ViZSxcbiAgICBjbGVhcjogZGVzdHJveVRleHR1cmVzLFxuICAgIGdldFRleHR1cmU6IGZ1bmN0aW9uICh3cmFwcGVyKSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH0sXG4gICAgcmVzdG9yZTogcmVzdG9yZVRleHR1cmVzXG4gIH1cbn1cblxudmFyIEdMX1JFTkRFUkJVRkZFUiA9IDB4OEQ0MTtcblxudmFyIEdMX1JHQkE0JDEgPSAweDgwNTY7XG52YXIgR0xfUkdCNV9BMSQxID0gMHg4MDU3O1xudmFyIEdMX1JHQjU2NSQxID0gMHg4RDYyO1xudmFyIEdMX0RFUFRIX0NPTVBPTkVOVDE2ID0gMHg4MUE1O1xudmFyIEdMX1NURU5DSUxfSU5ERVg4ID0gMHg4RDQ4O1xudmFyIEdMX0RFUFRIX1NURU5DSUwkMSA9IDB4ODRGOTtcblxudmFyIEdMX1NSR0I4X0FMUEhBOF9FWFQgPSAweDhDNDM7XG5cbnZhciBHTF9SR0JBMzJGX0VYVCA9IDB4ODgxNDtcblxudmFyIEdMX1JHQkExNkZfRVhUID0gMHg4ODFBO1xudmFyIEdMX1JHQjE2Rl9FWFQgPSAweDg4MUI7XG5cbnZhciBGT1JNQVRfU0laRVMgPSBbXTtcblxuRk9STUFUX1NJWkVTW0dMX1JHQkE0JDFdID0gMjtcbkZPUk1BVF9TSVpFU1tHTF9SR0I1X0ExJDFdID0gMjtcbkZPUk1BVF9TSVpFU1tHTF9SR0I1NjUkMV0gPSAyO1xuXG5GT1JNQVRfU0laRVNbR0xfREVQVEhfQ09NUE9ORU5UMTZdID0gMjtcbkZPUk1BVF9TSVpFU1tHTF9TVEVOQ0lMX0lOREVYOF0gPSAxO1xuRk9STUFUX1NJWkVTW0dMX0RFUFRIX1NURU5DSUwkMV0gPSA0O1xuXG5GT1JNQVRfU0laRVNbR0xfU1JHQjhfQUxQSEE4X0VYVF0gPSA0O1xuRk9STUFUX1NJWkVTW0dMX1JHQkEzMkZfRVhUXSA9IDE2O1xuRk9STUFUX1NJWkVTW0dMX1JHQkExNkZfRVhUXSA9IDg7XG5GT1JNQVRfU0laRVNbR0xfUkdCMTZGX0VYVF0gPSA2O1xuXG5mdW5jdGlvbiBnZXRSZW5kZXJidWZmZXJTaXplIChmb3JtYXQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgcmV0dXJuIEZPUk1BVF9TSVpFU1tmb3JtYXRdICogd2lkdGggKiBoZWlnaHRcbn1cblxudmFyIHdyYXBSZW5kZXJidWZmZXJzID0gZnVuY3Rpb24gKGdsLCBleHRlbnNpb25zLCBsaW1pdHMsIHN0YXRzLCBjb25maWcpIHtcbiAgdmFyIGZvcm1hdFR5cGVzID0ge1xuICAgICdyZ2JhNCc6IEdMX1JHQkE0JDEsXG4gICAgJ3JnYjU2NSc6IEdMX1JHQjU2NSQxLFxuICAgICdyZ2I1IGExJzogR0xfUkdCNV9BMSQxLFxuICAgICdkZXB0aCc6IEdMX0RFUFRIX0NPTVBPTkVOVDE2LFxuICAgICdzdGVuY2lsJzogR0xfU1RFTkNJTF9JTkRFWDgsXG4gICAgJ2RlcHRoIHN0ZW5jaWwnOiBHTF9ERVBUSF9TVEVOQ0lMJDFcbiAgfTtcblxuICBpZiAoZXh0ZW5zaW9ucy5leHRfc3JnYikge1xuICAgIGZvcm1hdFR5cGVzWydzcmdiYSddID0gR0xfU1JHQjhfQUxQSEE4X0VYVDtcbiAgfVxuXG4gIGlmIChleHRlbnNpb25zLmV4dF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCkge1xuICAgIGZvcm1hdFR5cGVzWydyZ2JhMTZmJ10gPSBHTF9SR0JBMTZGX0VYVDtcbiAgICBmb3JtYXRUeXBlc1sncmdiMTZmJ10gPSBHTF9SR0IxNkZfRVhUO1xuICB9XG5cbiAgaWYgKGV4dGVuc2lvbnMud2ViZ2xfY29sb3JfYnVmZmVyX2Zsb2F0KSB7XG4gICAgZm9ybWF0VHlwZXNbJ3JnYmEzMmYnXSA9IEdMX1JHQkEzMkZfRVhUO1xuICB9XG5cbiAgdmFyIGZvcm1hdFR5cGVzSW52ZXJ0ID0gW107XG4gIE9iamVjdC5rZXlzKGZvcm1hdFR5cGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgdmFsID0gZm9ybWF0VHlwZXNba2V5XTtcbiAgICBmb3JtYXRUeXBlc0ludmVydFt2YWxdID0ga2V5O1xuICB9KTtcblxuICB2YXIgcmVuZGVyYnVmZmVyQ291bnQgPSAwO1xuICB2YXIgcmVuZGVyYnVmZmVyU2V0ID0ge307XG5cbiAgZnVuY3Rpb24gUkVHTFJlbmRlcmJ1ZmZlciAocmVuZGVyYnVmZmVyKSB7XG4gICAgdGhpcy5pZCA9IHJlbmRlcmJ1ZmZlckNvdW50Kys7XG4gICAgdGhpcy5yZWZDb3VudCA9IDE7XG5cbiAgICB0aGlzLnJlbmRlcmJ1ZmZlciA9IHJlbmRlcmJ1ZmZlcjtcblxuICAgIHRoaXMuZm9ybWF0ID0gR0xfUkdCQTQkMTtcbiAgICB0aGlzLndpZHRoID0gMDtcbiAgICB0aGlzLmhlaWdodCA9IDA7XG5cbiAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcbiAgICAgIHRoaXMuc3RhdHMgPSB7c2l6ZTogMH07XG4gICAgfVxuICB9XG5cbiAgUkVHTFJlbmRlcmJ1ZmZlci5wcm90b3R5cGUuZGVjUmVmID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICgtLXRoaXMucmVmQ291bnQgPD0gMCkge1xuICAgICAgZGVzdHJveSh0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZGVzdHJveSAocmIpIHtcbiAgICB2YXIgaGFuZGxlID0gcmIucmVuZGVyYnVmZmVyO1xuICAgIGNoZWNrJDEoaGFuZGxlLCAnbXVzdCBub3QgZG91YmxlIGRlc3Ryb3kgcmVuZGVyYnVmZmVyJyk7XG4gICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihHTF9SRU5ERVJCVUZGRVIsIG51bGwpO1xuICAgIGdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcihoYW5kbGUpO1xuICAgIHJiLnJlbmRlcmJ1ZmZlciA9IG51bGw7XG4gICAgcmIucmVmQ291bnQgPSAwO1xuICAgIGRlbGV0ZSByZW5kZXJidWZmZXJTZXRbcmIuaWRdO1xuICAgIHN0YXRzLnJlbmRlcmJ1ZmZlckNvdW50LS07XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSZW5kZXJidWZmZXIgKGEsIGIpIHtcbiAgICB2YXIgcmVuZGVyYnVmZmVyID0gbmV3IFJFR0xSZW5kZXJidWZmZXIoZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCkpO1xuICAgIHJlbmRlcmJ1ZmZlclNldFtyZW5kZXJidWZmZXIuaWRdID0gcmVuZGVyYnVmZmVyO1xuICAgIHN0YXRzLnJlbmRlcmJ1ZmZlckNvdW50Kys7XG5cbiAgICBmdW5jdGlvbiByZWdsUmVuZGVyYnVmZmVyIChhLCBiKSB7XG4gICAgICB2YXIgdyA9IDA7XG4gICAgICB2YXIgaCA9IDA7XG4gICAgICB2YXIgZm9ybWF0ID0gR0xfUkdCQTQkMTtcblxuICAgICAgaWYgKHR5cGVvZiBhID09PSAnb2JqZWN0JyAmJiBhKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gYTtcbiAgICAgICAgaWYgKCdzaGFwZScgaW4gb3B0aW9ucykge1xuICAgICAgICAgIHZhciBzaGFwZSA9IG9wdGlvbnMuc2hhcGU7XG4gICAgICAgICAgY2hlY2skMShBcnJheS5pc0FycmF5KHNoYXBlKSAmJiBzaGFwZS5sZW5ndGggPj0gMixcbiAgICAgICAgICAgICdpbnZhbGlkIHJlbmRlcmJ1ZmZlciBzaGFwZScpO1xuICAgICAgICAgIHcgPSBzaGFwZVswXSB8IDA7XG4gICAgICAgICAgaCA9IHNoYXBlWzFdIHwgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoJ3JhZGl1cycgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgdyA9IGggPSBvcHRpb25zLnJhZGl1cyB8IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgnd2lkdGgnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHcgPSBvcHRpb25zLndpZHRoIHwgMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCdoZWlnaHQnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGggPSBvcHRpb25zLmhlaWdodCB8IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICgnZm9ybWF0JyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgY2hlY2skMS5wYXJhbWV0ZXIob3B0aW9ucy5mb3JtYXQsIGZvcm1hdFR5cGVzLFxuICAgICAgICAgICAgJ2ludmFsaWQgcmVuZGVyYnVmZmVyIGZvcm1hdCcpO1xuICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdFR5cGVzW29wdGlvbnMuZm9ybWF0XTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdyA9IGEgfCAwO1xuICAgICAgICBpZiAodHlwZW9mIGIgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgaCA9IGIgfCAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGggPSB3O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFhKSB7XG4gICAgICAgIHcgPSBoID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoZWNrJDEucmFpc2UoJ2ludmFsaWQgYXJndW1lbnRzIHRvIHJlbmRlcmJ1ZmZlciBjb25zdHJ1Y3RvcicpO1xuICAgICAgfVxuXG4gICAgICAvLyBjaGVjayBzaGFwZVxuICAgICAgY2hlY2skMShcbiAgICAgICAgdyA+IDAgJiYgaCA+IDAgJiZcbiAgICAgICAgdyA8PSBsaW1pdHMubWF4UmVuZGVyYnVmZmVyU2l6ZSAmJiBoIDw9IGxpbWl0cy5tYXhSZW5kZXJidWZmZXJTaXplLFxuICAgICAgICAnaW52YWxpZCByZW5kZXJidWZmZXIgc2l6ZScpO1xuXG4gICAgICBpZiAodyA9PT0gcmVuZGVyYnVmZmVyLndpZHRoICYmXG4gICAgICAgICAgaCA9PT0gcmVuZGVyYnVmZmVyLmhlaWdodCAmJlxuICAgICAgICAgIGZvcm1hdCA9PT0gcmVuZGVyYnVmZmVyLmZvcm1hdCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgcmVnbFJlbmRlcmJ1ZmZlci53aWR0aCA9IHJlbmRlcmJ1ZmZlci53aWR0aCA9IHc7XG4gICAgICByZWdsUmVuZGVyYnVmZmVyLmhlaWdodCA9IHJlbmRlcmJ1ZmZlci5oZWlnaHQgPSBoO1xuICAgICAgcmVuZGVyYnVmZmVyLmZvcm1hdCA9IGZvcm1hdDtcblxuICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihHTF9SRU5ERVJCVUZGRVIsIHJlbmRlcmJ1ZmZlci5yZW5kZXJidWZmZXIpO1xuICAgICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShHTF9SRU5ERVJCVUZGRVIsIGZvcm1hdCwgdywgaCk7XG5cbiAgICAgIGNoZWNrJDEoXG4gICAgICAgIGdsLmdldEVycm9yKCkgPT09IDAsXG4gICAgICAgICdpbnZhbGlkIHJlbmRlciBidWZmZXIgZm9ybWF0Jyk7XG5cbiAgICAgIGlmIChjb25maWcucHJvZmlsZSkge1xuICAgICAgICByZW5kZXJidWZmZXIuc3RhdHMuc2l6ZSA9IGdldFJlbmRlcmJ1ZmZlclNpemUocmVuZGVyYnVmZmVyLmZvcm1hdCwgcmVuZGVyYnVmZmVyLndpZHRoLCByZW5kZXJidWZmZXIuaGVpZ2h0KTtcbiAgICAgIH1cbiAgICAgIHJlZ2xSZW5kZXJidWZmZXIuZm9ybWF0ID0gZm9ybWF0VHlwZXNJbnZlcnRbcmVuZGVyYnVmZmVyLmZvcm1hdF07XG5cbiAgICAgIHJldHVybiByZWdsUmVuZGVyYnVmZmVyXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzaXplICh3XywgaF8pIHtcbiAgICAgIHZhciB3ID0gd18gfCAwO1xuICAgICAgdmFyIGggPSAoaF8gfCAwKSB8fCB3O1xuXG4gICAgICBpZiAodyA9PT0gcmVuZGVyYnVmZmVyLndpZHRoICYmIGggPT09IHJlbmRlcmJ1ZmZlci5oZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHJlZ2xSZW5kZXJidWZmZXJcbiAgICAgIH1cblxuICAgICAgLy8gY2hlY2sgc2hhcGVcbiAgICAgIGNoZWNrJDEoXG4gICAgICAgIHcgPiAwICYmIGggPiAwICYmXG4gICAgICAgIHcgPD0gbGltaXRzLm1heFJlbmRlcmJ1ZmZlclNpemUgJiYgaCA8PSBsaW1pdHMubWF4UmVuZGVyYnVmZmVyU2l6ZSxcbiAgICAgICAgJ2ludmFsaWQgcmVuZGVyYnVmZmVyIHNpemUnKTtcblxuICAgICAgcmVnbFJlbmRlcmJ1ZmZlci53aWR0aCA9IHJlbmRlcmJ1ZmZlci53aWR0aCA9IHc7XG4gICAgICByZWdsUmVuZGVyYnVmZmVyLmhlaWdodCA9IHJlbmRlcmJ1ZmZlci5oZWlnaHQgPSBoO1xuXG4gICAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKEdMX1JFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyLnJlbmRlcmJ1ZmZlcik7XG4gICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlKEdMX1JFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyLmZvcm1hdCwgdywgaCk7XG5cbiAgICAgIGNoZWNrJDEoXG4gICAgICAgIGdsLmdldEVycm9yKCkgPT09IDAsXG4gICAgICAgICdpbnZhbGlkIHJlbmRlciBidWZmZXIgZm9ybWF0Jyk7XG5cbiAgICAgIC8vIGFsc28sIHJlY29tcHV0ZSBzaXplLlxuICAgICAgaWYgKGNvbmZpZy5wcm9maWxlKSB7XG4gICAgICAgIHJlbmRlcmJ1ZmZlci5zdGF0cy5zaXplID0gZ2V0UmVuZGVyYnVmZmVyU2l6ZShcbiAgICAgICAgICByZW5kZXJidWZmZXIuZm9ybWF0LCByZW5kZXJidWZmZXIud2lkdGgsIHJlbmRlcmJ1ZmZlci5oZWlnaHQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVnbFJlbmRlcmJ1ZmZlclxuICAgIH1cblxuICAgIHJlZ2xSZW5kZXJidWZmZXIoYSwgYik7XG5cbiAgICByZWdsUmVuZGVyYnVmZmVyLnJlc2l6ZSA9IHJlc2l6ZTtcbiAgICByZWdsUmVuZGVyYnVmZmVyLl9yZWdsVHlwZSA9ICdyZW5kZXJidWZmZXInO1xuICAgIHJlZ2xSZW5kZXJidWZmZXIuX3JlbmRlcmJ1ZmZlciA9IHJlbmRlcmJ1ZmZlcjtcbiAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcbiAgICAgIHJlZ2xSZW5kZXJidWZmZXIuc3RhdHMgPSByZW5kZXJidWZmZXIuc3RhdHM7XG4gICAgfVxuICAgIHJlZ2xSZW5kZXJidWZmZXIuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbmRlcmJ1ZmZlci5kZWNSZWYoKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHJlZ2xSZW5kZXJidWZmZXJcbiAgfVxuXG4gIGlmIChjb25maWcucHJvZmlsZSkge1xuICAgIHN0YXRzLmdldFRvdGFsUmVuZGVyYnVmZmVyU2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0b3RhbCA9IDA7XG4gICAgICBPYmplY3Qua2V5cyhyZW5kZXJidWZmZXJTZXQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB0b3RhbCArPSByZW5kZXJidWZmZXJTZXRba2V5XS5zdGF0cy5zaXplO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdG90YWxcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzdG9yZVJlbmRlcmJ1ZmZlcnMgKCkge1xuICAgIHZhbHVlcyhyZW5kZXJidWZmZXJTZXQpLmZvckVhY2goZnVuY3Rpb24gKHJiKSB7XG4gICAgICByYi5yZW5kZXJidWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcbiAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoR0xfUkVOREVSQlVGRkVSLCByYi5yZW5kZXJidWZmZXIpO1xuICAgICAgZ2wucmVuZGVyYnVmZmVyU3RvcmFnZShHTF9SRU5ERVJCVUZGRVIsIHJiLmZvcm1hdCwgcmIud2lkdGgsIHJiLmhlaWdodCk7XG4gICAgfSk7XG4gICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihHTF9SRU5ERVJCVUZGRVIsIG51bGwpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGU6IGNyZWF0ZVJlbmRlcmJ1ZmZlcixcbiAgICBjbGVhcjogZnVuY3Rpb24gKCkge1xuICAgICAgdmFsdWVzKHJlbmRlcmJ1ZmZlclNldCkuZm9yRWFjaChkZXN0cm95KTtcbiAgICB9LFxuICAgIHJlc3RvcmU6IHJlc3RvcmVSZW5kZXJidWZmZXJzXG4gIH1cbn07XG5cbi8vIFdlIHN0b3JlIHRoZXNlIGNvbnN0YW50cyBzbyB0aGF0IHRoZSBtaW5pZmllciBjYW4gaW5saW5lIHRoZW1cbnZhciBHTF9GUkFNRUJVRkZFUiQxID0gMHg4RDQwO1xudmFyIEdMX1JFTkRFUkJVRkZFUiQxID0gMHg4RDQxO1xuXG52YXIgR0xfVEVYVFVSRV8yRCQyID0gMHgwREUxO1xudmFyIEdMX1RFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCQyID0gMHg4NTE1O1xuXG52YXIgR0xfQ09MT1JfQVRUQUNITUVOVDAkMSA9IDB4OENFMDtcbnZhciBHTF9ERVBUSF9BVFRBQ0hNRU5UID0gMHg4RDAwO1xudmFyIEdMX1NURU5DSUxfQVRUQUNITUVOVCA9IDB4OEQyMDtcbnZhciBHTF9ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQgPSAweDgyMUE7XG5cbnZhciBHTF9GUkFNRUJVRkZFUl9DT01QTEVURSQxID0gMHg4Q0Q1O1xudmFyIEdMX0ZSQU1FQlVGRkVSX0lOQ09NUExFVEVfQVRUQUNITUVOVCA9IDB4OENENjtcbnZhciBHTF9GUkFNRUJVRkZFUl9JTkNPTVBMRVRFX01JU1NJTkdfQVRUQUNITUVOVCA9IDB4OENENztcbnZhciBHTF9GUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0RJTUVOU0lPTlMgPSAweDhDRDk7XG52YXIgR0xfRlJBTUVCVUZGRVJfVU5TVVBQT1JURUQgPSAweDhDREQ7XG5cbnZhciBHTF9IQUxGX0ZMT0FUX09FUyQyID0gMHg4RDYxO1xudmFyIEdMX1VOU0lHTkVEX0JZVEUkNiA9IDB4MTQwMTtcbnZhciBHTF9GTE9BVCQ1ID0gMHgxNDA2O1xuXG52YXIgR0xfUkdCJDEgPSAweDE5MDc7XG52YXIgR0xfUkdCQSQyID0gMHgxOTA4O1xuXG52YXIgR0xfREVQVEhfQ09NUE9ORU5UJDEgPSAweDE5MDI7XG5cbnZhciBjb2xvclRleHR1cmVGb3JtYXRFbnVtcyA9IFtcbiAgR0xfUkdCJDEsXG4gIEdMX1JHQkEkMlxuXTtcblxuLy8gZm9yIGV2ZXJ5IHRleHR1cmUgZm9ybWF0LCBzdG9yZVxuLy8gdGhlIG51bWJlciBvZiBjaGFubmVsc1xudmFyIHRleHR1cmVGb3JtYXRDaGFubmVscyA9IFtdO1xudGV4dHVyZUZvcm1hdENoYW5uZWxzW0dMX1JHQkEkMl0gPSA0O1xudGV4dHVyZUZvcm1hdENoYW5uZWxzW0dMX1JHQiQxXSA9IDM7XG5cbi8vIGZvciBldmVyeSB0ZXh0dXJlIHR5cGUsIHN0b3JlXG4vLyB0aGUgc2l6ZSBpbiBieXRlcy5cbnZhciB0ZXh0dXJlVHlwZVNpemVzID0gW107XG50ZXh0dXJlVHlwZVNpemVzW0dMX1VOU0lHTkVEX0JZVEUkNl0gPSAxO1xudGV4dHVyZVR5cGVTaXplc1tHTF9GTE9BVCQ1XSA9IDQ7XG50ZXh0dXJlVHlwZVNpemVzW0dMX0hBTEZfRkxPQVRfT0VTJDJdID0gMjtcblxudmFyIEdMX1JHQkE0JDIgPSAweDgwNTY7XG52YXIgR0xfUkdCNV9BMSQyID0gMHg4MDU3O1xudmFyIEdMX1JHQjU2NSQyID0gMHg4RDYyO1xudmFyIEdMX0RFUFRIX0NPTVBPTkVOVDE2JDEgPSAweDgxQTU7XG52YXIgR0xfU1RFTkNJTF9JTkRFWDgkMSA9IDB4OEQ0ODtcbnZhciBHTF9ERVBUSF9TVEVOQ0lMJDIgPSAweDg0Rjk7XG5cbnZhciBHTF9TUkdCOF9BTFBIQThfRVhUJDEgPSAweDhDNDM7XG5cbnZhciBHTF9SR0JBMzJGX0VYVCQxID0gMHg4ODE0O1xuXG52YXIgR0xfUkdCQTE2Rl9FWFQkMSA9IDB4ODgxQTtcbnZhciBHTF9SR0IxNkZfRVhUJDEgPSAweDg4MUI7XG5cbnZhciBjb2xvclJlbmRlcmJ1ZmZlckZvcm1hdEVudW1zID0gW1xuICBHTF9SR0JBNCQyLFxuICBHTF9SR0I1X0ExJDIsXG4gIEdMX1JHQjU2NSQyLFxuICBHTF9TUkdCOF9BTFBIQThfRVhUJDEsXG4gIEdMX1JHQkExNkZfRVhUJDEsXG4gIEdMX1JHQjE2Rl9FWFQkMSxcbiAgR0xfUkdCQTMyRl9FWFQkMVxuXTtcblxudmFyIHN0YXR1c0NvZGUgPSB7fTtcbnN0YXR1c0NvZGVbR0xfRlJBTUVCVUZGRVJfQ09NUExFVEUkMV0gPSAnY29tcGxldGUnO1xuc3RhdHVzQ29kZVtHTF9GUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0FUVEFDSE1FTlRdID0gJ2luY29tcGxldGUgYXR0YWNobWVudCc7XG5zdGF0dXNDb2RlW0dMX0ZSQU1FQlVGRkVSX0lOQ09NUExFVEVfRElNRU5TSU9OU10gPSAnaW5jb21wbGV0ZSBkaW1lbnNpb25zJztcbnN0YXR1c0NvZGVbR0xfRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NSVNTSU5HX0FUVEFDSE1FTlRdID0gJ2luY29tcGxldGUsIG1pc3NpbmcgYXR0YWNobWVudCc7XG5zdGF0dXNDb2RlW0dMX0ZSQU1FQlVGRkVSX1VOU1VQUE9SVEVEXSA9ICd1bnN1cHBvcnRlZCc7XG5cbmZ1bmN0aW9uIHdyYXBGQk9TdGF0ZSAoXG4gIGdsLFxuICBleHRlbnNpb25zLFxuICBsaW1pdHMsXG4gIHRleHR1cmVTdGF0ZSxcbiAgcmVuZGVyYnVmZmVyU3RhdGUsXG4gIHN0YXRzKSB7XG4gIHZhciBmcmFtZWJ1ZmZlclN0YXRlID0ge1xuICAgIGN1cjogbnVsbCxcbiAgICBuZXh0OiBudWxsLFxuICAgIGRpcnR5OiBmYWxzZSxcbiAgICBzZXRGQk86IG51bGxcbiAgfTtcblxuICB2YXIgY29sb3JUZXh0dXJlRm9ybWF0cyA9IFsncmdiYSddO1xuICB2YXIgY29sb3JSZW5kZXJidWZmZXJGb3JtYXRzID0gWydyZ2JhNCcsICdyZ2I1NjUnLCAncmdiNSBhMSddO1xuXG4gIGlmIChleHRlbnNpb25zLmV4dF9zcmdiKSB7XG4gICAgY29sb3JSZW5kZXJidWZmZXJGb3JtYXRzLnB1c2goJ3NyZ2JhJyk7XG4gIH1cblxuICBpZiAoZXh0ZW5zaW9ucy5leHRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXQpIHtcbiAgICBjb2xvclJlbmRlcmJ1ZmZlckZvcm1hdHMucHVzaCgncmdiYTE2ZicsICdyZ2IxNmYnKTtcbiAgfVxuXG4gIGlmIChleHRlbnNpb25zLndlYmdsX2NvbG9yX2J1ZmZlcl9mbG9hdCkge1xuICAgIGNvbG9yUmVuZGVyYnVmZmVyRm9ybWF0cy5wdXNoKCdyZ2JhMzJmJyk7XG4gIH1cblxuICB2YXIgY29sb3JUeXBlcyA9IFsndWludDgnXTtcbiAgaWYgKGV4dGVuc2lvbnMub2VzX3RleHR1cmVfaGFsZl9mbG9hdCkge1xuICAgIGNvbG9yVHlwZXMucHVzaCgnaGFsZiBmbG9hdCcsICdmbG9hdDE2Jyk7XG4gIH1cbiAgaWYgKGV4dGVuc2lvbnMub2VzX3RleHR1cmVfZmxvYXQpIHtcbiAgICBjb2xvclR5cGVzLnB1c2goJ2Zsb2F0JywgJ2Zsb2F0MzInKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEZyYW1lYnVmZmVyQXR0YWNobWVudCAodGFyZ2V0LCB0ZXh0dXJlLCByZW5kZXJidWZmZXIpIHtcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xuICAgIHRoaXMucmVuZGVyYnVmZmVyID0gcmVuZGVyYnVmZmVyO1xuXG4gICAgdmFyIHcgPSAwO1xuICAgIHZhciBoID0gMDtcbiAgICBpZiAodGV4dHVyZSkge1xuICAgICAgdyA9IHRleHR1cmUud2lkdGg7XG4gICAgICBoID0gdGV4dHVyZS5oZWlnaHQ7XG4gICAgfSBlbHNlIGlmIChyZW5kZXJidWZmZXIpIHtcbiAgICAgIHcgPSByZW5kZXJidWZmZXIud2lkdGg7XG4gICAgICBoID0gcmVuZGVyYnVmZmVyLmhlaWdodDtcbiAgICB9XG4gICAgdGhpcy53aWR0aCA9IHc7XG4gICAgdGhpcy5oZWlnaHQgPSBoO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVjUmVmIChhdHRhY2htZW50KSB7XG4gICAgaWYgKGF0dGFjaG1lbnQpIHtcbiAgICAgIGlmIChhdHRhY2htZW50LnRleHR1cmUpIHtcbiAgICAgICAgYXR0YWNobWVudC50ZXh0dXJlLl90ZXh0dXJlLmRlY1JlZigpO1xuICAgICAgfVxuICAgICAgaWYgKGF0dGFjaG1lbnQucmVuZGVyYnVmZmVyKSB7XG4gICAgICAgIGF0dGFjaG1lbnQucmVuZGVyYnVmZmVyLl9yZW5kZXJidWZmZXIuZGVjUmVmKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5jUmVmQW5kQ2hlY2tTaGFwZSAoYXR0YWNobWVudCwgd2lkdGgsIGhlaWdodCkge1xuICAgIGlmICghYXR0YWNobWVudCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmIChhdHRhY2htZW50LnRleHR1cmUpIHtcbiAgICAgIHZhciB0ZXh0dXJlID0gYXR0YWNobWVudC50ZXh0dXJlLl90ZXh0dXJlO1xuICAgICAgdmFyIHR3ID0gTWF0aC5tYXgoMSwgdGV4dHVyZS53aWR0aCk7XG4gICAgICB2YXIgdGggPSBNYXRoLm1heCgxLCB0ZXh0dXJlLmhlaWdodCk7XG4gICAgICBjaGVjayQxKHR3ID09PSB3aWR0aCAmJiB0aCA9PT0gaGVpZ2h0LFxuICAgICAgICAnaW5jb25zaXN0ZW50IHdpZHRoL2hlaWdodCBmb3Igc3VwcGxpZWQgdGV4dHVyZScpO1xuICAgICAgdGV4dHVyZS5yZWZDb3VudCArPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmVuZGVyYnVmZmVyID0gYXR0YWNobWVudC5yZW5kZXJidWZmZXIuX3JlbmRlcmJ1ZmZlcjtcbiAgICAgIGNoZWNrJDEoXG4gICAgICAgIHJlbmRlcmJ1ZmZlci53aWR0aCA9PT0gd2lkdGggJiYgcmVuZGVyYnVmZmVyLmhlaWdodCA9PT0gaGVpZ2h0LFxuICAgICAgICAnaW5jb25zaXN0ZW50IHdpZHRoL2hlaWdodCBmb3IgcmVuZGVyYnVmZmVyJyk7XG4gICAgICByZW5kZXJidWZmZXIucmVmQ291bnQgKz0gMTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhdHRhY2ggKGxvY2F0aW9uLCBhdHRhY2htZW50KSB7XG4gICAgaWYgKGF0dGFjaG1lbnQpIHtcbiAgICAgIGlmIChhdHRhY2htZW50LnRleHR1cmUpIHtcbiAgICAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoXG4gICAgICAgICAgR0xfRlJBTUVCVUZGRVIkMSxcbiAgICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgICBhdHRhY2htZW50LnRhcmdldCxcbiAgICAgICAgICBhdHRhY2htZW50LnRleHR1cmUuX3RleHR1cmUudGV4dHVyZSxcbiAgICAgICAgICAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKFxuICAgICAgICAgIEdMX0ZSQU1FQlVGRkVSJDEsXG4gICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgR0xfUkVOREVSQlVGRkVSJDEsXG4gICAgICAgICAgYXR0YWNobWVudC5yZW5kZXJidWZmZXIuX3JlbmRlcmJ1ZmZlci5yZW5kZXJidWZmZXIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlQXR0YWNobWVudCAoYXR0YWNobWVudCkge1xuICAgIHZhciB0YXJnZXQgPSBHTF9URVhUVVJFXzJEJDI7XG4gICAgdmFyIHRleHR1cmUgPSBudWxsO1xuICAgIHZhciByZW5kZXJidWZmZXIgPSBudWxsO1xuXG4gICAgdmFyIGRhdGEgPSBhdHRhY2htZW50O1xuICAgIGlmICh0eXBlb2YgYXR0YWNobWVudCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGRhdGEgPSBhdHRhY2htZW50LmRhdGE7XG4gICAgICBpZiAoJ3RhcmdldCcgaW4gYXR0YWNobWVudCkge1xuICAgICAgICB0YXJnZXQgPSBhdHRhY2htZW50LnRhcmdldCB8IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hlY2skMS50eXBlKGRhdGEsICdmdW5jdGlvbicsICdpbnZhbGlkIGF0dGFjaG1lbnQgZGF0YScpO1xuXG4gICAgdmFyIHR5cGUgPSBkYXRhLl9yZWdsVHlwZTtcbiAgICBpZiAodHlwZSA9PT0gJ3RleHR1cmUyZCcpIHtcbiAgICAgIHRleHR1cmUgPSBkYXRhO1xuICAgICAgY2hlY2skMSh0YXJnZXQgPT09IEdMX1RFWFRVUkVfMkQkMik7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAndGV4dHVyZUN1YmUnKSB7XG4gICAgICB0ZXh0dXJlID0gZGF0YTtcbiAgICAgIGNoZWNrJDEoXG4gICAgICAgIHRhcmdldCA+PSBHTF9URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1gkMiAmJlxuICAgICAgICB0YXJnZXQgPCBHTF9URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1gkMiArIDYsXG4gICAgICAgICdpbnZhbGlkIGN1YmUgbWFwIHRhcmdldCcpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3JlbmRlcmJ1ZmZlcicpIHtcbiAgICAgIHJlbmRlcmJ1ZmZlciA9IGRhdGE7XG4gICAgICB0YXJnZXQgPSBHTF9SRU5ERVJCVUZGRVIkMTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2skMS5yYWlzZSgnaW52YWxpZCByZWdsIG9iamVjdCBmb3IgYXR0YWNobWVudCcpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRnJhbWVidWZmZXJBdHRhY2htZW50KHRhcmdldCwgdGV4dHVyZSwgcmVuZGVyYnVmZmVyKVxuICB9XG5cbiAgZnVuY3Rpb24gYWxsb2NBdHRhY2htZW50IChcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgaXNUZXh0dXJlLFxuICAgIGZvcm1hdCxcbiAgICB0eXBlKSB7XG4gICAgaWYgKGlzVGV4dHVyZSkge1xuICAgICAgdmFyIHRleHR1cmUgPSB0ZXh0dXJlU3RhdGUuY3JlYXRlMkQoe1xuICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICAgICAgdHlwZTogdHlwZVxuICAgICAgfSk7XG4gICAgICB0ZXh0dXJlLl90ZXh0dXJlLnJlZkNvdW50ID0gMDtcbiAgICAgIHJldHVybiBuZXcgRnJhbWVidWZmZXJBdHRhY2htZW50KEdMX1RFWFRVUkVfMkQkMiwgdGV4dHVyZSwgbnVsbClcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHJiID0gcmVuZGVyYnVmZmVyU3RhdGUuY3JlYXRlKHtcbiAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgZm9ybWF0OiBmb3JtYXRcbiAgICAgIH0pO1xuICAgICAgcmIuX3JlbmRlcmJ1ZmZlci5yZWZDb3VudCA9IDA7XG4gICAgICByZXR1cm4gbmV3IEZyYW1lYnVmZmVyQXR0YWNobWVudChHTF9SRU5ERVJCVUZGRVIkMSwgbnVsbCwgcmIpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdW53cmFwQXR0YWNobWVudCAoYXR0YWNobWVudCkge1xuICAgIHJldHVybiBhdHRhY2htZW50ICYmIChhdHRhY2htZW50LnRleHR1cmUgfHwgYXR0YWNobWVudC5yZW5kZXJidWZmZXIpXG4gIH1cblxuICBmdW5jdGlvbiByZXNpemVBdHRhY2htZW50IChhdHRhY2htZW50LCB3LCBoKSB7XG4gICAgaWYgKGF0dGFjaG1lbnQpIHtcbiAgICAgIGlmIChhdHRhY2htZW50LnRleHR1cmUpIHtcbiAgICAgICAgYXR0YWNobWVudC50ZXh0dXJlLnJlc2l6ZSh3LCBoKTtcbiAgICAgIH0gZWxzZSBpZiAoYXR0YWNobWVudC5yZW5kZXJidWZmZXIpIHtcbiAgICAgICAgYXR0YWNobWVudC5yZW5kZXJidWZmZXIucmVzaXplKHcsIGgpO1xuICAgICAgfVxuICAgICAgYXR0YWNobWVudC53aWR0aCA9IHc7XG4gICAgICBhdHRhY2htZW50LmhlaWdodCA9IGg7XG4gICAgfVxuICB9XG5cbiAgdmFyIGZyYW1lYnVmZmVyQ291bnQgPSAwO1xuICB2YXIgZnJhbWVidWZmZXJTZXQgPSB7fTtcblxuICBmdW5jdGlvbiBSRUdMRnJhbWVidWZmZXIgKCkge1xuICAgIHRoaXMuaWQgPSBmcmFtZWJ1ZmZlckNvdW50Kys7XG4gICAgZnJhbWVidWZmZXJTZXRbdGhpcy5pZF0gPSB0aGlzO1xuXG4gICAgdGhpcy5mcmFtZWJ1ZmZlciA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG4gICAgdGhpcy53aWR0aCA9IDA7XG4gICAgdGhpcy5oZWlnaHQgPSAwO1xuXG4gICAgdGhpcy5jb2xvckF0dGFjaG1lbnRzID0gW107XG4gICAgdGhpcy5kZXB0aEF0dGFjaG1lbnQgPSBudWxsO1xuICAgIHRoaXMuc3RlbmNpbEF0dGFjaG1lbnQgPSBudWxsO1xuICAgIHRoaXMuZGVwdGhTdGVuY2lsQXR0YWNobWVudCA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBkZWNGQk9SZWZzIChmcmFtZWJ1ZmZlcikge1xuICAgIGZyYW1lYnVmZmVyLmNvbG9yQXR0YWNobWVudHMuZm9yRWFjaChkZWNSZWYpO1xuICAgIGRlY1JlZihmcmFtZWJ1ZmZlci5kZXB0aEF0dGFjaG1lbnQpO1xuICAgIGRlY1JlZihmcmFtZWJ1ZmZlci5zdGVuY2lsQXR0YWNobWVudCk7XG4gICAgZGVjUmVmKGZyYW1lYnVmZmVyLmRlcHRoU3RlbmNpbEF0dGFjaG1lbnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSAoZnJhbWVidWZmZXIpIHtcbiAgICB2YXIgaGFuZGxlID0gZnJhbWVidWZmZXIuZnJhbWVidWZmZXI7XG4gICAgY2hlY2skMShoYW5kbGUsICdtdXN0IG5vdCBkb3VibGUgZGVzdHJveSBmcmFtZWJ1ZmZlcicpO1xuICAgIGdsLmRlbGV0ZUZyYW1lYnVmZmVyKGhhbmRsZSk7XG4gICAgZnJhbWVidWZmZXIuZnJhbWVidWZmZXIgPSBudWxsO1xuICAgIHN0YXRzLmZyYW1lYnVmZmVyQ291bnQtLTtcbiAgICBkZWxldGUgZnJhbWVidWZmZXJTZXRbZnJhbWVidWZmZXIuaWRdO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRnJhbWVidWZmZXIgKGZyYW1lYnVmZmVyKSB7XG4gICAgdmFyIGk7XG5cbiAgICBnbC5iaW5kRnJhbWVidWZmZXIoR0xfRlJBTUVCVUZGRVIkMSwgZnJhbWVidWZmZXIuZnJhbWVidWZmZXIpO1xuICAgIHZhciBjb2xvckF0dGFjaG1lbnRzID0gZnJhbWVidWZmZXIuY29sb3JBdHRhY2htZW50cztcbiAgICBmb3IgKGkgPSAwOyBpIDwgY29sb3JBdHRhY2htZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgYXR0YWNoKEdMX0NPTE9SX0FUVEFDSE1FTlQwJDEgKyBpLCBjb2xvckF0dGFjaG1lbnRzW2ldKTtcbiAgICB9XG4gICAgZm9yIChpID0gY29sb3JBdHRhY2htZW50cy5sZW5ndGg7IGkgPCBsaW1pdHMubWF4Q29sb3JBdHRhY2htZW50czsgKytpKSB7XG4gICAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChcbiAgICAgICAgR0xfRlJBTUVCVUZGRVIkMSxcbiAgICAgICAgR0xfQ09MT1JfQVRUQUNITUVOVDAkMSArIGksXG4gICAgICAgIEdMX1RFWFRVUkVfMkQkMixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgMCk7XG4gICAgfVxuXG4gICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoXG4gICAgICBHTF9GUkFNRUJVRkZFUiQxLFxuICAgICAgR0xfREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULFxuICAgICAgR0xfVEVYVFVSRV8yRCQyLFxuICAgICAgbnVsbCxcbiAgICAgIDApO1xuICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKFxuICAgICAgR0xfRlJBTUVCVUZGRVIkMSxcbiAgICAgIEdMX0RFUFRIX0FUVEFDSE1FTlQsXG4gICAgICBHTF9URVhUVVJFXzJEJDIsXG4gICAgICBudWxsLFxuICAgICAgMCk7XG4gICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoXG4gICAgICBHTF9GUkFNRUJVRkZFUiQxLFxuICAgICAgR0xfU1RFTkNJTF9BVFRBQ0hNRU5ULFxuICAgICAgR0xfVEVYVFVSRV8yRCQyLFxuICAgICAgbnVsbCxcbiAgICAgIDApO1xuXG4gICAgYXR0YWNoKEdMX0RFUFRIX0FUVEFDSE1FTlQsIGZyYW1lYnVmZmVyLmRlcHRoQXR0YWNobWVudCk7XG4gICAgYXR0YWNoKEdMX1NURU5DSUxfQVRUQUNITUVOVCwgZnJhbWVidWZmZXIuc3RlbmNpbEF0dGFjaG1lbnQpO1xuICAgIGF0dGFjaChHTF9ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQsIGZyYW1lYnVmZmVyLmRlcHRoU3RlbmNpbEF0dGFjaG1lbnQpO1xuXG4gICAgLy8gQ2hlY2sgc3RhdHVzIGNvZGVcbiAgICB2YXIgc3RhdHVzID0gZ2wuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyhHTF9GUkFNRUJVRkZFUiQxKTtcbiAgICBpZiAoIWdsLmlzQ29udGV4dExvc3QoKSAmJiBzdGF0dXMgIT09IEdMX0ZSQU1FQlVGRkVSX0NPTVBMRVRFJDEpIHtcbiAgICAgIGNoZWNrJDEucmFpc2UoJ2ZyYW1lYnVmZmVyIGNvbmZpZ3VyYXRpb24gbm90IHN1cHBvcnRlZCwgc3RhdHVzID0gJyArXG4gICAgICAgIHN0YXR1c0NvZGVbc3RhdHVzXSk7XG4gICAgfVxuXG4gICAgZ2wuYmluZEZyYW1lYnVmZmVyKEdMX0ZSQU1FQlVGRkVSJDEsIGZyYW1lYnVmZmVyU3RhdGUubmV4dCA/IGZyYW1lYnVmZmVyU3RhdGUubmV4dC5mcmFtZWJ1ZmZlciA6IG51bGwpO1xuICAgIGZyYW1lYnVmZmVyU3RhdGUuY3VyID0gZnJhbWVidWZmZXJTdGF0ZS5uZXh0O1xuXG4gICAgLy8gRklYTUU6IENsZWFyIGVycm9yIGNvZGUgaGVyZS4gIFRoaXMgaXMgYSB3b3JrIGFyb3VuZCBmb3IgYSBidWcgaW5cbiAgICAvLyBoZWFkbGVzcy1nbFxuICAgIGdsLmdldEVycm9yKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVGQk8gKGEwLCBhMSkge1xuICAgIHZhciBmcmFtZWJ1ZmZlciA9IG5ldyBSRUdMRnJhbWVidWZmZXIoKTtcbiAgICBzdGF0cy5mcmFtZWJ1ZmZlckNvdW50Kys7XG5cbiAgICBmdW5jdGlvbiByZWdsRnJhbWVidWZmZXIgKGEsIGIpIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBjaGVjayQxKGZyYW1lYnVmZmVyU3RhdGUubmV4dCAhPT0gZnJhbWVidWZmZXIsXG4gICAgICAgICdjYW4gbm90IHVwZGF0ZSBmcmFtZWJ1ZmZlciB3aGljaCBpcyBjdXJyZW50bHkgaW4gdXNlJyk7XG5cbiAgICAgIHZhciB3aWR0aCA9IDA7XG4gICAgICB2YXIgaGVpZ2h0ID0gMDtcblxuICAgICAgdmFyIG5lZWRzRGVwdGggPSB0cnVlO1xuICAgICAgdmFyIG5lZWRzU3RlbmNpbCA9IHRydWU7XG5cbiAgICAgIHZhciBjb2xvckJ1ZmZlciA9IG51bGw7XG4gICAgICB2YXIgY29sb3JUZXh0dXJlID0gdHJ1ZTtcbiAgICAgIHZhciBjb2xvckZvcm1hdCA9ICdyZ2JhJztcbiAgICAgIHZhciBjb2xvclR5cGUgPSAndWludDgnO1xuICAgICAgdmFyIGNvbG9yQ291bnQgPSAxO1xuXG4gICAgICB2YXIgZGVwdGhCdWZmZXIgPSBudWxsO1xuICAgICAgdmFyIHN0ZW5jaWxCdWZmZXIgPSBudWxsO1xuICAgICAgdmFyIGRlcHRoU3RlbmNpbEJ1ZmZlciA9IG51bGw7XG4gICAgICB2YXIgZGVwdGhTdGVuY2lsVGV4dHVyZSA9IGZhbHNlO1xuXG4gICAgICBpZiAodHlwZW9mIGEgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHdpZHRoID0gYSB8IDA7XG4gICAgICAgIGhlaWdodCA9IChiIHwgMCkgfHwgd2lkdGg7XG4gICAgICB9IGVsc2UgaWYgKCFhKSB7XG4gICAgICAgIHdpZHRoID0gaGVpZ2h0ID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoZWNrJDEudHlwZShhLCAnb2JqZWN0JywgJ2ludmFsaWQgYXJndW1lbnRzIGZvciBmcmFtZWJ1ZmZlcicpO1xuICAgICAgICB2YXIgb3B0aW9ucyA9IGE7XG5cbiAgICAgICAgaWYgKCdzaGFwZScgaW4gb3B0aW9ucykge1xuICAgICAgICAgIHZhciBzaGFwZSA9IG9wdGlvbnMuc2hhcGU7XG4gICAgICAgICAgY2hlY2skMShBcnJheS5pc0FycmF5KHNoYXBlKSAmJiBzaGFwZS5sZW5ndGggPj0gMixcbiAgICAgICAgICAgICdpbnZhbGlkIHNoYXBlIGZvciBmcmFtZWJ1ZmZlcicpO1xuICAgICAgICAgIHdpZHRoID0gc2hhcGVbMF07XG4gICAgICAgICAgaGVpZ2h0ID0gc2hhcGVbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCdyYWRpdXMnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHdpZHRoID0gaGVpZ2h0ID0gb3B0aW9ucy5yYWRpdXM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgnd2lkdGgnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCdoZWlnaHQnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgnY29sb3InIGluIG9wdGlvbnMgfHxcbiAgICAgICAgICAgICdjb2xvcnMnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICBjb2xvckJ1ZmZlciA9XG4gICAgICAgICAgICBvcHRpb25zLmNvbG9yIHx8XG4gICAgICAgICAgICBvcHRpb25zLmNvbG9ycztcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2xvckJ1ZmZlcikpIHtcbiAgICAgICAgICAgIGNoZWNrJDEoXG4gICAgICAgICAgICAgIGNvbG9yQnVmZmVyLmxlbmd0aCA9PT0gMSB8fCBleHRlbnNpb25zLndlYmdsX2RyYXdfYnVmZmVycyxcbiAgICAgICAgICAgICAgJ211bHRpcGxlIHJlbmRlciB0YXJnZXRzIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbG9yQnVmZmVyKSB7XG4gICAgICAgICAgaWYgKCdjb2xvckNvdW50JyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBjb2xvckNvdW50ID0gb3B0aW9ucy5jb2xvckNvdW50IHwgMDtcbiAgICAgICAgICAgIGNoZWNrJDEoY29sb3JDb3VudCA+IDAsICdpbnZhbGlkIGNvbG9yIGJ1ZmZlciBjb3VudCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgnY29sb3JUZXh0dXJlJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBjb2xvclRleHR1cmUgPSAhIW9wdGlvbnMuY29sb3JUZXh0dXJlO1xuICAgICAgICAgICAgY29sb3JGb3JtYXQgPSAncmdiYTQnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgnY29sb3JUeXBlJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBjb2xvclR5cGUgPSBvcHRpb25zLmNvbG9yVHlwZTtcbiAgICAgICAgICAgIGlmICghY29sb3JUZXh0dXJlKSB7XG4gICAgICAgICAgICAgIGlmIChjb2xvclR5cGUgPT09ICdoYWxmIGZsb2F0JyB8fCBjb2xvclR5cGUgPT09ICdmbG9hdDE2Jykge1xuICAgICAgICAgICAgICAgIGNoZWNrJDEoZXh0ZW5zaW9ucy5leHRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXQsXG4gICAgICAgICAgICAgICAgICAneW91IG11c3QgZW5hYmxlIEVYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCB0byB1c2UgMTYtYml0IHJlbmRlciBidWZmZXJzJyk7XG4gICAgICAgICAgICAgICAgY29sb3JGb3JtYXQgPSAncmdiYTE2Zic7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sb3JUeXBlID09PSAnZmxvYXQnIHx8IGNvbG9yVHlwZSA9PT0gJ2Zsb2F0MzInKSB7XG4gICAgICAgICAgICAgICAgY2hlY2skMShleHRlbnNpb25zLndlYmdsX2NvbG9yX2J1ZmZlcl9mbG9hdCxcbiAgICAgICAgICAgICAgICAgICd5b3UgbXVzdCBlbmFibGUgV0VCR0xfY29sb3JfYnVmZmVyX2Zsb2F0IGluIG9yZGVyIHRvIHVzZSAzMi1iaXQgZmxvYXRpbmcgcG9pbnQgcmVuZGVyYnVmZmVycycpO1xuICAgICAgICAgICAgICAgIGNvbG9yRm9ybWF0ID0gJ3JnYmEzMmYnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGVjayQxKGV4dGVuc2lvbnMub2VzX3RleHR1cmVfZmxvYXQgfHxcbiAgICAgICAgICAgICAgICAhKGNvbG9yVHlwZSA9PT0gJ2Zsb2F0JyB8fCBjb2xvclR5cGUgPT09ICdmbG9hdDMyJyksXG4gICAgICAgICAgICAgICAgJ3lvdSBtdXN0IGVuYWJsZSBPRVNfdGV4dHVyZV9mbG9hdCBpbiBvcmRlciB0byB1c2UgZmxvYXRpbmcgcG9pbnQgZnJhbWVidWZmZXIgb2JqZWN0cycpO1xuICAgICAgICAgICAgICBjaGVjayQxKGV4dGVuc2lvbnMub2VzX3RleHR1cmVfaGFsZl9mbG9hdCB8fFxuICAgICAgICAgICAgICAgICEoY29sb3JUeXBlID09PSAnaGFsZiBmbG9hdCcgfHwgY29sb3JUeXBlID09PSAnZmxvYXQxNicpLFxuICAgICAgICAgICAgICAgICd5b3UgbXVzdCBlbmFibGUgT0VTX3RleHR1cmVfaGFsZl9mbG9hdCBpbiBvcmRlciB0byB1c2UgMTYtYml0IGZsb2F0aW5nIHBvaW50IGZyYW1lYnVmZmVyIG9iamVjdHMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoZWNrJDEub25lT2YoY29sb3JUeXBlLCBjb2xvclR5cGVzLCAnaW52YWxpZCBjb2xvciB0eXBlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCdjb2xvckZvcm1hdCcgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgY29sb3JGb3JtYXQgPSBvcHRpb25zLmNvbG9yRm9ybWF0O1xuICAgICAgICAgICAgaWYgKGNvbG9yVGV4dHVyZUZvcm1hdHMuaW5kZXhPZihjb2xvckZvcm1hdCkgPj0gMCkge1xuICAgICAgICAgICAgICBjb2xvclRleHR1cmUgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb2xvclJlbmRlcmJ1ZmZlckZvcm1hdHMuaW5kZXhPZihjb2xvckZvcm1hdCkgPj0gMCkge1xuICAgICAgICAgICAgICBjb2xvclRleHR1cmUgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChjb2xvclRleHR1cmUpIHtcbiAgICAgICAgICAgICAgICBjaGVjayQxLm9uZU9mKFxuICAgICAgICAgICAgICAgICAgb3B0aW9ucy5jb2xvckZvcm1hdCwgY29sb3JUZXh0dXJlRm9ybWF0cyxcbiAgICAgICAgICAgICAgICAgICdpbnZhbGlkIGNvbG9yIGZvcm1hdCBmb3IgdGV4dHVyZScpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNoZWNrJDEub25lT2YoXG4gICAgICAgICAgICAgICAgICBvcHRpb25zLmNvbG9yRm9ybWF0LCBjb2xvclJlbmRlcmJ1ZmZlckZvcm1hdHMsXG4gICAgICAgICAgICAgICAgICAnaW52YWxpZCBjb2xvciBmb3JtYXQgZm9yIHJlbmRlcmJ1ZmZlcicpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCdkZXB0aFRleHR1cmUnIGluIG9wdGlvbnMgfHwgJ2RlcHRoU3RlbmNpbFRleHR1cmUnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICBkZXB0aFN0ZW5jaWxUZXh0dXJlID0gISEob3B0aW9ucy5kZXB0aFRleHR1cmUgfHxcbiAgICAgICAgICAgIG9wdGlvbnMuZGVwdGhTdGVuY2lsVGV4dHVyZSk7XG4gICAgICAgICAgY2hlY2skMSghZGVwdGhTdGVuY2lsVGV4dHVyZSB8fCBleHRlbnNpb25zLndlYmdsX2RlcHRoX3RleHR1cmUsXG4gICAgICAgICAgICAnd2ViZ2xfZGVwdGhfdGV4dHVyZSBleHRlbnNpb24gbm90IHN1cHBvcnRlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCdkZXB0aCcgaW4gb3B0aW9ucykge1xuICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXB0aCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBuZWVkc0RlcHRoID0gb3B0aW9ucy5kZXB0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVwdGhCdWZmZXIgPSBvcHRpb25zLmRlcHRoO1xuICAgICAgICAgICAgbmVlZHNTdGVuY2lsID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCdzdGVuY2lsJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnN0ZW5jaWwgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgbmVlZHNTdGVuY2lsID0gb3B0aW9ucy5zdGVuY2lsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdGVuY2lsQnVmZmVyID0gb3B0aW9ucy5zdGVuY2lsO1xuICAgICAgICAgICAgbmVlZHNEZXB0aCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgnZGVwdGhTdGVuY2lsJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmRlcHRoU3RlbmNpbCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBuZWVkc0RlcHRoID0gbmVlZHNTdGVuY2lsID0gb3B0aW9ucy5kZXB0aFN0ZW5jaWw7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlcHRoU3RlbmNpbEJ1ZmZlciA9IG9wdGlvbnMuZGVwdGhTdGVuY2lsO1xuICAgICAgICAgICAgbmVlZHNEZXB0aCA9IGZhbHNlO1xuICAgICAgICAgICAgbmVlZHNTdGVuY2lsID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHBhcnNlIGF0dGFjaG1lbnRzXG4gICAgICB2YXIgY29sb3JBdHRhY2htZW50cyA9IG51bGw7XG4gICAgICB2YXIgZGVwdGhBdHRhY2htZW50ID0gbnVsbDtcbiAgICAgIHZhciBzdGVuY2lsQXR0YWNobWVudCA9IG51bGw7XG4gICAgICB2YXIgZGVwdGhTdGVuY2lsQXR0YWNobWVudCA9IG51bGw7XG5cbiAgICAgIC8vIFNldCB1cCBjb2xvciBhdHRhY2htZW50c1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29sb3JCdWZmZXIpKSB7XG4gICAgICAgIGNvbG9yQXR0YWNobWVudHMgPSBjb2xvckJ1ZmZlci5tYXAocGFyc2VBdHRhY2htZW50KTtcbiAgICAgIH0gZWxzZSBpZiAoY29sb3JCdWZmZXIpIHtcbiAgICAgICAgY29sb3JBdHRhY2htZW50cyA9IFtwYXJzZUF0dGFjaG1lbnQoY29sb3JCdWZmZXIpXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbG9yQXR0YWNobWVudHMgPSBuZXcgQXJyYXkoY29sb3JDb3VudCk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb2xvckNvdW50OyArK2kpIHtcbiAgICAgICAgICBjb2xvckF0dGFjaG1lbnRzW2ldID0gYWxsb2NBdHRhY2htZW50KFxuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgICBjb2xvclRleHR1cmUsXG4gICAgICAgICAgICBjb2xvckZvcm1hdCxcbiAgICAgICAgICAgIGNvbG9yVHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY2hlY2skMShleHRlbnNpb25zLndlYmdsX2RyYXdfYnVmZmVycyB8fCBjb2xvckF0dGFjaG1lbnRzLmxlbmd0aCA8PSAxLFxuICAgICAgICAneW91IG11c3QgZW5hYmxlIHRoZSBXRUJHTF9kcmF3X2J1ZmZlcnMgZXh0ZW5zaW9uIGluIG9yZGVyIHRvIHVzZSBtdWx0aXBsZSBjb2xvciBidWZmZXJzLicpO1xuICAgICAgY2hlY2skMShjb2xvckF0dGFjaG1lbnRzLmxlbmd0aCA8PSBsaW1pdHMubWF4Q29sb3JBdHRhY2htZW50cyxcbiAgICAgICAgJ3RvbyBtYW55IGNvbG9yIGF0dGFjaG1lbnRzLCBub3Qgc3VwcG9ydGVkJyk7XG5cbiAgICAgIHdpZHRoID0gd2lkdGggfHwgY29sb3JBdHRhY2htZW50c1swXS53aWR0aDtcbiAgICAgIGhlaWdodCA9IGhlaWdodCB8fCBjb2xvckF0dGFjaG1lbnRzWzBdLmhlaWdodDtcblxuICAgICAgaWYgKGRlcHRoQnVmZmVyKSB7XG4gICAgICAgIGRlcHRoQXR0YWNobWVudCA9IHBhcnNlQXR0YWNobWVudChkZXB0aEJ1ZmZlcik7XG4gICAgICB9IGVsc2UgaWYgKG5lZWRzRGVwdGggJiYgIW5lZWRzU3RlbmNpbCkge1xuICAgICAgICBkZXB0aEF0dGFjaG1lbnQgPSBhbGxvY0F0dGFjaG1lbnQoXG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgIGRlcHRoU3RlbmNpbFRleHR1cmUsXG4gICAgICAgICAgJ2RlcHRoJyxcbiAgICAgICAgICAndWludDMyJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGVuY2lsQnVmZmVyKSB7XG4gICAgICAgIHN0ZW5jaWxBdHRhY2htZW50ID0gcGFyc2VBdHRhY2htZW50KHN0ZW5jaWxCdWZmZXIpO1xuICAgICAgfSBlbHNlIGlmIChuZWVkc1N0ZW5jaWwgJiYgIW5lZWRzRGVwdGgpIHtcbiAgICAgICAgc3RlbmNpbEF0dGFjaG1lbnQgPSBhbGxvY0F0dGFjaG1lbnQoXG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICdzdGVuY2lsJyxcbiAgICAgICAgICAndWludDgnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRlcHRoU3RlbmNpbEJ1ZmZlcikge1xuICAgICAgICBkZXB0aFN0ZW5jaWxBdHRhY2htZW50ID0gcGFyc2VBdHRhY2htZW50KGRlcHRoU3RlbmNpbEJ1ZmZlcik7XG4gICAgICB9IGVsc2UgaWYgKCFkZXB0aEJ1ZmZlciAmJiAhc3RlbmNpbEJ1ZmZlciAmJiBuZWVkc1N0ZW5jaWwgJiYgbmVlZHNEZXB0aCkge1xuICAgICAgICBkZXB0aFN0ZW5jaWxBdHRhY2htZW50ID0gYWxsb2NBdHRhY2htZW50KFxuICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgIGhlaWdodCxcbiAgICAgICAgICBkZXB0aFN0ZW5jaWxUZXh0dXJlLFxuICAgICAgICAgICdkZXB0aCBzdGVuY2lsJyxcbiAgICAgICAgICAnZGVwdGggc3RlbmNpbCcpO1xuICAgICAgfVxuXG4gICAgICBjaGVjayQxKFxuICAgICAgICAoISFkZXB0aEJ1ZmZlcikgKyAoISFzdGVuY2lsQnVmZmVyKSArICghIWRlcHRoU3RlbmNpbEJ1ZmZlcikgPD0gMSxcbiAgICAgICAgJ2ludmFsaWQgZnJhbWVidWZmZXIgY29uZmlndXJhdGlvbiwgY2FuIHNwZWNpZnkgZXhhY3RseSBvbmUgZGVwdGgvc3RlbmNpbCBhdHRhY2htZW50Jyk7XG5cbiAgICAgIHZhciBjb21tb25Db2xvckF0dGFjaG1lbnRTaXplID0gbnVsbDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGNvbG9yQXR0YWNobWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaW5jUmVmQW5kQ2hlY2tTaGFwZShjb2xvckF0dGFjaG1lbnRzW2ldLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgY2hlY2skMSghY29sb3JBdHRhY2htZW50c1tpXSB8fFxuICAgICAgICAgIChjb2xvckF0dGFjaG1lbnRzW2ldLnRleHR1cmUgJiZcbiAgICAgICAgICAgIGNvbG9yVGV4dHVyZUZvcm1hdEVudW1zLmluZGV4T2YoY29sb3JBdHRhY2htZW50c1tpXS50ZXh0dXJlLl90ZXh0dXJlLmZvcm1hdCkgPj0gMCkgfHxcbiAgICAgICAgICAoY29sb3JBdHRhY2htZW50c1tpXS5yZW5kZXJidWZmZXIgJiZcbiAgICAgICAgICAgIGNvbG9yUmVuZGVyYnVmZmVyRm9ybWF0RW51bXMuaW5kZXhPZihjb2xvckF0dGFjaG1lbnRzW2ldLnJlbmRlcmJ1ZmZlci5fcmVuZGVyYnVmZmVyLmZvcm1hdCkgPj0gMCksXG4gICAgICAgICAgJ2ZyYW1lYnVmZmVyIGNvbG9yIGF0dGFjaG1lbnQgJyArIGkgKyAnIGlzIGludmFsaWQnKTtcblxuICAgICAgICBpZiAoY29sb3JBdHRhY2htZW50c1tpXSAmJiBjb2xvckF0dGFjaG1lbnRzW2ldLnRleHR1cmUpIHtcbiAgICAgICAgICB2YXIgY29sb3JBdHRhY2htZW50U2l6ZSA9XG4gICAgICAgICAgICAgIHRleHR1cmVGb3JtYXRDaGFubmVsc1tjb2xvckF0dGFjaG1lbnRzW2ldLnRleHR1cmUuX3RleHR1cmUuZm9ybWF0XSAqXG4gICAgICAgICAgICAgIHRleHR1cmVUeXBlU2l6ZXNbY29sb3JBdHRhY2htZW50c1tpXS50ZXh0dXJlLl90ZXh0dXJlLnR5cGVdO1xuXG4gICAgICAgICAgaWYgKGNvbW1vbkNvbG9yQXR0YWNobWVudFNpemUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbW1vbkNvbG9yQXR0YWNobWVudFNpemUgPSBjb2xvckF0dGFjaG1lbnRTaXplO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGFsbCBjb2xvciBhdHRhY2htZW50cyBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBiaXRwbGFuZXNcbiAgICAgICAgICAgIC8vICh0aGF0IGlzLCB0aGUgc2FtZSBudW1lciBvZiBiaXRzIHBlciBwaXhlbClcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgcmVxdWlyZWQgYnkgdGhlIEdMRVMyLjAgc3RhbmRhcmQuIFNlZSB0aGUgYmVnaW5uaW5nIG9mIENoYXB0ZXIgNCBpbiB0aGF0IGRvY3VtZW50LlxuICAgICAgICAgICAgY2hlY2skMShjb21tb25Db2xvckF0dGFjaG1lbnRTaXplID09PSBjb2xvckF0dGFjaG1lbnRTaXplLFxuICAgICAgICAgICAgICAgICAgJ2FsbCBjb2xvciBhdHRhY2htZW50cyBtdWNoIGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIGJpdHMgcGVyIHBpeGVsLicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaW5jUmVmQW5kQ2hlY2tTaGFwZShkZXB0aEF0dGFjaG1lbnQsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgY2hlY2skMSghZGVwdGhBdHRhY2htZW50IHx8XG4gICAgICAgIChkZXB0aEF0dGFjaG1lbnQudGV4dHVyZSAmJlxuICAgICAgICAgIGRlcHRoQXR0YWNobWVudC50ZXh0dXJlLl90ZXh0dXJlLmZvcm1hdCA9PT0gR0xfREVQVEhfQ09NUE9ORU5UJDEpIHx8XG4gICAgICAgIChkZXB0aEF0dGFjaG1lbnQucmVuZGVyYnVmZmVyICYmXG4gICAgICAgICAgZGVwdGhBdHRhY2htZW50LnJlbmRlcmJ1ZmZlci5fcmVuZGVyYnVmZmVyLmZvcm1hdCA9PT0gR0xfREVQVEhfQ09NUE9ORU5UMTYkMSksXG4gICAgICAgICdpbnZhbGlkIGRlcHRoIGF0dGFjaG1lbnQgZm9yIGZyYW1lYnVmZmVyIG9iamVjdCcpO1xuICAgICAgaW5jUmVmQW5kQ2hlY2tTaGFwZShzdGVuY2lsQXR0YWNobWVudCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICBjaGVjayQxKCFzdGVuY2lsQXR0YWNobWVudCB8fFxuICAgICAgICAoc3RlbmNpbEF0dGFjaG1lbnQucmVuZGVyYnVmZmVyICYmXG4gICAgICAgICAgc3RlbmNpbEF0dGFjaG1lbnQucmVuZGVyYnVmZmVyLl9yZW5kZXJidWZmZXIuZm9ybWF0ID09PSBHTF9TVEVOQ0lMX0lOREVYOCQxKSxcbiAgICAgICAgJ2ludmFsaWQgc3RlbmNpbCBhdHRhY2htZW50IGZvciBmcmFtZWJ1ZmZlciBvYmplY3QnKTtcbiAgICAgIGluY1JlZkFuZENoZWNrU2hhcGUoZGVwdGhTdGVuY2lsQXR0YWNobWVudCwgd2lkdGgsIGhlaWdodCk7XG4gICAgICBjaGVjayQxKCFkZXB0aFN0ZW5jaWxBdHRhY2htZW50IHx8XG4gICAgICAgIChkZXB0aFN0ZW5jaWxBdHRhY2htZW50LnRleHR1cmUgJiZcbiAgICAgICAgICBkZXB0aFN0ZW5jaWxBdHRhY2htZW50LnRleHR1cmUuX3RleHR1cmUuZm9ybWF0ID09PSBHTF9ERVBUSF9TVEVOQ0lMJDIpIHx8XG4gICAgICAgIChkZXB0aFN0ZW5jaWxBdHRhY2htZW50LnJlbmRlcmJ1ZmZlciAmJlxuICAgICAgICAgIGRlcHRoU3RlbmNpbEF0dGFjaG1lbnQucmVuZGVyYnVmZmVyLl9yZW5kZXJidWZmZXIuZm9ybWF0ID09PSBHTF9ERVBUSF9TVEVOQ0lMJDIpLFxuICAgICAgICAnaW52YWxpZCBkZXB0aC1zdGVuY2lsIGF0dGFjaG1lbnQgZm9yIGZyYW1lYnVmZmVyIG9iamVjdCcpO1xuXG4gICAgICAvLyBkZWNyZW1lbnQgcmVmZXJlbmNlc1xuICAgICAgZGVjRkJPUmVmcyhmcmFtZWJ1ZmZlcik7XG5cbiAgICAgIGZyYW1lYnVmZmVyLndpZHRoID0gd2lkdGg7XG4gICAgICBmcmFtZWJ1ZmZlci5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgIGZyYW1lYnVmZmVyLmNvbG9yQXR0YWNobWVudHMgPSBjb2xvckF0dGFjaG1lbnRzO1xuICAgICAgZnJhbWVidWZmZXIuZGVwdGhBdHRhY2htZW50ID0gZGVwdGhBdHRhY2htZW50O1xuICAgICAgZnJhbWVidWZmZXIuc3RlbmNpbEF0dGFjaG1lbnQgPSBzdGVuY2lsQXR0YWNobWVudDtcbiAgICAgIGZyYW1lYnVmZmVyLmRlcHRoU3RlbmNpbEF0dGFjaG1lbnQgPSBkZXB0aFN0ZW5jaWxBdHRhY2htZW50O1xuXG4gICAgICByZWdsRnJhbWVidWZmZXIuY29sb3IgPSBjb2xvckF0dGFjaG1lbnRzLm1hcCh1bndyYXBBdHRhY2htZW50KTtcbiAgICAgIHJlZ2xGcmFtZWJ1ZmZlci5kZXB0aCA9IHVud3JhcEF0dGFjaG1lbnQoZGVwdGhBdHRhY2htZW50KTtcbiAgICAgIHJlZ2xGcmFtZWJ1ZmZlci5zdGVuY2lsID0gdW53cmFwQXR0YWNobWVudChzdGVuY2lsQXR0YWNobWVudCk7XG4gICAgICByZWdsRnJhbWVidWZmZXIuZGVwdGhTdGVuY2lsID0gdW53cmFwQXR0YWNobWVudChkZXB0aFN0ZW5jaWxBdHRhY2htZW50KTtcblxuICAgICAgcmVnbEZyYW1lYnVmZmVyLndpZHRoID0gZnJhbWVidWZmZXIud2lkdGg7XG4gICAgICByZWdsRnJhbWVidWZmZXIuaGVpZ2h0ID0gZnJhbWVidWZmZXIuaGVpZ2h0O1xuXG4gICAgICB1cGRhdGVGcmFtZWJ1ZmZlcihmcmFtZWJ1ZmZlcik7XG5cbiAgICAgIHJldHVybiByZWdsRnJhbWVidWZmZXJcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNpemUgKHdfLCBoXykge1xuICAgICAgY2hlY2skMShmcmFtZWJ1ZmZlclN0YXRlLm5leHQgIT09IGZyYW1lYnVmZmVyLFxuICAgICAgICAnY2FuIG5vdCByZXNpemUgYSBmcmFtZWJ1ZmZlciB3aGljaCBpcyBjdXJyZW50bHkgaW4gdXNlJyk7XG5cbiAgICAgIHZhciB3ID0gTWF0aC5tYXgod18gfCAwLCAxKTtcbiAgICAgIHZhciBoID0gTWF0aC5tYXgoKGhfIHwgMCkgfHwgdywgMSk7XG4gICAgICBpZiAodyA9PT0gZnJhbWVidWZmZXIud2lkdGggJiYgaCA9PT0gZnJhbWVidWZmZXIuaGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiByZWdsRnJhbWVidWZmZXJcbiAgICAgIH1cblxuICAgICAgLy8gcmVzaXplIGFsbCBidWZmZXJzXG4gICAgICB2YXIgY29sb3JBdHRhY2htZW50cyA9IGZyYW1lYnVmZmVyLmNvbG9yQXR0YWNobWVudHM7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbG9yQXR0YWNobWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcmVzaXplQXR0YWNobWVudChjb2xvckF0dGFjaG1lbnRzW2ldLCB3LCBoKTtcbiAgICAgIH1cbiAgICAgIHJlc2l6ZUF0dGFjaG1lbnQoZnJhbWVidWZmZXIuZGVwdGhBdHRhY2htZW50LCB3LCBoKTtcbiAgICAgIHJlc2l6ZUF0dGFjaG1lbnQoZnJhbWVidWZmZXIuc3RlbmNpbEF0dGFjaG1lbnQsIHcsIGgpO1xuICAgICAgcmVzaXplQXR0YWNobWVudChmcmFtZWJ1ZmZlci5kZXB0aFN0ZW5jaWxBdHRhY2htZW50LCB3LCBoKTtcblxuICAgICAgZnJhbWVidWZmZXIud2lkdGggPSByZWdsRnJhbWVidWZmZXIud2lkdGggPSB3O1xuICAgICAgZnJhbWVidWZmZXIuaGVpZ2h0ID0gcmVnbEZyYW1lYnVmZmVyLmhlaWdodCA9IGg7XG5cbiAgICAgIHVwZGF0ZUZyYW1lYnVmZmVyKGZyYW1lYnVmZmVyKTtcblxuICAgICAgcmV0dXJuIHJlZ2xGcmFtZWJ1ZmZlclxuICAgIH1cblxuICAgIHJlZ2xGcmFtZWJ1ZmZlcihhMCwgYTEpO1xuXG4gICAgcmV0dXJuIGV4dGVuZChyZWdsRnJhbWVidWZmZXIsIHtcbiAgICAgIHJlc2l6ZTogcmVzaXplLFxuICAgICAgX3JlZ2xUeXBlOiAnZnJhbWVidWZmZXInLFxuICAgICAgX2ZyYW1lYnVmZmVyOiBmcmFtZWJ1ZmZlcixcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVzdHJveShmcmFtZWJ1ZmZlcik7XG4gICAgICAgIGRlY0ZCT1JlZnMoZnJhbWVidWZmZXIpO1xuICAgICAgfSxcbiAgICAgIHVzZTogZnVuY3Rpb24gKGJsb2NrKSB7XG4gICAgICAgIGZyYW1lYnVmZmVyU3RhdGUuc2V0RkJPKHtcbiAgICAgICAgICBmcmFtZWJ1ZmZlcjogcmVnbEZyYW1lYnVmZmVyXG4gICAgICAgIH0sIGJsb2NrKTtcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ3ViZUZCTyAob3B0aW9ucykge1xuICAgIHZhciBmYWNlcyA9IEFycmF5KDYpO1xuXG4gICAgZnVuY3Rpb24gcmVnbEZyYW1lYnVmZmVyQ3ViZSAoYSkge1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGNoZWNrJDEoZmFjZXMuaW5kZXhPZihmcmFtZWJ1ZmZlclN0YXRlLm5leHQpIDwgMCxcbiAgICAgICAgJ2NhbiBub3QgdXBkYXRlIGZyYW1lYnVmZmVyIHdoaWNoIGlzIGN1cnJlbnRseSBpbiB1c2UnKTtcblxuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgY29sb3I6IG51bGxcbiAgICAgIH07XG5cbiAgICAgIHZhciByYWRpdXMgPSAwO1xuXG4gICAgICB2YXIgY29sb3JCdWZmZXIgPSBudWxsO1xuICAgICAgdmFyIGNvbG9yRm9ybWF0ID0gJ3JnYmEnO1xuICAgICAgdmFyIGNvbG9yVHlwZSA9ICd1aW50OCc7XG4gICAgICB2YXIgY29sb3JDb3VudCA9IDE7XG5cbiAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgcmFkaXVzID0gYSB8IDA7XG4gICAgICB9IGVsc2UgaWYgKCFhKSB7XG4gICAgICAgIHJhZGl1cyA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGVjayQxLnR5cGUoYSwgJ29iamVjdCcsICdpbnZhbGlkIGFyZ3VtZW50cyBmb3IgZnJhbWVidWZmZXInKTtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhO1xuXG4gICAgICAgIGlmICgnc2hhcGUnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICB2YXIgc2hhcGUgPSBvcHRpb25zLnNoYXBlO1xuICAgICAgICAgIGNoZWNrJDEoXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHNoYXBlKSAmJiBzaGFwZS5sZW5ndGggPj0gMixcbiAgICAgICAgICAgICdpbnZhbGlkIHNoYXBlIGZvciBmcmFtZWJ1ZmZlcicpO1xuICAgICAgICAgIGNoZWNrJDEoXG4gICAgICAgICAgICBzaGFwZVswXSA9PT0gc2hhcGVbMV0sXG4gICAgICAgICAgICAnY3ViZSBmcmFtZWJ1ZmZlciBtdXN0IGJlIHNxdWFyZScpO1xuICAgICAgICAgIHJhZGl1cyA9IHNoYXBlWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICgncmFkaXVzJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICByYWRpdXMgPSBvcHRpb25zLnJhZGl1cyB8IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgnd2lkdGgnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJhZGl1cyA9IG9wdGlvbnMud2lkdGggfCAwO1xuICAgICAgICAgICAgaWYgKCdoZWlnaHQnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgY2hlY2skMShvcHRpb25zLmhlaWdodCA9PT0gcmFkaXVzLCAnbXVzdCBiZSBzcXVhcmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCdoZWlnaHQnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJhZGl1cyA9IG9wdGlvbnMuaGVpZ2h0IHwgMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ2NvbG9yJyBpbiBvcHRpb25zIHx8XG4gICAgICAgICAgICAnY29sb3JzJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgY29sb3JCdWZmZXIgPVxuICAgICAgICAgICAgb3B0aW9ucy5jb2xvciB8fFxuICAgICAgICAgICAgb3B0aW9ucy5jb2xvcnM7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29sb3JCdWZmZXIpKSB7XG4gICAgICAgICAgICBjaGVjayQxKFxuICAgICAgICAgICAgICBjb2xvckJ1ZmZlci5sZW5ndGggPT09IDEgfHwgZXh0ZW5zaW9ucy53ZWJnbF9kcmF3X2J1ZmZlcnMsXG4gICAgICAgICAgICAgICdtdWx0aXBsZSByZW5kZXIgdGFyZ2V0cyBub3Qgc3VwcG9ydGVkJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFjb2xvckJ1ZmZlcikge1xuICAgICAgICAgIGlmICgnY29sb3JDb3VudCcgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgY29sb3JDb3VudCA9IG9wdGlvbnMuY29sb3JDb3VudCB8IDA7XG4gICAgICAgICAgICBjaGVjayQxKGNvbG9yQ291bnQgPiAwLCAnaW52YWxpZCBjb2xvciBidWZmZXIgY291bnQnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoJ2NvbG9yVHlwZScgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgY2hlY2skMS5vbmVPZihcbiAgICAgICAgICAgICAgb3B0aW9ucy5jb2xvclR5cGUsIGNvbG9yVHlwZXMsXG4gICAgICAgICAgICAgICdpbnZhbGlkIGNvbG9yIHR5cGUnKTtcbiAgICAgICAgICAgIGNvbG9yVHlwZSA9IG9wdGlvbnMuY29sb3JUeXBlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgnY29sb3JGb3JtYXQnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbG9yRm9ybWF0ID0gb3B0aW9ucy5jb2xvckZvcm1hdDtcbiAgICAgICAgICAgIGNoZWNrJDEub25lT2YoXG4gICAgICAgICAgICAgIG9wdGlvbnMuY29sb3JGb3JtYXQsIGNvbG9yVGV4dHVyZUZvcm1hdHMsXG4gICAgICAgICAgICAgICdpbnZhbGlkIGNvbG9yIGZvcm1hdCBmb3IgdGV4dHVyZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgnZGVwdGgnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICBwYXJhbXMuZGVwdGggPSBvcHRpb25zLmRlcHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCdzdGVuY2lsJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgcGFyYW1zLnN0ZW5jaWwgPSBvcHRpb25zLnN0ZW5jaWw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ2RlcHRoU3RlbmNpbCcgaW4gb3B0aW9ucykge1xuICAgICAgICAgIHBhcmFtcy5kZXB0aFN0ZW5jaWwgPSBvcHRpb25zLmRlcHRoU3RlbmNpbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgY29sb3JDdWJlcztcbiAgICAgIGlmIChjb2xvckJ1ZmZlcikge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2xvckJ1ZmZlcikpIHtcbiAgICAgICAgICBjb2xvckN1YmVzID0gW107XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbG9yQnVmZmVyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb2xvckN1YmVzW2ldID0gY29sb3JCdWZmZXJbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbG9yQ3ViZXMgPSBbIGNvbG9yQnVmZmVyIF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbG9yQ3ViZXMgPSBBcnJheShjb2xvckNvdW50KTtcbiAgICAgICAgdmFyIGN1YmVNYXBQYXJhbXMgPSB7XG4gICAgICAgICAgcmFkaXVzOiByYWRpdXMsXG4gICAgICAgICAgZm9ybWF0OiBjb2xvckZvcm1hdCxcbiAgICAgICAgICB0eXBlOiBjb2xvclR5cGVcbiAgICAgICAgfTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbG9yQ291bnQ7ICsraSkge1xuICAgICAgICAgIGNvbG9yQ3ViZXNbaV0gPSB0ZXh0dXJlU3RhdGUuY3JlYXRlQ3ViZShjdWJlTWFwUGFyYW1zKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDaGVjayBjb2xvciBjdWJlc1xuICAgICAgcGFyYW1zLmNvbG9yID0gQXJyYXkoY29sb3JDdWJlcy5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNvbG9yQ3ViZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGN1YmUgPSBjb2xvckN1YmVzW2ldO1xuICAgICAgICBjaGVjayQxKFxuICAgICAgICAgIHR5cGVvZiBjdWJlID09PSAnZnVuY3Rpb24nICYmIGN1YmUuX3JlZ2xUeXBlID09PSAndGV4dHVyZUN1YmUnLFxuICAgICAgICAgICdpbnZhbGlkIGN1YmUgbWFwJyk7XG4gICAgICAgIHJhZGl1cyA9IHJhZGl1cyB8fCBjdWJlLndpZHRoO1xuICAgICAgICBjaGVjayQxKFxuICAgICAgICAgIGN1YmUud2lkdGggPT09IHJhZGl1cyAmJiBjdWJlLmhlaWdodCA9PT0gcmFkaXVzLFxuICAgICAgICAgICdpbnZhbGlkIGN1YmUgbWFwIHNoYXBlJyk7XG4gICAgICAgIHBhcmFtcy5jb2xvcltpXSA9IHtcbiAgICAgICAgICB0YXJnZXQ6IEdMX1RFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCQyLFxuICAgICAgICAgIGRhdGE6IGNvbG9yQ3ViZXNbaV1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gMDsgaSA8IDY7ICsraSkge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNvbG9yQ3ViZXMubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICBwYXJhbXMuY29sb3Jbal0udGFyZ2V0ID0gR0xfVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YJDIgKyBpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJldXNlIGRlcHRoLXN0ZW5jaWwgYXR0YWNobWVudHMgYWNyb3NzIGFsbCBjdWJlIG1hcHNcbiAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgcGFyYW1zLmRlcHRoID0gZmFjZXNbMF0uZGVwdGg7XG4gICAgICAgICAgcGFyYW1zLnN0ZW5jaWwgPSBmYWNlc1swXS5zdGVuY2lsO1xuICAgICAgICAgIHBhcmFtcy5kZXB0aFN0ZW5jaWwgPSBmYWNlc1swXS5kZXB0aFN0ZW5jaWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGZhY2VzW2ldKSB7XG4gICAgICAgICAgKGZhY2VzW2ldKShwYXJhbXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZhY2VzW2ldID0gY3JlYXRlRkJPKHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGV4dGVuZChyZWdsRnJhbWVidWZmZXJDdWJlLCB7XG4gICAgICAgIHdpZHRoOiByYWRpdXMsXG4gICAgICAgIGhlaWdodDogcmFkaXVzLFxuICAgICAgICBjb2xvcjogY29sb3JDdWJlc1xuICAgICAgfSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNpemUgKHJhZGl1c18pIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIHJhZGl1cyA9IHJhZGl1c18gfCAwO1xuICAgICAgY2hlY2skMShyYWRpdXMgPiAwICYmIHJhZGl1cyA8PSBsaW1pdHMubWF4Q3ViZU1hcFNpemUsXG4gICAgICAgICdpbnZhbGlkIHJhZGl1cyBmb3IgY3ViZSBmYm8nKTtcblxuICAgICAgaWYgKHJhZGl1cyA9PT0gcmVnbEZyYW1lYnVmZmVyQ3ViZS53aWR0aCkge1xuICAgICAgICByZXR1cm4gcmVnbEZyYW1lYnVmZmVyQ3ViZVxuICAgICAgfVxuXG4gICAgICB2YXIgY29sb3JzID0gcmVnbEZyYW1lYnVmZmVyQ3ViZS5jb2xvcjtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjb2xvcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29sb3JzW2ldLnJlc2l6ZShyYWRpdXMpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgNjsgKytpKSB7XG4gICAgICAgIGZhY2VzW2ldLnJlc2l6ZShyYWRpdXMpO1xuICAgICAgfVxuXG4gICAgICByZWdsRnJhbWVidWZmZXJDdWJlLndpZHRoID0gcmVnbEZyYW1lYnVmZmVyQ3ViZS5oZWlnaHQgPSByYWRpdXM7XG5cbiAgICAgIHJldHVybiByZWdsRnJhbWVidWZmZXJDdWJlXG4gICAgfVxuXG4gICAgcmVnbEZyYW1lYnVmZmVyQ3ViZShvcHRpb25zKTtcblxuICAgIHJldHVybiBleHRlbmQocmVnbEZyYW1lYnVmZmVyQ3ViZSwge1xuICAgICAgZmFjZXM6IGZhY2VzLFxuICAgICAgcmVzaXplOiByZXNpemUsXG4gICAgICBfcmVnbFR5cGU6ICdmcmFtZWJ1ZmZlckN1YmUnLFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgICAgICBmYWNlcy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XG4gICAgICAgICAgZi5kZXN0cm95KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiByZXN0b3JlRnJhbWVidWZmZXJzICgpIHtcbiAgICBmcmFtZWJ1ZmZlclN0YXRlLmN1ciA9IG51bGw7XG4gICAgZnJhbWVidWZmZXJTdGF0ZS5uZXh0ID0gbnVsbDtcbiAgICBmcmFtZWJ1ZmZlclN0YXRlLmRpcnR5ID0gdHJ1ZTtcbiAgICB2YWx1ZXMoZnJhbWVidWZmZXJTZXQpLmZvckVhY2goZnVuY3Rpb24gKGZiKSB7XG4gICAgICBmYi5mcmFtZWJ1ZmZlciA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG4gICAgICB1cGRhdGVGcmFtZWJ1ZmZlcihmYik7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZXh0ZW5kKGZyYW1lYnVmZmVyU3RhdGUsIHtcbiAgICBnZXRGcmFtZWJ1ZmZlcjogZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgaWYgKHR5cGVvZiBvYmplY3QgPT09ICdmdW5jdGlvbicgJiYgb2JqZWN0Ll9yZWdsVHlwZSA9PT0gJ2ZyYW1lYnVmZmVyJykge1xuICAgICAgICB2YXIgZmJvID0gb2JqZWN0Ll9mcmFtZWJ1ZmZlcjtcbiAgICAgICAgaWYgKGZibyBpbnN0YW5jZW9mIFJFR0xGcmFtZWJ1ZmZlcikge1xuICAgICAgICAgIHJldHVybiBmYm9cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9LFxuICAgIGNyZWF0ZTogY3JlYXRlRkJPLFxuICAgIGNyZWF0ZUN1YmU6IGNyZWF0ZUN1YmVGQk8sXG4gICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhbHVlcyhmcmFtZWJ1ZmZlclNldCkuZm9yRWFjaChkZXN0cm95KTtcbiAgICB9LFxuICAgIHJlc3RvcmU6IHJlc3RvcmVGcmFtZWJ1ZmZlcnNcbiAgfSlcbn1cblxudmFyIEdMX0ZMT0FUJDYgPSA1MTI2O1xuXG5mdW5jdGlvbiBBdHRyaWJ1dGVSZWNvcmQgKCkge1xuICB0aGlzLnN0YXRlID0gMDtcblxuICB0aGlzLnggPSAwLjA7XG4gIHRoaXMueSA9IDAuMDtcbiAgdGhpcy56ID0gMC4wO1xuICB0aGlzLncgPSAwLjA7XG5cbiAgdGhpcy5idWZmZXIgPSBudWxsO1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLm5vcm1hbGl6ZWQgPSBmYWxzZTtcbiAgdGhpcy50eXBlID0gR0xfRkxPQVQkNjtcbiAgdGhpcy5vZmZzZXQgPSAwO1xuICB0aGlzLnN0cmlkZSA9IDA7XG4gIHRoaXMuZGl2aXNvciA9IDA7XG59XG5cbmZ1bmN0aW9uIHdyYXBBdHRyaWJ1dGVTdGF0ZSAoXG4gIGdsLFxuICBleHRlbnNpb25zLFxuICBsaW1pdHMsXG4gIHN0cmluZ1N0b3JlKSB7XG4gIHZhciBOVU1fQVRUUklCVVRFUyA9IGxpbWl0cy5tYXhBdHRyaWJ1dGVzO1xuICB2YXIgYXR0cmlidXRlQmluZGluZ3MgPSBuZXcgQXJyYXkoTlVNX0FUVFJJQlVURVMpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IE5VTV9BVFRSSUJVVEVTOyArK2kpIHtcbiAgICBhdHRyaWJ1dGVCaW5kaW5nc1tpXSA9IG5ldyBBdHRyaWJ1dGVSZWNvcmQoKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgUmVjb3JkOiBBdHRyaWJ1dGVSZWNvcmQsXG4gICAgc2NvcGU6IHt9LFxuICAgIHN0YXRlOiBhdHRyaWJ1dGVCaW5kaW5nc1xuICB9XG59XG5cbnZhciBHTF9GUkFHTUVOVF9TSEFERVIgPSAzNTYzMjtcbnZhciBHTF9WRVJURVhfU0hBREVSID0gMzU2MzM7XG5cbnZhciBHTF9BQ1RJVkVfVU5JRk9STVMgPSAweDhCODY7XG52YXIgR0xfQUNUSVZFX0FUVFJJQlVURVMgPSAweDhCODk7XG5cbmZ1bmN0aW9uIHdyYXBTaGFkZXJTdGF0ZSAoZ2wsIHN0cmluZ1N0b3JlLCBzdGF0cywgY29uZmlnKSB7XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBnbHNsIGNvbXBpbGF0aW9uIGFuZCBsaW5raW5nXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgZnJhZ1NoYWRlcnMgPSB7fTtcbiAgdmFyIHZlcnRTaGFkZXJzID0ge307XG5cbiAgZnVuY3Rpb24gQWN0aXZlSW5mbyAobmFtZSwgaWQsIGxvY2F0aW9uLCBpbmZvKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmlkID0gaWQ7XG4gICAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgIHRoaXMuaW5mbyA9IGluZm87XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnRBY3RpdmVJbmZvIChsaXN0LCBpbmZvKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAobGlzdFtpXS5pZCA9PT0gaW5mby5pZCkge1xuICAgICAgICBsaXN0W2ldLmxvY2F0aW9uID0gaW5mby5sb2NhdGlvbjtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICAgIGxpc3QucHVzaChpbmZvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNoYWRlciAodHlwZSwgaWQsIGNvbW1hbmQpIHtcbiAgICB2YXIgY2FjaGUgPSB0eXBlID09PSBHTF9GUkFHTUVOVF9TSEFERVIgPyBmcmFnU2hhZGVycyA6IHZlcnRTaGFkZXJzO1xuICAgIHZhciBzaGFkZXIgPSBjYWNoZVtpZF07XG5cbiAgICBpZiAoIXNoYWRlcikge1xuICAgICAgdmFyIHNvdXJjZSA9IHN0cmluZ1N0b3JlLnN0cihpZCk7XG4gICAgICBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIodHlwZSk7XG4gICAgICBnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzb3VyY2UpO1xuICAgICAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xuICAgICAgY2hlY2skMS5zaGFkZXJFcnJvcihnbCwgc2hhZGVyLCBzb3VyY2UsIHR5cGUsIGNvbW1hbmQpO1xuICAgICAgY2FjaGVbaWRdID0gc2hhZGVyO1xuICAgIH1cblxuICAgIHJldHVybiBzaGFkZXJcbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBwcm9ncmFtIGxpbmtpbmdcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIHZhciBwcm9ncmFtQ2FjaGUgPSB7fTtcbiAgdmFyIHByb2dyYW1MaXN0ID0gW107XG5cbiAgdmFyIFBST0dSQU1fQ09VTlRFUiA9IDA7XG5cbiAgZnVuY3Rpb24gUkVHTFByb2dyYW0gKGZyYWdJZCwgdmVydElkKSB7XG4gICAgdGhpcy5pZCA9IFBST0dSQU1fQ09VTlRFUisrO1xuICAgIHRoaXMuZnJhZ0lkID0gZnJhZ0lkO1xuICAgIHRoaXMudmVydElkID0gdmVydElkO1xuICAgIHRoaXMucHJvZ3JhbSA9IG51bGw7XG4gICAgdGhpcy51bmlmb3JtcyA9IFtdO1xuICAgIHRoaXMuYXR0cmlidXRlcyA9IFtdO1xuXG4gICAgaWYgKGNvbmZpZy5wcm9maWxlKSB7XG4gICAgICB0aGlzLnN0YXRzID0ge1xuICAgICAgICB1bmlmb3Jtc0NvdW50OiAwLFxuICAgICAgICBhdHRyaWJ1dGVzQ291bnQ6IDBcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbGlua1Byb2dyYW0gKGRlc2MsIGNvbW1hbmQpIHtcbiAgICB2YXIgaSwgaW5mbztcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBjb21waWxlICYgbGlua1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB2YXIgZnJhZ1NoYWRlciA9IGdldFNoYWRlcihHTF9GUkFHTUVOVF9TSEFERVIsIGRlc2MuZnJhZ0lkKTtcbiAgICB2YXIgdmVydFNoYWRlciA9IGdldFNoYWRlcihHTF9WRVJURVhfU0hBREVSLCBkZXNjLnZlcnRJZCk7XG5cbiAgICB2YXIgcHJvZ3JhbSA9IGRlc2MucHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcbiAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgZnJhZ1NoYWRlcik7XG4gICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRTaGFkZXIpO1xuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xuICAgIGNoZWNrJDEubGlua0Vycm9yKFxuICAgICAgZ2wsXG4gICAgICBwcm9ncmFtLFxuICAgICAgc3RyaW5nU3RvcmUuc3RyKGRlc2MuZnJhZ0lkKSxcbiAgICAgIHN0cmluZ1N0b3JlLnN0cihkZXNjLnZlcnRJZCksXG4gICAgICBjb21tYW5kKTtcblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBncmFiIHVuaWZvcm1zXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHZhciBudW1Vbmlmb3JtcyA9IGdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgR0xfQUNUSVZFX1VOSUZPUk1TKTtcbiAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcbiAgICAgIGRlc2Muc3RhdHMudW5pZm9ybXNDb3VudCA9IG51bVVuaWZvcm1zO1xuICAgIH1cbiAgICB2YXIgdW5pZm9ybXMgPSBkZXNjLnVuaWZvcm1zO1xuICAgIGZvciAoaSA9IDA7IGkgPCBudW1Vbmlmb3JtczsgKytpKSB7XG4gICAgICBpbmZvID0gZ2wuZ2V0QWN0aXZlVW5pZm9ybShwcm9ncmFtLCBpKTtcbiAgICAgIGlmIChpbmZvKSB7XG4gICAgICAgIGlmIChpbmZvLnNpemUgPiAxKSB7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpbmZvLnNpemU7ICsraikge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBpbmZvLm5hbWUucmVwbGFjZSgnWzBdJywgJ1snICsgaiArICddJyk7XG4gICAgICAgICAgICBpbnNlcnRBY3RpdmVJbmZvKHVuaWZvcm1zLCBuZXcgQWN0aXZlSW5mbyhcbiAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgc3RyaW5nU3RvcmUuaWQobmFtZSksXG4gICAgICAgICAgICAgIGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCBuYW1lKSxcbiAgICAgICAgICAgICAgaW5mbykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnNlcnRBY3RpdmVJbmZvKHVuaWZvcm1zLCBuZXcgQWN0aXZlSW5mbyhcbiAgICAgICAgICAgIGluZm8ubmFtZSxcbiAgICAgICAgICAgIHN0cmluZ1N0b3JlLmlkKGluZm8ubmFtZSksXG4gICAgICAgICAgICBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgaW5mby5uYW1lKSxcbiAgICAgICAgICAgIGluZm8pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBncmFiIGF0dHJpYnV0ZXNcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgdmFyIG51bUF0dHJpYnV0ZXMgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIEdMX0FDVElWRV9BVFRSSUJVVEVTKTtcbiAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcbiAgICAgIGRlc2Muc3RhdHMuYXR0cmlidXRlc0NvdW50ID0gbnVtQXR0cmlidXRlcztcbiAgICB9XG5cbiAgICB2YXIgYXR0cmlidXRlcyA9IGRlc2MuYXR0cmlidXRlcztcbiAgICBmb3IgKGkgPSAwOyBpIDwgbnVtQXR0cmlidXRlczsgKytpKSB7XG4gICAgICBpbmZvID0gZ2wuZ2V0QWN0aXZlQXR0cmliKHByb2dyYW0sIGkpO1xuICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgaW5zZXJ0QWN0aXZlSW5mbyhhdHRyaWJ1dGVzLCBuZXcgQWN0aXZlSW5mbyhcbiAgICAgICAgICBpbmZvLm5hbWUsXG4gICAgICAgICAgc3RyaW5nU3RvcmUuaWQoaW5mby5uYW1lKSxcbiAgICAgICAgICBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBpbmZvLm5hbWUpLFxuICAgICAgICAgIGluZm8pKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcbiAgICBzdGF0cy5nZXRNYXhVbmlmb3Jtc0NvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG0gPSAwO1xuICAgICAgcHJvZ3JhbUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoZGVzYykge1xuICAgICAgICBpZiAoZGVzYy5zdGF0cy51bmlmb3Jtc0NvdW50ID4gbSkge1xuICAgICAgICAgIG0gPSBkZXNjLnN0YXRzLnVuaWZvcm1zQ291bnQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1cbiAgICB9O1xuXG4gICAgc3RhdHMuZ2V0TWF4QXR0cmlidXRlc0NvdW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIG0gPSAwO1xuICAgICAgcHJvZ3JhbUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoZGVzYykge1xuICAgICAgICBpZiAoZGVzYy5zdGF0cy5hdHRyaWJ1dGVzQ291bnQgPiBtKSB7XG4gICAgICAgICAgbSA9IGRlc2Muc3RhdHMuYXR0cmlidXRlc0NvdW50O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc3RvcmVTaGFkZXJzICgpIHtcbiAgICBmcmFnU2hhZGVycyA9IHt9O1xuICAgIHZlcnRTaGFkZXJzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9ncmFtTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGlua1Byb2dyYW0ocHJvZ3JhbUxpc3RbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBkZWxldGVTaGFkZXIgPSBnbC5kZWxldGVTaGFkZXIuYmluZChnbCk7XG4gICAgICB2YWx1ZXMoZnJhZ1NoYWRlcnMpLmZvckVhY2goZGVsZXRlU2hhZGVyKTtcbiAgICAgIGZyYWdTaGFkZXJzID0ge307XG4gICAgICB2YWx1ZXModmVydFNoYWRlcnMpLmZvckVhY2goZGVsZXRlU2hhZGVyKTtcbiAgICAgIHZlcnRTaGFkZXJzID0ge307XG5cbiAgICAgIHByb2dyYW1MaXN0LmZvckVhY2goZnVuY3Rpb24gKGRlc2MpIHtcbiAgICAgICAgZ2wuZGVsZXRlUHJvZ3JhbShkZXNjLnByb2dyYW0pO1xuICAgICAgfSk7XG4gICAgICBwcm9ncmFtTGlzdC5sZW5ndGggPSAwO1xuICAgICAgcHJvZ3JhbUNhY2hlID0ge307XG5cbiAgICAgIHN0YXRzLnNoYWRlckNvdW50ID0gMDtcbiAgICB9LFxuXG4gICAgcHJvZ3JhbTogZnVuY3Rpb24gKHZlcnRJZCwgZnJhZ0lkLCBjb21tYW5kKSB7XG4gICAgICBjaGVjayQxLmNvbW1hbmQodmVydElkID49IDAsICdtaXNzaW5nIHZlcnRleCBzaGFkZXInLCBjb21tYW5kKTtcbiAgICAgIGNoZWNrJDEuY29tbWFuZChmcmFnSWQgPj0gMCwgJ21pc3NpbmcgZnJhZ21lbnQgc2hhZGVyJywgY29tbWFuZCk7XG5cbiAgICAgIHZhciBjYWNoZSA9IHByb2dyYW1DYWNoZVtmcmFnSWRdO1xuICAgICAgaWYgKCFjYWNoZSkge1xuICAgICAgICBjYWNoZSA9IHByb2dyYW1DYWNoZVtmcmFnSWRdID0ge307XG4gICAgICB9XG4gICAgICB2YXIgcHJvZ3JhbSA9IGNhY2hlW3ZlcnRJZF07XG4gICAgICBpZiAoIXByb2dyYW0pIHtcbiAgICAgICAgcHJvZ3JhbSA9IG5ldyBSRUdMUHJvZ3JhbShmcmFnSWQsIHZlcnRJZCk7XG4gICAgICAgIHN0YXRzLnNoYWRlckNvdW50Kys7XG5cbiAgICAgICAgbGlua1Byb2dyYW0ocHJvZ3JhbSwgY29tbWFuZCk7XG4gICAgICAgIGNhY2hlW3ZlcnRJZF0gPSBwcm9ncmFtO1xuICAgICAgICBwcm9ncmFtTGlzdC5wdXNoKHByb2dyYW0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb2dyYW1cbiAgICB9LFxuXG4gICAgcmVzdG9yZTogcmVzdG9yZVNoYWRlcnMsXG5cbiAgICBzaGFkZXI6IGdldFNoYWRlcixcblxuICAgIGZyYWc6IC0xLFxuICAgIHZlcnQ6IC0xXG4gIH1cbn1cblxudmFyIEdMX1JHQkEkMyA9IDY0MDg7XG52YXIgR0xfVU5TSUdORURfQllURSQ3ID0gNTEyMTtcbnZhciBHTF9QQUNLX0FMSUdOTUVOVCA9IDB4MEQwNTtcbnZhciBHTF9GTE9BVCQ3ID0gMHgxNDA2OyAvLyA1MTI2XG5cbmZ1bmN0aW9uIHdyYXBSZWFkUGl4ZWxzIChcbiAgZ2wsXG4gIGZyYW1lYnVmZmVyU3RhdGUsXG4gIHJlZ2xQb2xsLFxuICBjb250ZXh0LFxuICBnbEF0dHJpYnV0ZXMsXG4gIGV4dGVuc2lvbnMsXG4gIGxpbWl0cykge1xuICBmdW5jdGlvbiByZWFkUGl4ZWxzSW1wbCAoaW5wdXQpIHtcbiAgICB2YXIgdHlwZTtcbiAgICBpZiAoZnJhbWVidWZmZXJTdGF0ZS5uZXh0ID09PSBudWxsKSB7XG4gICAgICBjaGVjayQxKFxuICAgICAgICBnbEF0dHJpYnV0ZXMucHJlc2VydmVEcmF3aW5nQnVmZmVyLFxuICAgICAgICAneW91IG11c3QgY3JlYXRlIGEgd2ViZ2wgY29udGV4dCB3aXRoIFwicHJlc2VydmVEcmF3aW5nQnVmZmVyXCI6dHJ1ZSBpbiBvcmRlciB0byByZWFkIHBpeGVscyBmcm9tIHRoZSBkcmF3aW5nIGJ1ZmZlcicpO1xuICAgICAgdHlwZSA9IEdMX1VOU0lHTkVEX0JZVEUkNztcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2skMShcbiAgICAgICAgZnJhbWVidWZmZXJTdGF0ZS5uZXh0LmNvbG9yQXR0YWNobWVudHNbMF0udGV4dHVyZSAhPT0gbnVsbCxcbiAgICAgICAgICAnWW91IGNhbm5vdCByZWFkIGZyb20gYSByZW5kZXJidWZmZXInKTtcbiAgICAgIHR5cGUgPSBmcmFtZWJ1ZmZlclN0YXRlLm5leHQuY29sb3JBdHRhY2htZW50c1swXS50ZXh0dXJlLl90ZXh0dXJlLnR5cGU7XG5cbiAgICAgIGlmIChleHRlbnNpb25zLm9lc190ZXh0dXJlX2Zsb2F0KSB7XG4gICAgICAgIGNoZWNrJDEoXG4gICAgICAgICAgdHlwZSA9PT0gR0xfVU5TSUdORURfQllURSQ3IHx8IHR5cGUgPT09IEdMX0ZMT0FUJDcsXG4gICAgICAgICAgJ1JlYWRpbmcgZnJvbSBhIGZyYW1lYnVmZmVyIGlzIG9ubHkgYWxsb3dlZCBmb3IgdGhlIHR5cGVzIFxcJ3VpbnQ4XFwnIGFuZCBcXCdmbG9hdFxcJycpO1xuXG4gICAgICAgIGlmICh0eXBlID09PSBHTF9GTE9BVCQ3KSB7XG4gICAgICAgICAgY2hlY2skMShsaW1pdHMucmVhZEZsb2F0LCAnUmVhZGluZyBcXCdmbG9hdFxcJyB2YWx1ZXMgaXMgbm90IHBlcm1pdHRlZCBpbiB5b3VyIGJyb3dzZXIuIEZvciBhIGZhbGxiYWNrLCBwbGVhc2Ugc2VlOiBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9nbHNsLXJlYWQtZmxvYXQnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hlY2skMShcbiAgICAgICAgICB0eXBlID09PSBHTF9VTlNJR05FRF9CWVRFJDcsXG4gICAgICAgICAgJ1JlYWRpbmcgZnJvbSBhIGZyYW1lYnVmZmVyIGlzIG9ubHkgYWxsb3dlZCBmb3IgdGhlIHR5cGUgXFwndWludDhcXCcnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgeCA9IDA7XG4gICAgdmFyIHkgPSAwO1xuICAgIHZhciB3aWR0aCA9IGNvbnRleHQuZnJhbWVidWZmZXJXaWR0aDtcbiAgICB2YXIgaGVpZ2h0ID0gY29udGV4dC5mcmFtZWJ1ZmZlckhlaWdodDtcbiAgICB2YXIgZGF0YSA9IG51bGw7XG5cbiAgICBpZiAoaXNUeXBlZEFycmF5KGlucHV0KSkge1xuICAgICAgZGF0YSA9IGlucHV0O1xuICAgIH0gZWxzZSBpZiAoaW5wdXQpIHtcbiAgICAgIGNoZWNrJDEudHlwZShpbnB1dCwgJ29iamVjdCcsICdpbnZhbGlkIGFyZ3VtZW50cyB0byByZWdsLnJlYWQoKScpO1xuICAgICAgeCA9IGlucHV0LnggfCAwO1xuICAgICAgeSA9IGlucHV0LnkgfCAwO1xuICAgICAgY2hlY2skMShcbiAgICAgICAgeCA+PSAwICYmIHggPCBjb250ZXh0LmZyYW1lYnVmZmVyV2lkdGgsXG4gICAgICAgICdpbnZhbGlkIHggb2Zmc2V0IGZvciByZWdsLnJlYWQnKTtcbiAgICAgIGNoZWNrJDEoXG4gICAgICAgIHkgPj0gMCAmJiB5IDwgY29udGV4dC5mcmFtZWJ1ZmZlckhlaWdodCxcbiAgICAgICAgJ2ludmFsaWQgeSBvZmZzZXQgZm9yIHJlZ2wucmVhZCcpO1xuICAgICAgd2lkdGggPSAoaW5wdXQud2lkdGggfHwgKGNvbnRleHQuZnJhbWVidWZmZXJXaWR0aCAtIHgpKSB8IDA7XG4gICAgICBoZWlnaHQgPSAoaW5wdXQuaGVpZ2h0IHx8IChjb250ZXh0LmZyYW1lYnVmZmVySGVpZ2h0IC0geSkpIHwgMDtcbiAgICAgIGRhdGEgPSBpbnB1dC5kYXRhIHx8IG51bGw7XG4gICAgfVxuXG4gICAgLy8gc2FuaXR5IGNoZWNrIGlucHV0LmRhdGFcbiAgICBpZiAoZGF0YSkge1xuICAgICAgaWYgKHR5cGUgPT09IEdMX1VOU0lHTkVEX0JZVEUkNykge1xuICAgICAgICBjaGVjayQxKFxuICAgICAgICAgIGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5LFxuICAgICAgICAgICdidWZmZXIgbXVzdCBiZSBcXCdVaW50OEFycmF5XFwnIHdoZW4gcmVhZGluZyBmcm9tIGEgZnJhbWVidWZmZXIgb2YgdHlwZSBcXCd1aW50OFxcJycpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBHTF9GTE9BVCQ3KSB7XG4gICAgICAgIGNoZWNrJDEoXG4gICAgICAgICAgZGF0YSBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSxcbiAgICAgICAgICAnYnVmZmVyIG11c3QgYmUgXFwnRmxvYXQzMkFycmF5XFwnIHdoZW4gcmVhZGluZyBmcm9tIGEgZnJhbWVidWZmZXIgb2YgdHlwZSBcXCdmbG9hdFxcJycpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrJDEoXG4gICAgICB3aWR0aCA+IDAgJiYgd2lkdGggKyB4IDw9IGNvbnRleHQuZnJhbWVidWZmZXJXaWR0aCxcbiAgICAgICdpbnZhbGlkIHdpZHRoIGZvciByZWFkIHBpeGVscycpO1xuICAgIGNoZWNrJDEoXG4gICAgICBoZWlnaHQgPiAwICYmIGhlaWdodCArIHkgPD0gY29udGV4dC5mcmFtZWJ1ZmZlckhlaWdodCxcbiAgICAgICdpbnZhbGlkIGhlaWdodCBmb3IgcmVhZCBwaXhlbHMnKTtcblxuICAgIC8vIFVwZGF0ZSBXZWJHTCBzdGF0ZVxuICAgIHJlZ2xQb2xsKCk7XG5cbiAgICAvLyBDb21wdXRlIHNpemVcbiAgICB2YXIgc2l6ZSA9IHdpZHRoICogaGVpZ2h0ICogNDtcblxuICAgIC8vIEFsbG9jYXRlIGRhdGFcbiAgICBpZiAoIWRhdGEpIHtcbiAgICAgIGlmICh0eXBlID09PSBHTF9VTlNJR05FRF9CWVRFJDcpIHtcbiAgICAgICAgZGF0YSA9IG5ldyBVaW50OEFycmF5KHNpemUpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBHTF9GTE9BVCQ3KSB7XG4gICAgICAgIGRhdGEgPSBkYXRhIHx8IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gVHlwZSBjaGVja1xuICAgIGNoZWNrJDEuaXNUeXBlZEFycmF5KGRhdGEsICdkYXRhIGJ1ZmZlciBmb3IgcmVnbC5yZWFkKCkgbXVzdCBiZSBhIHR5cGVkYXJyYXknKTtcbiAgICBjaGVjayQxKGRhdGEuYnl0ZUxlbmd0aCA+PSBzaXplLCAnZGF0YSBidWZmZXIgZm9yIHJlZ2wucmVhZCgpIHRvbyBzbWFsbCcpO1xuXG4gICAgLy8gUnVuIHJlYWQgcGl4ZWxzXG4gICAgZ2wucGl4ZWxTdG9yZWkoR0xfUEFDS19BTElHTk1FTlQsIDQpO1xuICAgIGdsLnJlYWRQaXhlbHMoeCwgeSwgd2lkdGgsIGhlaWdodCwgR0xfUkdCQSQzLFxuICAgICAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGRhdGEpO1xuXG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRQaXhlbHNGQk8gKG9wdGlvbnMpIHtcbiAgICB2YXIgcmVzdWx0O1xuICAgIGZyYW1lYnVmZmVyU3RhdGUuc2V0RkJPKHtcbiAgICAgIGZyYW1lYnVmZmVyOiBvcHRpb25zLmZyYW1lYnVmZmVyXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgcmVzdWx0ID0gcmVhZFBpeGVsc0ltcGwob3B0aW9ucyk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZFBpeGVscyAob3B0aW9ucykge1xuICAgIGlmICghb3B0aW9ucyB8fCAhKCdmcmFtZWJ1ZmZlcicgaW4gb3B0aW9ucykpIHtcbiAgICAgIHJldHVybiByZWFkUGl4ZWxzSW1wbChvcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVhZFBpeGVsc0ZCTyhvcHRpb25zKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWFkUGl4ZWxzXG59XG5cbmZ1bmN0aW9uIHNsaWNlICh4KSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh4KVxufVxuXG5mdW5jdGlvbiBqb2luICh4KSB7XG4gIHJldHVybiBzbGljZSh4KS5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbnZpcm9ubWVudCAoKSB7XG4gIC8vIFVuaXF1ZSB2YXJpYWJsZSBpZCBjb3VudGVyXG4gIHZhciB2YXJDb3VudGVyID0gMDtcblxuICAvLyBMaW5rZWQgdmFsdWVzIGFyZSBwYXNzZWQgZnJvbSB0aGlzIHNjb3BlIGludG8gdGhlIGdlbmVyYXRlZCBjb2RlIGJsb2NrXG4gIC8vIENhbGxpbmcgbGluaygpIHBhc3NlcyBhIHZhbHVlIGludG8gdGhlIGdlbmVyYXRlZCBzY29wZSBhbmQgcmV0dXJuc1xuICAvLyB0aGUgdmFyaWFibGUgbmFtZSB3aGljaCBpdCBpcyBib3VuZCB0b1xuICB2YXIgbGlua2VkTmFtZXMgPSBbXTtcbiAgdmFyIGxpbmtlZFZhbHVlcyA9IFtdO1xuICBmdW5jdGlvbiBsaW5rICh2YWx1ZSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlua2VkVmFsdWVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAobGlua2VkVmFsdWVzW2ldID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gbGlua2VkTmFtZXNbaV1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbmFtZSA9ICdnJyArICh2YXJDb3VudGVyKyspO1xuICAgIGxpbmtlZE5hbWVzLnB1c2gobmFtZSk7XG4gICAgbGlua2VkVmFsdWVzLnB1c2godmFsdWUpO1xuICAgIHJldHVybiBuYW1lXG4gIH1cblxuICAvLyBjcmVhdGUgYSBjb2RlIGJsb2NrXG4gIGZ1bmN0aW9uIGJsb2NrICgpIHtcbiAgICB2YXIgY29kZSA9IFtdO1xuICAgIGZ1bmN0aW9uIHB1c2ggKCkge1xuICAgICAgY29kZS5wdXNoLmFwcGx5KGNvZGUsIHNsaWNlKGFyZ3VtZW50cykpO1xuICAgIH1cblxuICAgIHZhciB2YXJzID0gW107XG4gICAgZnVuY3Rpb24gZGVmICgpIHtcbiAgICAgIHZhciBuYW1lID0gJ3YnICsgKHZhckNvdW50ZXIrKyk7XG4gICAgICB2YXJzLnB1c2gobmFtZSk7XG5cbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb2RlLnB1c2gobmFtZSwgJz0nKTtcbiAgICAgICAgY29kZS5wdXNoLmFwcGx5KGNvZGUsIHNsaWNlKGFyZ3VtZW50cykpO1xuICAgICAgICBjb2RlLnB1c2goJzsnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG5cbiAgICByZXR1cm4gZXh0ZW5kKHB1c2gsIHtcbiAgICAgIGRlZjogZGVmLFxuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGpvaW4oW1xuICAgICAgICAgICh2YXJzLmxlbmd0aCA+IDAgPyAndmFyICcgKyB2YXJzLmpvaW4oJywnKSArICc7JyA6ICcnKSxcbiAgICAgICAgICBqb2luKGNvZGUpXG4gICAgICAgIF0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjb3BlICgpIHtcbiAgICB2YXIgZW50cnkgPSBibG9jaygpO1xuICAgIHZhciBleGl0ID0gYmxvY2soKTtcblxuICAgIHZhciBlbnRyeVRvU3RyaW5nID0gZW50cnkudG9TdHJpbmc7XG4gICAgdmFyIGV4aXRUb1N0cmluZyA9IGV4aXQudG9TdHJpbmc7XG5cbiAgICBmdW5jdGlvbiBzYXZlIChvYmplY3QsIHByb3ApIHtcbiAgICAgIGV4aXQob2JqZWN0LCBwcm9wLCAnPScsIGVudHJ5LmRlZihvYmplY3QsIHByb3ApLCAnOycpO1xuICAgIH1cblxuICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gKCkge1xuICAgICAgZW50cnkuYXBwbHkoZW50cnksIHNsaWNlKGFyZ3VtZW50cykpO1xuICAgIH0sIHtcbiAgICAgIGRlZjogZW50cnkuZGVmLFxuICAgICAgZW50cnk6IGVudHJ5LFxuICAgICAgZXhpdDogZXhpdCxcbiAgICAgIHNhdmU6IHNhdmUsXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChvYmplY3QsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgIHNhdmUob2JqZWN0LCBwcm9wKTtcbiAgICAgICAgZW50cnkob2JqZWN0LCBwcm9wLCAnPScsIHZhbHVlLCAnOycpO1xuICAgICAgfSxcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBlbnRyeVRvU3RyaW5nKCkgKyBleGl0VG9TdHJpbmcoKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBjb25kaXRpb25hbCAoKSB7XG4gICAgdmFyIHByZWQgPSBqb2luKGFyZ3VtZW50cyk7XG4gICAgdmFyIHRoZW5CbG9jayA9IHNjb3BlKCk7XG4gICAgdmFyIGVsc2VCbG9jayA9IHNjb3BlKCk7XG5cbiAgICB2YXIgdGhlblRvU3RyaW5nID0gdGhlbkJsb2NrLnRvU3RyaW5nO1xuICAgIHZhciBlbHNlVG9TdHJpbmcgPSBlbHNlQmxvY2sudG9TdHJpbmc7XG5cbiAgICByZXR1cm4gZXh0ZW5kKHRoZW5CbG9jaywge1xuICAgICAgdGhlbjogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGVuQmxvY2suYXBwbHkodGhlbkJsb2NrLCBzbGljZShhcmd1bWVudHMpKTtcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgIH0sXG4gICAgICBlbHNlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsc2VCbG9jay5hcHBseShlbHNlQmxvY2ssIHNsaWNlKGFyZ3VtZW50cykpO1xuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfSxcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbHNlQ2xhdXNlID0gZWxzZVRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChlbHNlQ2xhdXNlKSB7XG4gICAgICAgICAgZWxzZUNsYXVzZSA9ICdlbHNleycgKyBlbHNlQ2xhdXNlICsgJ30nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBqb2luKFtcbiAgICAgICAgICAnaWYoJywgcHJlZCwgJyl7JyxcbiAgICAgICAgICB0aGVuVG9TdHJpbmcoKSxcbiAgICAgICAgICAnfScsIGVsc2VDbGF1c2VcbiAgICAgICAgXSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLy8gcHJvY2VkdXJlIGxpc3RcbiAgdmFyIGdsb2JhbEJsb2NrID0gYmxvY2soKTtcbiAgdmFyIHByb2NlZHVyZXMgPSB7fTtcbiAgZnVuY3Rpb24gcHJvYyAobmFtZSwgY291bnQpIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIGZ1bmN0aW9uIGFyZyAoKSB7XG4gICAgICB2YXIgbmFtZSA9ICdhJyArIGFyZ3MubGVuZ3RoO1xuICAgICAgYXJncy5wdXNoKG5hbWUpO1xuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG5cbiAgICBjb3VudCA9IGNvdW50IHx8IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgKytpKSB7XG4gICAgICBhcmcoKTtcbiAgICB9XG5cbiAgICB2YXIgYm9keSA9IHNjb3BlKCk7XG4gICAgdmFyIGJvZHlUb1N0cmluZyA9IGJvZHkudG9TdHJpbmc7XG5cbiAgICB2YXIgcmVzdWx0ID0gcHJvY2VkdXJlc1tuYW1lXSA9IGV4dGVuZChib2R5LCB7XG4gICAgICBhcmc6IGFyZyxcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBqb2luKFtcbiAgICAgICAgICAnZnVuY3Rpb24oJywgYXJncy5qb2luKCksICcpeycsXG4gICAgICAgICAgYm9keVRvU3RyaW5nKCksXG4gICAgICAgICAgJ30nXG4gICAgICAgIF0pXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICBmdW5jdGlvbiBjb21waWxlICgpIHtcbiAgICB2YXIgY29kZSA9IFsnXCJ1c2Ugc3RyaWN0XCI7JyxcbiAgICAgIGdsb2JhbEJsb2NrLFxuICAgICAgJ3JldHVybiB7J107XG4gICAgT2JqZWN0LmtleXMocHJvY2VkdXJlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgY29kZS5wdXNoKCdcIicsIG5hbWUsICdcIjonLCBwcm9jZWR1cmVzW25hbWVdLnRvU3RyaW5nKCksICcsJyk7XG4gICAgfSk7XG4gICAgY29kZS5wdXNoKCd9Jyk7XG4gICAgdmFyIHNyYyA9IGpvaW4oY29kZSlcbiAgICAgIC5yZXBsYWNlKC87L2csICc7XFxuJylcbiAgICAgIC5yZXBsYWNlKC99L2csICd9XFxuJylcbiAgICAgIC5yZXBsYWNlKC97L2csICd7XFxuJyk7XG4gICAgdmFyIHByb2MgPSBGdW5jdGlvbi5hcHBseShudWxsLCBsaW5rZWROYW1lcy5jb25jYXQoc3JjKSk7XG4gICAgcmV0dXJuIHByb2MuYXBwbHkobnVsbCwgbGlua2VkVmFsdWVzKVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnbG9iYWw6IGdsb2JhbEJsb2NrLFxuICAgIGxpbms6IGxpbmssXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIHByb2M6IHByb2MsXG4gICAgc2NvcGU6IHNjb3BlLFxuICAgIGNvbmQ6IGNvbmRpdGlvbmFsLFxuICAgIGNvbXBpbGU6IGNvbXBpbGVcbiAgfVxufVxuXG4vLyBcImN1dGVcIiBuYW1lcyBmb3IgdmVjdG9yIGNvbXBvbmVudHNcbnZhciBDVVRFX0NPTVBPTkVOVFMgPSAneHl6dycuc3BsaXQoJycpO1xuXG52YXIgR0xfVU5TSUdORURfQllURSQ4ID0gNTEyMTtcblxudmFyIEFUVFJJQl9TVEFURV9QT0lOVEVSID0gMTtcbnZhciBBVFRSSUJfU1RBVEVfQ09OU1RBTlQgPSAyO1xuXG52YXIgRFlOX0ZVTkMkMSA9IDA7XG52YXIgRFlOX1BST1AkMSA9IDE7XG52YXIgRFlOX0NPTlRFWFQkMSA9IDI7XG52YXIgRFlOX1NUQVRFJDEgPSAzO1xudmFyIERZTl9USFVOSyA9IDQ7XG5cbnZhciBTX0RJVEhFUiA9ICdkaXRoZXInO1xudmFyIFNfQkxFTkRfRU5BQkxFID0gJ2JsZW5kLmVuYWJsZSc7XG52YXIgU19CTEVORF9DT0xPUiA9ICdibGVuZC5jb2xvcic7XG52YXIgU19CTEVORF9FUVVBVElPTiA9ICdibGVuZC5lcXVhdGlvbic7XG52YXIgU19CTEVORF9GVU5DID0gJ2JsZW5kLmZ1bmMnO1xudmFyIFNfREVQVEhfRU5BQkxFID0gJ2RlcHRoLmVuYWJsZSc7XG52YXIgU19ERVBUSF9GVU5DID0gJ2RlcHRoLmZ1bmMnO1xudmFyIFNfREVQVEhfUkFOR0UgPSAnZGVwdGgucmFuZ2UnO1xudmFyIFNfREVQVEhfTUFTSyA9ICdkZXB0aC5tYXNrJztcbnZhciBTX0NPTE9SX01BU0sgPSAnY29sb3JNYXNrJztcbnZhciBTX0NVTExfRU5BQkxFID0gJ2N1bGwuZW5hYmxlJztcbnZhciBTX0NVTExfRkFDRSA9ICdjdWxsLmZhY2UnO1xudmFyIFNfRlJPTlRfRkFDRSA9ICdmcm9udEZhY2UnO1xudmFyIFNfTElORV9XSURUSCA9ICdsaW5lV2lkdGgnO1xudmFyIFNfUE9MWUdPTl9PRkZTRVRfRU5BQkxFID0gJ3BvbHlnb25PZmZzZXQuZW5hYmxlJztcbnZhciBTX1BPTFlHT05fT0ZGU0VUX09GRlNFVCA9ICdwb2x5Z29uT2Zmc2V0Lm9mZnNldCc7XG52YXIgU19TQU1QTEVfQUxQSEEgPSAnc2FtcGxlLmFscGhhJztcbnZhciBTX1NBTVBMRV9FTkFCTEUgPSAnc2FtcGxlLmVuYWJsZSc7XG52YXIgU19TQU1QTEVfQ09WRVJBR0UgPSAnc2FtcGxlLmNvdmVyYWdlJztcbnZhciBTX1NURU5DSUxfRU5BQkxFID0gJ3N0ZW5jaWwuZW5hYmxlJztcbnZhciBTX1NURU5DSUxfTUFTSyA9ICdzdGVuY2lsLm1hc2snO1xudmFyIFNfU1RFTkNJTF9GVU5DID0gJ3N0ZW5jaWwuZnVuYyc7XG52YXIgU19TVEVOQ0lMX09QRlJPTlQgPSAnc3RlbmNpbC5vcEZyb250JztcbnZhciBTX1NURU5DSUxfT1BCQUNLID0gJ3N0ZW5jaWwub3BCYWNrJztcbnZhciBTX1NDSVNTT1JfRU5BQkxFID0gJ3NjaXNzb3IuZW5hYmxlJztcbnZhciBTX1NDSVNTT1JfQk9YID0gJ3NjaXNzb3IuYm94JztcbnZhciBTX1ZJRVdQT1JUID0gJ3ZpZXdwb3J0JztcblxudmFyIFNfUFJPRklMRSA9ICdwcm9maWxlJztcblxudmFyIFNfRlJBTUVCVUZGRVIgPSAnZnJhbWVidWZmZXInO1xudmFyIFNfVkVSVCA9ICd2ZXJ0JztcbnZhciBTX0ZSQUcgPSAnZnJhZyc7XG52YXIgU19FTEVNRU5UUyA9ICdlbGVtZW50cyc7XG52YXIgU19QUklNSVRJVkUgPSAncHJpbWl0aXZlJztcbnZhciBTX0NPVU5UID0gJ2NvdW50JztcbnZhciBTX09GRlNFVCA9ICdvZmZzZXQnO1xudmFyIFNfSU5TVEFOQ0VTID0gJ2luc3RhbmNlcyc7XG5cbnZhciBTVUZGSVhfV0lEVEggPSAnV2lkdGgnO1xudmFyIFNVRkZJWF9IRUlHSFQgPSAnSGVpZ2h0JztcblxudmFyIFNfRlJBTUVCVUZGRVJfV0lEVEggPSBTX0ZSQU1FQlVGRkVSICsgU1VGRklYX1dJRFRIO1xudmFyIFNfRlJBTUVCVUZGRVJfSEVJR0hUID0gU19GUkFNRUJVRkZFUiArIFNVRkZJWF9IRUlHSFQ7XG52YXIgU19WSUVXUE9SVF9XSURUSCA9IFNfVklFV1BPUlQgKyBTVUZGSVhfV0lEVEg7XG52YXIgU19WSUVXUE9SVF9IRUlHSFQgPSBTX1ZJRVdQT1JUICsgU1VGRklYX0hFSUdIVDtcbnZhciBTX0RSQVdJTkdCVUZGRVIgPSAnZHJhd2luZ0J1ZmZlcic7XG52YXIgU19EUkFXSU5HQlVGRkVSX1dJRFRIID0gU19EUkFXSU5HQlVGRkVSICsgU1VGRklYX1dJRFRIO1xudmFyIFNfRFJBV0lOR0JVRkZFUl9IRUlHSFQgPSBTX0RSQVdJTkdCVUZGRVIgKyBTVUZGSVhfSEVJR0hUO1xuXG52YXIgTkVTVEVEX09QVElPTlMgPSBbXG4gIFNfQkxFTkRfRlVOQyxcbiAgU19CTEVORF9FUVVBVElPTixcbiAgU19TVEVOQ0lMX0ZVTkMsXG4gIFNfU1RFTkNJTF9PUEZST05ULFxuICBTX1NURU5DSUxfT1BCQUNLLFxuICBTX1NBTVBMRV9DT1ZFUkFHRSxcbiAgU19WSUVXUE9SVCxcbiAgU19TQ0lTU09SX0JPWCxcbiAgU19QT0xZR09OX09GRlNFVF9PRkZTRVRcbl07XG5cbnZhciBHTF9BUlJBWV9CVUZGRVIkMSA9IDM0OTYyO1xudmFyIEdMX0VMRU1FTlRfQVJSQVlfQlVGRkVSJDEgPSAzNDk2MztcblxudmFyIEdMX0ZSQUdNRU5UX1NIQURFUiQxID0gMzU2MzI7XG52YXIgR0xfVkVSVEVYX1NIQURFUiQxID0gMzU2MzM7XG5cbnZhciBHTF9URVhUVVJFXzJEJDMgPSAweDBERTE7XG52YXIgR0xfVEVYVFVSRV9DVUJFX01BUCQyID0gMHg4NTEzO1xuXG52YXIgR0xfQ1VMTF9GQUNFID0gMHgwQjQ0O1xudmFyIEdMX0JMRU5EID0gMHgwQkUyO1xudmFyIEdMX0RJVEhFUiA9IDB4MEJEMDtcbnZhciBHTF9TVEVOQ0lMX1RFU1QgPSAweDBCOTA7XG52YXIgR0xfREVQVEhfVEVTVCA9IDB4MEI3MTtcbnZhciBHTF9TQ0lTU09SX1RFU1QgPSAweDBDMTE7XG52YXIgR0xfUE9MWUdPTl9PRkZTRVRfRklMTCA9IDB4ODAzNztcbnZhciBHTF9TQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0UgPSAweDgwOUU7XG52YXIgR0xfU0FNUExFX0NPVkVSQUdFID0gMHg4MEEwO1xuXG52YXIgR0xfRkxPQVQkOCA9IDUxMjY7XG52YXIgR0xfRkxPQVRfVkVDMiA9IDM1NjY0O1xudmFyIEdMX0ZMT0FUX1ZFQzMgPSAzNTY2NTtcbnZhciBHTF9GTE9BVF9WRUM0ID0gMzU2NjY7XG52YXIgR0xfSU5UJDMgPSA1MTI0O1xudmFyIEdMX0lOVF9WRUMyID0gMzU2Njc7XG52YXIgR0xfSU5UX1ZFQzMgPSAzNTY2ODtcbnZhciBHTF9JTlRfVkVDNCA9IDM1NjY5O1xudmFyIEdMX0JPT0wgPSAzNTY3MDtcbnZhciBHTF9CT09MX1ZFQzIgPSAzNTY3MTtcbnZhciBHTF9CT09MX1ZFQzMgPSAzNTY3MjtcbnZhciBHTF9CT09MX1ZFQzQgPSAzNTY3MztcbnZhciBHTF9GTE9BVF9NQVQyID0gMzU2NzQ7XG52YXIgR0xfRkxPQVRfTUFUMyA9IDM1Njc1O1xudmFyIEdMX0ZMT0FUX01BVDQgPSAzNTY3NjtcbnZhciBHTF9TQU1QTEVSXzJEID0gMzU2Nzg7XG52YXIgR0xfU0FNUExFUl9DVUJFID0gMzU2ODA7XG5cbnZhciBHTF9UUklBTkdMRVMkMSA9IDQ7XG5cbnZhciBHTF9GUk9OVCA9IDEwMjg7XG52YXIgR0xfQkFDSyA9IDEwMjk7XG52YXIgR0xfQ1cgPSAweDA5MDA7XG52YXIgR0xfQ0NXID0gMHgwOTAxO1xudmFyIEdMX01JTl9FWFQgPSAweDgwMDc7XG52YXIgR0xfTUFYX0VYVCA9IDB4ODAwODtcbnZhciBHTF9BTFdBWVMgPSA1MTk7XG52YXIgR0xfS0VFUCA9IDc2ODA7XG52YXIgR0xfWkVSTyA9IDA7XG52YXIgR0xfT05FID0gMTtcbnZhciBHTF9GVU5DX0FERCA9IDB4ODAwNjtcbnZhciBHTF9MRVNTID0gNTEzO1xuXG52YXIgR0xfRlJBTUVCVUZGRVIkMiA9IDB4OEQ0MDtcbnZhciBHTF9DT0xPUl9BVFRBQ0hNRU5UMCQyID0gMHg4Q0UwO1xuXG52YXIgYmxlbmRGdW5jcyA9IHtcbiAgJzAnOiAwLFxuICAnMSc6IDEsXG4gICd6ZXJvJzogMCxcbiAgJ29uZSc6IDEsXG4gICdzcmMgY29sb3InOiA3NjgsXG4gICdvbmUgbWludXMgc3JjIGNvbG9yJzogNzY5LFxuICAnc3JjIGFscGhhJzogNzcwLFxuICAnb25lIG1pbnVzIHNyYyBhbHBoYSc6IDc3MSxcbiAgJ2RzdCBjb2xvcic6IDc3NCxcbiAgJ29uZSBtaW51cyBkc3QgY29sb3InOiA3NzUsXG4gICdkc3QgYWxwaGEnOiA3NzIsXG4gICdvbmUgbWludXMgZHN0IGFscGhhJzogNzczLFxuICAnY29uc3RhbnQgY29sb3InOiAzMjc2OSxcbiAgJ29uZSBtaW51cyBjb25zdGFudCBjb2xvcic6IDMyNzcwLFxuICAnY29uc3RhbnQgYWxwaGEnOiAzMjc3MSxcbiAgJ29uZSBtaW51cyBjb25zdGFudCBhbHBoYSc6IDMyNzcyLFxuICAnc3JjIGFscGhhIHNhdHVyYXRlJzogNzc2XG59O1xuXG4vLyBUaGVyZSBhcmUgaW52YWxpZCB2YWx1ZXMgZm9yIHNyY1JHQiBhbmQgZHN0UkdCLiBTZWU6XG4vLyBodHRwczovL3d3dy5raHJvbm9zLm9yZy9yZWdpc3RyeS93ZWJnbC9zcGVjcy8xLjAvIzYuMTNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvV2ViR0wvYmxvYi8wZDMyMDFmNWY3ZWMzYzAwNjBiYzFmMDQwNzc0NjE1NDFmMTk4N2I5L2NvbmZvcm1hbmNlLXN1aXRlcy8xLjAuMy9jb25mb3JtYW5jZS9taXNjL3dlYmdsLXNwZWNpZmljLmh0bWwjTDU2XG52YXIgaW52YWxpZEJsZW5kQ29tYmluYXRpb25zID0gW1xuICAnY29uc3RhbnQgY29sb3IsIGNvbnN0YW50IGFscGhhJyxcbiAgJ29uZSBtaW51cyBjb25zdGFudCBjb2xvciwgY29uc3RhbnQgYWxwaGEnLFxuICAnY29uc3RhbnQgY29sb3IsIG9uZSBtaW51cyBjb25zdGFudCBhbHBoYScsXG4gICdvbmUgbWludXMgY29uc3RhbnQgY29sb3IsIG9uZSBtaW51cyBjb25zdGFudCBhbHBoYScsXG4gICdjb25zdGFudCBhbHBoYSwgY29uc3RhbnQgY29sb3InLFxuICAnY29uc3RhbnQgYWxwaGEsIG9uZSBtaW51cyBjb25zdGFudCBjb2xvcicsXG4gICdvbmUgbWludXMgY29uc3RhbnQgYWxwaGEsIGNvbnN0YW50IGNvbG9yJyxcbiAgJ29uZSBtaW51cyBjb25zdGFudCBhbHBoYSwgb25lIG1pbnVzIGNvbnN0YW50IGNvbG9yJ1xuXTtcblxudmFyIGNvbXBhcmVGdW5jcyA9IHtcbiAgJ25ldmVyJzogNTEyLFxuICAnbGVzcyc6IDUxMyxcbiAgJzwnOiA1MTMsXG4gICdlcXVhbCc6IDUxNCxcbiAgJz0nOiA1MTQsXG4gICc9PSc6IDUxNCxcbiAgJz09PSc6IDUxNCxcbiAgJ2xlcXVhbCc6IDUxNSxcbiAgJzw9JzogNTE1LFxuICAnZ3JlYXRlcic6IDUxNixcbiAgJz4nOiA1MTYsXG4gICdub3RlcXVhbCc6IDUxNyxcbiAgJyE9JzogNTE3LFxuICAnIT09JzogNTE3LFxuICAnZ2VxdWFsJzogNTE4LFxuICAnPj0nOiA1MTgsXG4gICdhbHdheXMnOiA1MTlcbn07XG5cbnZhciBzdGVuY2lsT3BzID0ge1xuICAnMCc6IDAsXG4gICd6ZXJvJzogMCxcbiAgJ2tlZXAnOiA3NjgwLFxuICAncmVwbGFjZSc6IDc2ODEsXG4gICdpbmNyZW1lbnQnOiA3NjgyLFxuICAnZGVjcmVtZW50JzogNzY4MyxcbiAgJ2luY3JlbWVudCB3cmFwJzogMzQwNTUsXG4gICdkZWNyZW1lbnQgd3JhcCc6IDM0MDU2LFxuICAnaW52ZXJ0JzogNTM4NlxufTtcblxudmFyIHNoYWRlclR5cGUgPSB7XG4gICdmcmFnJzogR0xfRlJBR01FTlRfU0hBREVSJDEsXG4gICd2ZXJ0JzogR0xfVkVSVEVYX1NIQURFUiQxXG59O1xuXG52YXIgb3JpZW50YXRpb25UeXBlID0ge1xuICAnY3cnOiBHTF9DVyxcbiAgJ2Njdyc6IEdMX0NDV1xufTtcblxuZnVuY3Rpb24gaXNCdWZmZXJBcmdzICh4KSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHgpIHx8XG4gICAgaXNUeXBlZEFycmF5KHgpIHx8XG4gICAgaXNOREFycmF5TGlrZSh4KVxufVxuXG4vLyBNYWtlIHN1cmUgdmlld3BvcnQgaXMgcHJvY2Vzc2VkIGZpcnN0XG5mdW5jdGlvbiBzb3J0U3RhdGUgKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgaWYgKGEgPT09IFNfVklFV1BPUlQpIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH0gZWxzZSBpZiAoYiA9PT0gU19WSUVXUE9SVCkge1xuICAgICAgcmV0dXJuIDFcbiAgICB9XG4gICAgcmV0dXJuIChhIDwgYikgPyAtMSA6IDFcbiAgfSlcbn1cblxuZnVuY3Rpb24gRGVjbGFyYXRpb24gKHRoaXNEZXAsIGNvbnRleHREZXAsIHByb3BEZXAsIGFwcGVuZCkge1xuICB0aGlzLnRoaXNEZXAgPSB0aGlzRGVwO1xuICB0aGlzLmNvbnRleHREZXAgPSBjb250ZXh0RGVwO1xuICB0aGlzLnByb3BEZXAgPSBwcm9wRGVwO1xuICB0aGlzLmFwcGVuZCA9IGFwcGVuZDtcbn1cblxuZnVuY3Rpb24gaXNTdGF0aWMgKGRlY2wpIHtcbiAgcmV0dXJuIGRlY2wgJiYgIShkZWNsLnRoaXNEZXAgfHwgZGVjbC5jb250ZXh0RGVwIHx8IGRlY2wucHJvcERlcClcbn1cblxuZnVuY3Rpb24gY3JlYXRlU3RhdGljRGVjbCAoYXBwZW5kKSB7XG4gIHJldHVybiBuZXcgRGVjbGFyYXRpb24oZmFsc2UsIGZhbHNlLCBmYWxzZSwgYXBwZW5kKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVEeW5hbWljRGVjbCAoZHluLCBhcHBlbmQpIHtcbiAgdmFyIHR5cGUgPSBkeW4udHlwZTtcbiAgaWYgKHR5cGUgPT09IERZTl9GVU5DJDEpIHtcbiAgICB2YXIgbnVtQXJncyA9IGR5bi5kYXRhLmxlbmd0aDtcbiAgICByZXR1cm4gbmV3IERlY2xhcmF0aW9uKFxuICAgICAgdHJ1ZSxcbiAgICAgIG51bUFyZ3MgPj0gMSxcbiAgICAgIG51bUFyZ3MgPj0gMixcbiAgICAgIGFwcGVuZClcbiAgfSBlbHNlIGlmICh0eXBlID09PSBEWU5fVEhVTkspIHtcbiAgICB2YXIgZGF0YSA9IGR5bi5kYXRhO1xuICAgIHJldHVybiBuZXcgRGVjbGFyYXRpb24oXG4gICAgICBkYXRhLnRoaXNEZXAsXG4gICAgICBkYXRhLmNvbnRleHREZXAsXG4gICAgICBkYXRhLnByb3BEZXAsXG4gICAgICBhcHBlbmQpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBEZWNsYXJhdGlvbihcbiAgICAgIHR5cGUgPT09IERZTl9TVEFURSQxLFxuICAgICAgdHlwZSA9PT0gRFlOX0NPTlRFWFQkMSxcbiAgICAgIHR5cGUgPT09IERZTl9QUk9QJDEsXG4gICAgICBhcHBlbmQpXG4gIH1cbn1cblxudmFyIFNDT1BFX0RFQ0wgPSBuZXcgRGVjbGFyYXRpb24oZmFsc2UsIGZhbHNlLCBmYWxzZSwgZnVuY3Rpb24gKCkge30pO1xuXG5mdW5jdGlvbiByZWdsQ29yZSAoXG4gIGdsLFxuICBzdHJpbmdTdG9yZSxcbiAgZXh0ZW5zaW9ucyxcbiAgbGltaXRzLFxuICBidWZmZXJTdGF0ZSxcbiAgZWxlbWVudFN0YXRlLFxuICB0ZXh0dXJlU3RhdGUsXG4gIGZyYW1lYnVmZmVyU3RhdGUsXG4gIHVuaWZvcm1TdGF0ZSxcbiAgYXR0cmlidXRlU3RhdGUsXG4gIHNoYWRlclN0YXRlLFxuICBkcmF3U3RhdGUsXG4gIGNvbnRleHRTdGF0ZSxcbiAgdGltZXIsXG4gIGNvbmZpZykge1xuICB2YXIgQXR0cmlidXRlUmVjb3JkID0gYXR0cmlidXRlU3RhdGUuUmVjb3JkO1xuXG4gIHZhciBibGVuZEVxdWF0aW9ucyA9IHtcbiAgICAnYWRkJzogMzI3NzQsXG4gICAgJ3N1YnRyYWN0JzogMzI3NzgsXG4gICAgJ3JldmVyc2Ugc3VidHJhY3QnOiAzMjc3OVxuICB9O1xuICBpZiAoZXh0ZW5zaW9ucy5leHRfYmxlbmRfbWlubWF4KSB7XG4gICAgYmxlbmRFcXVhdGlvbnMubWluID0gR0xfTUlOX0VYVDtcbiAgICBibGVuZEVxdWF0aW9ucy5tYXggPSBHTF9NQVhfRVhUO1xuICB9XG5cbiAgdmFyIGV4dEluc3RhbmNpbmcgPSBleHRlbnNpb25zLmFuZ2xlX2luc3RhbmNlZF9hcnJheXM7XG4gIHZhciBleHREcmF3QnVmZmVycyA9IGV4dGVuc2lvbnMud2ViZ2xfZHJhd19idWZmZXJzO1xuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gV0VCR0wgU1RBVEVcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICB2YXIgY3VycmVudFN0YXRlID0ge1xuICAgIGRpcnR5OiB0cnVlLFxuICAgIHByb2ZpbGU6IGNvbmZpZy5wcm9maWxlXG4gIH07XG4gIHZhciBuZXh0U3RhdGUgPSB7fTtcbiAgdmFyIEdMX1NUQVRFX05BTUVTID0gW107XG4gIHZhciBHTF9GTEFHUyA9IHt9O1xuICB2YXIgR0xfVkFSSUFCTEVTID0ge307XG5cbiAgZnVuY3Rpb24gcHJvcE5hbWUgKG5hbWUpIHtcbiAgICByZXR1cm4gbmFtZS5yZXBsYWNlKCcuJywgJ18nKVxuICB9XG5cbiAgZnVuY3Rpb24gc3RhdGVGbGFnIChzbmFtZSwgY2FwLCBpbml0KSB7XG4gICAgdmFyIG5hbWUgPSBwcm9wTmFtZShzbmFtZSk7XG4gICAgR0xfU1RBVEVfTkFNRVMucHVzaChzbmFtZSk7XG4gICAgbmV4dFN0YXRlW25hbWVdID0gY3VycmVudFN0YXRlW25hbWVdID0gISFpbml0O1xuICAgIEdMX0ZMQUdTW25hbWVdID0gY2FwO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhdGVWYXJpYWJsZSAoc25hbWUsIGZ1bmMsIGluaXQpIHtcbiAgICB2YXIgbmFtZSA9IHByb3BOYW1lKHNuYW1lKTtcbiAgICBHTF9TVEFURV9OQU1FUy5wdXNoKHNuYW1lKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpbml0KSkge1xuICAgICAgY3VycmVudFN0YXRlW25hbWVdID0gaW5pdC5zbGljZSgpO1xuICAgICAgbmV4dFN0YXRlW25hbWVdID0gaW5pdC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50U3RhdGVbbmFtZV0gPSBuZXh0U3RhdGVbbmFtZV0gPSBpbml0O1xuICAgIH1cbiAgICBHTF9WQVJJQUJMRVNbbmFtZV0gPSBmdW5jO1xuICB9XG5cbiAgLy8gRGl0aGVyaW5nXG4gIHN0YXRlRmxhZyhTX0RJVEhFUiwgR0xfRElUSEVSKTtcblxuICAvLyBCbGVuZGluZ1xuICBzdGF0ZUZsYWcoU19CTEVORF9FTkFCTEUsIEdMX0JMRU5EKTtcbiAgc3RhdGVWYXJpYWJsZShTX0JMRU5EX0NPTE9SLCAnYmxlbmRDb2xvcicsIFswLCAwLCAwLCAwXSk7XG4gIHN0YXRlVmFyaWFibGUoU19CTEVORF9FUVVBVElPTiwgJ2JsZW5kRXF1YXRpb25TZXBhcmF0ZScsXG4gICAgW0dMX0ZVTkNfQURELCBHTF9GVU5DX0FERF0pO1xuICBzdGF0ZVZhcmlhYmxlKFNfQkxFTkRfRlVOQywgJ2JsZW5kRnVuY1NlcGFyYXRlJyxcbiAgICBbR0xfT05FLCBHTF9aRVJPLCBHTF9PTkUsIEdMX1pFUk9dKTtcblxuICAvLyBEZXB0aFxuICBzdGF0ZUZsYWcoU19ERVBUSF9FTkFCTEUsIEdMX0RFUFRIX1RFU1QsIHRydWUpO1xuICBzdGF0ZVZhcmlhYmxlKFNfREVQVEhfRlVOQywgJ2RlcHRoRnVuYycsIEdMX0xFU1MpO1xuICBzdGF0ZVZhcmlhYmxlKFNfREVQVEhfUkFOR0UsICdkZXB0aFJhbmdlJywgWzAsIDFdKTtcbiAgc3RhdGVWYXJpYWJsZShTX0RFUFRIX01BU0ssICdkZXB0aE1hc2snLCB0cnVlKTtcblxuICAvLyBDb2xvciBtYXNrXG4gIHN0YXRlVmFyaWFibGUoU19DT0xPUl9NQVNLLCBTX0NPTE9SX01BU0ssIFt0cnVlLCB0cnVlLCB0cnVlLCB0cnVlXSk7XG5cbiAgLy8gRmFjZSBjdWxsaW5nXG4gIHN0YXRlRmxhZyhTX0NVTExfRU5BQkxFLCBHTF9DVUxMX0ZBQ0UpO1xuICBzdGF0ZVZhcmlhYmxlKFNfQ1VMTF9GQUNFLCAnY3VsbEZhY2UnLCBHTF9CQUNLKTtcblxuICAvLyBGcm9udCBmYWNlIG9yaWVudGF0aW9uXG4gIHN0YXRlVmFyaWFibGUoU19GUk9OVF9GQUNFLCBTX0ZST05UX0ZBQ0UsIEdMX0NDVyk7XG5cbiAgLy8gTGluZSB3aWR0aFxuICBzdGF0ZVZhcmlhYmxlKFNfTElORV9XSURUSCwgU19MSU5FX1dJRFRILCAxKTtcblxuICAvLyBQb2x5Z29uIG9mZnNldFxuICBzdGF0ZUZsYWcoU19QT0xZR09OX09GRlNFVF9FTkFCTEUsIEdMX1BPTFlHT05fT0ZGU0VUX0ZJTEwpO1xuICBzdGF0ZVZhcmlhYmxlKFNfUE9MWUdPTl9PRkZTRVRfT0ZGU0VULCAncG9seWdvbk9mZnNldCcsIFswLCAwXSk7XG5cbiAgLy8gU2FtcGxlIGNvdmVyYWdlXG4gIHN0YXRlRmxhZyhTX1NBTVBMRV9BTFBIQSwgR0xfU0FNUExFX0FMUEhBX1RPX0NPVkVSQUdFKTtcbiAgc3RhdGVGbGFnKFNfU0FNUExFX0VOQUJMRSwgR0xfU0FNUExFX0NPVkVSQUdFKTtcbiAgc3RhdGVWYXJpYWJsZShTX1NBTVBMRV9DT1ZFUkFHRSwgJ3NhbXBsZUNvdmVyYWdlJywgWzEsIGZhbHNlXSk7XG5cbiAgLy8gU3RlbmNpbFxuICBzdGF0ZUZsYWcoU19TVEVOQ0lMX0VOQUJMRSwgR0xfU1RFTkNJTF9URVNUKTtcbiAgc3RhdGVWYXJpYWJsZShTX1NURU5DSUxfTUFTSywgJ3N0ZW5jaWxNYXNrJywgLTEpO1xuICBzdGF0ZVZhcmlhYmxlKFNfU1RFTkNJTF9GVU5DLCAnc3RlbmNpbEZ1bmMnLCBbR0xfQUxXQVlTLCAwLCAtMV0pO1xuICBzdGF0ZVZhcmlhYmxlKFNfU1RFTkNJTF9PUEZST05ULCAnc3RlbmNpbE9wU2VwYXJhdGUnLFxuICAgIFtHTF9GUk9OVCwgR0xfS0VFUCwgR0xfS0VFUCwgR0xfS0VFUF0pO1xuICBzdGF0ZVZhcmlhYmxlKFNfU1RFTkNJTF9PUEJBQ0ssICdzdGVuY2lsT3BTZXBhcmF0ZScsXG4gICAgW0dMX0JBQ0ssIEdMX0tFRVAsIEdMX0tFRVAsIEdMX0tFRVBdKTtcblxuICAvLyBTY2lzc29yXG4gIHN0YXRlRmxhZyhTX1NDSVNTT1JfRU5BQkxFLCBHTF9TQ0lTU09SX1RFU1QpO1xuICBzdGF0ZVZhcmlhYmxlKFNfU0NJU1NPUl9CT1gsICdzY2lzc29yJyxcbiAgICBbMCwgMCwgZ2wuZHJhd2luZ0J1ZmZlcldpZHRoLCBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0XSk7XG5cbiAgLy8gVmlld3BvcnRcbiAgc3RhdGVWYXJpYWJsZShTX1ZJRVdQT1JULCBTX1ZJRVdQT1JULFxuICAgIFswLCAwLCBnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHRdKTtcblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIEVOVklST05NRU5UXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgdmFyIHNoYXJlZFN0YXRlID0ge1xuICAgIGdsOiBnbCxcbiAgICBjb250ZXh0OiBjb250ZXh0U3RhdGUsXG4gICAgc3RyaW5nczogc3RyaW5nU3RvcmUsXG4gICAgbmV4dDogbmV4dFN0YXRlLFxuICAgIGN1cnJlbnQ6IGN1cnJlbnRTdGF0ZSxcbiAgICBkcmF3OiBkcmF3U3RhdGUsXG4gICAgZWxlbWVudHM6IGVsZW1lbnRTdGF0ZSxcbiAgICBidWZmZXI6IGJ1ZmZlclN0YXRlLFxuICAgIHNoYWRlcjogc2hhZGVyU3RhdGUsXG4gICAgYXR0cmlidXRlczogYXR0cmlidXRlU3RhdGUuc3RhdGUsXG4gICAgdW5pZm9ybXM6IHVuaWZvcm1TdGF0ZSxcbiAgICBmcmFtZWJ1ZmZlcjogZnJhbWVidWZmZXJTdGF0ZSxcbiAgICBleHRlbnNpb25zOiBleHRlbnNpb25zLFxuXG4gICAgdGltZXI6IHRpbWVyLFxuICAgIGlzQnVmZmVyQXJnczogaXNCdWZmZXJBcmdzXG4gIH07XG5cbiAgdmFyIHNoYXJlZENvbnN0YW50cyA9IHtcbiAgICBwcmltVHlwZXM6IHByaW1UeXBlcyxcbiAgICBjb21wYXJlRnVuY3M6IGNvbXBhcmVGdW5jcyxcbiAgICBibGVuZEZ1bmNzOiBibGVuZEZ1bmNzLFxuICAgIGJsZW5kRXF1YXRpb25zOiBibGVuZEVxdWF0aW9ucyxcbiAgICBzdGVuY2lsT3BzOiBzdGVuY2lsT3BzLFxuICAgIGdsVHlwZXM6IGdsVHlwZXMsXG4gICAgb3JpZW50YXRpb25UeXBlOiBvcmllbnRhdGlvblR5cGVcbiAgfTtcblxuICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcbiAgICBzaGFyZWRTdGF0ZS5pc0FycmF5TGlrZSA9IGlzQXJyYXlMaWtlO1xuICB9KTtcblxuICBpZiAoZXh0RHJhd0J1ZmZlcnMpIHtcbiAgICBzaGFyZWRDb25zdGFudHMuYmFja0J1ZmZlciA9IFtHTF9CQUNLXTtcbiAgICBzaGFyZWRDb25zdGFudHMuZHJhd0J1ZmZlciA9IGxvb3AobGltaXRzLm1heERyYXdidWZmZXJzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIFswXVxuICAgICAgfVxuICAgICAgcmV0dXJuIGxvb3AoaSwgZnVuY3Rpb24gKGopIHtcbiAgICAgICAgcmV0dXJuIEdMX0NPTE9SX0FUVEFDSE1FTlQwJDIgKyBqXG4gICAgICB9KVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGRyYXdDYWxsQ291bnRlciA9IDA7XG4gIGZ1bmN0aW9uIGNyZWF0ZVJFR0xFbnZpcm9ubWVudCAoKSB7XG4gICAgdmFyIGVudiA9IGNyZWF0ZUVudmlyb25tZW50KCk7XG4gICAgdmFyIGxpbmsgPSBlbnYubGluaztcbiAgICB2YXIgZ2xvYmFsID0gZW52Lmdsb2JhbDtcbiAgICBlbnYuaWQgPSBkcmF3Q2FsbENvdW50ZXIrKztcblxuICAgIGVudi5iYXRjaElkID0gJzAnO1xuXG4gICAgLy8gbGluayBzaGFyZWQgc3RhdGVcbiAgICB2YXIgU0hBUkVEID0gbGluayhzaGFyZWRTdGF0ZSk7XG4gICAgdmFyIHNoYXJlZCA9IGVudi5zaGFyZWQgPSB7XG4gICAgICBwcm9wczogJ2EwJ1xuICAgIH07XG4gICAgT2JqZWN0LmtleXMoc2hhcmVkU3RhdGUpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIHNoYXJlZFtwcm9wXSA9IGdsb2JhbC5kZWYoU0hBUkVELCAnLicsIHByb3ApO1xuICAgIH0pO1xuXG4gICAgLy8gSW5qZWN0IHJ1bnRpbWUgYXNzZXJ0aW9uIHN0dWZmIGZvciBkZWJ1ZyBidWlsZHNcbiAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGVudi5DSEVDSyA9IGxpbmsoY2hlY2skMSk7XG4gICAgICBlbnYuY29tbWFuZFN0ciA9IGNoZWNrJDEuZ3Vlc3NDb21tYW5kKCk7XG4gICAgICBlbnYuY29tbWFuZCA9IGxpbmsoZW52LmNvbW1hbmRTdHIpO1xuICAgICAgZW52LmFzc2VydCA9IGZ1bmN0aW9uIChibG9jaywgcHJlZCwgbWVzc2FnZSkge1xuICAgICAgICBibG9jayhcbiAgICAgICAgICAnaWYoISgnLCBwcmVkLCAnKSknLFxuICAgICAgICAgIHRoaXMuQ0hFQ0ssICcuY29tbWFuZFJhaXNlKCcsIGxpbmsobWVzc2FnZSksICcsJywgdGhpcy5jb21tYW5kLCAnKTsnKTtcbiAgICAgIH07XG5cbiAgICAgIHNoYXJlZENvbnN0YW50cy5pbnZhbGlkQmxlbmRDb21iaW5hdGlvbnMgPSBpbnZhbGlkQmxlbmRDb21iaW5hdGlvbnM7XG4gICAgfSk7XG5cbiAgICAvLyBDb3B5IEdMIHN0YXRlIHZhcmlhYmxlcyBvdmVyXG4gICAgdmFyIG5leHRWYXJzID0gZW52Lm5leHQgPSB7fTtcbiAgICB2YXIgY3VycmVudFZhcnMgPSBlbnYuY3VycmVudCA9IHt9O1xuICAgIE9iamVjdC5rZXlzKEdMX1ZBUklBQkxFUykuZm9yRWFjaChmdW5jdGlvbiAodmFyaWFibGUpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnRTdGF0ZVt2YXJpYWJsZV0pKSB7XG4gICAgICAgIG5leHRWYXJzW3ZhcmlhYmxlXSA9IGdsb2JhbC5kZWYoc2hhcmVkLm5leHQsICcuJywgdmFyaWFibGUpO1xuICAgICAgICBjdXJyZW50VmFyc1t2YXJpYWJsZV0gPSBnbG9iYWwuZGVmKHNoYXJlZC5jdXJyZW50LCAnLicsIHZhcmlhYmxlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEluaXRpYWxpemUgc2hhcmVkIGNvbnN0YW50c1xuICAgIHZhciBjb25zdGFudHMgPSBlbnYuY29uc3RhbnRzID0ge307XG4gICAgT2JqZWN0LmtleXMoc2hhcmVkQ29uc3RhbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBjb25zdGFudHNbbmFtZV0gPSBnbG9iYWwuZGVmKEpTT04uc3RyaW5naWZ5KHNoYXJlZENvbnN0YW50c1tuYW1lXSkpO1xuICAgIH0pO1xuXG4gICAgLy8gSGVscGVyIGZ1bmN0aW9uIGZvciBjYWxsaW5nIGEgYmxvY2tcbiAgICBlbnYuaW52b2tlID0gZnVuY3Rpb24gKGJsb2NrLCB4KSB7XG4gICAgICBzd2l0Y2ggKHgudHlwZSkge1xuICAgICAgICBjYXNlIERZTl9GVU5DJDE6XG4gICAgICAgICAgdmFyIGFyZ0xpc3QgPSBbXG4gICAgICAgICAgICAndGhpcycsXG4gICAgICAgICAgICBzaGFyZWQuY29udGV4dCxcbiAgICAgICAgICAgIHNoYXJlZC5wcm9wcyxcbiAgICAgICAgICAgIGVudi5iYXRjaElkXG4gICAgICAgICAgXTtcbiAgICAgICAgICByZXR1cm4gYmxvY2suZGVmKFxuICAgICAgICAgICAgbGluayh4LmRhdGEpLCAnLmNhbGwoJyxcbiAgICAgICAgICAgICAgYXJnTGlzdC5zbGljZSgwLCBNYXRoLm1heCh4LmRhdGEubGVuZ3RoICsgMSwgNCkpLFxuICAgICAgICAgICAgICcpJylcbiAgICAgICAgY2FzZSBEWU5fUFJPUCQxOlxuICAgICAgICAgIHJldHVybiBibG9jay5kZWYoc2hhcmVkLnByb3BzLCB4LmRhdGEpXG4gICAgICAgIGNhc2UgRFlOX0NPTlRFWFQkMTpcbiAgICAgICAgICByZXR1cm4gYmxvY2suZGVmKHNoYXJlZC5jb250ZXh0LCB4LmRhdGEpXG4gICAgICAgIGNhc2UgRFlOX1NUQVRFJDE6XG4gICAgICAgICAgcmV0dXJuIGJsb2NrLmRlZigndGhpcycsIHguZGF0YSlcbiAgICAgICAgY2FzZSBEWU5fVEhVTks6XG4gICAgICAgICAgeC5kYXRhLmFwcGVuZChlbnYsIGJsb2NrKTtcbiAgICAgICAgICByZXR1cm4geC5kYXRhLnJlZlxuICAgICAgfVxuICAgIH07XG5cbiAgICBlbnYuYXR0cmliQ2FjaGUgPSB7fTtcblxuICAgIHZhciBzY29wZUF0dHJpYnMgPSB7fTtcbiAgICBlbnYuc2NvcGVBdHRyaWIgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGlkID0gc3RyaW5nU3RvcmUuaWQobmFtZSk7XG4gICAgICBpZiAoaWQgaW4gc2NvcGVBdHRyaWJzKSB7XG4gICAgICAgIHJldHVybiBzY29wZUF0dHJpYnNbaWRdXG4gICAgICB9XG4gICAgICB2YXIgYmluZGluZyA9IGF0dHJpYnV0ZVN0YXRlLnNjb3BlW2lkXTtcbiAgICAgIGlmICghYmluZGluZykge1xuICAgICAgICBiaW5kaW5nID0gYXR0cmlidXRlU3RhdGUuc2NvcGVbaWRdID0gbmV3IEF0dHJpYnV0ZVJlY29yZCgpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHNjb3BlQXR0cmlic1tpZF0gPSBsaW5rKGJpbmRpbmcpO1xuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH07XG5cbiAgICByZXR1cm4gZW52XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIFBBUlNJTkdcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBmdW5jdGlvbiBwYXJzZVByb2ZpbGUgKG9wdGlvbnMpIHtcbiAgICB2YXIgc3RhdGljT3B0aW9ucyA9IG9wdGlvbnMuc3RhdGljO1xuICAgIHZhciBkeW5hbWljT3B0aW9ucyA9IG9wdGlvbnMuZHluYW1pYztcblxuICAgIHZhciBwcm9maWxlRW5hYmxlO1xuICAgIGlmIChTX1BST0ZJTEUgaW4gc3RhdGljT3B0aW9ucykge1xuICAgICAgdmFyIHZhbHVlID0gISFzdGF0aWNPcHRpb25zW1NfUFJPRklMRV07XG4gICAgICBwcm9maWxlRW5hYmxlID0gY3JlYXRlU3RhdGljRGVjbChmdW5jdGlvbiAoZW52LCBzY29wZSkge1xuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgIH0pO1xuICAgICAgcHJvZmlsZUVuYWJsZS5lbmFibGUgPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKFNfUFJPRklMRSBpbiBkeW5hbWljT3B0aW9ucykge1xuICAgICAgdmFyIGR5biA9IGR5bmFtaWNPcHRpb25zW1NfUFJPRklMRV07XG4gICAgICBwcm9maWxlRW5hYmxlID0gY3JlYXRlRHluYW1pY0RlY2woZHluLCBmdW5jdGlvbiAoZW52LCBzY29wZSkge1xuICAgICAgICByZXR1cm4gZW52Lmludm9rZShzY29wZSwgZHluKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2ZpbGVFbmFibGVcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRnJhbWVidWZmZXIgKG9wdGlvbnMsIGVudikge1xuICAgIHZhciBzdGF0aWNPcHRpb25zID0gb3B0aW9ucy5zdGF0aWM7XG4gICAgdmFyIGR5bmFtaWNPcHRpb25zID0gb3B0aW9ucy5keW5hbWljO1xuXG4gICAgaWYgKFNfRlJBTUVCVUZGRVIgaW4gc3RhdGljT3B0aW9ucykge1xuICAgICAgdmFyIGZyYW1lYnVmZmVyID0gc3RhdGljT3B0aW9uc1tTX0ZSQU1FQlVGRkVSXTtcbiAgICAgIGlmIChmcmFtZWJ1ZmZlcikge1xuICAgICAgICBmcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyU3RhdGUuZ2V0RnJhbWVidWZmZXIoZnJhbWVidWZmZXIpO1xuICAgICAgICBjaGVjayQxLmNvbW1hbmQoZnJhbWVidWZmZXIsICdpbnZhbGlkIGZyYW1lYnVmZmVyIG9iamVjdCcpO1xuICAgICAgICByZXR1cm4gY3JlYXRlU3RhdGljRGVjbChmdW5jdGlvbiAoZW52LCBibG9jaykge1xuICAgICAgICAgIHZhciBGUkFNRUJVRkZFUiA9IGVudi5saW5rKGZyYW1lYnVmZmVyKTtcbiAgICAgICAgICB2YXIgc2hhcmVkID0gZW52LnNoYXJlZDtcbiAgICAgICAgICBibG9jay5zZXQoXG4gICAgICAgICAgICBzaGFyZWQuZnJhbWVidWZmZXIsXG4gICAgICAgICAgICAnLm5leHQnLFxuICAgICAgICAgICAgRlJBTUVCVUZGRVIpO1xuICAgICAgICAgIHZhciBDT05URVhUID0gc2hhcmVkLmNvbnRleHQ7XG4gICAgICAgICAgYmxvY2suc2V0KFxuICAgICAgICAgICAgQ09OVEVYVCxcbiAgICAgICAgICAgICcuJyArIFNfRlJBTUVCVUZGRVJfV0lEVEgsXG4gICAgICAgICAgICBGUkFNRUJVRkZFUiArICcud2lkdGgnKTtcbiAgICAgICAgICBibG9jay5zZXQoXG4gICAgICAgICAgICBDT05URVhULFxuICAgICAgICAgICAgJy4nICsgU19GUkFNRUJVRkZFUl9IRUlHSFQsXG4gICAgICAgICAgICBGUkFNRUJVRkZFUiArICcuaGVpZ2h0Jyk7XG4gICAgICAgICAgcmV0dXJuIEZSQU1FQlVGRkVSXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY3JlYXRlU3RhdGljRGVjbChmdW5jdGlvbiAoZW52LCBzY29wZSkge1xuICAgICAgICAgIHZhciBzaGFyZWQgPSBlbnYuc2hhcmVkO1xuICAgICAgICAgIHNjb3BlLnNldChcbiAgICAgICAgICAgIHNoYXJlZC5mcmFtZWJ1ZmZlcixcbiAgICAgICAgICAgICcubmV4dCcsXG4gICAgICAgICAgICAnbnVsbCcpO1xuICAgICAgICAgIHZhciBDT05URVhUID0gc2hhcmVkLmNvbnRleHQ7XG4gICAgICAgICAgc2NvcGUuc2V0KFxuICAgICAgICAgICAgQ09OVEVYVCxcbiAgICAgICAgICAgICcuJyArIFNfRlJBTUVCVUZGRVJfV0lEVEgsXG4gICAgICAgICAgICBDT05URVhUICsgJy4nICsgU19EUkFXSU5HQlVGRkVSX1dJRFRIKTtcbiAgICAgICAgICBzY29wZS5zZXQoXG4gICAgICAgICAgICBDT05URVhULFxuICAgICAgICAgICAgJy4nICsgU19GUkFNRUJVRkZFUl9IRUlHSFQsXG4gICAgICAgICAgICBDT05URVhUICsgJy4nICsgU19EUkFXSU5HQlVGRkVSX0hFSUdIVCk7XG4gICAgICAgICAgcmV0dXJuICdudWxsJ1xuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoU19GUkFNRUJVRkZFUiBpbiBkeW5hbWljT3B0aW9ucykge1xuICAgICAgdmFyIGR5biA9IGR5bmFtaWNPcHRpb25zW1NfRlJBTUVCVUZGRVJdO1xuICAgICAgcmV0dXJuIGNyZWF0ZUR5bmFtaWNEZWNsKGR5biwgZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcbiAgICAgICAgdmFyIEZSQU1FQlVGRkVSX0ZVTkMgPSBlbnYuaW52b2tlKHNjb3BlLCBkeW4pO1xuICAgICAgICB2YXIgc2hhcmVkID0gZW52LnNoYXJlZDtcbiAgICAgICAgdmFyIEZSQU1FQlVGRkVSX1NUQVRFID0gc2hhcmVkLmZyYW1lYnVmZmVyO1xuICAgICAgICB2YXIgRlJBTUVCVUZGRVIgPSBzY29wZS5kZWYoXG4gICAgICAgICAgRlJBTUVCVUZGRVJfU1RBVEUsICcuZ2V0RnJhbWVidWZmZXIoJywgRlJBTUVCVUZGRVJfRlVOQywgJyknKTtcblxuICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbnYuYXNzZXJ0KHNjb3BlLFxuICAgICAgICAgICAgJyEnICsgRlJBTUVCVUZGRVJfRlVOQyArICd8fCcgKyBGUkFNRUJVRkZFUixcbiAgICAgICAgICAgICdpbnZhbGlkIGZyYW1lYnVmZmVyIG9iamVjdCcpO1xuICAgICAgICB9KTtcblxuICAgICAgICBzY29wZS5zZXQoXG4gICAgICAgICAgRlJBTUVCVUZGRVJfU1RBVEUsXG4gICAgICAgICAgJy5uZXh0JyxcbiAgICAgICAgICBGUkFNRUJVRkZFUik7XG4gICAgICAgIHZhciBDT05URVhUID0gc2hhcmVkLmNvbnRleHQ7XG4gICAgICAgIHNjb3BlLnNldChcbiAgICAgICAgICBDT05URVhULFxuICAgICAgICAgICcuJyArIFNfRlJBTUVCVUZGRVJfV0lEVEgsXG4gICAgICAgICAgRlJBTUVCVUZGRVIgKyAnPycgKyBGUkFNRUJVRkZFUiArICcud2lkdGg6JyArXG4gICAgICAgICAgQ09OVEVYVCArICcuJyArIFNfRFJBV0lOR0JVRkZFUl9XSURUSCk7XG4gICAgICAgIHNjb3BlLnNldChcbiAgICAgICAgICBDT05URVhULFxuICAgICAgICAgICcuJyArIFNfRlJBTUVCVUZGRVJfSEVJR0hULFxuICAgICAgICAgIEZSQU1FQlVGRkVSICtcbiAgICAgICAgICAnPycgKyBGUkFNRUJVRkZFUiArICcuaGVpZ2h0OicgK1xuICAgICAgICAgIENPTlRFWFQgKyAnLicgKyBTX0RSQVdJTkdCVUZGRVJfSEVJR0hUKTtcbiAgICAgICAgcmV0dXJuIEZSQU1FQlVGRkVSXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlVmlld3BvcnRTY2lzc29yIChvcHRpb25zLCBmcmFtZWJ1ZmZlciwgZW52KSB7XG4gICAgdmFyIHN0YXRpY09wdGlvbnMgPSBvcHRpb25zLnN0YXRpYztcbiAgICB2YXIgZHluYW1pY09wdGlvbnMgPSBvcHRpb25zLmR5bmFtaWM7XG5cbiAgICBmdW5jdGlvbiBwYXJzZUJveCAocGFyYW0pIHtcbiAgICAgIGlmIChwYXJhbSBpbiBzdGF0aWNPcHRpb25zKSB7XG4gICAgICAgIHZhciBib3ggPSBzdGF0aWNPcHRpb25zW3BhcmFtXTtcbiAgICAgICAgY2hlY2skMS5jb21tYW5kVHlwZShib3gsICdvYmplY3QnLCAnaW52YWxpZCAnICsgcGFyYW0sIGVudi5jb21tYW5kU3RyKTtcblxuICAgICAgICB2YXIgaXNTdGF0aWMgPSB0cnVlO1xuICAgICAgICB2YXIgeCA9IGJveC54IHwgMDtcbiAgICAgICAgdmFyIHkgPSBib3gueSB8IDA7XG4gICAgICAgIHZhciB3LCBoO1xuICAgICAgICBpZiAoJ3dpZHRoJyBpbiBib3gpIHtcbiAgICAgICAgICB3ID0gYm94LndpZHRoIHwgMDtcbiAgICAgICAgICBjaGVjayQxLmNvbW1hbmQodyA+PSAwLCAnaW52YWxpZCAnICsgcGFyYW0sIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc1N0YXRpYyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmICgnaGVpZ2h0JyBpbiBib3gpIHtcbiAgICAgICAgICBoID0gYm94LmhlaWdodCB8IDA7XG4gICAgICAgICAgY2hlY2skMS5jb21tYW5kKGggPj0gMCwgJ2ludmFsaWQgJyArIHBhcmFtLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXNTdGF0aWMgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgRGVjbGFyYXRpb24oXG4gICAgICAgICAgIWlzU3RhdGljICYmIGZyYW1lYnVmZmVyICYmIGZyYW1lYnVmZmVyLnRoaXNEZXAsXG4gICAgICAgICAgIWlzU3RhdGljICYmIGZyYW1lYnVmZmVyICYmIGZyYW1lYnVmZmVyLmNvbnRleHREZXAsXG4gICAgICAgICAgIWlzU3RhdGljICYmIGZyYW1lYnVmZmVyICYmIGZyYW1lYnVmZmVyLnByb3BEZXAsXG4gICAgICAgICAgZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcbiAgICAgICAgICAgIHZhciBDT05URVhUID0gZW52LnNoYXJlZC5jb250ZXh0O1xuICAgICAgICAgICAgdmFyIEJPWF9XID0gdztcbiAgICAgICAgICAgIGlmICghKCd3aWR0aCcgaW4gYm94KSkge1xuICAgICAgICAgICAgICBCT1hfVyA9IHNjb3BlLmRlZihDT05URVhULCAnLicsIFNfRlJBTUVCVUZGRVJfV0lEVEgsICctJywgeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgQk9YX0ggPSBoO1xuICAgICAgICAgICAgaWYgKCEoJ2hlaWdodCcgaW4gYm94KSkge1xuICAgICAgICAgICAgICBCT1hfSCA9IHNjb3BlLmRlZihDT05URVhULCAnLicsIFNfRlJBTUVCVUZGRVJfSEVJR0hULCAnLScsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFt4LCB5LCBCT1hfVywgQk9YX0hdXG4gICAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAocGFyYW0gaW4gZHluYW1pY09wdGlvbnMpIHtcbiAgICAgICAgdmFyIGR5bkJveCA9IGR5bmFtaWNPcHRpb25zW3BhcmFtXTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUR5bmFtaWNEZWNsKGR5bkJveCwgZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcbiAgICAgICAgICB2YXIgQk9YID0gZW52Lmludm9rZShzY29wZSwgZHluQm94KTtcblxuICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcbiAgICAgICAgICAgICAgQk9YICsgJyYmdHlwZW9mICcgKyBCT1ggKyAnPT09XCJvYmplY3RcIicsXG4gICAgICAgICAgICAgICdpbnZhbGlkICcgKyBwYXJhbSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICB2YXIgQ09OVEVYVCA9IGVudi5zaGFyZWQuY29udGV4dDtcbiAgICAgICAgICB2YXIgQk9YX1ggPSBzY29wZS5kZWYoQk9YLCAnLnh8MCcpO1xuICAgICAgICAgIHZhciBCT1hfWSA9IHNjb3BlLmRlZihCT1gsICcueXwwJyk7XG4gICAgICAgICAgdmFyIEJPWF9XID0gc2NvcGUuZGVmKFxuICAgICAgICAgICAgJ1wid2lkdGhcIiBpbiAnLCBCT1gsICc/JywgQk9YLCAnLndpZHRofDA6JyxcbiAgICAgICAgICAgICcoJywgQ09OVEVYVCwgJy4nLCBTX0ZSQU1FQlVGRkVSX1dJRFRILCAnLScsIEJPWF9YLCAnKScpO1xuICAgICAgICAgIHZhciBCT1hfSCA9IHNjb3BlLmRlZihcbiAgICAgICAgICAgICdcImhlaWdodFwiIGluICcsIEJPWCwgJz8nLCBCT1gsICcuaGVpZ2h0fDA6JyxcbiAgICAgICAgICAgICcoJywgQ09OVEVYVCwgJy4nLCBTX0ZSQU1FQlVGRkVSX0hFSUdIVCwgJy0nLCBCT1hfWSwgJyknKTtcblxuICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcbiAgICAgICAgICAgICAgQk9YX1cgKyAnPj0wJiYnICtcbiAgICAgICAgICAgICAgQk9YX0ggKyAnPj0wJyxcbiAgICAgICAgICAgICAgJ2ludmFsaWQgJyArIHBhcmFtKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBbQk9YX1gsIEJPWF9ZLCBCT1hfVywgQk9YX0hdXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZnJhbWVidWZmZXIpIHtcbiAgICAgICAgICByZXN1bHQudGhpc0RlcCA9IHJlc3VsdC50aGlzRGVwIHx8IGZyYW1lYnVmZmVyLnRoaXNEZXA7XG4gICAgICAgICAgcmVzdWx0LmNvbnRleHREZXAgPSByZXN1bHQuY29udGV4dERlcCB8fCBmcmFtZWJ1ZmZlci5jb250ZXh0RGVwO1xuICAgICAgICAgIHJlc3VsdC5wcm9wRGVwID0gcmVzdWx0LnByb3BEZXAgfHwgZnJhbWVidWZmZXIucHJvcERlcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICB9IGVsc2UgaWYgKGZyYW1lYnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGVjbGFyYXRpb24oXG4gICAgICAgICAgZnJhbWVidWZmZXIudGhpc0RlcCxcbiAgICAgICAgICBmcmFtZWJ1ZmZlci5jb250ZXh0RGVwLFxuICAgICAgICAgIGZyYW1lYnVmZmVyLnByb3BEZXAsXG4gICAgICAgICAgZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcbiAgICAgICAgICAgIHZhciBDT05URVhUID0gZW52LnNoYXJlZC5jb250ZXh0O1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgMCwgMCxcbiAgICAgICAgICAgICAgc2NvcGUuZGVmKENPTlRFWFQsICcuJywgU19GUkFNRUJVRkZFUl9XSURUSCksXG4gICAgICAgICAgICAgIHNjb3BlLmRlZihDT05URVhULCAnLicsIFNfRlJBTUVCVUZGRVJfSEVJR0hUKV1cbiAgICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdmlld3BvcnQgPSBwYXJzZUJveChTX1ZJRVdQT1JUKTtcblxuICAgIGlmICh2aWV3cG9ydCkge1xuICAgICAgdmFyIHByZXZWaWV3cG9ydCA9IHZpZXdwb3J0O1xuICAgICAgdmlld3BvcnQgPSBuZXcgRGVjbGFyYXRpb24oXG4gICAgICAgIHZpZXdwb3J0LnRoaXNEZXAsXG4gICAgICAgIHZpZXdwb3J0LmNvbnRleHREZXAsXG4gICAgICAgIHZpZXdwb3J0LnByb3BEZXAsXG4gICAgICAgIGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XG4gICAgICAgICAgdmFyIFZJRVdQT1JUID0gcHJldlZpZXdwb3J0LmFwcGVuZChlbnYsIHNjb3BlKTtcbiAgICAgICAgICB2YXIgQ09OVEVYVCA9IGVudi5zaGFyZWQuY29udGV4dDtcbiAgICAgICAgICBzY29wZS5zZXQoXG4gICAgICAgICAgICBDT05URVhULFxuICAgICAgICAgICAgJy4nICsgU19WSUVXUE9SVF9XSURUSCxcbiAgICAgICAgICAgIFZJRVdQT1JUWzJdKTtcbiAgICAgICAgICBzY29wZS5zZXQoXG4gICAgICAgICAgICBDT05URVhULFxuICAgICAgICAgICAgJy4nICsgU19WSUVXUE9SVF9IRUlHSFQsXG4gICAgICAgICAgICBWSUVXUE9SVFszXSk7XG4gICAgICAgICAgcmV0dXJuIFZJRVdQT1JUXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB2aWV3cG9ydDogdmlld3BvcnQsXG4gICAgICBzY2lzc29yX2JveDogcGFyc2VCb3goU19TQ0lTU09SX0JPWClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVByb2dyYW0gKG9wdGlvbnMpIHtcbiAgICB2YXIgc3RhdGljT3B0aW9ucyA9IG9wdGlvbnMuc3RhdGljO1xuICAgIHZhciBkeW5hbWljT3B0aW9ucyA9IG9wdGlvbnMuZHluYW1pYztcblxuICAgIGZ1bmN0aW9uIHBhcnNlU2hhZGVyIChuYW1lKSB7XG4gICAgICBpZiAobmFtZSBpbiBzdGF0aWNPcHRpb25zKSB7XG4gICAgICAgIHZhciBpZCA9IHN0cmluZ1N0b3JlLmlkKHN0YXRpY09wdGlvbnNbbmFtZV0pO1xuICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzaGFkZXJTdGF0ZS5zaGFkZXIoc2hhZGVyVHlwZVtuYW1lXSwgaWQsIGNoZWNrJDEuZ3Vlc3NDb21tYW5kKCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVN0YXRpY0RlY2woZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBpZFxuICAgICAgICB9KTtcbiAgICAgICAgcmVzdWx0LmlkID0gaWQ7XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH0gZWxzZSBpZiAobmFtZSBpbiBkeW5hbWljT3B0aW9ucykge1xuICAgICAgICB2YXIgZHluID0gZHluYW1pY09wdGlvbnNbbmFtZV07XG4gICAgICAgIHJldHVybiBjcmVhdGVEeW5hbWljRGVjbChkeW4sIGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XG4gICAgICAgICAgdmFyIHN0ciA9IGVudi5pbnZva2Uoc2NvcGUsIGR5bik7XG4gICAgICAgICAgdmFyIGlkID0gc2NvcGUuZGVmKGVudi5zaGFyZWQuc3RyaW5ncywgJy5pZCgnLCBzdHIsICcpJyk7XG4gICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzY29wZShcbiAgICAgICAgICAgICAgZW52LnNoYXJlZC5zaGFkZXIsICcuc2hhZGVyKCcsXG4gICAgICAgICAgICAgIHNoYWRlclR5cGVbbmFtZV0sICcsJyxcbiAgICAgICAgICAgICAgaWQsICcsJyxcbiAgICAgICAgICAgICAgZW52LmNvbW1hbmQsICcpOycpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBpZFxuICAgICAgICB9KVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICB2YXIgZnJhZyA9IHBhcnNlU2hhZGVyKFNfRlJBRyk7XG4gICAgdmFyIHZlcnQgPSBwYXJzZVNoYWRlcihTX1ZFUlQpO1xuXG4gICAgdmFyIHByb2dyYW0gPSBudWxsO1xuICAgIHZhciBwcm9nVmFyO1xuICAgIGlmIChpc1N0YXRpYyhmcmFnKSAmJiBpc1N0YXRpYyh2ZXJ0KSkge1xuICAgICAgcHJvZ3JhbSA9IHNoYWRlclN0YXRlLnByb2dyYW0odmVydC5pZCwgZnJhZy5pZCk7XG4gICAgICBwcm9nVmFyID0gY3JlYXRlU3RhdGljRGVjbChmdW5jdGlvbiAoZW52LCBzY29wZSkge1xuICAgICAgICByZXR1cm4gZW52LmxpbmsocHJvZ3JhbSlcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9nVmFyID0gbmV3IERlY2xhcmF0aW9uKFxuICAgICAgICAoZnJhZyAmJiBmcmFnLnRoaXNEZXApIHx8ICh2ZXJ0ICYmIHZlcnQudGhpc0RlcCksXG4gICAgICAgIChmcmFnICYmIGZyYWcuY29udGV4dERlcCkgfHwgKHZlcnQgJiYgdmVydC5jb250ZXh0RGVwKSxcbiAgICAgICAgKGZyYWcgJiYgZnJhZy5wcm9wRGVwKSB8fCAodmVydCAmJiB2ZXJ0LnByb3BEZXApLFxuICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSkge1xuICAgICAgICAgIHZhciBTSEFERVJfU1RBVEUgPSBlbnYuc2hhcmVkLnNoYWRlcjtcbiAgICAgICAgICB2YXIgZnJhZ0lkO1xuICAgICAgICAgIGlmIChmcmFnKSB7XG4gICAgICAgICAgICBmcmFnSWQgPSBmcmFnLmFwcGVuZChlbnYsIHNjb3BlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJhZ0lkID0gc2NvcGUuZGVmKFNIQURFUl9TVEFURSwgJy4nLCBTX0ZSQUcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdmVydElkO1xuICAgICAgICAgIGlmICh2ZXJ0KSB7XG4gICAgICAgICAgICB2ZXJ0SWQgPSB2ZXJ0LmFwcGVuZChlbnYsIHNjb3BlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmVydElkID0gc2NvcGUuZGVmKFNIQURFUl9TVEFURSwgJy4nLCBTX1ZFUlQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcHJvZ0RlZiA9IFNIQURFUl9TVEFURSArICcucHJvZ3JhbSgnICsgdmVydElkICsgJywnICsgZnJhZ0lkO1xuICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcHJvZ0RlZiArPSAnLCcgKyBlbnYuY29tbWFuZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gc2NvcGUuZGVmKHByb2dEZWYgKyAnKScpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBmcmFnOiBmcmFnLFxuICAgICAgdmVydDogdmVydCxcbiAgICAgIHByb2dWYXI6IHByb2dWYXIsXG4gICAgICBwcm9ncmFtOiBwcm9ncmFtXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VEcmF3IChvcHRpb25zLCBlbnYpIHtcbiAgICB2YXIgc3RhdGljT3B0aW9ucyA9IG9wdGlvbnMuc3RhdGljO1xuICAgIHZhciBkeW5hbWljT3B0aW9ucyA9IG9wdGlvbnMuZHluYW1pYztcblxuICAgIGZ1bmN0aW9uIHBhcnNlRWxlbWVudHMgKCkge1xuICAgICAgaWYgKFNfRUxFTUVOVFMgaW4gc3RhdGljT3B0aW9ucykge1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBzdGF0aWNPcHRpb25zW1NfRUxFTUVOVFNdO1xuICAgICAgICBpZiAoaXNCdWZmZXJBcmdzKGVsZW1lbnRzKSkge1xuICAgICAgICAgIGVsZW1lbnRzID0gZWxlbWVudFN0YXRlLmdldEVsZW1lbnRzKGVsZW1lbnRTdGF0ZS5jcmVhdGUoZWxlbWVudHMsIHRydWUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50cykge1xuICAgICAgICAgIGVsZW1lbnRzID0gZWxlbWVudFN0YXRlLmdldEVsZW1lbnRzKGVsZW1lbnRzKTtcbiAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoZWxlbWVudHMsICdpbnZhbGlkIGVsZW1lbnRzJywgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVTdGF0aWNEZWNsKGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XG4gICAgICAgICAgaWYgKGVsZW1lbnRzKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZW52LmxpbmsoZWxlbWVudHMpO1xuICAgICAgICAgICAgZW52LkVMRU1FTlRTID0gcmVzdWx0O1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICAgIH1cbiAgICAgICAgICBlbnYuRUxFTUVOVFMgPSBudWxsO1xuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgICByZXN1bHQudmFsdWUgPSBlbGVtZW50cztcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgfSBlbHNlIGlmIChTX0VMRU1FTlRTIGluIGR5bmFtaWNPcHRpb25zKSB7XG4gICAgICAgIHZhciBkeW4gPSBkeW5hbWljT3B0aW9uc1tTX0VMRU1FTlRTXTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR5bmFtaWNEZWNsKGR5biwgZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcbiAgICAgICAgICB2YXIgc2hhcmVkID0gZW52LnNoYXJlZDtcblxuICAgICAgICAgIHZhciBJU19CVUZGRVJfQVJHUyA9IHNoYXJlZC5pc0J1ZmZlckFyZ3M7XG4gICAgICAgICAgdmFyIEVMRU1FTlRfU1RBVEUgPSBzaGFyZWQuZWxlbWVudHM7XG5cbiAgICAgICAgICB2YXIgZWxlbWVudERlZm4gPSBlbnYuaW52b2tlKHNjb3BlLCBkeW4pO1xuICAgICAgICAgIHZhciBlbGVtZW50cyA9IHNjb3BlLmRlZignbnVsbCcpO1xuICAgICAgICAgIHZhciBlbGVtZW50U3RyZWFtID0gc2NvcGUuZGVmKElTX0JVRkZFUl9BUkdTLCAnKCcsIGVsZW1lbnREZWZuLCAnKScpO1xuXG4gICAgICAgICAgdmFyIGlmdGUgPSBlbnYuY29uZChlbGVtZW50U3RyZWFtKVxuICAgICAgICAgICAgLnRoZW4oZWxlbWVudHMsICc9JywgRUxFTUVOVF9TVEFURSwgJy5jcmVhdGVTdHJlYW0oJywgZWxlbWVudERlZm4sICcpOycpXG4gICAgICAgICAgICAuZWxzZShlbGVtZW50cywgJz0nLCBFTEVNRU5UX1NUQVRFLCAnLmdldEVsZW1lbnRzKCcsIGVsZW1lbnREZWZuLCAnKTsnKTtcblxuICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZW52LmFzc2VydChpZnRlLmVsc2UsXG4gICAgICAgICAgICAgICchJyArIGVsZW1lbnREZWZuICsgJ3x8JyArIGVsZW1lbnRzLFxuICAgICAgICAgICAgICAnaW52YWxpZCBlbGVtZW50cycpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgc2NvcGUuZW50cnkoaWZ0ZSk7XG4gICAgICAgICAgc2NvcGUuZXhpdChcbiAgICAgICAgICAgIGVudi5jb25kKGVsZW1lbnRTdHJlYW0pXG4gICAgICAgICAgICAgIC50aGVuKEVMRU1FTlRfU1RBVEUsICcuZGVzdHJveVN0cmVhbSgnLCBlbGVtZW50cywgJyk7JykpO1xuXG4gICAgICAgICAgZW52LkVMRU1FTlRTID0gZWxlbWVudHM7XG5cbiAgICAgICAgICByZXR1cm4gZWxlbWVudHNcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICB2YXIgZWxlbWVudHMgPSBwYXJzZUVsZW1lbnRzKCk7XG5cbiAgICBmdW5jdGlvbiBwYXJzZVByaW1pdGl2ZSAoKSB7XG4gICAgICBpZiAoU19QUklNSVRJVkUgaW4gc3RhdGljT3B0aW9ucykge1xuICAgICAgICB2YXIgcHJpbWl0aXZlID0gc3RhdGljT3B0aW9uc1tTX1BSSU1JVElWRV07XG4gICAgICAgIGNoZWNrJDEuY29tbWFuZFBhcmFtZXRlcihwcmltaXRpdmUsIHByaW1UeXBlcywgJ2ludmFsaWQgcHJpbWl0dmUnLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgIHJldHVybiBjcmVhdGVTdGF0aWNEZWNsKGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XG4gICAgICAgICAgcmV0dXJuIHByaW1UeXBlc1twcmltaXRpdmVdXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKFNfUFJJTUlUSVZFIGluIGR5bmFtaWNPcHRpb25zKSB7XG4gICAgICAgIHZhciBkeW5QcmltaXRpdmUgPSBkeW5hbWljT3B0aW9uc1tTX1BSSU1JVElWRV07XG4gICAgICAgIHJldHVybiBjcmVhdGVEeW5hbWljRGVjbChkeW5QcmltaXRpdmUsIGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XG4gICAgICAgICAgdmFyIFBSSU1fVFlQRVMgPSBlbnYuY29uc3RhbnRzLnByaW1UeXBlcztcbiAgICAgICAgICB2YXIgcHJpbSA9IGVudi5pbnZva2Uoc2NvcGUsIGR5blByaW1pdGl2ZSk7XG4gICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBlbnYuYXNzZXJ0KHNjb3BlLFxuICAgICAgICAgICAgICBwcmltICsgJyBpbiAnICsgUFJJTV9UWVBFUyxcbiAgICAgICAgICAgICAgJ2ludmFsaWQgcHJpbWl0aXZlLCBtdXN0IGJlIG9uZSBvZiAnICsgT2JqZWN0LmtleXMocHJpbVR5cGVzKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHNjb3BlLmRlZihQUklNX1RZUEVTLCAnWycsIHByaW0sICddJylcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudHMpIHtcbiAgICAgICAgaWYgKGlzU3RhdGljKGVsZW1lbnRzKSkge1xuICAgICAgICAgIGlmIChlbGVtZW50cy52YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVN0YXRpY0RlY2woZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLmRlZihlbnYuRUxFTUVOVFMsICcucHJpbVR5cGUnKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVN0YXRpY0RlY2woZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gR0xfVFJJQU5HTEVTJDFcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBuZXcgRGVjbGFyYXRpb24oXG4gICAgICAgICAgICBlbGVtZW50cy50aGlzRGVwLFxuICAgICAgICAgICAgZWxlbWVudHMuY29udGV4dERlcCxcbiAgICAgICAgICAgIGVsZW1lbnRzLnByb3BEZXAsXG4gICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSkge1xuICAgICAgICAgICAgICB2YXIgZWxlbWVudHMgPSBlbnYuRUxFTUVOVFM7XG4gICAgICAgICAgICAgIHJldHVybiBzY29wZS5kZWYoZWxlbWVudHMsICc/JywgZWxlbWVudHMsICcucHJpbVR5cGU6JywgR0xfVFJJQU5HTEVTJDEpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlUGFyYW0gKHBhcmFtLCBpc09mZnNldCkge1xuICAgICAgaWYgKHBhcmFtIGluIHN0YXRpY09wdGlvbnMpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc3RhdGljT3B0aW9uc1twYXJhbV0gfCAwO1xuICAgICAgICBjaGVjayQxLmNvbW1hbmQoIWlzT2Zmc2V0IHx8IHZhbHVlID49IDAsICdpbnZhbGlkICcgKyBwYXJhbSwgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICByZXR1cm4gY3JlYXRlU3RhdGljRGVjbChmdW5jdGlvbiAoZW52LCBzY29wZSkge1xuICAgICAgICAgIGlmIChpc09mZnNldCkge1xuICAgICAgICAgICAgZW52Lk9GRlNFVCA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAocGFyYW0gaW4gZHluYW1pY09wdGlvbnMpIHtcbiAgICAgICAgdmFyIGR5blZhbHVlID0gZHluYW1pY09wdGlvbnNbcGFyYW1dO1xuICAgICAgICByZXR1cm4gY3JlYXRlRHluYW1pY0RlY2woZHluVmFsdWUsIGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGVudi5pbnZva2Uoc2NvcGUsIGR5blZhbHVlKTtcbiAgICAgICAgICBpZiAoaXNPZmZzZXQpIHtcbiAgICAgICAgICAgIGVudi5PRkZTRVQgPSByZXN1bHQ7XG4gICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcbiAgICAgICAgICAgICAgICByZXN1bHQgKyAnPj0wJyxcbiAgICAgICAgICAgICAgICAnaW52YWxpZCAnICsgcGFyYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSBpZiAoaXNPZmZzZXQgJiYgZWxlbWVudHMpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVN0YXRpY0RlY2woZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcbiAgICAgICAgICBlbnYuT0ZGU0VUID0gJzAnO1xuICAgICAgICAgIHJldHVybiAwXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cblxuICAgIHZhciBPRkZTRVQgPSBwYXJzZVBhcmFtKFNfT0ZGU0VULCB0cnVlKTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlVmVydENvdW50ICgpIHtcbiAgICAgIGlmIChTX0NPVU5UIGluIHN0YXRpY09wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNvdW50ID0gc3RhdGljT3B0aW9uc1tTX0NPVU5UXSB8IDA7XG4gICAgICAgIGNoZWNrJDEuY29tbWFuZChcbiAgICAgICAgICB0eXBlb2YgY291bnQgPT09ICdudW1iZXInICYmIGNvdW50ID49IDAsICdpbnZhbGlkIHZlcnRleCBjb3VudCcsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVN0YXRpY0RlY2woZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBjb3VudFxuICAgICAgICB9KVxuICAgICAgfSBlbHNlIGlmIChTX0NPVU5UIGluIGR5bmFtaWNPcHRpb25zKSB7XG4gICAgICAgIHZhciBkeW5Db3VudCA9IGR5bmFtaWNPcHRpb25zW1NfQ09VTlRdO1xuICAgICAgICByZXR1cm4gY3JlYXRlRHluYW1pY0RlY2woZHluQ291bnQsIGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGVudi5pbnZva2Uoc2NvcGUsIGR5bkNvdW50KTtcbiAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXG4gICAgICAgICAgICAgICd0eXBlb2YgJyArIHJlc3VsdCArICc9PT1cIm51bWJlclwiJiYnICtcbiAgICAgICAgICAgICAgcmVzdWx0ICsgJz49MCYmJyArXG4gICAgICAgICAgICAgIHJlc3VsdCArICc9PT0oJyArIHJlc3VsdCArICd8MCknLFxuICAgICAgICAgICAgICAnaW52YWxpZCB2ZXJ0ZXggY291bnQnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGVsZW1lbnRzKSB7XG4gICAgICAgIGlmIChpc1N0YXRpYyhlbGVtZW50cykpIHtcbiAgICAgICAgICBpZiAoZWxlbWVudHMpIHtcbiAgICAgICAgICAgIGlmIChPRkZTRVQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEZWNsYXJhdGlvbihcbiAgICAgICAgICAgICAgICBPRkZTRVQudGhpc0RlcCxcbiAgICAgICAgICAgICAgICBPRkZTRVQuY29udGV4dERlcCxcbiAgICAgICAgICAgICAgICBPRkZTRVQucHJvcERlcCxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHNjb3BlLmRlZihcbiAgICAgICAgICAgICAgICAgICAgZW52LkVMRU1FTlRTLCAnLnZlcnRDb3VudC0nLCBlbnYuT0ZGU0VUKTtcblxuICAgICAgICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICsgJz49MCcsXG4gICAgICAgICAgICAgICAgICAgICAgJ2ludmFsaWQgdmVydGV4IG9mZnNldC9lbGVtZW50IGJ1ZmZlciB0b28gc21hbGwnKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBjcmVhdGVTdGF0aWNEZWNsKGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLmRlZihlbnYuRUxFTUVOVFMsICcudmVydENvdW50JylcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVN0YXRpY0RlY2woZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gLTFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5NSVNTSU5HID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdmFyaWFibGUgPSBuZXcgRGVjbGFyYXRpb24oXG4gICAgICAgICAgICBlbGVtZW50cy50aGlzRGVwIHx8IE9GRlNFVC50aGlzRGVwLFxuICAgICAgICAgICAgZWxlbWVudHMuY29udGV4dERlcCB8fCBPRkZTRVQuY29udGV4dERlcCxcbiAgICAgICAgICAgIGVsZW1lbnRzLnByb3BEZXAgfHwgT0ZGU0VULnByb3BEZXAsXG4gICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSkge1xuICAgICAgICAgICAgICB2YXIgZWxlbWVudHMgPSBlbnYuRUxFTUVOVFM7XG4gICAgICAgICAgICAgIGlmIChlbnYuT0ZGU0VUKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLmRlZihlbGVtZW50cywgJz8nLCBlbGVtZW50cywgJy52ZXJ0Q291bnQtJyxcbiAgICAgICAgICAgICAgICAgIGVudi5PRkZTRVQsICc6LTEnKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBzY29wZS5kZWYoZWxlbWVudHMsICc/JywgZWxlbWVudHMsICcudmVydENvdW50Oi0xJylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyaWFibGUuRFlOQU1JQyA9IHRydWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHZhcmlhYmxlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGVsZW1lbnRzOiBlbGVtZW50cyxcbiAgICAgIHByaW1pdGl2ZTogcGFyc2VQcmltaXRpdmUoKSxcbiAgICAgIGNvdW50OiBwYXJzZVZlcnRDb3VudCgpLFxuICAgICAgaW5zdGFuY2VzOiBwYXJzZVBhcmFtKFNfSU5TVEFOQ0VTLCBmYWxzZSksXG4gICAgICBvZmZzZXQ6IE9GRlNFVFxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlR0xTdGF0ZSAob3B0aW9ucywgZW52KSB7XG4gICAgdmFyIHN0YXRpY09wdGlvbnMgPSBvcHRpb25zLnN0YXRpYztcbiAgICB2YXIgZHluYW1pY09wdGlvbnMgPSBvcHRpb25zLmR5bmFtaWM7XG5cbiAgICB2YXIgU1RBVEUgPSB7fTtcblxuICAgIEdMX1NUQVRFX05BTUVTLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIHZhciBwYXJhbSA9IHByb3BOYW1lKHByb3ApO1xuXG4gICAgICBmdW5jdGlvbiBwYXJzZVBhcmFtIChwYXJzZVN0YXRpYywgcGFyc2VEeW5hbWljKSB7XG4gICAgICAgIGlmIChwcm9wIGluIHN0YXRpY09wdGlvbnMpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBwYXJzZVN0YXRpYyhzdGF0aWNPcHRpb25zW3Byb3BdKTtcbiAgICAgICAgICBTVEFURVtwYXJhbV0gPSBjcmVhdGVTdGF0aWNEZWNsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3AgaW4gZHluYW1pY09wdGlvbnMpIHtcbiAgICAgICAgICB2YXIgZHluID0gZHluYW1pY09wdGlvbnNbcHJvcF07XG4gICAgICAgICAgU1RBVEVbcGFyYW1dID0gY3JlYXRlRHluYW1pY0RlY2woZHluLCBmdW5jdGlvbiAoZW52LCBzY29wZSkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRHluYW1pYyhlbnYsIHNjb3BlLCBlbnYuaW52b2tlKHNjb3BlLCBkeW4pKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAocHJvcCkge1xuICAgICAgICBjYXNlIFNfQ1VMTF9FTkFCTEU6XG4gICAgICAgIGNhc2UgU19CTEVORF9FTkFCTEU6XG4gICAgICAgIGNhc2UgU19ESVRIRVI6XG4gICAgICAgIGNhc2UgU19TVEVOQ0lMX0VOQUJMRTpcbiAgICAgICAgY2FzZSBTX0RFUFRIX0VOQUJMRTpcbiAgICAgICAgY2FzZSBTX1NDSVNTT1JfRU5BQkxFOlxuICAgICAgICBjYXNlIFNfUE9MWUdPTl9PRkZTRVRfRU5BQkxFOlxuICAgICAgICBjYXNlIFNfU0FNUExFX0FMUEhBOlxuICAgICAgICBjYXNlIFNfU0FNUExFX0VOQUJMRTpcbiAgICAgICAgY2FzZSBTX0RFUFRIX01BU0s6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlUGFyYW0oXG4gICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kVHlwZSh2YWx1ZSwgJ2Jvb2xlYW4nLCBwcm9wLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChlbnYsIHNjb3BlLCB2YWx1ZSkge1xuICAgICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBlbnYuYXNzZXJ0KHNjb3BlLFxuICAgICAgICAgICAgICAgICAgJ3R5cGVvZiAnICsgdmFsdWUgKyAnPT09XCJib29sZWFuXCInLFxuICAgICAgICAgICAgICAgICAgJ2ludmFsaWQgZmxhZyAnICsgcHJvcCwgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgIGNhc2UgU19ERVBUSF9GVU5DOlxuICAgICAgICAgIHJldHVybiBwYXJzZVBhcmFtKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFBhcmFtZXRlcih2YWx1ZSwgY29tcGFyZUZ1bmNzLCAnaW52YWxpZCAnICsgcHJvcCwgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICByZXR1cm4gY29tcGFyZUZ1bmNzW3ZhbHVlXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChlbnYsIHNjb3BlLCB2YWx1ZSkge1xuICAgICAgICAgICAgICB2YXIgQ09NUEFSRV9GVU5DUyA9IGVudi5jb25zdGFudHMuY29tcGFyZUZ1bmNzO1xuICAgICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBlbnYuYXNzZXJ0KHNjb3BlLFxuICAgICAgICAgICAgICAgICAgdmFsdWUgKyAnIGluICcgKyBDT01QQVJFX0ZVTkNTLFxuICAgICAgICAgICAgICAgICAgJ2ludmFsaWQgJyArIHByb3AgKyAnLCBtdXN0IGJlIG9uZSBvZiAnICsgT2JqZWN0LmtleXMoY29tcGFyZUZ1bmNzKSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuZGVmKENPTVBBUkVfRlVOQ1MsICdbJywgdmFsdWUsICddJylcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgY2FzZSBTX0RFUFRIX1JBTkdFOlxuICAgICAgICAgIHJldHVybiBwYXJzZVBhcmFtKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChcbiAgICAgICAgICAgICAgICBpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgICAgICAgICB2YWx1ZS5sZW5ndGggPT09IDIgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWVbMF0gPT09ICdudW1iZXInICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlWzFdID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgICAgICAgIHZhbHVlWzBdIDw9IHZhbHVlWzFdLFxuICAgICAgICAgICAgICAgICdkZXB0aCByYW5nZSBpcyAyZCBhcnJheScsXG4gICAgICAgICAgICAgICAgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcbiAgICAgICAgICAgICAgICAgIGVudi5zaGFyZWQuaXNBcnJheUxpa2UgKyAnKCcgKyB2YWx1ZSArICcpJiYnICtcbiAgICAgICAgICAgICAgICAgIHZhbHVlICsgJy5sZW5ndGg9PT0yJiYnICtcbiAgICAgICAgICAgICAgICAgICd0eXBlb2YgJyArIHZhbHVlICsgJ1swXT09PVwibnVtYmVyXCImJicgK1xuICAgICAgICAgICAgICAgICAgJ3R5cGVvZiAnICsgdmFsdWUgKyAnWzFdPT09XCJudW1iZXJcIiYmJyArXG4gICAgICAgICAgICAgICAgICB2YWx1ZSArICdbMF08PScgKyB2YWx1ZSArICdbMV0nLFxuICAgICAgICAgICAgICAgICAgJ2RlcHRoIHJhbmdlIG11c3QgYmUgYSAyZCBhcnJheScpO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICB2YXIgWl9ORUFSID0gc2NvcGUuZGVmKCcrJywgdmFsdWUsICdbMF0nKTtcbiAgICAgICAgICAgICAgdmFyIFpfRkFSID0gc2NvcGUuZGVmKCcrJywgdmFsdWUsICdbMV0nKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFtaX05FQVIsIFpfRkFSXVxuICAgICAgICAgICAgfSlcblxuICAgICAgICBjYXNlIFNfQkxFTkRfRlVOQzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VQYXJhbShcbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRUeXBlKHZhbHVlLCAnb2JqZWN0JywgJ2JsZW5kLmZ1bmMnLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgICAgIHZhciBzcmNSR0IgPSAoJ3NyY1JHQicgaW4gdmFsdWUgPyB2YWx1ZS5zcmNSR0IgOiB2YWx1ZS5zcmMpO1xuICAgICAgICAgICAgICB2YXIgc3JjQWxwaGEgPSAoJ3NyY0FscGhhJyBpbiB2YWx1ZSA/IHZhbHVlLnNyY0FscGhhIDogdmFsdWUuc3JjKTtcbiAgICAgICAgICAgICAgdmFyIGRzdFJHQiA9ICgnZHN0UkdCJyBpbiB2YWx1ZSA/IHZhbHVlLmRzdFJHQiA6IHZhbHVlLmRzdCk7XG4gICAgICAgICAgICAgIHZhciBkc3RBbHBoYSA9ICgnZHN0QWxwaGEnIGluIHZhbHVlID8gdmFsdWUuZHN0QWxwaGEgOiB2YWx1ZS5kc3QpO1xuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRQYXJhbWV0ZXIoc3JjUkdCLCBibGVuZEZ1bmNzLCBwYXJhbSArICcuc3JjUkdCJywgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRQYXJhbWV0ZXIoc3JjQWxwaGEsIGJsZW5kRnVuY3MsIHBhcmFtICsgJy5zcmNBbHBoYScsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kUGFyYW1ldGVyKGRzdFJHQiwgYmxlbmRGdW5jcywgcGFyYW0gKyAnLmRzdFJHQicsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kUGFyYW1ldGVyKGRzdEFscGhhLCBibGVuZEZ1bmNzLCBwYXJhbSArICcuZHN0QWxwaGEnLCBlbnYuY29tbWFuZFN0cik7XG5cbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKFxuICAgICAgICAgICAgICAgIChpbnZhbGlkQmxlbmRDb21iaW5hdGlvbnMuaW5kZXhPZihzcmNSR0IgKyAnLCAnICsgZHN0UkdCKSA9PT0gLTEpLFxuICAgICAgICAgICAgICAgICd1bmFsbG93ZWQgYmxlbmRpbmcgY29tYmluYXRpb24gKHNyY1JHQiwgZHN0UkdCKSA9ICgnICsgc3JjUkdCICsgJywgJyArIGRzdFJHQiArICcpJywgZW52LmNvbW1hbmRTdHIpO1xuXG4gICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgYmxlbmRGdW5jc1tzcmNSR0JdLFxuICAgICAgICAgICAgICAgIGJsZW5kRnVuY3NbZHN0UkdCXSxcbiAgICAgICAgICAgICAgICBibGVuZEZ1bmNzW3NyY0FscGhhXSxcbiAgICAgICAgICAgICAgICBibGVuZEZ1bmNzW2RzdEFscGhhXVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKGVudiwgc2NvcGUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgIHZhciBCTEVORF9GVU5DUyA9IGVudi5jb25zdGFudHMuYmxlbmRGdW5jcztcblxuICAgICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBlbnYuYXNzZXJ0KHNjb3BlLFxuICAgICAgICAgICAgICAgICAgdmFsdWUgKyAnJiZ0eXBlb2YgJyArIHZhbHVlICsgJz09PVwib2JqZWN0XCInLFxuICAgICAgICAgICAgICAgICAgJ2ludmFsaWQgYmxlbmQgZnVuYywgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgZnVuY3Rpb24gcmVhZCAocHJlZml4LCBzdWZmaXgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZnVuYyA9IHNjb3BlLmRlZihcbiAgICAgICAgICAgICAgICAgICdcIicsIHByZWZpeCwgc3VmZml4LCAnXCIgaW4gJywgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAnPycsIHZhbHVlLCAnLicsIHByZWZpeCwgc3VmZml4LFxuICAgICAgICAgICAgICAgICAgJzonLCB2YWx1ZSwgJy4nLCBwcmVmaXgpO1xuXG4gICAgICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBlbnYuYXNzZXJ0KHNjb3BlLFxuICAgICAgICAgICAgICAgICAgICBmdW5jICsgJyBpbiAnICsgQkxFTkRfRlVOQ1MsXG4gICAgICAgICAgICAgICAgICAgICdpbnZhbGlkICcgKyBwcm9wICsgJy4nICsgcHJlZml4ICsgc3VmZml4ICsgJywgbXVzdCBiZSBvbmUgb2YgJyArIE9iamVjdC5rZXlzKGJsZW5kRnVuY3MpKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB2YXIgc3JjUkdCID0gcmVhZCgnc3JjJywgJ1JHQicpO1xuICAgICAgICAgICAgICB2YXIgZHN0UkdCID0gcmVhZCgnZHN0JywgJ1JHQicpO1xuXG4gICAgICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBJTlZBTElEX0JMRU5EX0NPTUJJTkFUSU9OUyA9IGVudi5jb25zdGFudHMuaW52YWxpZEJsZW5kQ29tYmluYXRpb25zO1xuXG4gICAgICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIElOVkFMSURfQkxFTkRfQ09NQklOQVRJT05TICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICcuaW5kZXhPZignICsgc3JjUkdCICsgJytcIiwgXCIrJyArIGRzdFJHQiArICcpID09PSAtMSAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VuYWxsb3dlZCBibGVuZGluZyBjb21iaW5hdGlvbiBmb3IgKHNyY1JHQiwgZHN0UkdCKSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgdmFyIFNSQ19SR0IgPSBzY29wZS5kZWYoQkxFTkRfRlVOQ1MsICdbJywgc3JjUkdCLCAnXScpO1xuICAgICAgICAgICAgICB2YXIgU1JDX0FMUEhBID0gc2NvcGUuZGVmKEJMRU5EX0ZVTkNTLCAnWycsIHJlYWQoJ3NyYycsICdBbHBoYScpLCAnXScpO1xuICAgICAgICAgICAgICB2YXIgRFNUX1JHQiA9IHNjb3BlLmRlZihCTEVORF9GVU5DUywgJ1snLCBkc3RSR0IsICddJyk7XG4gICAgICAgICAgICAgIHZhciBEU1RfQUxQSEEgPSBzY29wZS5kZWYoQkxFTkRfRlVOQ1MsICdbJywgcmVhZCgnZHN0JywgJ0FscGhhJyksICddJyk7XG5cbiAgICAgICAgICAgICAgcmV0dXJuIFtTUkNfUkdCLCBEU1RfUkdCLCBTUkNfQUxQSEEsIERTVF9BTFBIQV1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgY2FzZSBTX0JMRU5EX0VRVUFUSU9OOlxuICAgICAgICAgIHJldHVybiBwYXJzZVBhcmFtKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kUGFyYW1ldGVyKHZhbHVlLCBibGVuZEVxdWF0aW9ucywgJ2ludmFsaWQgJyArIHByb3AsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgYmxlbmRFcXVhdGlvbnNbdmFsdWVdLFxuICAgICAgICAgICAgICAgICAgYmxlbmRFcXVhdGlvbnNbdmFsdWVdXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRQYXJhbWV0ZXIoXG4gICAgICAgICAgICAgICAgICB2YWx1ZS5yZ2IsIGJsZW5kRXF1YXRpb25zLCBwcm9wICsgJy5yZ2InLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kUGFyYW1ldGVyKFxuICAgICAgICAgICAgICAgICAgdmFsdWUuYWxwaGEsIGJsZW5kRXF1YXRpb25zLCBwcm9wICsgJy5hbHBoYScsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgYmxlbmRFcXVhdGlvbnNbdmFsdWUucmdiXSxcbiAgICAgICAgICAgICAgICAgIGJsZW5kRXF1YXRpb25zW3ZhbHVlLmFscGhhXVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRSYWlzZSgnaW52YWxpZCBibGVuZC5lcXVhdGlvbicsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChlbnYsIHNjb3BlLCB2YWx1ZSkge1xuICAgICAgICAgICAgICB2YXIgQkxFTkRfRVFVQVRJT05TID0gZW52LmNvbnN0YW50cy5ibGVuZEVxdWF0aW9ucztcblxuICAgICAgICAgICAgICB2YXIgUkdCID0gc2NvcGUuZGVmKCk7XG4gICAgICAgICAgICAgIHZhciBBTFBIQSA9IHNjb3BlLmRlZigpO1xuXG4gICAgICAgICAgICAgIHZhciBpZnRlID0gZW52LmNvbmQoJ3R5cGVvZiAnLCB2YWx1ZSwgJz09PVwic3RyaW5nXCInKTtcblxuICAgICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjaGVja1Byb3AgKGJsb2NrLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgZW52LmFzc2VydChibG9jayxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgKyAnIGluICcgKyBCTEVORF9FUVVBVElPTlMsXG4gICAgICAgICAgICAgICAgICAgICdpbnZhbGlkICcgKyBuYW1lICsgJywgbXVzdCBiZSBvbmUgb2YgJyArIE9iamVjdC5rZXlzKGJsZW5kRXF1YXRpb25zKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNoZWNrUHJvcChpZnRlLnRoZW4sIHByb3AsIHZhbHVlKTtcblxuICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoaWZ0ZS5lbHNlLFxuICAgICAgICAgICAgICAgICAgdmFsdWUgKyAnJiZ0eXBlb2YgJyArIHZhbHVlICsgJz09PVwib2JqZWN0XCInLFxuICAgICAgICAgICAgICAgICAgJ2ludmFsaWQgJyArIHByb3ApO1xuICAgICAgICAgICAgICAgIGNoZWNrUHJvcChpZnRlLmVsc2UsIHByb3AgKyAnLnJnYicsIHZhbHVlICsgJy5yZ2InKTtcbiAgICAgICAgICAgICAgICBjaGVja1Byb3AoaWZ0ZS5lbHNlLCBwcm9wICsgJy5hbHBoYScsIHZhbHVlICsgJy5hbHBoYScpO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICBpZnRlLnRoZW4oXG4gICAgICAgICAgICAgICAgUkdCLCAnPScsIEFMUEhBLCAnPScsIEJMRU5EX0VRVUFUSU9OUywgJ1snLCB2YWx1ZSwgJ107Jyk7XG4gICAgICAgICAgICAgIGlmdGUuZWxzZShcbiAgICAgICAgICAgICAgICBSR0IsICc9JywgQkxFTkRfRVFVQVRJT05TLCAnWycsIHZhbHVlLCAnLnJnYl07JyxcbiAgICAgICAgICAgICAgICBBTFBIQSwgJz0nLCBCTEVORF9FUVVBVElPTlMsICdbJywgdmFsdWUsICcuYWxwaGFdOycpO1xuXG4gICAgICAgICAgICAgIHNjb3BlKGlmdGUpO1xuXG4gICAgICAgICAgICAgIHJldHVybiBbUkdCLCBBTFBIQV1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgY2FzZSBTX0JMRU5EX0NPTE9SOlxuICAgICAgICAgIHJldHVybiBwYXJzZVBhcmFtKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChcbiAgICAgICAgICAgICAgICBpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgICAgICAgICB2YWx1ZS5sZW5ndGggPT09IDQsXG4gICAgICAgICAgICAgICAgJ2JsZW5kLmNvbG9yIG11c3QgYmUgYSA0ZCBhcnJheScsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGxvb3AoNCwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gK3ZhbHVlW2ldXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKGVudiwgc2NvcGUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXG4gICAgICAgICAgICAgICAgICBlbnYuc2hhcmVkLmlzQXJyYXlMaWtlICsgJygnICsgdmFsdWUgKyAnKSYmJyArXG4gICAgICAgICAgICAgICAgICB2YWx1ZSArICcubGVuZ3RoPT09NCcsXG4gICAgICAgICAgICAgICAgICAnYmxlbmQuY29sb3IgbXVzdCBiZSBhIDRkIGFycmF5Jyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gbG9vcCg0LCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZS5kZWYoJysnLCB2YWx1ZSwgJ1snLCBpLCAnXScpXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgIGNhc2UgU19TVEVOQ0lMX01BU0s6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlUGFyYW0oXG4gICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kVHlwZSh2YWx1ZSwgJ251bWJlcicsIHBhcmFtLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZSB8IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcbiAgICAgICAgICAgICAgICAgICd0eXBlb2YgJyArIHZhbHVlICsgJz09PVwibnVtYmVyXCInLFxuICAgICAgICAgICAgICAgICAgJ2ludmFsaWQgc3RlbmNpbC5tYXNrJyk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuZGVmKHZhbHVlLCAnfDAnKVxuICAgICAgICAgICAgfSlcblxuICAgICAgICBjYXNlIFNfU1RFTkNJTF9GVU5DOlxuICAgICAgICAgIHJldHVybiBwYXJzZVBhcmFtKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFR5cGUodmFsdWUsICdvYmplY3QnLCBwYXJhbSwgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICB2YXIgY21wID0gdmFsdWUuY21wIHx8ICdrZWVwJztcbiAgICAgICAgICAgICAgdmFyIHJlZiA9IHZhbHVlLnJlZiB8fCAwO1xuICAgICAgICAgICAgICB2YXIgbWFzayA9ICdtYXNrJyBpbiB2YWx1ZSA/IHZhbHVlLm1hc2sgOiAtMTtcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kUGFyYW1ldGVyKGNtcCwgY29tcGFyZUZ1bmNzLCBwcm9wICsgJy5jbXAnLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFR5cGUocmVmLCAnbnVtYmVyJywgcHJvcCArICcucmVmJywgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRUeXBlKG1hc2ssICdudW1iZXInLCBwcm9wICsgJy5tYXNrJywgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgIGNvbXBhcmVGdW5jc1tjbXBdLFxuICAgICAgICAgICAgICAgIHJlZixcbiAgICAgICAgICAgICAgICBtYXNrXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgdmFyIENPTVBBUkVfRlVOQ1MgPSBlbnYuY29uc3RhbnRzLmNvbXBhcmVGdW5jcztcbiAgICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYXNzZXJ0ICgpIHtcbiAgICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5qb2luLmNhbGwoYXJndW1lbnRzLCAnJyksXG4gICAgICAgICAgICAgICAgICAgICdpbnZhbGlkIHN0ZW5jaWwuZnVuYycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhc3NlcnQodmFsdWUgKyAnJiZ0eXBlb2YgJywgdmFsdWUsICc9PT1cIm9iamVjdFwiJyk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KCchKFwiY21wXCIgaW4gJywgdmFsdWUsICcpfHwoJyxcbiAgICAgICAgICAgICAgICAgIHZhbHVlLCAnLmNtcCBpbiAnLCBDT01QQVJFX0ZVTkNTLCAnKScpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdmFyIGNtcCA9IHNjb3BlLmRlZihcbiAgICAgICAgICAgICAgICAnXCJjbXBcIiBpbiAnLCB2YWx1ZSxcbiAgICAgICAgICAgICAgICAnPycsIENPTVBBUkVfRlVOQ1MsICdbJywgdmFsdWUsICcuY21wXScsXG4gICAgICAgICAgICAgICAgJzonLCBHTF9LRUVQKTtcbiAgICAgICAgICAgICAgdmFyIHJlZiA9IHNjb3BlLmRlZih2YWx1ZSwgJy5yZWZ8MCcpO1xuICAgICAgICAgICAgICB2YXIgbWFzayA9IHNjb3BlLmRlZihcbiAgICAgICAgICAgICAgICAnXCJtYXNrXCIgaW4gJywgdmFsdWUsXG4gICAgICAgICAgICAgICAgJz8nLCB2YWx1ZSwgJy5tYXNrfDA6LTEnKTtcbiAgICAgICAgICAgICAgcmV0dXJuIFtjbXAsIHJlZiwgbWFza11cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgY2FzZSBTX1NURU5DSUxfT1BGUk9OVDpcbiAgICAgICAgY2FzZSBTX1NURU5DSUxfT1BCQUNLOlxuICAgICAgICAgIHJldHVybiBwYXJzZVBhcmFtKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFR5cGUodmFsdWUsICdvYmplY3QnLCBwYXJhbSwgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICB2YXIgZmFpbCA9IHZhbHVlLmZhaWwgfHwgJ2tlZXAnO1xuICAgICAgICAgICAgICB2YXIgemZhaWwgPSB2YWx1ZS56ZmFpbCB8fCAna2VlcCc7XG4gICAgICAgICAgICAgIHZhciB6cGFzcyA9IHZhbHVlLnpwYXNzIHx8ICdrZWVwJztcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kUGFyYW1ldGVyKGZhaWwsIHN0ZW5jaWxPcHMsIHByb3AgKyAnLmZhaWwnLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFBhcmFtZXRlcih6ZmFpbCwgc3RlbmNpbE9wcywgcHJvcCArICcuemZhaWwnLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFBhcmFtZXRlcih6cGFzcywgc3RlbmNpbE9wcywgcHJvcCArICcuenBhc3MnLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgcHJvcCA9PT0gU19TVEVOQ0lMX09QQkFDSyA/IEdMX0JBQ0sgOiBHTF9GUk9OVCxcbiAgICAgICAgICAgICAgICBzdGVuY2lsT3BzW2ZhaWxdLFxuICAgICAgICAgICAgICAgIHN0ZW5jaWxPcHNbemZhaWxdLFxuICAgICAgICAgICAgICAgIHN0ZW5jaWxPcHNbenBhc3NdXG4gICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgdmFyIFNURU5DSUxfT1BTID0gZW52LmNvbnN0YW50cy5zdGVuY2lsT3BzO1xuXG4gICAgICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXG4gICAgICAgICAgICAgICAgICB2YWx1ZSArICcmJnR5cGVvZiAnICsgdmFsdWUgKyAnPT09XCJvYmplY3RcIicsXG4gICAgICAgICAgICAgICAgICAnaW52YWxpZCAnICsgcHJvcCk7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIHJlYWQgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICchKFwiJyArIG5hbWUgKyAnXCIgaW4gJyArIHZhbHVlICsgJyl8fCcgK1xuICAgICAgICAgICAgICAgICAgICAnKCcgKyB2YWx1ZSArICcuJyArIG5hbWUgKyAnIGluICcgKyBTVEVOQ0lMX09QUyArICcpJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ludmFsaWQgJyArIHByb3AgKyAnLicgKyBuYW1lICsgJywgbXVzdCBiZSBvbmUgb2YgJyArIE9iamVjdC5rZXlzKHN0ZW5jaWxPcHMpKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZS5kZWYoXG4gICAgICAgICAgICAgICAgICAnXCInLCBuYW1lLCAnXCIgaW4gJywgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAnPycsIFNURU5DSUxfT1BTLCAnWycsIHZhbHVlLCAnLicsIG5hbWUsICddOicsXG4gICAgICAgICAgICAgICAgICBHTF9LRUVQKVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICBwcm9wID09PSBTX1NURU5DSUxfT1BCQUNLID8gR0xfQkFDSyA6IEdMX0ZST05ULFxuICAgICAgICAgICAgICAgIHJlYWQoJ2ZhaWwnKSxcbiAgICAgICAgICAgICAgICByZWFkKCd6ZmFpbCcpLFxuICAgICAgICAgICAgICAgIHJlYWQoJ3pwYXNzJylcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSlcblxuICAgICAgICBjYXNlIFNfUE9MWUdPTl9PRkZTRVRfT0ZGU0VUOlxuICAgICAgICAgIHJldHVybiBwYXJzZVBhcmFtKFxuICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFR5cGUodmFsdWUsICdvYmplY3QnLCBwYXJhbSwgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICB2YXIgZmFjdG9yID0gdmFsdWUuZmFjdG9yIHwgMDtcbiAgICAgICAgICAgICAgdmFyIHVuaXRzID0gdmFsdWUudW5pdHMgfCAwO1xuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRUeXBlKGZhY3RvciwgJ251bWJlcicsIHBhcmFtICsgJy5mYWN0b3InLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFR5cGUodW5pdHMsICdudW1iZXInLCBwYXJhbSArICcudW5pdHMnLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgICAgIHJldHVybiBbZmFjdG9yLCB1bml0c11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcbiAgICAgICAgICAgICAgICAgIHZhbHVlICsgJyYmdHlwZW9mICcgKyB2YWx1ZSArICc9PT1cIm9iamVjdFwiJyxcbiAgICAgICAgICAgICAgICAgICdpbnZhbGlkICcgKyBwcm9wKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgdmFyIEZBQ1RPUiA9IHNjb3BlLmRlZih2YWx1ZSwgJy5mYWN0b3J8MCcpO1xuICAgICAgICAgICAgICB2YXIgVU5JVFMgPSBzY29wZS5kZWYodmFsdWUsICcudW5pdHN8MCcpO1xuXG4gICAgICAgICAgICAgIHJldHVybiBbRkFDVE9SLCBVTklUU11cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgY2FzZSBTX0NVTExfRkFDRTpcbiAgICAgICAgICByZXR1cm4gcGFyc2VQYXJhbShcbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICB2YXIgZmFjZSA9IDA7XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJ2Zyb250Jykge1xuICAgICAgICAgICAgICAgIGZhY2UgPSBHTF9GUk9OVDtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ2JhY2snKSB7XG4gICAgICAgICAgICAgICAgZmFjZSA9IEdMX0JBQ0s7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKCEhZmFjZSwgcGFyYW0sIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhY2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcbiAgICAgICAgICAgICAgICAgIHZhbHVlICsgJz09PVwiZnJvbnRcInx8JyArXG4gICAgICAgICAgICAgICAgICB2YWx1ZSArICc9PT1cImJhY2tcIicsXG4gICAgICAgICAgICAgICAgICAnaW52YWxpZCBjdWxsLmZhY2UnKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybiBzY29wZS5kZWYodmFsdWUsICc9PT1cImZyb250XCI/JywgR0xfRlJPTlQsICc6JywgR0xfQkFDSylcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgY2FzZSBTX0xJTkVfV0lEVEg6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlUGFyYW0oXG4gICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKFxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgICAgICAgICB2YWx1ZSA+PSBsaW1pdHMubGluZVdpZHRoRGltc1swXSAmJlxuICAgICAgICAgICAgICAgIHZhbHVlIDw9IGxpbWl0cy5saW5lV2lkdGhEaW1zWzFdLFxuICAgICAgICAgICAgICAgICdpbnZhbGlkIGxpbmUgd2lkdGgsIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXIgYmV0d2VlbiAnICtcbiAgICAgICAgICAgICAgICBsaW1pdHMubGluZVdpZHRoRGltc1swXSArICcgYW5kICcgKyBsaW1pdHMubGluZVdpZHRoRGltc1sxXSwgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcbiAgICAgICAgICAgICAgICAgICd0eXBlb2YgJyArIHZhbHVlICsgJz09PVwibnVtYmVyXCImJicgK1xuICAgICAgICAgICAgICAgICAgdmFsdWUgKyAnPj0nICsgbGltaXRzLmxpbmVXaWR0aERpbXNbMF0gKyAnJiYnICtcbiAgICAgICAgICAgICAgICAgIHZhbHVlICsgJzw9JyArIGxpbWl0cy5saW5lV2lkdGhEaW1zWzFdLFxuICAgICAgICAgICAgICAgICAgJ2ludmFsaWQgbGluZSB3aWR0aCcpO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgY2FzZSBTX0ZST05UX0ZBQ0U6XG4gICAgICAgICAgcmV0dXJuIHBhcnNlUGFyYW0oXG4gICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kUGFyYW1ldGVyKHZhbHVlLCBvcmllbnRhdGlvblR5cGUsIHBhcmFtLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgICAgIHJldHVybiBvcmllbnRhdGlvblR5cGVbdmFsdWVdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKGVudiwgc2NvcGUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXG4gICAgICAgICAgICAgICAgICB2YWx1ZSArICc9PT1cImN3XCJ8fCcgK1xuICAgICAgICAgICAgICAgICAgdmFsdWUgKyAnPT09XCJjY3dcIicsXG4gICAgICAgICAgICAgICAgICAnaW52YWxpZCBmcm9udEZhY2UsIG11c3QgYmUgb25lIG9mIGN3LGNjdycpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLmRlZih2YWx1ZSArICc9PT1cImN3XCI/JyArIEdMX0NXICsgJzonICsgR0xfQ0NXKVxuICAgICAgICAgICAgfSlcblxuICAgICAgICBjYXNlIFNfQ09MT1JfTUFTSzpcbiAgICAgICAgICByZXR1cm4gcGFyc2VQYXJhbShcbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXG4gICAgICAgICAgICAgICAgaXNBcnJheUxpa2UodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gNCxcbiAgICAgICAgICAgICAgICAnY29sb3IubWFzayBtdXN0IGJlIGxlbmd0aCA0IGFycmF5JywgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICByZXR1cm4gdmFsdWUubWFwKGZ1bmN0aW9uICh2KSB7IHJldHVybiAhIXYgfSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcbiAgICAgICAgICAgICAgICAgIGVudi5zaGFyZWQuaXNBcnJheUxpa2UgKyAnKCcgKyB2YWx1ZSArICcpJiYnICtcbiAgICAgICAgICAgICAgICAgIHZhbHVlICsgJy5sZW5ndGg9PT00JyxcbiAgICAgICAgICAgICAgICAgICdpbnZhbGlkIGNvbG9yLm1hc2snKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJldHVybiBsb29wKDQsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICchIScgKyB2YWx1ZSArICdbJyArIGkgKyAnXSdcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgY2FzZSBTX1NBTVBMRV9DT1ZFUkFHRTpcbiAgICAgICAgICByZXR1cm4gcGFyc2VQYXJhbShcbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSwgcGFyYW0sIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgdmFyIHNhbXBsZVZhbHVlID0gJ3ZhbHVlJyBpbiB2YWx1ZSA/IHZhbHVlLnZhbHVlIDogMTtcbiAgICAgICAgICAgICAgdmFyIHNhbXBsZUludmVydCA9ICEhdmFsdWUuaW52ZXJ0O1xuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXG4gICAgICAgICAgICAgICAgdHlwZW9mIHNhbXBsZVZhbHVlID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgICAgICAgIHNhbXBsZVZhbHVlID49IDAgJiYgc2FtcGxlVmFsdWUgPD0gMSxcbiAgICAgICAgICAgICAgICAnc2FtcGxlLmNvdmVyYWdlLnZhbHVlIG11c3QgYmUgYSBudW1iZXIgYmV0d2VlbiAwIGFuZCAxJywgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICByZXR1cm4gW3NhbXBsZVZhbHVlLCBzYW1wbGVJbnZlcnRdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnVuY3Rpb24gKGVudiwgc2NvcGUsIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXG4gICAgICAgICAgICAgICAgICB2YWx1ZSArICcmJnR5cGVvZiAnICsgdmFsdWUgKyAnPT09XCJvYmplY3RcIicsXG4gICAgICAgICAgICAgICAgICAnaW52YWxpZCBzYW1wbGUuY292ZXJhZ2UnKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHZhciBWQUxVRSA9IHNjb3BlLmRlZihcbiAgICAgICAgICAgICAgICAnXCJ2YWx1ZVwiIGluICcsIHZhbHVlLCAnPysnLCB2YWx1ZSwgJy52YWx1ZToxJyk7XG4gICAgICAgICAgICAgIHZhciBJTlZFUlQgPSBzY29wZS5kZWYoJyEhJywgdmFsdWUsICcuaW52ZXJ0Jyk7XG4gICAgICAgICAgICAgIHJldHVybiBbVkFMVUUsIElOVkVSVF1cbiAgICAgICAgICAgIH0pXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gU1RBVEVcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlVW5pZm9ybXMgKHVuaWZvcm1zLCBlbnYpIHtcbiAgICB2YXIgc3RhdGljVW5pZm9ybXMgPSB1bmlmb3Jtcy5zdGF0aWM7XG4gICAgdmFyIGR5bmFtaWNVbmlmb3JtcyA9IHVuaWZvcm1zLmR5bmFtaWM7XG5cbiAgICB2YXIgVU5JRk9STVMgPSB7fTtcblxuICAgIE9iamVjdC5rZXlzKHN0YXRpY1VuaWZvcm1zKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdGF0aWNVbmlmb3Jtc1tuYW1lXTtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJlc3VsdCA9IGNyZWF0ZVN0YXRpY0RlY2woZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciByZWdsVHlwZSA9IHZhbHVlLl9yZWdsVHlwZTtcbiAgICAgICAgaWYgKHJlZ2xUeXBlID09PSAndGV4dHVyZTJkJyB8fFxuICAgICAgICAgICAgcmVnbFR5cGUgPT09ICd0ZXh0dXJlQ3ViZScpIHtcbiAgICAgICAgICByZXN1bHQgPSBjcmVhdGVTdGF0aWNEZWNsKGZ1bmN0aW9uIChlbnYpIHtcbiAgICAgICAgICAgIHJldHVybiBlbnYubGluayh2YWx1ZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChyZWdsVHlwZSA9PT0gJ2ZyYW1lYnVmZmVyJyB8fFxuICAgICAgICAgICAgICAgICAgIHJlZ2xUeXBlID09PSAnZnJhbWVidWZmZXJDdWJlJykge1xuICAgICAgICAgIGNoZWNrJDEuY29tbWFuZCh2YWx1ZS5jb2xvci5sZW5ndGggPiAwLFxuICAgICAgICAgICAgJ21pc3NpbmcgY29sb3IgYXR0YWNobWVudCBmb3IgZnJhbWVidWZmZXIgc2VudCB0byB1bmlmb3JtIFwiJyArIG5hbWUgKyAnXCInLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgcmVzdWx0ID0gY3JlYXRlU3RhdGljRGVjbChmdW5jdGlvbiAoZW52KSB7XG4gICAgICAgICAgICByZXR1cm4gZW52LmxpbmsodmFsdWUuY29sb3JbMF0pXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hlY2skMS5jb21tYW5kUmFpc2UoJ2ludmFsaWQgZGF0YSBmb3IgdW5pZm9ybSBcIicgKyBuYW1lICsgJ1wiJywgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVTdGF0aWNEZWNsKGZ1bmN0aW9uIChlbnYpIHtcbiAgICAgICAgICB2YXIgSVRFTSA9IGVudi5nbG9iYWwuZGVmKCdbJyxcbiAgICAgICAgICAgIGxvb3AodmFsdWUubGVuZ3RoLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlW2ldID09PSAnbnVtYmVyJyB8fFxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZVtpXSA9PT0gJ2Jvb2xlYW4nLFxuICAgICAgICAgICAgICAgICdpbnZhbGlkIHVuaWZvcm0gJyArIG5hbWUsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlW2ldXG4gICAgICAgICAgICB9KSwgJ10nKTtcbiAgICAgICAgICByZXR1cm4gSVRFTVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoZWNrJDEuY29tbWFuZFJhaXNlKCdpbnZhbGlkIG9yIG1pc3NpbmcgZGF0YSBmb3IgdW5pZm9ybSBcIicgKyBuYW1lICsgJ1wiJywgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgfVxuICAgICAgcmVzdWx0LnZhbHVlID0gdmFsdWU7XG4gICAgICBVTklGT1JNU1tuYW1lXSA9IHJlc3VsdDtcbiAgICB9KTtcblxuICAgIE9iamVjdC5rZXlzKGR5bmFtaWNVbmlmb3JtcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgZHluID0gZHluYW1pY1VuaWZvcm1zW2tleV07XG4gICAgICBVTklGT1JNU1trZXldID0gY3JlYXRlRHluYW1pY0RlY2woZHluLCBmdW5jdGlvbiAoZW52LCBzY29wZSkge1xuICAgICAgICByZXR1cm4gZW52Lmludm9rZShzY29wZSwgZHluKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gVU5JRk9STVNcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlQXR0cmlidXRlcyAoYXR0cmlidXRlcywgZW52KSB7XG4gICAgdmFyIHN0YXRpY0F0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzLnN0YXRpYztcbiAgICB2YXIgZHluYW1pY0F0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzLmR5bmFtaWM7XG5cbiAgICB2YXIgYXR0cmlidXRlRGVmcyA9IHt9O1xuXG4gICAgT2JqZWN0LmtleXMoc3RhdGljQXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdGF0aWNBdHRyaWJ1dGVzW2F0dHJpYnV0ZV07XG4gICAgICB2YXIgaWQgPSBzdHJpbmdTdG9yZS5pZChhdHRyaWJ1dGUpO1xuXG4gICAgICB2YXIgcmVjb3JkID0gbmV3IEF0dHJpYnV0ZVJlY29yZCgpO1xuICAgICAgaWYgKGlzQnVmZmVyQXJncyh2YWx1ZSkpIHtcbiAgICAgICAgcmVjb3JkLnN0YXRlID0gQVRUUklCX1NUQVRFX1BPSU5URVI7XG4gICAgICAgIHJlY29yZC5idWZmZXIgPSBidWZmZXJTdGF0ZS5nZXRCdWZmZXIoXG4gICAgICAgICAgYnVmZmVyU3RhdGUuY3JlYXRlKHZhbHVlLCBHTF9BUlJBWV9CVUZGRVIkMSwgZmFsc2UsIHRydWUpKTtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IGJ1ZmZlclN0YXRlLmdldEJ1ZmZlcih2YWx1ZSk7XG4gICAgICAgIGlmIChidWZmZXIpIHtcbiAgICAgICAgICByZWNvcmQuc3RhdGUgPSBBVFRSSUJfU1RBVEVfUE9JTlRFUjtcbiAgICAgICAgICByZWNvcmQuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICAgIHJlY29yZC50eXBlID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGVjayQxLmNvbW1hbmQodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSxcbiAgICAgICAgICAgICdpbnZhbGlkIGRhdGEgZm9yIGF0dHJpYnV0ZSAnICsgYXR0cmlidXRlLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgaWYgKCdjb25zdGFudCcgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBjb25zdGFudCA9IHZhbHVlLmNvbnN0YW50O1xuICAgICAgICAgICAgcmVjb3JkLmJ1ZmZlciA9ICdudWxsJztcbiAgICAgICAgICAgIHJlY29yZC5zdGF0ZSA9IEFUVFJJQl9TVEFURV9DT05TVEFOVDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RhbnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgIHJlY29yZC54ID0gY29uc3RhbnQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXG4gICAgICAgICAgICAgICAgaXNBcnJheUxpa2UoY29uc3RhbnQpICYmXG4gICAgICAgICAgICAgICAgY29uc3RhbnQubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgICAgIGNvbnN0YW50Lmxlbmd0aCA8PSA0LFxuICAgICAgICAgICAgICAgICdpbnZhbGlkIGNvbnN0YW50IGZvciBhdHRyaWJ1dGUgJyArIGF0dHJpYnV0ZSwgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICBDVVRFX0NPTVBPTkVOVFMuZm9yRWFjaChmdW5jdGlvbiAoYywgaSkge1xuICAgICAgICAgICAgICAgIGlmIChpIDwgY29uc3RhbnQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICByZWNvcmRbY10gPSBjb25zdGFudFtpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoaXNCdWZmZXJBcmdzKHZhbHVlLmJ1ZmZlcikpIHtcbiAgICAgICAgICAgICAgYnVmZmVyID0gYnVmZmVyU3RhdGUuZ2V0QnVmZmVyKFxuICAgICAgICAgICAgICAgIGJ1ZmZlclN0YXRlLmNyZWF0ZSh2YWx1ZS5idWZmZXIsIEdMX0FSUkFZX0JVRkZFUiQxLCBmYWxzZSwgdHJ1ZSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnVmZmVyID0gYnVmZmVyU3RhdGUuZ2V0QnVmZmVyKHZhbHVlLmJ1ZmZlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoISFidWZmZXIsICdtaXNzaW5nIGJ1ZmZlciBmb3IgYXR0cmlidXRlIFwiJyArIGF0dHJpYnV0ZSArICdcIicsIGVudi5jb21tYW5kU3RyKTtcblxuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHZhbHVlLm9mZnNldCB8IDA7XG4gICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQob2Zmc2V0ID49IDAsXG4gICAgICAgICAgICAgICdpbnZhbGlkIG9mZnNldCBmb3IgYXR0cmlidXRlIFwiJyArIGF0dHJpYnV0ZSArICdcIicsIGVudi5jb21tYW5kU3RyKTtcblxuICAgICAgICAgICAgdmFyIHN0cmlkZSA9IHZhbHVlLnN0cmlkZSB8IDA7XG4gICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoc3RyaWRlID49IDAgJiYgc3RyaWRlIDwgMjU2LFxuICAgICAgICAgICAgICAnaW52YWxpZCBzdHJpZGUgZm9yIGF0dHJpYnV0ZSBcIicgKyBhdHRyaWJ1dGUgKyAnXCIsIG11c3QgYmUgaW50ZWdlciBiZXR3ZWVlbiBbMCwgMjU1XScsIGVudi5jb21tYW5kU3RyKTtcblxuICAgICAgICAgICAgdmFyIHNpemUgPSB2YWx1ZS5zaXplIHwgMDtcbiAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZCghKCdzaXplJyBpbiB2YWx1ZSkgfHwgKHNpemUgPiAwICYmIHNpemUgPD0gNCksXG4gICAgICAgICAgICAgICdpbnZhbGlkIHNpemUgZm9yIGF0dHJpYnV0ZSBcIicgKyBhdHRyaWJ1dGUgKyAnXCIsIG11c3QgYmUgMSwyLDMsNCcsIGVudi5jb21tYW5kU3RyKTtcblxuICAgICAgICAgICAgdmFyIG5vcm1hbGl6ZWQgPSAhIXZhbHVlLm5vcm1hbGl6ZWQ7XG5cbiAgICAgICAgICAgIHZhciB0eXBlID0gMDtcbiAgICAgICAgICAgIGlmICgndHlwZScgaW4gdmFsdWUpIHtcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kUGFyYW1ldGVyKFxuICAgICAgICAgICAgICAgIHZhbHVlLnR5cGUsIGdsVHlwZXMsXG4gICAgICAgICAgICAgICAgJ2ludmFsaWQgdHlwZSBmb3IgYXR0cmlidXRlICcgKyBhdHRyaWJ1dGUsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgdHlwZSA9IGdsVHlwZXNbdmFsdWUudHlwZV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkaXZpc29yID0gdmFsdWUuZGl2aXNvciB8IDA7XG4gICAgICAgICAgICBpZiAoJ2Rpdmlzb3InIGluIHZhbHVlKSB7XG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChkaXZpc29yID09PSAwIHx8IGV4dEluc3RhbmNpbmcsXG4gICAgICAgICAgICAgICAgJ2Nhbm5vdCBzcGVjaWZ5IGRpdmlzb3IgZm9yIGF0dHJpYnV0ZSBcIicgKyBhdHRyaWJ1dGUgKyAnXCIsIGluc3RhbmNpbmcgbm90IHN1cHBvcnRlZCcsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKGRpdmlzb3IgPj0gMCxcbiAgICAgICAgICAgICAgICAnaW52YWxpZCBkaXZpc29yIGZvciBhdHRyaWJ1dGUgXCInICsgYXR0cmlidXRlICsgJ1wiJywgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIGNvbW1hbmQgPSBlbnYuY29tbWFuZFN0cjtcblxuICAgICAgICAgICAgICB2YXIgVkFMSURfS0VZUyA9IFtcbiAgICAgICAgICAgICAgICAnYnVmZmVyJyxcbiAgICAgICAgICAgICAgICAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAnZGl2aXNvcicsXG4gICAgICAgICAgICAgICAgJ25vcm1hbGl6ZWQnLFxuICAgICAgICAgICAgICAgICd0eXBlJyxcbiAgICAgICAgICAgICAgICAnc2l6ZScsXG4gICAgICAgICAgICAgICAgJ3N0cmlkZSdcbiAgICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChcbiAgICAgICAgICAgICAgICAgIFZBTElEX0tFWVMuaW5kZXhPZihwcm9wKSA+PSAwLFxuICAgICAgICAgICAgICAgICAgJ3Vua25vd24gcGFyYW1ldGVyIFwiJyArIHByb3AgKyAnXCIgZm9yIGF0dHJpYnV0ZSBwb2ludGVyIFwiJyArIGF0dHJpYnV0ZSArICdcIiAodmFsaWQgcGFyYW1ldGVycyBhcmUgJyArIFZBTElEX0tFWVMgKyAnKScsXG4gICAgICAgICAgICAgICAgICBjb21tYW5kKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmVjb3JkLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgICAgIHJlY29yZC5zdGF0ZSA9IEFUVFJJQl9TVEFURV9QT0lOVEVSO1xuICAgICAgICAgICAgcmVjb3JkLnNpemUgPSBzaXplO1xuICAgICAgICAgICAgcmVjb3JkLm5vcm1hbGl6ZWQgPSBub3JtYWxpemVkO1xuICAgICAgICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlIHx8IGJ1ZmZlci5kdHlwZTtcbiAgICAgICAgICAgIHJlY29yZC5vZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgICByZWNvcmQuc3RyaWRlID0gc3RyaWRlO1xuICAgICAgICAgICAgcmVjb3JkLmRpdmlzb3IgPSBkaXZpc29yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBhdHRyaWJ1dGVEZWZzW2F0dHJpYnV0ZV0gPSBjcmVhdGVTdGF0aWNEZWNsKGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XG4gICAgICAgIHZhciBjYWNoZSA9IGVudi5hdHRyaWJDYWNoZTtcbiAgICAgICAgaWYgKGlkIGluIGNhY2hlKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlW2lkXVxuICAgICAgICB9XG4gICAgICAgIHZhciByZXN1bHQgPSB7XG4gICAgICAgICAgaXNTdHJlYW06IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5rZXlzKHJlY29yZCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSByZWNvcmRba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChyZWNvcmQuYnVmZmVyKSB7XG4gICAgICAgICAgcmVzdWx0LmJ1ZmZlciA9IGVudi5saW5rKHJlY29yZC5idWZmZXIpO1xuICAgICAgICAgIHJlc3VsdC50eXBlID0gcmVzdWx0LnR5cGUgfHwgKHJlc3VsdC5idWZmZXIgKyAnLmR0eXBlJyk7XG4gICAgICAgIH1cbiAgICAgICAgY2FjaGVbaWRdID0gcmVzdWx0O1xuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIE9iamVjdC5rZXlzKGR5bmFtaWNBdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgIHZhciBkeW4gPSBkeW5hbWljQXR0cmlidXRlc1thdHRyaWJ1dGVdO1xuXG4gICAgICBmdW5jdGlvbiBhcHBlbmRBdHRyaWJ1dGVDb2RlIChlbnYsIGJsb2NrKSB7XG4gICAgICAgIHZhciBWQUxVRSA9IGVudi5pbnZva2UoYmxvY2ssIGR5bik7XG5cbiAgICAgICAgdmFyIHNoYXJlZCA9IGVudi5zaGFyZWQ7XG4gICAgICAgIHZhciBjb25zdGFudHMgPSBlbnYuY29uc3RhbnRzO1xuXG4gICAgICAgIHZhciBJU19CVUZGRVJfQVJHUyA9IHNoYXJlZC5pc0J1ZmZlckFyZ3M7XG4gICAgICAgIHZhciBCVUZGRVJfU1RBVEUgPSBzaGFyZWQuYnVmZmVyO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdmFsaWRhdGlvbiBvbiBhdHRyaWJ1dGVcbiAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZW52LmFzc2VydChibG9jayxcbiAgICAgICAgICAgIFZBTFVFICsgJyYmKHR5cGVvZiAnICsgVkFMVUUgKyAnPT09XCJvYmplY3RcInx8dHlwZW9mICcgK1xuICAgICAgICAgICAgVkFMVUUgKyAnPT09XCJmdW5jdGlvblwiKSYmKCcgK1xuICAgICAgICAgICAgSVNfQlVGRkVSX0FSR1MgKyAnKCcgKyBWQUxVRSArICcpfHwnICtcbiAgICAgICAgICAgIEJVRkZFUl9TVEFURSArICcuZ2V0QnVmZmVyKCcgKyBWQUxVRSArICcpfHwnICtcbiAgICAgICAgICAgIEJVRkZFUl9TVEFURSArICcuZ2V0QnVmZmVyKCcgKyBWQUxVRSArICcuYnVmZmVyKXx8JyArXG4gICAgICAgICAgICBJU19CVUZGRVJfQVJHUyArICcoJyArIFZBTFVFICsgJy5idWZmZXIpfHwnICtcbiAgICAgICAgICAgICcoXCJjb25zdGFudFwiIGluICcgKyBWQUxVRSArXG4gICAgICAgICAgICAnJiYodHlwZW9mICcgKyBWQUxVRSArICcuY29uc3RhbnQ9PT1cIm51bWJlclwifHwnICtcbiAgICAgICAgICAgIHNoYXJlZC5pc0FycmF5TGlrZSArICcoJyArIFZBTFVFICsgJy5jb25zdGFudCkpKSknLFxuICAgICAgICAgICAgJ2ludmFsaWQgZHluYW1pYyBhdHRyaWJ1dGUgXCInICsgYXR0cmlidXRlICsgJ1wiJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGFsbG9jYXRlIG5hbWVzIGZvciByZXN1bHRcbiAgICAgICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgICBpc1N0cmVhbTogYmxvY2suZGVmKGZhbHNlKVxuICAgICAgICB9O1xuICAgICAgICB2YXIgZGVmYXVsdFJlY29yZCA9IG5ldyBBdHRyaWJ1dGVSZWNvcmQoKTtcbiAgICAgICAgZGVmYXVsdFJlY29yZC5zdGF0ZSA9IEFUVFJJQl9TVEFURV9QT0lOVEVSO1xuICAgICAgICBPYmplY3Qua2V5cyhkZWZhdWx0UmVjb3JkKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IGJsb2NrLmRlZignJyArIGRlZmF1bHRSZWNvcmRba2V5XSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBCVUZGRVIgPSByZXN1bHQuYnVmZmVyO1xuICAgICAgICB2YXIgVFlQRSA9IHJlc3VsdC50eXBlO1xuICAgICAgICBibG9jayhcbiAgICAgICAgICAnaWYoJywgSVNfQlVGRkVSX0FSR1MsICcoJywgVkFMVUUsICcpKXsnLFxuICAgICAgICAgIHJlc3VsdC5pc1N0cmVhbSwgJz10cnVlOycsXG4gICAgICAgICAgQlVGRkVSLCAnPScsIEJVRkZFUl9TVEFURSwgJy5jcmVhdGVTdHJlYW0oJywgR0xfQVJSQVlfQlVGRkVSJDEsICcsJywgVkFMVUUsICcpOycsXG4gICAgICAgICAgVFlQRSwgJz0nLCBCVUZGRVIsICcuZHR5cGU7JyxcbiAgICAgICAgICAnfWVsc2V7JyxcbiAgICAgICAgICBCVUZGRVIsICc9JywgQlVGRkVSX1NUQVRFLCAnLmdldEJ1ZmZlcignLCBWQUxVRSwgJyk7JyxcbiAgICAgICAgICAnaWYoJywgQlVGRkVSLCAnKXsnLFxuICAgICAgICAgIFRZUEUsICc9JywgQlVGRkVSLCAnLmR0eXBlOycsXG4gICAgICAgICAgJ31lbHNlIGlmKFwiY29uc3RhbnRcIiBpbiAnLCBWQUxVRSwgJyl7JyxcbiAgICAgICAgICByZXN1bHQuc3RhdGUsICc9JywgQVRUUklCX1NUQVRFX0NPTlNUQU5ULCAnOycsXG4gICAgICAgICAgJ2lmKHR5cGVvZiAnICsgVkFMVUUgKyAnLmNvbnN0YW50ID09PSBcIm51bWJlclwiKXsnLFxuICAgICAgICAgIHJlc3VsdFtDVVRFX0NPTVBPTkVOVFNbMF1dLCAnPScsIFZBTFVFLCAnLmNvbnN0YW50OycsXG4gICAgICAgICAgQ1VURV9DT01QT05FTlRTLnNsaWNlKDEpLm1hcChmdW5jdGlvbiAobikge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFtuXVxuICAgICAgICAgIH0pLmpvaW4oJz0nKSwgJz0wOycsXG4gICAgICAgICAgJ31lbHNleycsXG4gICAgICAgICAgQ1VURV9DT01QT05FTlRTLm1hcChmdW5jdGlvbiAobmFtZSwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgcmVzdWx0W25hbWVdICsgJz0nICsgVkFMVUUgKyAnLmNvbnN0YW50Lmxlbmd0aD4nICsgaSArXG4gICAgICAgICAgICAgICc/JyArIFZBTFVFICsgJy5jb25zdGFudFsnICsgaSArICddOjA7J1xuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pLmpvaW4oJycpLFxuICAgICAgICAgICd9fWVsc2V7JyxcbiAgICAgICAgICAnaWYoJywgSVNfQlVGRkVSX0FSR1MsICcoJywgVkFMVUUsICcuYnVmZmVyKSl7JyxcbiAgICAgICAgICBCVUZGRVIsICc9JywgQlVGRkVSX1NUQVRFLCAnLmNyZWF0ZVN0cmVhbSgnLCBHTF9BUlJBWV9CVUZGRVIkMSwgJywnLCBWQUxVRSwgJy5idWZmZXIpOycsXG4gICAgICAgICAgJ31lbHNleycsXG4gICAgICAgICAgQlVGRkVSLCAnPScsIEJVRkZFUl9TVEFURSwgJy5nZXRCdWZmZXIoJywgVkFMVUUsICcuYnVmZmVyKTsnLFxuICAgICAgICAgICd9JyxcbiAgICAgICAgICBUWVBFLCAnPVwidHlwZVwiIGluICcsIFZBTFVFLCAnPycsXG4gICAgICAgICAgY29uc3RhbnRzLmdsVHlwZXMsICdbJywgVkFMVUUsICcudHlwZV06JywgQlVGRkVSLCAnLmR0eXBlOycsXG4gICAgICAgICAgcmVzdWx0Lm5vcm1hbGl6ZWQsICc9ISEnLCBWQUxVRSwgJy5ub3JtYWxpemVkOycpO1xuICAgICAgICBmdW5jdGlvbiBlbWl0UmVhZFJlY29yZCAobmFtZSkge1xuICAgICAgICAgIGJsb2NrKHJlc3VsdFtuYW1lXSwgJz0nLCBWQUxVRSwgJy4nLCBuYW1lLCAnfDA7Jyk7XG4gICAgICAgIH1cbiAgICAgICAgZW1pdFJlYWRSZWNvcmQoJ3NpemUnKTtcbiAgICAgICAgZW1pdFJlYWRSZWNvcmQoJ29mZnNldCcpO1xuICAgICAgICBlbWl0UmVhZFJlY29yZCgnc3RyaWRlJyk7XG4gICAgICAgIGVtaXRSZWFkUmVjb3JkKCdkaXZpc29yJyk7XG5cbiAgICAgICAgYmxvY2soJ319Jyk7XG5cbiAgICAgICAgYmxvY2suZXhpdChcbiAgICAgICAgICAnaWYoJywgcmVzdWx0LmlzU3RyZWFtLCAnKXsnLFxuICAgICAgICAgIEJVRkZFUl9TVEFURSwgJy5kZXN0cm95U3RyZWFtKCcsIEJVRkZFUiwgJyk7JyxcbiAgICAgICAgICAnfScpO1xuXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgIH1cblxuICAgICAgYXR0cmlidXRlRGVmc1thdHRyaWJ1dGVdID0gY3JlYXRlRHluYW1pY0RlY2woZHluLCBhcHBlbmRBdHRyaWJ1dGVDb2RlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBhdHRyaWJ1dGVEZWZzXG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUNvbnRleHQgKGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGljQ29udGV4dCA9IGNvbnRleHQuc3RhdGljO1xuICAgIHZhciBkeW5hbWljQ29udGV4dCA9IGNvbnRleHQuZHluYW1pYztcbiAgICB2YXIgcmVzdWx0ID0ge307XG5cbiAgICBPYmplY3Qua2V5cyhzdGF0aWNDb250ZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgdmFsdWUgPSBzdGF0aWNDb250ZXh0W25hbWVdO1xuICAgICAgcmVzdWx0W25hbWVdID0gY3JlYXRlU3RhdGljRGVjbChmdW5jdGlvbiAoZW52LCBzY29wZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgIHJldHVybiAnJyArIHZhbHVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGVudi5saW5rKHZhbHVlKVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIE9iamVjdC5rZXlzKGR5bmFtaWNDb250ZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgZHluID0gZHluYW1pY0NvbnRleHRbbmFtZV07XG4gICAgICByZXN1bHRbbmFtZV0gPSBjcmVhdGVEeW5hbWljRGVjbChkeW4sIGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XG4gICAgICAgIHJldHVybiBlbnYuaW52b2tlKHNjb3BlLCBkeW4pXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlQXJndW1lbnRzIChvcHRpb25zLCBhdHRyaWJ1dGVzLCB1bmlmb3JtcywgY29udGV4dCwgZW52KSB7XG4gICAgdmFyIHN0YXRpY09wdGlvbnMgPSBvcHRpb25zLnN0YXRpYztcbiAgICB2YXIgZHluYW1pY09wdGlvbnMgPSBvcHRpb25zLmR5bmFtaWM7XG5cbiAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBLRVlfTkFNRVMgPSBbXG4gICAgICAgIFNfRlJBTUVCVUZGRVIsXG4gICAgICAgIFNfVkVSVCxcbiAgICAgICAgU19GUkFHLFxuICAgICAgICBTX0VMRU1FTlRTLFxuICAgICAgICBTX1BSSU1JVElWRSxcbiAgICAgICAgU19PRkZTRVQsXG4gICAgICAgIFNfQ09VTlQsXG4gICAgICAgIFNfSU5TVEFOQ0VTLFxuICAgICAgICBTX1BST0ZJTEVcbiAgICAgIF0uY29uY2F0KEdMX1NUQVRFX05BTUVTKTtcblxuICAgICAgZnVuY3Rpb24gY2hlY2tLZXlzIChkaWN0KSB7XG4gICAgICAgIE9iamVjdC5rZXlzKGRpY3QpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChcbiAgICAgICAgICAgIEtFWV9OQU1FUy5pbmRleE9mKGtleSkgPj0gMCxcbiAgICAgICAgICAgICd1bmtub3duIHBhcmFtZXRlciBcIicgKyBrZXkgKyAnXCInLFxuICAgICAgICAgICAgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY2hlY2tLZXlzKHN0YXRpY09wdGlvbnMpO1xuICAgICAgY2hlY2tLZXlzKGR5bmFtaWNPcHRpb25zKTtcbiAgICB9KTtcblxuICAgIHZhciBmcmFtZWJ1ZmZlciA9IHBhcnNlRnJhbWVidWZmZXIob3B0aW9ucywgZW52KTtcbiAgICB2YXIgdmlld3BvcnRBbmRTY2lzc29yID0gcGFyc2VWaWV3cG9ydFNjaXNzb3Iob3B0aW9ucywgZnJhbWVidWZmZXIsIGVudik7XG4gICAgdmFyIGRyYXcgPSBwYXJzZURyYXcob3B0aW9ucywgZW52KTtcbiAgICB2YXIgc3RhdGUgPSBwYXJzZUdMU3RhdGUob3B0aW9ucywgZW52KTtcbiAgICB2YXIgc2hhZGVyID0gcGFyc2VQcm9ncmFtKG9wdGlvbnMsIGVudik7XG5cbiAgICBmdW5jdGlvbiBjb3B5Qm94IChuYW1lKSB7XG4gICAgICB2YXIgZGVmbiA9IHZpZXdwb3J0QW5kU2Npc3NvcltuYW1lXTtcbiAgICAgIGlmIChkZWZuKSB7XG4gICAgICAgIHN0YXRlW25hbWVdID0gZGVmbjtcbiAgICAgIH1cbiAgICB9XG4gICAgY29weUJveChTX1ZJRVdQT1JUKTtcbiAgICBjb3B5Qm94KHByb3BOYW1lKFNfU0NJU1NPUl9CT1gpKTtcblxuICAgIHZhciBkaXJ0eSA9IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGggPiAwO1xuXG4gICAgdmFyIHJlc3VsdCA9IHtcbiAgICAgIGZyYW1lYnVmZmVyOiBmcmFtZWJ1ZmZlcixcbiAgICAgIGRyYXc6IGRyYXcsXG4gICAgICBzaGFkZXI6IHNoYWRlcixcbiAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgIGRpcnR5OiBkaXJ0eVxuICAgIH07XG5cbiAgICByZXN1bHQucHJvZmlsZSA9IHBhcnNlUHJvZmlsZShvcHRpb25zLCBlbnYpO1xuICAgIHJlc3VsdC51bmlmb3JtcyA9IHBhcnNlVW5pZm9ybXModW5pZm9ybXMsIGVudik7XG4gICAgcmVzdWx0LmF0dHJpYnV0ZXMgPSBwYXJzZUF0dHJpYnV0ZXMoYXR0cmlidXRlcywgZW52KTtcbiAgICByZXN1bHQuY29udGV4dCA9IHBhcnNlQ29udGV4dChjb250ZXh0LCBlbnYpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gQ09NTU9OIFVQREFURSBGVU5DVElPTlNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICBmdW5jdGlvbiBlbWl0Q29udGV4dCAoZW52LCBzY29wZSwgY29udGV4dCkge1xuICAgIHZhciBzaGFyZWQgPSBlbnYuc2hhcmVkO1xuICAgIHZhciBDT05URVhUID0gc2hhcmVkLmNvbnRleHQ7XG5cbiAgICB2YXIgY29udGV4dEVudGVyID0gZW52LnNjb3BlKCk7XG5cbiAgICBPYmplY3Qua2V5cyhjb250ZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBzY29wZS5zYXZlKENPTlRFWFQsICcuJyArIG5hbWUpO1xuICAgICAgdmFyIGRlZm4gPSBjb250ZXh0W25hbWVdO1xuICAgICAgY29udGV4dEVudGVyKENPTlRFWFQsICcuJywgbmFtZSwgJz0nLCBkZWZuLmFwcGVuZChlbnYsIHNjb3BlKSwgJzsnKTtcbiAgICB9KTtcblxuICAgIHNjb3BlKGNvbnRleHRFbnRlcik7XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIENPTU1PTiBEUkFXSU5HIEZVTkNUSU9OU1xuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIGZ1bmN0aW9uIGVtaXRQb2xsRnJhbWVidWZmZXIgKGVudiwgc2NvcGUsIGZyYW1lYnVmZmVyLCBza2lwQ2hlY2spIHtcbiAgICB2YXIgc2hhcmVkID0gZW52LnNoYXJlZDtcblxuICAgIHZhciBHTCA9IHNoYXJlZC5nbDtcbiAgICB2YXIgRlJBTUVCVUZGRVJfU1RBVEUgPSBzaGFyZWQuZnJhbWVidWZmZXI7XG4gICAgdmFyIEVYVF9EUkFXX0JVRkZFUlM7XG4gICAgaWYgKGV4dERyYXdCdWZmZXJzKSB7XG4gICAgICBFWFRfRFJBV19CVUZGRVJTID0gc2NvcGUuZGVmKHNoYXJlZC5leHRlbnNpb25zLCAnLndlYmdsX2RyYXdfYnVmZmVycycpO1xuICAgIH1cblxuICAgIHZhciBjb25zdGFudHMgPSBlbnYuY29uc3RhbnRzO1xuXG4gICAgdmFyIERSQVdfQlVGRkVSUyA9IGNvbnN0YW50cy5kcmF3QnVmZmVyO1xuICAgIHZhciBCQUNLX0JVRkZFUiA9IGNvbnN0YW50cy5iYWNrQnVmZmVyO1xuXG4gICAgdmFyIE5FWFQ7XG4gICAgaWYgKGZyYW1lYnVmZmVyKSB7XG4gICAgICBORVhUID0gZnJhbWVidWZmZXIuYXBwZW5kKGVudiwgc2NvcGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBORVhUID0gc2NvcGUuZGVmKEZSQU1FQlVGRkVSX1NUQVRFLCAnLm5leHQnKTtcbiAgICB9XG5cbiAgICBpZiAoIXNraXBDaGVjaykge1xuICAgICAgc2NvcGUoJ2lmKCcsIE5FWFQsICchPT0nLCBGUkFNRUJVRkZFUl9TVEFURSwgJy5jdXIpeycpO1xuICAgIH1cbiAgICBzY29wZShcbiAgICAgICdpZignLCBORVhULCAnKXsnLFxuICAgICAgR0wsICcuYmluZEZyYW1lYnVmZmVyKCcsIEdMX0ZSQU1FQlVGRkVSJDIsICcsJywgTkVYVCwgJy5mcmFtZWJ1ZmZlcik7Jyk7XG4gICAgaWYgKGV4dERyYXdCdWZmZXJzKSB7XG4gICAgICBzY29wZShFWFRfRFJBV19CVUZGRVJTLCAnLmRyYXdCdWZmZXJzV0VCR0woJyxcbiAgICAgICAgRFJBV19CVUZGRVJTLCAnWycsIE5FWFQsICcuY29sb3JBdHRhY2htZW50cy5sZW5ndGhdKTsnKTtcbiAgICB9XG4gICAgc2NvcGUoJ31lbHNleycsXG4gICAgICBHTCwgJy5iaW5kRnJhbWVidWZmZXIoJywgR0xfRlJBTUVCVUZGRVIkMiwgJyxudWxsKTsnKTtcbiAgICBpZiAoZXh0RHJhd0J1ZmZlcnMpIHtcbiAgICAgIHNjb3BlKEVYVF9EUkFXX0JVRkZFUlMsICcuZHJhd0J1ZmZlcnNXRUJHTCgnLCBCQUNLX0JVRkZFUiwgJyk7Jyk7XG4gICAgfVxuICAgIHNjb3BlKFxuICAgICAgJ30nLFxuICAgICAgRlJBTUVCVUZGRVJfU1RBVEUsICcuY3VyPScsIE5FWFQsICc7Jyk7XG4gICAgaWYgKCFza2lwQ2hlY2spIHtcbiAgICAgIHNjb3BlKCd9Jyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1pdFBvbGxTdGF0ZSAoZW52LCBzY29wZSwgYXJncykge1xuICAgIHZhciBzaGFyZWQgPSBlbnYuc2hhcmVkO1xuXG4gICAgdmFyIEdMID0gc2hhcmVkLmdsO1xuXG4gICAgdmFyIENVUlJFTlRfVkFSUyA9IGVudi5jdXJyZW50O1xuICAgIHZhciBORVhUX1ZBUlMgPSBlbnYubmV4dDtcbiAgICB2YXIgQ1VSUkVOVF9TVEFURSA9IHNoYXJlZC5jdXJyZW50O1xuICAgIHZhciBORVhUX1NUQVRFID0gc2hhcmVkLm5leHQ7XG5cbiAgICB2YXIgYmxvY2sgPSBlbnYuY29uZChDVVJSRU5UX1NUQVRFLCAnLmRpcnR5Jyk7XG5cbiAgICBHTF9TVEFURV9OQU1FUy5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICB2YXIgcGFyYW0gPSBwcm9wTmFtZShwcm9wKTtcbiAgICAgIGlmIChwYXJhbSBpbiBhcmdzLnN0YXRlKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB2YXIgTkVYVCwgQ1VSUkVOVDtcbiAgICAgIGlmIChwYXJhbSBpbiBORVhUX1ZBUlMpIHtcbiAgICAgICAgTkVYVCA9IE5FWFRfVkFSU1twYXJhbV07XG4gICAgICAgIENVUlJFTlQgPSBDVVJSRU5UX1ZBUlNbcGFyYW1dO1xuICAgICAgICB2YXIgcGFydHMgPSBsb29wKGN1cnJlbnRTdGF0ZVtwYXJhbV0ubGVuZ3RoLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgIHJldHVybiBibG9jay5kZWYoTkVYVCwgJ1snLCBpLCAnXScpXG4gICAgICAgIH0pO1xuICAgICAgICBibG9jayhlbnYuY29uZChwYXJ0cy5tYXAoZnVuY3Rpb24gKHAsIGkpIHtcbiAgICAgICAgICByZXR1cm4gcCArICchPT0nICsgQ1VSUkVOVCArICdbJyArIGkgKyAnXSdcbiAgICAgICAgfSkuam9pbignfHwnKSlcbiAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgIEdMLCAnLicsIEdMX1ZBUklBQkxFU1twYXJhbV0sICcoJywgcGFydHMsICcpOycsXG4gICAgICAgICAgICBwYXJ0cy5tYXAoZnVuY3Rpb24gKHAsIGkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIENVUlJFTlQgKyAnWycgKyBpICsgJ109JyArIHBcbiAgICAgICAgICAgIH0pLmpvaW4oJzsnKSwgJzsnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBORVhUID0gYmxvY2suZGVmKE5FWFRfU1RBVEUsICcuJywgcGFyYW0pO1xuICAgICAgICB2YXIgaWZ0ZSA9IGVudi5jb25kKE5FWFQsICchPT0nLCBDVVJSRU5UX1NUQVRFLCAnLicsIHBhcmFtKTtcbiAgICAgICAgYmxvY2soaWZ0ZSk7XG4gICAgICAgIGlmIChwYXJhbSBpbiBHTF9GTEFHUykge1xuICAgICAgICAgIGlmdGUoXG4gICAgICAgICAgICBlbnYuY29uZChORVhUKVxuICAgICAgICAgICAgICAgIC50aGVuKEdMLCAnLmVuYWJsZSgnLCBHTF9GTEFHU1twYXJhbV0sICcpOycpXG4gICAgICAgICAgICAgICAgLmVsc2UoR0wsICcuZGlzYWJsZSgnLCBHTF9GTEFHU1twYXJhbV0sICcpOycpLFxuICAgICAgICAgICAgQ1VSUkVOVF9TVEFURSwgJy4nLCBwYXJhbSwgJz0nLCBORVhULCAnOycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmdGUoXG4gICAgICAgICAgICBHTCwgJy4nLCBHTF9WQVJJQUJMRVNbcGFyYW1dLCAnKCcsIE5FWFQsICcpOycsXG4gICAgICAgICAgICBDVVJSRU5UX1NUQVRFLCAnLicsIHBhcmFtLCAnPScsIE5FWFQsICc7Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoT2JqZWN0LmtleXMoYXJncy5zdGF0ZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICBibG9jayhDVVJSRU5UX1NUQVRFLCAnLmRpcnR5PWZhbHNlOycpO1xuICAgIH1cbiAgICBzY29wZShibG9jayk7XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0U2V0T3B0aW9ucyAoZW52LCBzY29wZSwgb3B0aW9ucywgZmlsdGVyKSB7XG4gICAgdmFyIHNoYXJlZCA9IGVudi5zaGFyZWQ7XG4gICAgdmFyIENVUlJFTlRfVkFSUyA9IGVudi5jdXJyZW50O1xuICAgIHZhciBDVVJSRU5UX1NUQVRFID0gc2hhcmVkLmN1cnJlbnQ7XG4gICAgdmFyIEdMID0gc2hhcmVkLmdsO1xuICAgIHNvcnRTdGF0ZShPYmplY3Qua2V5cyhvcHRpb25zKSkuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICAgIHZhciBkZWZuID0gb3B0aW9uc1twYXJhbV07XG4gICAgICBpZiAoZmlsdGVyICYmICFmaWx0ZXIoZGVmbikpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB2YXIgdmFyaWFibGUgPSBkZWZuLmFwcGVuZChlbnYsIHNjb3BlKTtcbiAgICAgIGlmIChHTF9GTEFHU1twYXJhbV0pIHtcbiAgICAgICAgdmFyIGZsYWcgPSBHTF9GTEFHU1twYXJhbV07XG4gICAgICAgIGlmIChpc1N0YXRpYyhkZWZuKSkge1xuICAgICAgICAgIGlmICh2YXJpYWJsZSkge1xuICAgICAgICAgICAgc2NvcGUoR0wsICcuZW5hYmxlKCcsIGZsYWcsICcpOycpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY29wZShHTCwgJy5kaXNhYmxlKCcsIGZsYWcsICcpOycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY29wZShlbnYuY29uZCh2YXJpYWJsZSlcbiAgICAgICAgICAgIC50aGVuKEdMLCAnLmVuYWJsZSgnLCBmbGFnLCAnKTsnKVxuICAgICAgICAgICAgLmVsc2UoR0wsICcuZGlzYWJsZSgnLCBmbGFnLCAnKTsnKSk7XG4gICAgICAgIH1cbiAgICAgICAgc2NvcGUoQ1VSUkVOVF9TVEFURSwgJy4nLCBwYXJhbSwgJz0nLCB2YXJpYWJsZSwgJzsnKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNBcnJheUxpa2UodmFyaWFibGUpKSB7XG4gICAgICAgIHZhciBDVVJSRU5UID0gQ1VSUkVOVF9WQVJTW3BhcmFtXTtcbiAgICAgICAgc2NvcGUoXG4gICAgICAgICAgR0wsICcuJywgR0xfVkFSSUFCTEVTW3BhcmFtXSwgJygnLCB2YXJpYWJsZSwgJyk7JyxcbiAgICAgICAgICB2YXJpYWJsZS5tYXAoZnVuY3Rpb24gKHYsIGkpIHtcbiAgICAgICAgICAgIHJldHVybiBDVVJSRU5UICsgJ1snICsgaSArICddPScgKyB2XG4gICAgICAgICAgfSkuam9pbignOycpLCAnOycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NvcGUoXG4gICAgICAgICAgR0wsICcuJywgR0xfVkFSSUFCTEVTW3BhcmFtXSwgJygnLCB2YXJpYWJsZSwgJyk7JyxcbiAgICAgICAgICBDVVJSRU5UX1NUQVRFLCAnLicsIHBhcmFtLCAnPScsIHZhcmlhYmxlLCAnOycpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5qZWN0RXh0ZW5zaW9ucyAoZW52LCBzY29wZSkge1xuICAgIGlmIChleHRJbnN0YW5jaW5nKSB7XG4gICAgICBlbnYuaW5zdGFuY2luZyA9IHNjb3BlLmRlZihcbiAgICAgICAgZW52LnNoYXJlZC5leHRlbnNpb25zLCAnLmFuZ2xlX2luc3RhbmNlZF9hcnJheXMnKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0UHJvZmlsZSAoZW52LCBzY29wZSwgYXJncywgdXNlU2NvcGUsIGluY3JlbWVudENvdW50ZXIpIHtcbiAgICB2YXIgc2hhcmVkID0gZW52LnNoYXJlZDtcbiAgICB2YXIgU1RBVFMgPSBlbnYuc3RhdHM7XG4gICAgdmFyIENVUlJFTlRfU1RBVEUgPSBzaGFyZWQuY3VycmVudDtcbiAgICB2YXIgVElNRVIgPSBzaGFyZWQudGltZXI7XG4gICAgdmFyIHByb2ZpbGVBcmcgPSBhcmdzLnByb2ZpbGU7XG5cbiAgICBmdW5jdGlvbiBwZXJmQ291bnRlciAoKSB7XG4gICAgICBpZiAodHlwZW9mIHBlcmZvcm1hbmNlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm4gJ0RhdGUubm93KCknXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJ3BlcmZvcm1hbmNlLm5vdygpJ1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBDUFVfU1RBUlQsIFFVRVJZX0NPVU5URVI7XG4gICAgZnVuY3Rpb24gZW1pdFByb2ZpbGVTdGFydCAoYmxvY2spIHtcbiAgICAgIENQVV9TVEFSVCA9IHNjb3BlLmRlZigpO1xuICAgICAgYmxvY2soQ1BVX1NUQVJULCAnPScsIHBlcmZDb3VudGVyKCksICc7Jyk7XG4gICAgICBpZiAodHlwZW9mIGluY3JlbWVudENvdW50ZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGJsb2NrKFNUQVRTLCAnLmNvdW50Kz0nLCBpbmNyZW1lbnRDb3VudGVyLCAnOycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmxvY2soU1RBVFMsICcuY291bnQrKzsnKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aW1lcikge1xuICAgICAgICBpZiAodXNlU2NvcGUpIHtcbiAgICAgICAgICBRVUVSWV9DT1VOVEVSID0gc2NvcGUuZGVmKCk7XG4gICAgICAgICAgYmxvY2soUVVFUllfQ09VTlRFUiwgJz0nLCBUSU1FUiwgJy5nZXROdW1QZW5kaW5nUXVlcmllcygpOycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJsb2NrKFRJTUVSLCAnLmJlZ2luUXVlcnkoJywgU1RBVFMsICcpOycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW1pdFByb2ZpbGVFbmQgKGJsb2NrKSB7XG4gICAgICBibG9jayhTVEFUUywgJy5jcHVUaW1lKz0nLCBwZXJmQ291bnRlcigpLCAnLScsIENQVV9TVEFSVCwgJzsnKTtcbiAgICAgIGlmICh0aW1lcikge1xuICAgICAgICBpZiAodXNlU2NvcGUpIHtcbiAgICAgICAgICBibG9jayhUSU1FUiwgJy5wdXNoU2NvcGVTdGF0cygnLFxuICAgICAgICAgICAgUVVFUllfQ09VTlRFUiwgJywnLFxuICAgICAgICAgICAgVElNRVIsICcuZ2V0TnVtUGVuZGluZ1F1ZXJpZXMoKSwnLFxuICAgICAgICAgICAgU1RBVFMsICcpOycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJsb2NrKFRJTUVSLCAnLmVuZFF1ZXJ5KCk7Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY29wZVByb2ZpbGUgKHZhbHVlKSB7XG4gICAgICB2YXIgcHJldiA9IHNjb3BlLmRlZihDVVJSRU5UX1NUQVRFLCAnLnByb2ZpbGUnKTtcbiAgICAgIHNjb3BlKENVUlJFTlRfU1RBVEUsICcucHJvZmlsZT0nLCB2YWx1ZSwgJzsnKTtcbiAgICAgIHNjb3BlLmV4aXQoQ1VSUkVOVF9TVEFURSwgJy5wcm9maWxlPScsIHByZXYsICc7Jyk7XG4gICAgfVxuXG4gICAgdmFyIFVTRV9QUk9GSUxFO1xuICAgIGlmIChwcm9maWxlQXJnKSB7XG4gICAgICBpZiAoaXNTdGF0aWMocHJvZmlsZUFyZykpIHtcbiAgICAgICAgaWYgKHByb2ZpbGVBcmcuZW5hYmxlKSB7XG4gICAgICAgICAgZW1pdFByb2ZpbGVTdGFydChzY29wZSk7XG4gICAgICAgICAgZW1pdFByb2ZpbGVFbmQoc2NvcGUuZXhpdCk7XG4gICAgICAgICAgc2NvcGVQcm9maWxlKCd0cnVlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NvcGVQcm9maWxlKCdmYWxzZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgVVNFX1BST0ZJTEUgPSBwcm9maWxlQXJnLmFwcGVuZChlbnYsIHNjb3BlKTtcbiAgICAgIHNjb3BlUHJvZmlsZShVU0VfUFJPRklMRSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIFVTRV9QUk9GSUxFID0gc2NvcGUuZGVmKENVUlJFTlRfU1RBVEUsICcucHJvZmlsZScpO1xuICAgIH1cblxuICAgIHZhciBzdGFydCA9IGVudi5ibG9jaygpO1xuICAgIGVtaXRQcm9maWxlU3RhcnQoc3RhcnQpO1xuICAgIHNjb3BlKCdpZignLCBVU0VfUFJPRklMRSwgJyl7Jywgc3RhcnQsICd9Jyk7XG4gICAgdmFyIGVuZCA9IGVudi5ibG9jaygpO1xuICAgIGVtaXRQcm9maWxlRW5kKGVuZCk7XG4gICAgc2NvcGUuZXhpdCgnaWYoJywgVVNFX1BST0ZJTEUsICcpeycsIGVuZCwgJ30nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXRBdHRyaWJ1dGVzIChlbnYsIHNjb3BlLCBhcmdzLCBhdHRyaWJ1dGVzLCBmaWx0ZXIpIHtcbiAgICB2YXIgc2hhcmVkID0gZW52LnNoYXJlZDtcblxuICAgIGZ1bmN0aW9uIHR5cGVMZW5ndGggKHgpIHtcbiAgICAgIHN3aXRjaCAoeCkge1xuICAgICAgICBjYXNlIEdMX0ZMT0FUX1ZFQzI6XG4gICAgICAgIGNhc2UgR0xfSU5UX1ZFQzI6XG4gICAgICAgIGNhc2UgR0xfQk9PTF9WRUMyOlxuICAgICAgICAgIHJldHVybiAyXG4gICAgICAgIGNhc2UgR0xfRkxPQVRfVkVDMzpcbiAgICAgICAgY2FzZSBHTF9JTlRfVkVDMzpcbiAgICAgICAgY2FzZSBHTF9CT09MX1ZFQzM6XG4gICAgICAgICAgcmV0dXJuIDNcbiAgICAgICAgY2FzZSBHTF9GTE9BVF9WRUM0OlxuICAgICAgICBjYXNlIEdMX0lOVF9WRUM0OlxuICAgICAgICBjYXNlIEdMX0JPT0xfVkVDNDpcbiAgICAgICAgICByZXR1cm4gNFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiAxXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW1pdEJpbmRBdHRyaWJ1dGUgKEFUVFJJQlVURSwgc2l6ZSwgcmVjb3JkKSB7XG4gICAgICB2YXIgR0wgPSBzaGFyZWQuZ2w7XG5cbiAgICAgIHZhciBMT0NBVElPTiA9IHNjb3BlLmRlZihBVFRSSUJVVEUsICcubG9jYXRpb24nKTtcbiAgICAgIHZhciBCSU5ESU5HID0gc2NvcGUuZGVmKHNoYXJlZC5hdHRyaWJ1dGVzLCAnWycsIExPQ0FUSU9OLCAnXScpO1xuXG4gICAgICB2YXIgU1RBVEUgPSByZWNvcmQuc3RhdGU7XG4gICAgICB2YXIgQlVGRkVSID0gcmVjb3JkLmJ1ZmZlcjtcbiAgICAgIHZhciBDT05TVF9DT01QT05FTlRTID0gW1xuICAgICAgICByZWNvcmQueCxcbiAgICAgICAgcmVjb3JkLnksXG4gICAgICAgIHJlY29yZC56LFxuICAgICAgICByZWNvcmQud1xuICAgICAgXTtcblxuICAgICAgdmFyIENPTU1PTl9LRVlTID0gW1xuICAgICAgICAnYnVmZmVyJyxcbiAgICAgICAgJ25vcm1hbGl6ZWQnLFxuICAgICAgICAnb2Zmc2V0JyxcbiAgICAgICAgJ3N0cmlkZSdcbiAgICAgIF07XG5cbiAgICAgIGZ1bmN0aW9uIGVtaXRCdWZmZXIgKCkge1xuICAgICAgICBzY29wZShcbiAgICAgICAgICAnaWYoIScsIEJJTkRJTkcsICcuYnVmZmVyKXsnLFxuICAgICAgICAgIEdMLCAnLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KCcsIExPQ0FUSU9OLCAnKTt9Jyk7XG5cbiAgICAgICAgdmFyIFRZUEUgPSByZWNvcmQudHlwZTtcbiAgICAgICAgdmFyIFNJWkU7XG4gICAgICAgIGlmICghcmVjb3JkLnNpemUpIHtcbiAgICAgICAgICBTSVpFID0gc2l6ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBTSVpFID0gc2NvcGUuZGVmKHJlY29yZC5zaXplLCAnfHwnLCBzaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjb3BlKCdpZignLFxuICAgICAgICAgIEJJTkRJTkcsICcudHlwZSE9PScsIFRZUEUsICd8fCcsXG4gICAgICAgICAgQklORElORywgJy5zaXplIT09JywgU0laRSwgJ3x8JyxcbiAgICAgICAgICBDT01NT05fS0VZUy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIEJJTkRJTkcgKyAnLicgKyBrZXkgKyAnIT09JyArIHJlY29yZFtrZXldXG4gICAgICAgICAgfSkuam9pbignfHwnKSxcbiAgICAgICAgICAnKXsnLFxuICAgICAgICAgIEdMLCAnLmJpbmRCdWZmZXIoJywgR0xfQVJSQVlfQlVGRkVSJDEsICcsJywgQlVGRkVSLCAnLmJ1ZmZlcik7JyxcbiAgICAgICAgICBHTCwgJy52ZXJ0ZXhBdHRyaWJQb2ludGVyKCcsIFtcbiAgICAgICAgICAgIExPQ0FUSU9OLFxuICAgICAgICAgICAgU0laRSxcbiAgICAgICAgICAgIFRZUEUsXG4gICAgICAgICAgICByZWNvcmQubm9ybWFsaXplZCxcbiAgICAgICAgICAgIHJlY29yZC5zdHJpZGUsXG4gICAgICAgICAgICByZWNvcmQub2Zmc2V0XG4gICAgICAgICAgXSwgJyk7JyxcbiAgICAgICAgICBCSU5ESU5HLCAnLnR5cGU9JywgVFlQRSwgJzsnLFxuICAgICAgICAgIEJJTkRJTkcsICcuc2l6ZT0nLCBTSVpFLCAnOycsXG4gICAgICAgICAgQ09NTU9OX0tFWVMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBCSU5ESU5HICsgJy4nICsga2V5ICsgJz0nICsgcmVjb3JkW2tleV0gKyAnOydcbiAgICAgICAgICB9KS5qb2luKCcnKSxcbiAgICAgICAgICAnfScpO1xuXG4gICAgICAgIGlmIChleHRJbnN0YW5jaW5nKSB7XG4gICAgICAgICAgdmFyIERJVklTT1IgPSByZWNvcmQuZGl2aXNvcjtcbiAgICAgICAgICBzY29wZShcbiAgICAgICAgICAgICdpZignLCBCSU5ESU5HLCAnLmRpdmlzb3IhPT0nLCBESVZJU09SLCAnKXsnLFxuICAgICAgICAgICAgZW52Lmluc3RhbmNpbmcsICcudmVydGV4QXR0cmliRGl2aXNvckFOR0xFKCcsIFtMT0NBVElPTiwgRElWSVNPUl0sICcpOycsXG4gICAgICAgICAgICBCSU5ESU5HLCAnLmRpdmlzb3I9JywgRElWSVNPUiwgJzt9Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZW1pdENvbnN0YW50ICgpIHtcbiAgICAgICAgc2NvcGUoXG4gICAgICAgICAgJ2lmKCcsIEJJTkRJTkcsICcuYnVmZmVyKXsnLFxuICAgICAgICAgIEdMLCAnLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSgnLCBMT0NBVElPTiwgJyk7JyxcbiAgICAgICAgICBCSU5ESU5HLCAnLmJ1ZmZlcj1udWxsOycsXG4gICAgICAgICAgJ31pZignLCBDVVRFX0NPTVBPTkVOVFMubWFwKGZ1bmN0aW9uIChjLCBpKSB7XG4gICAgICAgICAgICByZXR1cm4gQklORElORyArICcuJyArIGMgKyAnIT09JyArIENPTlNUX0NPTVBPTkVOVFNbaV1cbiAgICAgICAgICB9KS5qb2luKCd8fCcpLCAnKXsnLFxuICAgICAgICAgIEdMLCAnLnZlcnRleEF0dHJpYjRmKCcsIExPQ0FUSU9OLCAnLCcsIENPTlNUX0NPTVBPTkVOVFMsICcpOycsXG4gICAgICAgICAgQ1VURV9DT01QT05FTlRTLm1hcChmdW5jdGlvbiAoYywgaSkge1xuICAgICAgICAgICAgcmV0dXJuIEJJTkRJTkcgKyAnLicgKyBjICsgJz0nICsgQ09OU1RfQ09NUE9ORU5UU1tpXSArICc7J1xuICAgICAgICAgIH0pLmpvaW4oJycpLFxuICAgICAgICAgICd9Jyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChTVEFURSA9PT0gQVRUUklCX1NUQVRFX1BPSU5URVIpIHtcbiAgICAgICAgZW1pdEJ1ZmZlcigpO1xuICAgICAgfSBlbHNlIGlmIChTVEFURSA9PT0gQVRUUklCX1NUQVRFX0NPTlNUQU5UKSB7XG4gICAgICAgIGVtaXRDb25zdGFudCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NvcGUoJ2lmKCcsIFNUQVRFLCAnPT09JywgQVRUUklCX1NUQVRFX1BPSU5URVIsICcpeycpO1xuICAgICAgICBlbWl0QnVmZmVyKCk7XG4gICAgICAgIHNjb3BlKCd9ZWxzZXsnKTtcbiAgICAgICAgZW1pdENvbnN0YW50KCk7XG4gICAgICAgIHNjb3BlKCd9Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYXR0cmlidXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgIHZhciBuYW1lID0gYXR0cmlidXRlLm5hbWU7XG4gICAgICB2YXIgYXJnID0gYXJncy5hdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgdmFyIHJlY29yZDtcbiAgICAgIGlmIChhcmcpIHtcbiAgICAgICAgaWYgKCFmaWx0ZXIoYXJnKSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHJlY29yZCA9IGFyZy5hcHBlbmQoZW52LCBzY29wZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWZpbHRlcihTQ09QRV9ERUNMKSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHZhciBzY29wZUF0dHJpYiA9IGVudi5zY29wZUF0dHJpYihuYW1lKTtcbiAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZW52LmFzc2VydChzY29wZSxcbiAgICAgICAgICAgIHNjb3BlQXR0cmliICsgJy5zdGF0ZScsXG4gICAgICAgICAgICAnbWlzc2luZyBhdHRyaWJ1dGUgJyArIG5hbWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVjb3JkID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKG5ldyBBdHRyaWJ1dGVSZWNvcmQoKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmVjb3JkW2tleV0gPSBzY29wZS5kZWYoc2NvcGVBdHRyaWIsICcuJywga2V5KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBlbWl0QmluZEF0dHJpYnV0ZShcbiAgICAgICAgZW52LmxpbmsoYXR0cmlidXRlKSwgdHlwZUxlbmd0aChhdHRyaWJ1dGUuaW5mby50eXBlKSwgcmVjb3JkKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXRVbmlmb3JtcyAoZW52LCBzY29wZSwgYXJncywgdW5pZm9ybXMsIGZpbHRlcikge1xuICAgIHZhciBzaGFyZWQgPSBlbnYuc2hhcmVkO1xuICAgIHZhciBHTCA9IHNoYXJlZC5nbDtcblxuICAgIHZhciBpbmZpeDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVuaWZvcm1zLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIgdW5pZm9ybSA9IHVuaWZvcm1zW2ldO1xuICAgICAgdmFyIG5hbWUgPSB1bmlmb3JtLm5hbWU7XG4gICAgICB2YXIgdHlwZSA9IHVuaWZvcm0uaW5mby50eXBlO1xuICAgICAgdmFyIGFyZyA9IGFyZ3MudW5pZm9ybXNbbmFtZV07XG4gICAgICB2YXIgVU5JRk9STSA9IGVudi5saW5rKHVuaWZvcm0pO1xuICAgICAgdmFyIExPQ0FUSU9OID0gVU5JRk9STSArICcubG9jYXRpb24nO1xuXG4gICAgICB2YXIgVkFMVUU7XG4gICAgICBpZiAoYXJnKSB7XG4gICAgICAgIGlmICghZmlsdGVyKGFyZykpIHtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0YXRpYyhhcmcpKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gYXJnLnZhbHVlO1xuICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChcbiAgICAgICAgICAgIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcsXG4gICAgICAgICAgICAnbWlzc2luZyB1bmlmb3JtIFwiJyArIG5hbWUgKyAnXCInLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgaWYgKHR5cGUgPT09IEdMX1NBTVBMRVJfMkQgfHwgdHlwZSA9PT0gR0xfU0FNUExFUl9DVUJFKSB7XG4gICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXG4gICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgICAoKHR5cGUgPT09IEdMX1NBTVBMRVJfMkQgJiZcbiAgICAgICAgICAgICAgICAodmFsdWUuX3JlZ2xUeXBlID09PSAndGV4dHVyZTJkJyB8fFxuICAgICAgICAgICAgICAgIHZhbHVlLl9yZWdsVHlwZSA9PT0gJ2ZyYW1lYnVmZmVyJykpIHx8XG4gICAgICAgICAgICAgICh0eXBlID09PSBHTF9TQU1QTEVSX0NVQkUgJiZcbiAgICAgICAgICAgICAgICAodmFsdWUuX3JlZ2xUeXBlID09PSAndGV4dHVyZUN1YmUnIHx8XG4gICAgICAgICAgICAgICAgdmFsdWUuX3JlZ2xUeXBlID09PSAnZnJhbWVidWZmZXJDdWJlJykpKSxcbiAgICAgICAgICAgICAgJ2ludmFsaWQgdGV4dHVyZSBmb3IgdW5pZm9ybSAnICsgbmFtZSwgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgdmFyIFRFWF9WQUxVRSA9IGVudi5saW5rKHZhbHVlLl90ZXh0dXJlIHx8IHZhbHVlLmNvbG9yWzBdLl90ZXh0dXJlKTtcbiAgICAgICAgICAgIHNjb3BlKEdMLCAnLnVuaWZvcm0xaSgnLCBMT0NBVElPTiwgJywnLCBURVhfVkFMVUUgKyAnLmJpbmQoKSk7Jyk7XG4gICAgICAgICAgICBzY29wZS5leGl0KFRFWF9WQUxVRSwgJy51bmJpbmQoKTsnKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgdHlwZSA9PT0gR0xfRkxPQVRfTUFUMiB8fFxuICAgICAgICAgICAgdHlwZSA9PT0gR0xfRkxPQVRfTUFUMyB8fFxuICAgICAgICAgICAgdHlwZSA9PT0gR0xfRkxPQVRfTUFUNCkge1xuICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChpc0FycmF5TGlrZSh2YWx1ZSksXG4gICAgICAgICAgICAgICAgJ2ludmFsaWQgbWF0cml4IGZvciB1bmlmb3JtICcgKyBuYW1lLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChcbiAgICAgICAgICAgICAgICAodHlwZSA9PT0gR0xfRkxPQVRfTUFUMiAmJiB2YWx1ZS5sZW5ndGggPT09IDQpIHx8XG4gICAgICAgICAgICAgICAgKHR5cGUgPT09IEdMX0ZMT0FUX01BVDMgJiYgdmFsdWUubGVuZ3RoID09PSA5KSB8fFxuICAgICAgICAgICAgICAgICh0eXBlID09PSBHTF9GTE9BVF9NQVQ0ICYmIHZhbHVlLmxlbmd0aCA9PT0gMTYpLFxuICAgICAgICAgICAgICAgICdpbnZhbGlkIGxlbmd0aCBmb3IgbWF0cml4IHVuaWZvcm0gJyArIG5hbWUsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIE1BVF9WQUxVRSA9IGVudi5nbG9iYWwuZGVmKCduZXcgRmxvYXQzMkFycmF5KFsnICtcbiAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodmFsdWUpICsgJ10pJyk7XG4gICAgICAgICAgICB2YXIgZGltID0gMjtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBHTF9GTE9BVF9NQVQzKSB7XG4gICAgICAgICAgICAgIGRpbSA9IDM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEdMX0ZMT0FUX01BVDQpIHtcbiAgICAgICAgICAgICAgZGltID0gNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjb3BlKFxuICAgICAgICAgICAgICBHTCwgJy51bmlmb3JtTWF0cml4JywgZGltLCAnZnYoJyxcbiAgICAgICAgICAgICAgTE9DQVRJT04sICcsZmFsc2UsJywgTUFUX1ZBTFVFLCAnKTsnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgR0xfRkxPQVQkODpcbiAgICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRUeXBlKHZhbHVlLCAnbnVtYmVyJywgJ3VuaWZvcm0gJyArIG5hbWUsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgICBpbmZpeCA9ICcxZic7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgY2FzZSBHTF9GTE9BVF9WRUMyOlxuICAgICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChcbiAgICAgICAgICAgICAgICAgIGlzQXJyYXlMaWtlKHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDIsXG4gICAgICAgICAgICAgICAgICAndW5pZm9ybSAnICsgbmFtZSwgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICAgIGluZml4ID0gJzJmJztcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICBjYXNlIEdMX0ZMT0FUX1ZFQzM6XG4gICAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKFxuICAgICAgICAgICAgICAgICAgaXNBcnJheUxpa2UodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMyxcbiAgICAgICAgICAgICAgICAgICd1bmlmb3JtICcgKyBuYW1lLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgICAgICAgaW5maXggPSAnM2YnO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIGNhc2UgR0xfRkxPQVRfVkVDNDpcbiAgICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXG4gICAgICAgICAgICAgICAgICBpc0FycmF5TGlrZSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSA0LFxuICAgICAgICAgICAgICAgICAgJ3VuaWZvcm0gJyArIG5hbWUsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgICBpbmZpeCA9ICc0Zic7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgY2FzZSBHTF9CT09MOlxuICAgICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFR5cGUodmFsdWUsICdib29sZWFuJywgJ3VuaWZvcm0gJyArIG5hbWUsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgICBpbmZpeCA9ICcxaSc7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgY2FzZSBHTF9JTlQkMzpcbiAgICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRUeXBlKHZhbHVlLCAnbnVtYmVyJywgJ3VuaWZvcm0gJyArIG5hbWUsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgICBpbmZpeCA9ICcxaSc7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgY2FzZSBHTF9CT09MX1ZFQzI6XG4gICAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKFxuICAgICAgICAgICAgICAgICAgaXNBcnJheUxpa2UodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMixcbiAgICAgICAgICAgICAgICAgICd1bmlmb3JtICcgKyBuYW1lLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgICAgICAgaW5maXggPSAnMmknO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIGNhc2UgR0xfSU5UX1ZFQzI6XG4gICAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKFxuICAgICAgICAgICAgICAgICAgaXNBcnJheUxpa2UodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMixcbiAgICAgICAgICAgICAgICAgICd1bmlmb3JtICcgKyBuYW1lLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgICAgICAgICAgaW5maXggPSAnMmknO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIGNhc2UgR0xfQk9PTF9WRUMzOlxuICAgICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChcbiAgICAgICAgICAgICAgICAgIGlzQXJyYXlMaWtlKHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDMsXG4gICAgICAgICAgICAgICAgICAndW5pZm9ybSAnICsgbmFtZSwgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICAgIGluZml4ID0gJzNpJztcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICBjYXNlIEdMX0lOVF9WRUMzOlxuICAgICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChcbiAgICAgICAgICAgICAgICAgIGlzQXJyYXlMaWtlKHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDMsXG4gICAgICAgICAgICAgICAgICAndW5pZm9ybSAnICsgbmFtZSwgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICAgICAgICAgIGluZml4ID0gJzNpJztcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICBjYXNlIEdMX0JPT0xfVkVDNDpcbiAgICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXG4gICAgICAgICAgICAgICAgICBpc0FycmF5TGlrZSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSA0LFxuICAgICAgICAgICAgICAgICAgJ3VuaWZvcm0gJyArIG5hbWUsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgICBpbmZpeCA9ICc0aSc7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgY2FzZSBHTF9JTlRfVkVDNDpcbiAgICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXG4gICAgICAgICAgICAgICAgICBpc0FycmF5TGlrZSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSA0LFxuICAgICAgICAgICAgICAgICAgJ3VuaWZvcm0gJyArIG5hbWUsIGVudi5jb21tYW5kU3RyKTtcbiAgICAgICAgICAgICAgICBpbmZpeCA9ICc0aSc7XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNjb3BlKEdMLCAnLnVuaWZvcm0nLCBpbmZpeCwgJygnLCBMT0NBVElPTiwgJywnLFxuICAgICAgICAgICAgICBpc0FycmF5TGlrZSh2YWx1ZSkgPyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh2YWx1ZSkgOiB2YWx1ZSxcbiAgICAgICAgICAgICAgJyk7Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgVkFMVUUgPSBhcmcuYXBwZW5kKGVudiwgc2NvcGUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWZpbHRlcihTQ09QRV9ERUNMKSkge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgVkFMVUUgPSBzY29wZS5kZWYoc2hhcmVkLnVuaWZvcm1zLCAnWycsIHN0cmluZ1N0b3JlLmlkKG5hbWUpLCAnXScpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gR0xfU0FNUExFUl8yRCkge1xuICAgICAgICBzY29wZShcbiAgICAgICAgICAnaWYoJywgVkFMVUUsICcmJicsIFZBTFVFLCAnLl9yZWdsVHlwZT09PVwiZnJhbWVidWZmZXJcIil7JyxcbiAgICAgICAgICBWQUxVRSwgJz0nLCBWQUxVRSwgJy5jb2xvclswXTsnLFxuICAgICAgICAgICd9Jyk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEdMX1NBTVBMRVJfQ1VCRSkge1xuICAgICAgICBzY29wZShcbiAgICAgICAgICAnaWYoJywgVkFMVUUsICcmJicsIFZBTFVFLCAnLl9yZWdsVHlwZT09PVwiZnJhbWVidWZmZXJDdWJlXCIpeycsXG4gICAgICAgICAgVkFMVUUsICc9JywgVkFMVUUsICcuY29sb3JbMF07JyxcbiAgICAgICAgICAnfScpO1xuICAgICAgfVxuXG4gICAgICAvLyBwZXJmb3JtIHR5cGUgdmFsaWRhdGlvblxuICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrIChwcmVkLCBtZXNzYWdlKSB7XG4gICAgICAgICAgZW52LmFzc2VydChzY29wZSwgcHJlZCxcbiAgICAgICAgICAgICdiYWQgZGF0YSBvciBtaXNzaW5nIGZvciB1bmlmb3JtIFwiJyArIG5hbWUgKyAnXCIuICAnICsgbWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjaGVja1R5cGUgKHR5cGUpIHtcbiAgICAgICAgICBjaGVjayhcbiAgICAgICAgICAgICd0eXBlb2YgJyArIFZBTFVFICsgJz09PVwiJyArIHR5cGUgKyAnXCInLFxuICAgICAgICAgICAgJ2ludmFsaWQgdHlwZSwgZXhwZWN0ZWQgJyArIHR5cGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tWZWN0b3IgKG4sIHR5cGUpIHtcbiAgICAgICAgICBjaGVjayhcbiAgICAgICAgICAgIHNoYXJlZC5pc0FycmF5TGlrZSArICcoJyArIFZBTFVFICsgJykmJicgKyBWQUxVRSArICcubGVuZ3RoPT09JyArIG4sXG4gICAgICAgICAgICAnaW52YWxpZCB2ZWN0b3IsIHNob3VsZCBoYXZlIGxlbmd0aCAnICsgbiwgZW52LmNvbW1hbmRTdHIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tUZXh0dXJlICh0YXJnZXQpIHtcbiAgICAgICAgICBjaGVjayhcbiAgICAgICAgICAgICd0eXBlb2YgJyArIFZBTFVFICsgJz09PVwiZnVuY3Rpb25cIiYmJyArXG4gICAgICAgICAgICBWQUxVRSArICcuX3JlZ2xUeXBlPT09XCJ0ZXh0dXJlJyArXG4gICAgICAgICAgICAodGFyZ2V0ID09PSBHTF9URVhUVVJFXzJEJDMgPyAnMmQnIDogJ0N1YmUnKSArICdcIicsXG4gICAgICAgICAgICAnaW52YWxpZCB0ZXh0dXJlIHR5cGUnLCBlbnYuY29tbWFuZFN0cik7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlIEdMX0lOVCQzOlxuICAgICAgICAgICAgY2hlY2tUeXBlKCdudW1iZXInKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBHTF9JTlRfVkVDMjpcbiAgICAgICAgICAgIGNoZWNrVmVjdG9yKDIsICdudW1iZXInKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBHTF9JTlRfVkVDMzpcbiAgICAgICAgICAgIGNoZWNrVmVjdG9yKDMsICdudW1iZXInKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBHTF9JTlRfVkVDNDpcbiAgICAgICAgICAgIGNoZWNrVmVjdG9yKDQsICdudW1iZXInKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBHTF9GTE9BVCQ4OlxuICAgICAgICAgICAgY2hlY2tUeXBlKCdudW1iZXInKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBHTF9GTE9BVF9WRUMyOlxuICAgICAgICAgICAgY2hlY2tWZWN0b3IoMiwgJ251bWJlcicpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlIEdMX0ZMT0FUX1ZFQzM6XG4gICAgICAgICAgICBjaGVja1ZlY3RvcigzLCAnbnVtYmVyJyk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgR0xfRkxPQVRfVkVDNDpcbiAgICAgICAgICAgIGNoZWNrVmVjdG9yKDQsICdudW1iZXInKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBHTF9CT09MOlxuICAgICAgICAgICAgY2hlY2tUeXBlKCdib29sZWFuJyk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgR0xfQk9PTF9WRUMyOlxuICAgICAgICAgICAgY2hlY2tWZWN0b3IoMiwgJ2Jvb2xlYW4nKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBHTF9CT09MX1ZFQzM6XG4gICAgICAgICAgICBjaGVja1ZlY3RvcigzLCAnYm9vbGVhbicpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlIEdMX0JPT0xfVkVDNDpcbiAgICAgICAgICAgIGNoZWNrVmVjdG9yKDQsICdib29sZWFuJyk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgR0xfRkxPQVRfTUFUMjpcbiAgICAgICAgICAgIGNoZWNrVmVjdG9yKDQsICdudW1iZXInKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBHTF9GTE9BVF9NQVQzOlxuICAgICAgICAgICAgY2hlY2tWZWN0b3IoOSwgJ251bWJlcicpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlIEdMX0ZMT0FUX01BVDQ6XG4gICAgICAgICAgICBjaGVja1ZlY3RvcigxNiwgJ251bWJlcicpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlIEdMX1NBTVBMRVJfMkQ6XG4gICAgICAgICAgICBjaGVja1RleHR1cmUoR0xfVEVYVFVSRV8yRCQzKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgY2FzZSBHTF9TQU1QTEVSX0NVQkU6XG4gICAgICAgICAgICBjaGVja1RleHR1cmUoR0xfVEVYVFVSRV9DVUJFX01BUCQyKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgdW5yb2xsID0gMTtcbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIEdMX1NBTVBMRVJfMkQ6XG4gICAgICAgIGNhc2UgR0xfU0FNUExFUl9DVUJFOlxuICAgICAgICAgIHZhciBURVggPSBzY29wZS5kZWYoVkFMVUUsICcuX3RleHR1cmUnKTtcbiAgICAgICAgICBzY29wZShHTCwgJy51bmlmb3JtMWkoJywgTE9DQVRJT04sICcsJywgVEVYLCAnLmJpbmQoKSk7Jyk7XG4gICAgICAgICAgc2NvcGUuZXhpdChURVgsICcudW5iaW5kKCk7Jyk7XG4gICAgICAgICAgY29udGludWVcblxuICAgICAgICBjYXNlIEdMX0lOVCQzOlxuICAgICAgICBjYXNlIEdMX0JPT0w6XG4gICAgICAgICAgaW5maXggPSAnMWknO1xuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSBHTF9JTlRfVkVDMjpcbiAgICAgICAgY2FzZSBHTF9CT09MX1ZFQzI6XG4gICAgICAgICAgaW5maXggPSAnMmknO1xuICAgICAgICAgIHVucm9sbCA9IDI7XG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlIEdMX0lOVF9WRUMzOlxuICAgICAgICBjYXNlIEdMX0JPT0xfVkVDMzpcbiAgICAgICAgICBpbmZpeCA9ICczaSc7XG4gICAgICAgICAgdW5yb2xsID0gMztcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgR0xfSU5UX1ZFQzQ6XG4gICAgICAgIGNhc2UgR0xfQk9PTF9WRUM0OlxuICAgICAgICAgIGluZml4ID0gJzRpJztcbiAgICAgICAgICB1bnJvbGwgPSA0O1xuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSBHTF9GTE9BVCQ4OlxuICAgICAgICAgIGluZml4ID0gJzFmJztcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgR0xfRkxPQVRfVkVDMjpcbiAgICAgICAgICBpbmZpeCA9ICcyZic7XG4gICAgICAgICAgdW5yb2xsID0gMjtcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgR0xfRkxPQVRfVkVDMzpcbiAgICAgICAgICBpbmZpeCA9ICczZic7XG4gICAgICAgICAgdW5yb2xsID0gMztcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgR0xfRkxPQVRfVkVDNDpcbiAgICAgICAgICBpbmZpeCA9ICc0Zic7XG4gICAgICAgICAgdW5yb2xsID0gNDtcbiAgICAgICAgICBicmVha1xuXG4gICAgICAgIGNhc2UgR0xfRkxPQVRfTUFUMjpcbiAgICAgICAgICBpbmZpeCA9ICdNYXRyaXgyZnYnO1xuICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgY2FzZSBHTF9GTE9BVF9NQVQzOlxuICAgICAgICAgIGluZml4ID0gJ01hdHJpeDNmdic7XG4gICAgICAgICAgYnJlYWtcblxuICAgICAgICBjYXNlIEdMX0ZMT0FUX01BVDQ6XG4gICAgICAgICAgaW5maXggPSAnTWF0cml4NGZ2JztcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBzY29wZShHTCwgJy51bmlmb3JtJywgaW5maXgsICcoJywgTE9DQVRJT04sICcsJyk7XG4gICAgICBpZiAoaW5maXguY2hhckF0KDApID09PSAnTScpIHtcbiAgICAgICAgdmFyIG1hdFNpemUgPSBNYXRoLnBvdyh0eXBlIC0gR0xfRkxPQVRfTUFUMiArIDIsIDIpO1xuICAgICAgICB2YXIgU1RPUkFHRSA9IGVudi5nbG9iYWwuZGVmKCduZXcgRmxvYXQzMkFycmF5KCcsIG1hdFNpemUsICcpJyk7XG4gICAgICAgIHNjb3BlKFxuICAgICAgICAgICdmYWxzZSwoQXJyYXkuaXNBcnJheSgnLCBWQUxVRSwgJyl8fCcsIFZBTFVFLCAnIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5KT8nLCBWQUxVRSwgJzooJyxcbiAgICAgICAgICBsb29wKG1hdFNpemUsIGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICByZXR1cm4gU1RPUkFHRSArICdbJyArIGkgKyAnXT0nICsgVkFMVUUgKyAnWycgKyBpICsgJ10nXG4gICAgICAgICAgfSksICcsJywgU1RPUkFHRSwgJyknKTtcbiAgICAgIH0gZWxzZSBpZiAodW5yb2xsID4gMSkge1xuICAgICAgICBzY29wZShsb29wKHVucm9sbCwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gVkFMVUUgKyAnWycgKyBpICsgJ10nXG4gICAgICAgIH0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjb3BlKFZBTFVFKTtcbiAgICAgIH1cbiAgICAgIHNjb3BlKCcpOycpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtaXREcmF3IChlbnYsIG91dGVyLCBpbm5lciwgYXJncykge1xuICAgIHZhciBzaGFyZWQgPSBlbnYuc2hhcmVkO1xuICAgIHZhciBHTCA9IHNoYXJlZC5nbDtcbiAgICB2YXIgRFJBV19TVEFURSA9IHNoYXJlZC5kcmF3O1xuXG4gICAgdmFyIGRyYXdPcHRpb25zID0gYXJncy5kcmF3O1xuXG4gICAgZnVuY3Rpb24gZW1pdEVsZW1lbnRzICgpIHtcbiAgICAgIHZhciBkZWZuID0gZHJhd09wdGlvbnMuZWxlbWVudHM7XG4gICAgICB2YXIgRUxFTUVOVFM7XG4gICAgICB2YXIgc2NvcGUgPSBvdXRlcjtcbiAgICAgIGlmIChkZWZuKSB7XG4gICAgICAgIGlmICgoZGVmbi5jb250ZXh0RGVwICYmIGFyZ3MuY29udGV4dER5bmFtaWMpIHx8IGRlZm4ucHJvcERlcCkge1xuICAgICAgICAgIHNjb3BlID0gaW5uZXI7XG4gICAgICAgIH1cbiAgICAgICAgRUxFTUVOVFMgPSBkZWZuLmFwcGVuZChlbnYsIHNjb3BlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEVMRU1FTlRTID0gc2NvcGUuZGVmKERSQVdfU1RBVEUsICcuJywgU19FTEVNRU5UUyk7XG4gICAgICB9XG4gICAgICBpZiAoRUxFTUVOVFMpIHtcbiAgICAgICAgc2NvcGUoXG4gICAgICAgICAgJ2lmKCcgKyBFTEVNRU5UUyArICcpJyArXG4gICAgICAgICAgR0wgKyAnLmJpbmRCdWZmZXIoJyArIEdMX0VMRU1FTlRfQVJSQVlfQlVGRkVSJDEgKyAnLCcgKyBFTEVNRU5UUyArICcuYnVmZmVyLmJ1ZmZlcik7Jyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gRUxFTUVOVFNcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbWl0Q291bnQgKCkge1xuICAgICAgdmFyIGRlZm4gPSBkcmF3T3B0aW9ucy5jb3VudDtcbiAgICAgIHZhciBDT1VOVDtcbiAgICAgIHZhciBzY29wZSA9IG91dGVyO1xuICAgICAgaWYgKGRlZm4pIHtcbiAgICAgICAgaWYgKChkZWZuLmNvbnRleHREZXAgJiYgYXJncy5jb250ZXh0RHluYW1pYykgfHwgZGVmbi5wcm9wRGVwKSB7XG4gICAgICAgICAgc2NvcGUgPSBpbm5lcjtcbiAgICAgICAgfVxuICAgICAgICBDT1VOVCA9IGRlZm4uYXBwZW5kKGVudiwgc2NvcGUpO1xuICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoZGVmbi5NSVNTSU5HKSB7XG4gICAgICAgICAgICBlbnYuYXNzZXJ0KG91dGVyLCAnZmFsc2UnLCAnbWlzc2luZyB2ZXJ0ZXggY291bnQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRlZm4uRFlOQU1JQykge1xuICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSwgQ09VTlQgKyAnPj0wJywgJ21pc3NpbmcgdmVydGV4IGNvdW50Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIENPVU5UID0gc2NvcGUuZGVmKERSQVdfU1RBVEUsICcuJywgU19DT1VOVCk7XG4gICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsIENPVU5UICsgJz49MCcsICdtaXNzaW5nIHZlcnRleCBjb3VudCcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBDT1VOVFxuICAgIH1cblxuICAgIHZhciBFTEVNRU5UUyA9IGVtaXRFbGVtZW50cygpO1xuICAgIGZ1bmN0aW9uIGVtaXRWYWx1ZSAobmFtZSkge1xuICAgICAgdmFyIGRlZm4gPSBkcmF3T3B0aW9uc1tuYW1lXTtcbiAgICAgIGlmIChkZWZuKSB7XG4gICAgICAgIGlmICgoZGVmbi5jb250ZXh0RGVwICYmIGFyZ3MuY29udGV4dER5bmFtaWMpIHx8IGRlZm4ucHJvcERlcCkge1xuICAgICAgICAgIHJldHVybiBkZWZuLmFwcGVuZChlbnYsIGlubmVyKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBkZWZuLmFwcGVuZChlbnYsIG91dGVyKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb3V0ZXIuZGVmKERSQVdfU1RBVEUsICcuJywgbmFtZSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgUFJJTUlUSVZFID0gZW1pdFZhbHVlKFNfUFJJTUlUSVZFKTtcbiAgICB2YXIgT0ZGU0VUID0gZW1pdFZhbHVlKFNfT0ZGU0VUKTtcblxuICAgIHZhciBDT1VOVCA9IGVtaXRDb3VudCgpO1xuICAgIGlmICh0eXBlb2YgQ09VTlQgPT09ICdudW1iZXInKSB7XG4gICAgICBpZiAoQ09VTlQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlubmVyKCdpZignLCBDT1VOVCwgJyl7Jyk7XG4gICAgICBpbm5lci5leGl0KCd9Jyk7XG4gICAgfVxuXG4gICAgdmFyIElOU1RBTkNFUywgRVhUX0lOU1RBTkNJTkc7XG4gICAgaWYgKGV4dEluc3RhbmNpbmcpIHtcbiAgICAgIElOU1RBTkNFUyA9IGVtaXRWYWx1ZShTX0lOU1RBTkNFUyk7XG4gICAgICBFWFRfSU5TVEFOQ0lORyA9IGVudi5pbnN0YW5jaW5nO1xuICAgIH1cblxuICAgIHZhciBFTEVNRU5UX1RZUEUgPSBFTEVNRU5UUyArICcudHlwZSc7XG5cbiAgICB2YXIgZWxlbWVudHNTdGF0aWMgPSBkcmF3T3B0aW9ucy5lbGVtZW50cyAmJiBpc1N0YXRpYyhkcmF3T3B0aW9ucy5lbGVtZW50cyk7XG5cbiAgICBmdW5jdGlvbiBlbWl0SW5zdGFuY2luZyAoKSB7XG4gICAgICBmdW5jdGlvbiBkcmF3RWxlbWVudHMgKCkge1xuICAgICAgICBpbm5lcihFWFRfSU5TVEFOQ0lORywgJy5kcmF3RWxlbWVudHNJbnN0YW5jZWRBTkdMRSgnLCBbXG4gICAgICAgICAgUFJJTUlUSVZFLFxuICAgICAgICAgIENPVU5ULFxuICAgICAgICAgIEVMRU1FTlRfVFlQRSxcbiAgICAgICAgICBPRkZTRVQgKyAnPDwoKCcgKyBFTEVNRU5UX1RZUEUgKyAnLScgKyBHTF9VTlNJR05FRF9CWVRFJDggKyAnKT4+MSknLFxuICAgICAgICAgIElOU1RBTkNFU1xuICAgICAgICBdLCAnKTsnKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZHJhd0FycmF5cyAoKSB7XG4gICAgICAgIGlubmVyKEVYVF9JTlNUQU5DSU5HLCAnLmRyYXdBcnJheXNJbnN0YW5jZWRBTkdMRSgnLFxuICAgICAgICAgIFtQUklNSVRJVkUsIE9GRlNFVCwgQ09VTlQsIElOU1RBTkNFU10sICcpOycpO1xuICAgICAgfVxuXG4gICAgICBpZiAoRUxFTUVOVFMpIHtcbiAgICAgICAgaWYgKCFlbGVtZW50c1N0YXRpYykge1xuICAgICAgICAgIGlubmVyKCdpZignLCBFTEVNRU5UUywgJyl7Jyk7XG4gICAgICAgICAgZHJhd0VsZW1lbnRzKCk7XG4gICAgICAgICAgaW5uZXIoJ31lbHNleycpO1xuICAgICAgICAgIGRyYXdBcnJheXMoKTtcbiAgICAgICAgICBpbm5lcignfScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRyYXdFbGVtZW50cygpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkcmF3QXJyYXlzKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW1pdFJlZ3VsYXIgKCkge1xuICAgICAgZnVuY3Rpb24gZHJhd0VsZW1lbnRzICgpIHtcbiAgICAgICAgaW5uZXIoR0wgKyAnLmRyYXdFbGVtZW50cygnICsgW1xuICAgICAgICAgIFBSSU1JVElWRSxcbiAgICAgICAgICBDT1VOVCxcbiAgICAgICAgICBFTEVNRU5UX1RZUEUsXG4gICAgICAgICAgT0ZGU0VUICsgJzw8KCgnICsgRUxFTUVOVF9UWVBFICsgJy0nICsgR0xfVU5TSUdORURfQllURSQ4ICsgJyk+PjEpJ1xuICAgICAgICBdICsgJyk7Jyk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRyYXdBcnJheXMgKCkge1xuICAgICAgICBpbm5lcihHTCArICcuZHJhd0FycmF5cygnICsgW1BSSU1JVElWRSwgT0ZGU0VULCBDT1VOVF0gKyAnKTsnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKEVMRU1FTlRTKSB7XG4gICAgICAgIGlmICghZWxlbWVudHNTdGF0aWMpIHtcbiAgICAgICAgICBpbm5lcignaWYoJywgRUxFTUVOVFMsICcpeycpO1xuICAgICAgICAgIGRyYXdFbGVtZW50cygpO1xuICAgICAgICAgIGlubmVyKCd9ZWxzZXsnKTtcbiAgICAgICAgICBkcmF3QXJyYXlzKCk7XG4gICAgICAgICAgaW5uZXIoJ30nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkcmF3RWxlbWVudHMoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZHJhd0FycmF5cygpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleHRJbnN0YW5jaW5nICYmICh0eXBlb2YgSU5TVEFOQ0VTICE9PSAnbnVtYmVyJyB8fCBJTlNUQU5DRVMgPj0gMCkpIHtcbiAgICAgIGlmICh0eXBlb2YgSU5TVEFOQ0VTID09PSAnc3RyaW5nJykge1xuICAgICAgICBpbm5lcignaWYoJywgSU5TVEFOQ0VTLCAnPjApeycpO1xuICAgICAgICBlbWl0SW5zdGFuY2luZygpO1xuICAgICAgICBpbm5lcignfWVsc2UgaWYoJywgSU5TVEFOQ0VTLCAnPDApeycpO1xuICAgICAgICBlbWl0UmVndWxhcigpO1xuICAgICAgICBpbm5lcignfScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW1pdEluc3RhbmNpbmcoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZW1pdFJlZ3VsYXIoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCb2R5IChlbWl0Qm9keSwgcGFyZW50RW52LCBhcmdzLCBwcm9ncmFtLCBjb3VudCkge1xuICAgIHZhciBlbnYgPSBjcmVhdGVSRUdMRW52aXJvbm1lbnQoKTtcbiAgICB2YXIgc2NvcGUgPSBlbnYucHJvYygnYm9keScsIGNvdW50KTtcbiAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGVudi5jb21tYW5kU3RyID0gcGFyZW50RW52LmNvbW1hbmRTdHI7XG4gICAgICBlbnYuY29tbWFuZCA9IGVudi5saW5rKHBhcmVudEVudi5jb21tYW5kU3RyKTtcbiAgICB9KTtcbiAgICBpZiAoZXh0SW5zdGFuY2luZykge1xuICAgICAgZW52Lmluc3RhbmNpbmcgPSBzY29wZS5kZWYoXG4gICAgICAgIGVudi5zaGFyZWQuZXh0ZW5zaW9ucywgJy5hbmdsZV9pbnN0YW5jZWRfYXJyYXlzJyk7XG4gICAgfVxuICAgIGVtaXRCb2R5KGVudiwgc2NvcGUsIGFyZ3MsIHByb2dyYW0pO1xuICAgIHJldHVybiBlbnYuY29tcGlsZSgpLmJvZHlcbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gRFJBVyBQUk9DXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgZnVuY3Rpb24gZW1pdERyYXdCb2R5IChlbnYsIGRyYXcsIGFyZ3MsIHByb2dyYW0pIHtcbiAgICBpbmplY3RFeHRlbnNpb25zKGVudiwgZHJhdyk7XG4gICAgZW1pdEF0dHJpYnV0ZXMoZW52LCBkcmF3LCBhcmdzLCBwcm9ncmFtLmF0dHJpYnV0ZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSk7XG4gICAgZW1pdFVuaWZvcm1zKGVudiwgZHJhdywgYXJncywgcHJvZ3JhbS51bmlmb3JtcywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9KTtcbiAgICBlbWl0RHJhdyhlbnYsIGRyYXcsIGRyYXcsIGFyZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gZW1pdERyYXdQcm9jIChlbnYsIGFyZ3MpIHtcbiAgICB2YXIgZHJhdyA9IGVudi5wcm9jKCdkcmF3JywgMSk7XG5cbiAgICBpbmplY3RFeHRlbnNpb25zKGVudiwgZHJhdyk7XG5cbiAgICBlbWl0Q29udGV4dChlbnYsIGRyYXcsIGFyZ3MuY29udGV4dCk7XG4gICAgZW1pdFBvbGxGcmFtZWJ1ZmZlcihlbnYsIGRyYXcsIGFyZ3MuZnJhbWVidWZmZXIpO1xuXG4gICAgZW1pdFBvbGxTdGF0ZShlbnYsIGRyYXcsIGFyZ3MpO1xuICAgIGVtaXRTZXRPcHRpb25zKGVudiwgZHJhdywgYXJncy5zdGF0ZSk7XG5cbiAgICBlbWl0UHJvZmlsZShlbnYsIGRyYXcsIGFyZ3MsIGZhbHNlLCB0cnVlKTtcblxuICAgIHZhciBwcm9ncmFtID0gYXJncy5zaGFkZXIucHJvZ1Zhci5hcHBlbmQoZW52LCBkcmF3KTtcbiAgICBkcmF3KGVudi5zaGFyZWQuZ2wsICcudXNlUHJvZ3JhbSgnLCBwcm9ncmFtLCAnLnByb2dyYW0pOycpO1xuXG4gICAgaWYgKGFyZ3Muc2hhZGVyLnByb2dyYW0pIHtcbiAgICAgIGVtaXREcmF3Qm9keShlbnYsIGRyYXcsIGFyZ3MsIGFyZ3Muc2hhZGVyLnByb2dyYW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZHJhd0NhY2hlID0gZW52Lmdsb2JhbC5kZWYoJ3t9Jyk7XG4gICAgICB2YXIgUFJPR19JRCA9IGRyYXcuZGVmKHByb2dyYW0sICcuaWQnKTtcbiAgICAgIHZhciBDQUNIRURfUFJPQyA9IGRyYXcuZGVmKGRyYXdDYWNoZSwgJ1snLCBQUk9HX0lELCAnXScpO1xuICAgICAgZHJhdyhcbiAgICAgICAgZW52LmNvbmQoQ0FDSEVEX1BST0MpXG4gICAgICAgICAgLnRoZW4oQ0FDSEVEX1BST0MsICcuY2FsbCh0aGlzLGEwKTsnKVxuICAgICAgICAgIC5lbHNlKFxuICAgICAgICAgICAgQ0FDSEVEX1BST0MsICc9JywgZHJhd0NhY2hlLCAnWycsIFBST0dfSUQsICddPScsXG4gICAgICAgICAgICBlbnYubGluayhmdW5jdGlvbiAocHJvZ3JhbSkge1xuICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQm9keShlbWl0RHJhd0JvZHksIGVudiwgYXJncywgcHJvZ3JhbSwgMSlcbiAgICAgICAgICAgIH0pLCAnKCcsIHByb2dyYW0sICcpOycsXG4gICAgICAgICAgICBDQUNIRURfUFJPQywgJy5jYWxsKHRoaXMsYTApOycpKTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoYXJncy5zdGF0ZSkubGVuZ3RoID4gMCkge1xuICAgICAgZHJhdyhlbnYuc2hhcmVkLmN1cnJlbnQsICcuZGlydHk9dHJ1ZTsnKTtcbiAgICB9XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vIEJBVENIIFBST0NcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIGVtaXRCYXRjaER5bmFtaWNTaGFkZXJCb2R5IChlbnYsIHNjb3BlLCBhcmdzLCBwcm9ncmFtKSB7XG4gICAgZW52LmJhdGNoSWQgPSAnYTEnO1xuXG4gICAgaW5qZWN0RXh0ZW5zaW9ucyhlbnYsIHNjb3BlKTtcblxuICAgIGZ1bmN0aW9uIGFsbCAoKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGVtaXRBdHRyaWJ1dGVzKGVudiwgc2NvcGUsIGFyZ3MsIHByb2dyYW0uYXR0cmlidXRlcywgYWxsKTtcbiAgICBlbWl0VW5pZm9ybXMoZW52LCBzY29wZSwgYXJncywgcHJvZ3JhbS51bmlmb3JtcywgYWxsKTtcbiAgICBlbWl0RHJhdyhlbnYsIHNjb3BlLCBzY29wZSwgYXJncyk7XG4gIH1cblxuICBmdW5jdGlvbiBlbWl0QmF0Y2hCb2R5IChlbnYsIHNjb3BlLCBhcmdzLCBwcm9ncmFtKSB7XG4gICAgaW5qZWN0RXh0ZW5zaW9ucyhlbnYsIHNjb3BlKTtcblxuICAgIHZhciBjb250ZXh0RHluYW1pYyA9IGFyZ3MuY29udGV4dERlcDtcblxuICAgIHZhciBCQVRDSF9JRCA9IHNjb3BlLmRlZigpO1xuICAgIHZhciBQUk9QX0xJU1QgPSAnYTAnO1xuICAgIHZhciBOVU1fUFJPUFMgPSAnYTEnO1xuICAgIHZhciBQUk9QUyA9IHNjb3BlLmRlZigpO1xuICAgIGVudi5zaGFyZWQucHJvcHMgPSBQUk9QUztcbiAgICBlbnYuYmF0Y2hJZCA9IEJBVENIX0lEO1xuXG4gICAgdmFyIG91dGVyID0gZW52LnNjb3BlKCk7XG4gICAgdmFyIGlubmVyID0gZW52LnNjb3BlKCk7XG5cbiAgICBzY29wZShcbiAgICAgIG91dGVyLmVudHJ5LFxuICAgICAgJ2ZvcignLCBCQVRDSF9JRCwgJz0wOycsIEJBVENIX0lELCAnPCcsIE5VTV9QUk9QUywgJzsrKycsIEJBVENIX0lELCAnKXsnLFxuICAgICAgUFJPUFMsICc9JywgUFJPUF9MSVNULCAnWycsIEJBVENIX0lELCAnXTsnLFxuICAgICAgaW5uZXIsXG4gICAgICAnfScsXG4gICAgICBvdXRlci5leGl0KTtcblxuICAgIGZ1bmN0aW9uIGlzSW5uZXJEZWZuIChkZWZuKSB7XG4gICAgICByZXR1cm4gKChkZWZuLmNvbnRleHREZXAgJiYgY29udGV4dER5bmFtaWMpIHx8IGRlZm4ucHJvcERlcClcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc091dGVyRGVmbiAoZGVmbikge1xuICAgICAgcmV0dXJuICFpc0lubmVyRGVmbihkZWZuKVxuICAgIH1cblxuICAgIGlmIChhcmdzLm5lZWRzQ29udGV4dCkge1xuICAgICAgZW1pdENvbnRleHQoZW52LCBpbm5lciwgYXJncy5jb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKGFyZ3MubmVlZHNGcmFtZWJ1ZmZlcikge1xuICAgICAgZW1pdFBvbGxGcmFtZWJ1ZmZlcihlbnYsIGlubmVyLCBhcmdzLmZyYW1lYnVmZmVyKTtcbiAgICB9XG4gICAgZW1pdFNldE9wdGlvbnMoZW52LCBpbm5lciwgYXJncy5zdGF0ZSwgaXNJbm5lckRlZm4pO1xuXG4gICAgaWYgKGFyZ3MucHJvZmlsZSAmJiBpc0lubmVyRGVmbihhcmdzLnByb2ZpbGUpKSB7XG4gICAgICBlbWl0UHJvZmlsZShlbnYsIGlubmVyLCBhcmdzLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgaWYgKCFwcm9ncmFtKSB7XG4gICAgICB2YXIgcHJvZ0NhY2hlID0gZW52Lmdsb2JhbC5kZWYoJ3t9Jyk7XG4gICAgICB2YXIgUFJPR1JBTSA9IGFyZ3Muc2hhZGVyLnByb2dWYXIuYXBwZW5kKGVudiwgaW5uZXIpO1xuICAgICAgdmFyIFBST0dfSUQgPSBpbm5lci5kZWYoUFJPR1JBTSwgJy5pZCcpO1xuICAgICAgdmFyIENBQ0hFRF9QUk9DID0gaW5uZXIuZGVmKHByb2dDYWNoZSwgJ1snLCBQUk9HX0lELCAnXScpO1xuICAgICAgaW5uZXIoXG4gICAgICAgIGVudi5zaGFyZWQuZ2wsICcudXNlUHJvZ3JhbSgnLCBQUk9HUkFNLCAnLnByb2dyYW0pOycsXG4gICAgICAgICdpZighJywgQ0FDSEVEX1BST0MsICcpeycsXG4gICAgICAgIENBQ0hFRF9QUk9DLCAnPScsIHByb2dDYWNoZSwgJ1snLCBQUk9HX0lELCAnXT0nLFxuICAgICAgICBlbnYubGluayhmdW5jdGlvbiAocHJvZ3JhbSkge1xuICAgICAgICAgIHJldHVybiBjcmVhdGVCb2R5KFxuICAgICAgICAgICAgZW1pdEJhdGNoRHluYW1pY1NoYWRlckJvZHksIGVudiwgYXJncywgcHJvZ3JhbSwgMilcbiAgICAgICAgfSksICcoJywgUFJPR1JBTSwgJyk7fScsXG4gICAgICAgIENBQ0hFRF9QUk9DLCAnLmNhbGwodGhpcyxhMFsnLCBCQVRDSF9JRCwgJ10sJywgQkFUQ0hfSUQsICcpOycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbWl0QXR0cmlidXRlcyhlbnYsIG91dGVyLCBhcmdzLCBwcm9ncmFtLmF0dHJpYnV0ZXMsIGlzT3V0ZXJEZWZuKTtcbiAgICAgIGVtaXRBdHRyaWJ1dGVzKGVudiwgaW5uZXIsIGFyZ3MsIHByb2dyYW0uYXR0cmlidXRlcywgaXNJbm5lckRlZm4pO1xuICAgICAgZW1pdFVuaWZvcm1zKGVudiwgb3V0ZXIsIGFyZ3MsIHByb2dyYW0udW5pZm9ybXMsIGlzT3V0ZXJEZWZuKTtcbiAgICAgIGVtaXRVbmlmb3JtcyhlbnYsIGlubmVyLCBhcmdzLCBwcm9ncmFtLnVuaWZvcm1zLCBpc0lubmVyRGVmbik7XG4gICAgICBlbWl0RHJhdyhlbnYsIG91dGVyLCBpbm5lciwgYXJncyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZW1pdEJhdGNoUHJvYyAoZW52LCBhcmdzKSB7XG4gICAgdmFyIGJhdGNoID0gZW52LnByb2MoJ2JhdGNoJywgMik7XG4gICAgZW52LmJhdGNoSWQgPSAnMCc7XG5cbiAgICBpbmplY3RFeHRlbnNpb25zKGVudiwgYmF0Y2gpO1xuXG4gICAgLy8gQ2hlY2sgaWYgYW55IGNvbnRleHQgdmFyaWFibGVzIGRlcGVuZCBvbiBwcm9wc1xuICAgIHZhciBjb250ZXh0RHluYW1pYyA9IGZhbHNlO1xuICAgIHZhciBuZWVkc0NvbnRleHQgPSB0cnVlO1xuICAgIE9iamVjdC5rZXlzKGFyZ3MuY29udGV4dCkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgY29udGV4dER5bmFtaWMgPSBjb250ZXh0RHluYW1pYyB8fCBhcmdzLmNvbnRleHRbbmFtZV0ucHJvcERlcDtcbiAgICB9KTtcbiAgICBpZiAoIWNvbnRleHREeW5hbWljKSB7XG4gICAgICBlbWl0Q29udGV4dChlbnYsIGJhdGNoLCBhcmdzLmNvbnRleHQpO1xuICAgICAgbmVlZHNDb250ZXh0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gZnJhbWVidWZmZXIgc3RhdGUgYWZmZWN0cyBmcmFtZWJ1ZmZlcldpZHRoL2hlaWdodCBjb250ZXh0IHZhcnNcbiAgICB2YXIgZnJhbWVidWZmZXIgPSBhcmdzLmZyYW1lYnVmZmVyO1xuICAgIHZhciBuZWVkc0ZyYW1lYnVmZmVyID0gZmFsc2U7XG4gICAgaWYgKGZyYW1lYnVmZmVyKSB7XG4gICAgICBpZiAoZnJhbWVidWZmZXIucHJvcERlcCkge1xuICAgICAgICBjb250ZXh0RHluYW1pYyA9IG5lZWRzRnJhbWVidWZmZXIgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChmcmFtZWJ1ZmZlci5jb250ZXh0RGVwICYmIGNvbnRleHREeW5hbWljKSB7XG4gICAgICAgIG5lZWRzRnJhbWVidWZmZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFuZWVkc0ZyYW1lYnVmZmVyKSB7XG4gICAgICAgIGVtaXRQb2xsRnJhbWVidWZmZXIoZW52LCBiYXRjaCwgZnJhbWVidWZmZXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbWl0UG9sbEZyYW1lYnVmZmVyKGVudiwgYmF0Y2gsIG51bGwpO1xuICAgIH1cblxuICAgIC8vIHZpZXdwb3J0IGlzIHdlaXJkIGJlY2F1c2UgaXQgY2FuIGFmZmVjdCBjb250ZXh0IHZhcnNcbiAgICBpZiAoYXJncy5zdGF0ZS52aWV3cG9ydCAmJiBhcmdzLnN0YXRlLnZpZXdwb3J0LnByb3BEZXApIHtcbiAgICAgIGNvbnRleHREeW5hbWljID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0lubmVyRGVmbiAoZGVmbikge1xuICAgICAgcmV0dXJuIChkZWZuLmNvbnRleHREZXAgJiYgY29udGV4dER5bmFtaWMpIHx8IGRlZm4ucHJvcERlcFxuICAgIH1cblxuICAgIC8vIHNldCB3ZWJnbCBvcHRpb25zXG4gICAgZW1pdFBvbGxTdGF0ZShlbnYsIGJhdGNoLCBhcmdzKTtcbiAgICBlbWl0U2V0T3B0aW9ucyhlbnYsIGJhdGNoLCBhcmdzLnN0YXRlLCBmdW5jdGlvbiAoZGVmbikge1xuICAgICAgcmV0dXJuICFpc0lubmVyRGVmbihkZWZuKVxuICAgIH0pO1xuXG4gICAgaWYgKCFhcmdzLnByb2ZpbGUgfHwgIWlzSW5uZXJEZWZuKGFyZ3MucHJvZmlsZSkpIHtcbiAgICAgIGVtaXRQcm9maWxlKGVudiwgYmF0Y2gsIGFyZ3MsIGZhbHNlLCAnYTEnKTtcbiAgICB9XG5cbiAgICAvLyBTYXZlIHRoZXNlIHZhbHVlcyB0byBhcmdzIHNvIHRoYXQgdGhlIGJhdGNoIGJvZHkgcm91dGluZSBjYW4gdXNlIHRoZW1cbiAgICBhcmdzLmNvbnRleHREZXAgPSBjb250ZXh0RHluYW1pYztcbiAgICBhcmdzLm5lZWRzQ29udGV4dCA9IG5lZWRzQ29udGV4dDtcbiAgICBhcmdzLm5lZWRzRnJhbWVidWZmZXIgPSBuZWVkc0ZyYW1lYnVmZmVyO1xuXG4gICAgLy8gZGV0ZXJtaW5lIGlmIHNoYWRlciBpcyBkeW5hbWljXG4gICAgdmFyIHByb2dEZWZuID0gYXJncy5zaGFkZXIucHJvZ1ZhcjtcbiAgICBpZiAoKHByb2dEZWZuLmNvbnRleHREZXAgJiYgY29udGV4dER5bmFtaWMpIHx8IHByb2dEZWZuLnByb3BEZXApIHtcbiAgICAgIGVtaXRCYXRjaEJvZHkoXG4gICAgICAgIGVudixcbiAgICAgICAgYmF0Y2gsXG4gICAgICAgIGFyZ3MsXG4gICAgICAgIG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgUFJPR1JBTSA9IHByb2dEZWZuLmFwcGVuZChlbnYsIGJhdGNoKTtcbiAgICAgIGJhdGNoKGVudi5zaGFyZWQuZ2wsICcudXNlUHJvZ3JhbSgnLCBQUk9HUkFNLCAnLnByb2dyYW0pOycpO1xuICAgICAgaWYgKGFyZ3Muc2hhZGVyLnByb2dyYW0pIHtcbiAgICAgICAgZW1pdEJhdGNoQm9keShcbiAgICAgICAgICBlbnYsXG4gICAgICAgICAgYmF0Y2gsXG4gICAgICAgICAgYXJncyxcbiAgICAgICAgICBhcmdzLnNoYWRlci5wcm9ncmFtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBiYXRjaENhY2hlID0gZW52Lmdsb2JhbC5kZWYoJ3t9Jyk7XG4gICAgICAgIHZhciBQUk9HX0lEID0gYmF0Y2guZGVmKFBST0dSQU0sICcuaWQnKTtcbiAgICAgICAgdmFyIENBQ0hFRF9QUk9DID0gYmF0Y2guZGVmKGJhdGNoQ2FjaGUsICdbJywgUFJPR19JRCwgJ10nKTtcbiAgICAgICAgYmF0Y2goXG4gICAgICAgICAgZW52LmNvbmQoQ0FDSEVEX1BST0MpXG4gICAgICAgICAgICAudGhlbihDQUNIRURfUFJPQywgJy5jYWxsKHRoaXMsYTAsYTEpOycpXG4gICAgICAgICAgICAuZWxzZShcbiAgICAgICAgICAgICAgQ0FDSEVEX1BST0MsICc9JywgYmF0Y2hDYWNoZSwgJ1snLCBQUk9HX0lELCAnXT0nLFxuICAgICAgICAgICAgICBlbnYubGluayhmdW5jdGlvbiAocHJvZ3JhbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVCb2R5KGVtaXRCYXRjaEJvZHksIGVudiwgYXJncywgcHJvZ3JhbSwgMilcbiAgICAgICAgICAgICAgfSksICcoJywgUFJPR1JBTSwgJyk7JyxcbiAgICAgICAgICAgICAgQ0FDSEVEX1BST0MsICcuY2FsbCh0aGlzLGEwLGExKTsnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKGFyZ3Muc3RhdGUpLmxlbmd0aCA+IDApIHtcbiAgICAgIGJhdGNoKGVudi5zaGFyZWQuY3VycmVudCwgJy5kaXJ0eT10cnVlOycpO1xuICAgIH1cbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gU0NPUEUgQ09NTUFORFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIGZ1bmN0aW9uIGVtaXRTY29wZVByb2MgKGVudiwgYXJncykge1xuICAgIHZhciBzY29wZSA9IGVudi5wcm9jKCdzY29wZScsIDMpO1xuICAgIGVudi5iYXRjaElkID0gJ2EyJztcblxuICAgIHZhciBzaGFyZWQgPSBlbnYuc2hhcmVkO1xuICAgIHZhciBDVVJSRU5UX1NUQVRFID0gc2hhcmVkLmN1cnJlbnQ7XG5cbiAgICBlbWl0Q29udGV4dChlbnYsIHNjb3BlLCBhcmdzLmNvbnRleHQpO1xuXG4gICAgaWYgKGFyZ3MuZnJhbWVidWZmZXIpIHtcbiAgICAgIGFyZ3MuZnJhbWVidWZmZXIuYXBwZW5kKGVudiwgc2NvcGUpO1xuICAgIH1cblxuICAgIHNvcnRTdGF0ZShPYmplY3Qua2V5cyhhcmdzLnN0YXRlKSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIGRlZm4gPSBhcmdzLnN0YXRlW25hbWVdO1xuICAgICAgdmFyIHZhbHVlID0gZGVmbi5hcHBlbmQoZW52LCBzY29wZSk7XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHYsIGkpIHtcbiAgICAgICAgICBzY29wZS5zZXQoZW52Lm5leHRbbmFtZV0sICdbJyArIGkgKyAnXScsIHYpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjb3BlLnNldChzaGFyZWQubmV4dCwgJy4nICsgbmFtZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZW1pdFByb2ZpbGUoZW52LCBzY29wZSwgYXJncywgdHJ1ZSwgdHJ1ZSlcblxuICAgIDtbU19FTEVNRU5UUywgU19PRkZTRVQsIFNfQ09VTlQsIFNfSU5TVEFOQ0VTLCBTX1BSSU1JVElWRV0uZm9yRWFjaChcbiAgICAgIGZ1bmN0aW9uIChvcHQpIHtcbiAgICAgICAgdmFyIHZhcmlhYmxlID0gYXJncy5kcmF3W29wdF07XG4gICAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBzY29wZS5zZXQoc2hhcmVkLmRyYXcsICcuJyArIG9wdCwgJycgKyB2YXJpYWJsZS5hcHBlbmQoZW52LCBzY29wZSkpO1xuICAgICAgfSk7XG5cbiAgICBPYmplY3Qua2V5cyhhcmdzLnVuaWZvcm1zKS5mb3JFYWNoKGZ1bmN0aW9uIChvcHQpIHtcbiAgICAgIHNjb3BlLnNldChcbiAgICAgICAgc2hhcmVkLnVuaWZvcm1zLFxuICAgICAgICAnWycgKyBzdHJpbmdTdG9yZS5pZChvcHQpICsgJ10nLFxuICAgICAgICBhcmdzLnVuaWZvcm1zW29wdF0uYXBwZW5kKGVudiwgc2NvcGUpKTtcbiAgICB9KTtcblxuICAgIE9iamVjdC5rZXlzKGFyZ3MuYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHJlY29yZCA9IGFyZ3MuYXR0cmlidXRlc1tuYW1lXS5hcHBlbmQoZW52LCBzY29wZSk7XG4gICAgICB2YXIgc2NvcGVBdHRyaWIgPSBlbnYuc2NvcGVBdHRyaWIobmFtZSk7XG4gICAgICBPYmplY3Qua2V5cyhuZXcgQXR0cmlidXRlUmVjb3JkKCkpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgc2NvcGUuc2V0KHNjb3BlQXR0cmliLCAnLicgKyBwcm9wLCByZWNvcmRbcHJvcF0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBzYXZlU2hhZGVyIChuYW1lKSB7XG4gICAgICB2YXIgc2hhZGVyID0gYXJncy5zaGFkZXJbbmFtZV07XG4gICAgICBpZiAoc2hhZGVyKSB7XG4gICAgICAgIHNjb3BlLnNldChzaGFyZWQuc2hhZGVyLCAnLicgKyBuYW1lLCBzaGFkZXIuYXBwZW5kKGVudiwgc2NvcGUpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2F2ZVNoYWRlcihTX1ZFUlQpO1xuICAgIHNhdmVTaGFkZXIoU19GUkFHKTtcblxuICAgIGlmIChPYmplY3Qua2V5cyhhcmdzLnN0YXRlKS5sZW5ndGggPiAwKSB7XG4gICAgICBzY29wZShDVVJSRU5UX1NUQVRFLCAnLmRpcnR5PXRydWU7Jyk7XG4gICAgICBzY29wZS5leGl0KENVUlJFTlRfU1RBVEUsICcuZGlydHk9dHJ1ZTsnKTtcbiAgICB9XG5cbiAgICBzY29wZSgnYTEoJywgZW52LnNoYXJlZC5jb250ZXh0LCAnLGEwLCcsIGVudi5iYXRjaElkLCAnKTsnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRHluYW1pY09iamVjdCAob2JqZWN0KSB7XG4gICAgaWYgKHR5cGVvZiBvYmplY3QgIT09ICdvYmplY3QnIHx8IGlzQXJyYXlMaWtlKG9iamVjdCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgcHJvcHMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGlmIChkeW5hbWljLmlzRHluYW1pYyhvYmplY3RbcHJvcHNbaV1dKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHNwbGF0T2JqZWN0IChlbnYsIG9wdGlvbnMsIG5hbWUpIHtcbiAgICB2YXIgb2JqZWN0ID0gb3B0aW9ucy5zdGF0aWNbbmFtZV07XG4gICAgaWYgKCFvYmplY3QgfHwgIWlzRHluYW1pY09iamVjdChvYmplY3QpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgZ2xvYmFscyA9IGVudi5nbG9iYWw7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuICAgIHZhciB0aGlzRGVwID0gZmFsc2U7XG4gICAgdmFyIGNvbnRleHREZXAgPSBmYWxzZTtcbiAgICB2YXIgcHJvcERlcCA9IGZhbHNlO1xuICAgIHZhciBvYmplY3RSZWYgPSBlbnYuZ2xvYmFsLmRlZigne30nKTtcbiAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W2tleV07XG4gICAgICBpZiAoZHluYW1pYy5pc0R5bmFtaWModmFsdWUpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldID0gZHluYW1pYy51bmJveCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlcHMgPSBjcmVhdGVEeW5hbWljRGVjbCh2YWx1ZSwgbnVsbCk7XG4gICAgICAgIHRoaXNEZXAgPSB0aGlzRGVwIHx8IGRlcHMudGhpc0RlcDtcbiAgICAgICAgcHJvcERlcCA9IHByb3BEZXAgfHwgZGVwcy5wcm9wRGVwO1xuICAgICAgICBjb250ZXh0RGVwID0gY29udGV4dERlcCB8fCBkZXBzLmNvbnRleHREZXA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnbG9iYWxzKG9iamVjdFJlZiwgJy4nLCBrZXksICc9Jyk7XG4gICAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgIGdsb2JhbHModmFsdWUpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgZ2xvYmFscygnXCInLCB2YWx1ZSwgJ1wiJyk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgZ2xvYmFscygnWycsIHZhbHVlLmpvaW4oKSwgJ10nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGdsb2JhbHMoZW52LmxpbmsodmFsdWUpKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgZ2xvYmFscygnOycpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gYXBwZW5kQmxvY2sgKGVudiwgYmxvY2spIHtcbiAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgICBpZiAoIWR5bmFtaWMuaXNEeW5hbWljKHZhbHVlKSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHZhciByZWYgPSBlbnYuaW52b2tlKGJsb2NrLCB2YWx1ZSk7XG4gICAgICAgIGJsb2NrKG9iamVjdFJlZiwgJy4nLCBrZXksICc9JywgcmVmLCAnOycpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgb3B0aW9ucy5keW5hbWljW25hbWVdID0gbmV3IGR5bmFtaWMuRHluYW1pY1ZhcmlhYmxlKERZTl9USFVOSywge1xuICAgICAgdGhpc0RlcDogdGhpc0RlcCxcbiAgICAgIGNvbnRleHREZXA6IGNvbnRleHREZXAsXG4gICAgICBwcm9wRGVwOiBwcm9wRGVwLFxuICAgICAgcmVmOiBvYmplY3RSZWYsXG4gICAgICBhcHBlbmQ6IGFwcGVuZEJsb2NrXG4gICAgfSk7XG4gICAgZGVsZXRlIG9wdGlvbnMuc3RhdGljW25hbWVdO1xuICB9XG5cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBNQUlOIERSQVcgQ09NTUFORFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIGZ1bmN0aW9uIGNvbXBpbGVDb21tYW5kIChvcHRpb25zLCBhdHRyaWJ1dGVzLCB1bmlmb3JtcywgY29udGV4dCwgc3RhdHMpIHtcbiAgICB2YXIgZW52ID0gY3JlYXRlUkVHTEVudmlyb25tZW50KCk7XG5cbiAgICAvLyBsaW5rIHN0YXRzLCBzbyB0aGF0IHdlIGNhbiBlYXNpbHkgYWNjZXNzIGl0IGluIHRoZSBwcm9ncmFtLlxuICAgIGVudi5zdGF0cyA9IGVudi5saW5rKHN0YXRzKTtcblxuICAgIC8vIHNwbGF0IG9wdGlvbnMgYW5kIGF0dHJpYnV0ZXMgdG8gYWxsb3cgZm9yIGR5bmFtaWMgbmVzdGVkIHByb3BlcnRpZXNcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzLnN0YXRpYykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBzcGxhdE9iamVjdChlbnYsIGF0dHJpYnV0ZXMsIGtleSk7XG4gICAgfSk7XG4gICAgTkVTVEVEX09QVElPTlMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgc3BsYXRPYmplY3QoZW52LCBvcHRpb25zLCBuYW1lKTtcbiAgICB9KTtcblxuICAgIHZhciBhcmdzID0gcGFyc2VBcmd1bWVudHMob3B0aW9ucywgYXR0cmlidXRlcywgdW5pZm9ybXMsIGNvbnRleHQsIGVudik7XG5cbiAgICBlbWl0RHJhd1Byb2MoZW52LCBhcmdzKTtcbiAgICBlbWl0U2NvcGVQcm9jKGVudiwgYXJncyk7XG4gICAgZW1pdEJhdGNoUHJvYyhlbnYsIGFyZ3MpO1xuXG4gICAgcmV0dXJuIGVudi5jb21waWxlKClcbiAgfVxuXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgLy8gUE9MTCAvIFJFRlJFU0hcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICByZXR1cm4ge1xuICAgIG5leHQ6IG5leHRTdGF0ZSxcbiAgICBjdXJyZW50OiBjdXJyZW50U3RhdGUsXG4gICAgcHJvY3M6IChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZW52ID0gY3JlYXRlUkVHTEVudmlyb25tZW50KCk7XG4gICAgICB2YXIgcG9sbCA9IGVudi5wcm9jKCdwb2xsJyk7XG4gICAgICB2YXIgcmVmcmVzaCA9IGVudi5wcm9jKCdyZWZyZXNoJyk7XG4gICAgICB2YXIgY29tbW9uID0gZW52LmJsb2NrKCk7XG4gICAgICBwb2xsKGNvbW1vbik7XG4gICAgICByZWZyZXNoKGNvbW1vbik7XG5cbiAgICAgIHZhciBzaGFyZWQgPSBlbnYuc2hhcmVkO1xuICAgICAgdmFyIEdMID0gc2hhcmVkLmdsO1xuICAgICAgdmFyIE5FWFRfU1RBVEUgPSBzaGFyZWQubmV4dDtcbiAgICAgIHZhciBDVVJSRU5UX1NUQVRFID0gc2hhcmVkLmN1cnJlbnQ7XG5cbiAgICAgIGNvbW1vbihDVVJSRU5UX1NUQVRFLCAnLmRpcnR5PWZhbHNlOycpO1xuXG4gICAgICBlbWl0UG9sbEZyYW1lYnVmZmVyKGVudiwgcG9sbCk7XG4gICAgICBlbWl0UG9sbEZyYW1lYnVmZmVyKGVudiwgcmVmcmVzaCwgbnVsbCwgdHJ1ZSk7XG5cbiAgICAgIC8vIFJlZnJlc2ggdXBkYXRlcyBhbGwgYXR0cmlidXRlIHN0YXRlIGNoYW5nZXNcbiAgICAgIHZhciBJTlNUQU5DSU5HO1xuICAgICAgaWYgKGV4dEluc3RhbmNpbmcpIHtcbiAgICAgICAgSU5TVEFOQ0lORyA9IGVudi5saW5rKGV4dEluc3RhbmNpbmcpO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW1pdHMubWF4QXR0cmlidXRlczsgKytpKSB7XG4gICAgICAgIHZhciBCSU5ESU5HID0gcmVmcmVzaC5kZWYoc2hhcmVkLmF0dHJpYnV0ZXMsICdbJywgaSwgJ10nKTtcbiAgICAgICAgdmFyIGlmdGUgPSBlbnYuY29uZChCSU5ESU5HLCAnLmJ1ZmZlcicpO1xuICAgICAgICBpZnRlLnRoZW4oXG4gICAgICAgICAgR0wsICcuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoJywgaSwgJyk7JyxcbiAgICAgICAgICBHTCwgJy5iaW5kQnVmZmVyKCcsXG4gICAgICAgICAgICBHTF9BUlJBWV9CVUZGRVIkMSwgJywnLFxuICAgICAgICAgICAgQklORElORywgJy5idWZmZXIuYnVmZmVyKTsnLFxuICAgICAgICAgIEdMLCAnLnZlcnRleEF0dHJpYlBvaW50ZXIoJyxcbiAgICAgICAgICAgIGksICcsJyxcbiAgICAgICAgICAgIEJJTkRJTkcsICcuc2l6ZSwnLFxuICAgICAgICAgICAgQklORElORywgJy50eXBlLCcsXG4gICAgICAgICAgICBCSU5ESU5HLCAnLm5vcm1hbGl6ZWQsJyxcbiAgICAgICAgICAgIEJJTkRJTkcsICcuc3RyaWRlLCcsXG4gICAgICAgICAgICBCSU5ESU5HLCAnLm9mZnNldCk7J1xuICAgICAgICApLmVsc2UoXG4gICAgICAgICAgR0wsICcuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KCcsIGksICcpOycsXG4gICAgICAgICAgR0wsICcudmVydGV4QXR0cmliNGYoJyxcbiAgICAgICAgICAgIGksICcsJyxcbiAgICAgICAgICAgIEJJTkRJTkcsICcueCwnLFxuICAgICAgICAgICAgQklORElORywgJy55LCcsXG4gICAgICAgICAgICBCSU5ESU5HLCAnLnosJyxcbiAgICAgICAgICAgIEJJTkRJTkcsICcudyk7JyxcbiAgICAgICAgICBCSU5ESU5HLCAnLmJ1ZmZlcj1udWxsOycpO1xuICAgICAgICByZWZyZXNoKGlmdGUpO1xuICAgICAgICBpZiAoZXh0SW5zdGFuY2luZykge1xuICAgICAgICAgIHJlZnJlc2goXG4gICAgICAgICAgICBJTlNUQU5DSU5HLCAnLnZlcnRleEF0dHJpYkRpdmlzb3JBTkdMRSgnLFxuICAgICAgICAgICAgaSwgJywnLFxuICAgICAgICAgICAgQklORElORywgJy5kaXZpc29yKTsnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBPYmplY3Qua2V5cyhHTF9GTEFHUykuZm9yRWFjaChmdW5jdGlvbiAoZmxhZykge1xuICAgICAgICB2YXIgY2FwID0gR0xfRkxBR1NbZmxhZ107XG4gICAgICAgIHZhciBORVhUID0gY29tbW9uLmRlZihORVhUX1NUQVRFLCAnLicsIGZsYWcpO1xuICAgICAgICB2YXIgYmxvY2sgPSBlbnYuYmxvY2soKTtcbiAgICAgICAgYmxvY2soJ2lmKCcsIE5FWFQsICcpeycsXG4gICAgICAgICAgR0wsICcuZW5hYmxlKCcsIGNhcCwgJyl9ZWxzZXsnLFxuICAgICAgICAgIEdMLCAnLmRpc2FibGUoJywgY2FwLCAnKX0nLFxuICAgICAgICAgIENVUlJFTlRfU1RBVEUsICcuJywgZmxhZywgJz0nLCBORVhULCAnOycpO1xuICAgICAgICByZWZyZXNoKGJsb2NrKTtcbiAgICAgICAgcG9sbChcbiAgICAgICAgICAnaWYoJywgTkVYVCwgJyE9PScsIENVUlJFTlRfU1RBVEUsICcuJywgZmxhZywgJyl7JyxcbiAgICAgICAgICBibG9jayxcbiAgICAgICAgICAnfScpO1xuICAgICAgfSk7XG5cbiAgICAgIE9iamVjdC5rZXlzKEdMX1ZBUklBQkxFUykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICB2YXIgZnVuYyA9IEdMX1ZBUklBQkxFU1tuYW1lXTtcbiAgICAgICAgdmFyIGluaXQgPSBjdXJyZW50U3RhdGVbbmFtZV07XG4gICAgICAgIHZhciBORVhULCBDVVJSRU5UO1xuICAgICAgICB2YXIgYmxvY2sgPSBlbnYuYmxvY2soKTtcbiAgICAgICAgYmxvY2soR0wsICcuJywgZnVuYywgJygnKTtcbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGluaXQpKSB7XG4gICAgICAgICAgdmFyIG4gPSBpbml0Lmxlbmd0aDtcbiAgICAgICAgICBORVhUID0gZW52Lmdsb2JhbC5kZWYoTkVYVF9TVEFURSwgJy4nLCBuYW1lKTtcbiAgICAgICAgICBDVVJSRU5UID0gZW52Lmdsb2JhbC5kZWYoQ1VSUkVOVF9TVEFURSwgJy4nLCBuYW1lKTtcbiAgICAgICAgICBibG9jayhcbiAgICAgICAgICAgIGxvb3AobiwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIE5FWFQgKyAnWycgKyBpICsgJ10nXG4gICAgICAgICAgICB9KSwgJyk7JyxcbiAgICAgICAgICAgIGxvb3AobiwgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIENVUlJFTlQgKyAnWycgKyBpICsgJ109JyArIE5FWFQgKyAnWycgKyBpICsgJ107J1xuICAgICAgICAgICAgfSkuam9pbignJykpO1xuICAgICAgICAgIHBvbGwoXG4gICAgICAgICAgICAnaWYoJywgbG9vcChuLCBmdW5jdGlvbiAoaSkge1xuICAgICAgICAgICAgICByZXR1cm4gTkVYVCArICdbJyArIGkgKyAnXSE9PScgKyBDVVJSRU5UICsgJ1snICsgaSArICddJ1xuICAgICAgICAgICAgfSkuam9pbignfHwnKSwgJyl7JyxcbiAgICAgICAgICAgIGJsb2NrLFxuICAgICAgICAgICAgJ30nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBORVhUID0gY29tbW9uLmRlZihORVhUX1NUQVRFLCAnLicsIG5hbWUpO1xuICAgICAgICAgIENVUlJFTlQgPSBjb21tb24uZGVmKENVUlJFTlRfU1RBVEUsICcuJywgbmFtZSk7XG4gICAgICAgICAgYmxvY2soXG4gICAgICAgICAgICBORVhULCAnKTsnLFxuICAgICAgICAgICAgQ1VSUkVOVF9TVEFURSwgJy4nLCBuYW1lLCAnPScsIE5FWFQsICc7Jyk7XG4gICAgICAgICAgcG9sbChcbiAgICAgICAgICAgICdpZignLCBORVhULCAnIT09JywgQ1VSUkVOVCwgJyl7JyxcbiAgICAgICAgICAgIGJsb2NrLFxuICAgICAgICAgICAgJ30nKTtcbiAgICAgICAgfVxuICAgICAgICByZWZyZXNoKGJsb2NrKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZW52LmNvbXBpbGUoKVxuICAgIH0pKCksXG4gICAgY29tcGlsZTogY29tcGlsZUNvbW1hbmRcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGF0cyAoKSB7XG4gIHJldHVybiB7XG4gICAgYnVmZmVyQ291bnQ6IDAsXG4gICAgZWxlbWVudHNDb3VudDogMCxcbiAgICBmcmFtZWJ1ZmZlckNvdW50OiAwLFxuICAgIHNoYWRlckNvdW50OiAwLFxuICAgIHRleHR1cmVDb3VudDogMCxcbiAgICBjdWJlQ291bnQ6IDAsXG4gICAgcmVuZGVyYnVmZmVyQ291bnQ6IDAsXG4gICAgbWF4VGV4dHVyZVVuaXRzOiAwXG4gIH1cbn1cblxudmFyIEdMX1FVRVJZX1JFU1VMVF9FWFQgPSAweDg4NjY7XG52YXIgR0xfUVVFUllfUkVTVUxUX0FWQUlMQUJMRV9FWFQgPSAweDg4Njc7XG52YXIgR0xfVElNRV9FTEFQU0VEX0VYVCA9IDB4ODhCRjtcblxudmFyIGNyZWF0ZVRpbWVyID0gZnVuY3Rpb24gKGdsLCBleHRlbnNpb25zKSB7XG4gIGlmICghZXh0ZW5zaW9ucy5leHRfZGlzam9pbnRfdGltZXJfcXVlcnkpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLy8gUVVFUlkgUE9PTCBCRUdJTlxuICB2YXIgcXVlcnlQb29sID0gW107XG4gIGZ1bmN0aW9uIGFsbG9jUXVlcnkgKCkge1xuICAgIHJldHVybiBxdWVyeVBvb2wucG9wKCkgfHwgZXh0ZW5zaW9ucy5leHRfZGlzam9pbnRfdGltZXJfcXVlcnkuY3JlYXRlUXVlcnlFWFQoKVxuICB9XG4gIGZ1bmN0aW9uIGZyZWVRdWVyeSAocXVlcnkpIHtcbiAgICBxdWVyeVBvb2wucHVzaChxdWVyeSk7XG4gIH1cbiAgLy8gUVVFUlkgUE9PTCBFTkRcblxuICB2YXIgcGVuZGluZ1F1ZXJpZXMgPSBbXTtcbiAgZnVuY3Rpb24gYmVnaW5RdWVyeSAoc3RhdHMpIHtcbiAgICB2YXIgcXVlcnkgPSBhbGxvY1F1ZXJ5KCk7XG4gICAgZXh0ZW5zaW9ucy5leHRfZGlzam9pbnRfdGltZXJfcXVlcnkuYmVnaW5RdWVyeUVYVChHTF9USU1FX0VMQVBTRURfRVhULCBxdWVyeSk7XG4gICAgcGVuZGluZ1F1ZXJpZXMucHVzaChxdWVyeSk7XG4gICAgcHVzaFNjb3BlU3RhdHMocGVuZGluZ1F1ZXJpZXMubGVuZ3RoIC0gMSwgcGVuZGluZ1F1ZXJpZXMubGVuZ3RoLCBzdGF0cyk7XG4gIH1cblxuICBmdW5jdGlvbiBlbmRRdWVyeSAoKSB7XG4gICAgZXh0ZW5zaW9ucy5leHRfZGlzam9pbnRfdGltZXJfcXVlcnkuZW5kUXVlcnlFWFQoR0xfVElNRV9FTEFQU0VEX0VYVCk7XG4gIH1cblxuICAvL1xuICAvLyBQZW5kaW5nIHN0YXRzIHBvb2wuXG4gIC8vXG4gIGZ1bmN0aW9uIFBlbmRpbmdTdGF0cyAoKSB7XG4gICAgdGhpcy5zdGFydFF1ZXJ5SW5kZXggPSAtMTtcbiAgICB0aGlzLmVuZFF1ZXJ5SW5kZXggPSAtMTtcbiAgICB0aGlzLnN1bSA9IDA7XG4gICAgdGhpcy5zdGF0cyA9IG51bGw7XG4gIH1cbiAgdmFyIHBlbmRpbmdTdGF0c1Bvb2wgPSBbXTtcbiAgZnVuY3Rpb24gYWxsb2NQZW5kaW5nU3RhdHMgKCkge1xuICAgIHJldHVybiBwZW5kaW5nU3RhdHNQb29sLnBvcCgpIHx8IG5ldyBQZW5kaW5nU3RhdHMoKVxuICB9XG4gIGZ1bmN0aW9uIGZyZWVQZW5kaW5nU3RhdHMgKHBlbmRpbmdTdGF0cykge1xuICAgIHBlbmRpbmdTdGF0c1Bvb2wucHVzaChwZW5kaW5nU3RhdHMpO1xuICB9XG4gIC8vIFBlbmRpbmcgc3RhdHMgcG9vbCBlbmRcblxuICB2YXIgcGVuZGluZ1N0YXRzID0gW107XG4gIGZ1bmN0aW9uIHB1c2hTY29wZVN0YXRzIChzdGFydCwgZW5kLCBzdGF0cykge1xuICAgIHZhciBwcyA9IGFsbG9jUGVuZGluZ1N0YXRzKCk7XG4gICAgcHMuc3RhcnRRdWVyeUluZGV4ID0gc3RhcnQ7XG4gICAgcHMuZW5kUXVlcnlJbmRleCA9IGVuZDtcbiAgICBwcy5zdW0gPSAwO1xuICAgIHBzLnN0YXRzID0gc3RhdHM7XG4gICAgcGVuZGluZ1N0YXRzLnB1c2gocHMpO1xuICB9XG5cbiAgLy8gd2Ugc2hvdWxkIGNhbGwgdGhpcyBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBmcmFtZSxcbiAgLy8gaW4gb3JkZXIgdG8gdXBkYXRlIGdwdVRpbWVcbiAgdmFyIHRpbWVTdW0gPSBbXTtcbiAgdmFyIHF1ZXJ5UHRyID0gW107XG4gIGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XG4gICAgdmFyIHB0ciwgaTtcblxuICAgIHZhciBuID0gcGVuZGluZ1F1ZXJpZXMubGVuZ3RoO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBSZXNlcnZlIHNwYWNlXG4gICAgcXVlcnlQdHIubGVuZ3RoID0gTWF0aC5tYXgocXVlcnlQdHIubGVuZ3RoLCBuICsgMSk7XG4gICAgdGltZVN1bS5sZW5ndGggPSBNYXRoLm1heCh0aW1lU3VtLmxlbmd0aCwgbiArIDEpO1xuICAgIHRpbWVTdW1bMF0gPSAwO1xuICAgIHF1ZXJ5UHRyWzBdID0gMDtcblxuICAgIC8vIFVwZGF0ZSBhbGwgcGVuZGluZyB0aW1lciBxdWVyaWVzXG4gICAgdmFyIHF1ZXJ5VGltZSA9IDA7XG4gICAgcHRyID0gMDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgcGVuZGluZ1F1ZXJpZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBxdWVyeSA9IHBlbmRpbmdRdWVyaWVzW2ldO1xuICAgICAgaWYgKGV4dGVuc2lvbnMuZXh0X2Rpc2pvaW50X3RpbWVyX3F1ZXJ5LmdldFF1ZXJ5T2JqZWN0RVhUKHF1ZXJ5LCBHTF9RVUVSWV9SRVNVTFRfQVZBSUxBQkxFX0VYVCkpIHtcbiAgICAgICAgcXVlcnlUaW1lICs9IGV4dGVuc2lvbnMuZXh0X2Rpc2pvaW50X3RpbWVyX3F1ZXJ5LmdldFF1ZXJ5T2JqZWN0RVhUKHF1ZXJ5LCBHTF9RVUVSWV9SRVNVTFRfRVhUKTtcbiAgICAgICAgZnJlZVF1ZXJ5KHF1ZXJ5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlbmRpbmdRdWVyaWVzW3B0cisrXSA9IHF1ZXJ5O1xuICAgICAgfVxuICAgICAgdGltZVN1bVtpICsgMV0gPSBxdWVyeVRpbWU7XG4gICAgICBxdWVyeVB0cltpICsgMV0gPSBwdHI7XG4gICAgfVxuICAgIHBlbmRpbmdRdWVyaWVzLmxlbmd0aCA9IHB0cjtcblxuICAgIC8vIFVwZGF0ZSBhbGwgcGVuZGluZyBzdGF0IHF1ZXJpZXNcbiAgICBwdHIgPSAwO1xuICAgIGZvciAoaSA9IDA7IGkgPCBwZW5kaW5nU3RhdHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBzdGF0cyA9IHBlbmRpbmdTdGF0c1tpXTtcbiAgICAgIHZhciBzdGFydCA9IHN0YXRzLnN0YXJ0UXVlcnlJbmRleDtcbiAgICAgIHZhciBlbmQgPSBzdGF0cy5lbmRRdWVyeUluZGV4O1xuICAgICAgc3RhdHMuc3VtICs9IHRpbWVTdW1bZW5kXSAtIHRpbWVTdW1bc3RhcnRdO1xuICAgICAgdmFyIHN0YXJ0UHRyID0gcXVlcnlQdHJbc3RhcnRdO1xuICAgICAgdmFyIGVuZFB0ciA9IHF1ZXJ5UHRyW2VuZF07XG4gICAgICBpZiAoZW5kUHRyID09PSBzdGFydFB0cikge1xuICAgICAgICBzdGF0cy5zdGF0cy5ncHVUaW1lICs9IHN0YXRzLnN1bSAvIDFlNjtcbiAgICAgICAgZnJlZVBlbmRpbmdTdGF0cyhzdGF0cyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0cy5zdGFydFF1ZXJ5SW5kZXggPSBzdGFydFB0cjtcbiAgICAgICAgc3RhdHMuZW5kUXVlcnlJbmRleCA9IGVuZFB0cjtcbiAgICAgICAgcGVuZGluZ1N0YXRzW3B0cisrXSA9IHN0YXRzO1xuICAgICAgfVxuICAgIH1cbiAgICBwZW5kaW5nU3RhdHMubGVuZ3RoID0gcHRyO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBiZWdpblF1ZXJ5OiBiZWdpblF1ZXJ5LFxuICAgIGVuZFF1ZXJ5OiBlbmRRdWVyeSxcbiAgICBwdXNoU2NvcGVTdGF0czogcHVzaFNjb3BlU3RhdHMsXG4gICAgdXBkYXRlOiB1cGRhdGUsXG4gICAgZ2V0TnVtUGVuZGluZ1F1ZXJpZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBwZW5kaW5nUXVlcmllcy5sZW5ndGhcbiAgICB9LFxuICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XG4gICAgICBxdWVyeVBvb2wucHVzaC5hcHBseShxdWVyeVBvb2wsIHBlbmRpbmdRdWVyaWVzKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVlcnlQb29sLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGV4dGVuc2lvbnMuZXh0X2Rpc2pvaW50X3RpbWVyX3F1ZXJ5LmRlbGV0ZVF1ZXJ5RVhUKHF1ZXJ5UG9vbFtpXSk7XG4gICAgICB9XG4gICAgICBwZW5kaW5nUXVlcmllcy5sZW5ndGggPSAwO1xuICAgICAgcXVlcnlQb29sLmxlbmd0aCA9IDA7XG4gICAgfSxcbiAgICByZXN0b3JlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBwZW5kaW5nUXVlcmllcy5sZW5ndGggPSAwO1xuICAgICAgcXVlcnlQb29sLmxlbmd0aCA9IDA7XG4gICAgfVxuICB9XG59O1xuXG52YXIgR0xfQ09MT1JfQlVGRkVSX0JJVCA9IDE2Mzg0O1xudmFyIEdMX0RFUFRIX0JVRkZFUl9CSVQgPSAyNTY7XG52YXIgR0xfU1RFTkNJTF9CVUZGRVJfQklUID0gMTAyNDtcblxudmFyIEdMX0FSUkFZX0JVRkZFUiA9IDM0OTYyO1xuXG52YXIgQ09OVEVYVF9MT1NUX0VWRU5UID0gJ3dlYmdsY29udGV4dGxvc3QnO1xudmFyIENPTlRFWFRfUkVTVE9SRURfRVZFTlQgPSAnd2ViZ2xjb250ZXh0cmVzdG9yZWQnO1xuXG52YXIgRFlOX1BST1AgPSAxO1xudmFyIERZTl9DT05URVhUID0gMjtcbnZhciBEWU5fU1RBVEUgPSAzO1xuXG5mdW5jdGlvbiBmaW5kIChoYXlzdGFjaywgbmVlZGxlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaGF5c3RhY2subGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoaGF5c3RhY2tbaV0gPT09IG5lZWRsZSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbmZ1bmN0aW9uIHdyYXBSRUdMIChhcmdzKSB7XG4gIHZhciBjb25maWcgPSBwYXJzZUFyZ3MoYXJncyk7XG4gIGlmICghY29uZmlnKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIHZhciBnbCA9IGNvbmZpZy5nbDtcbiAgdmFyIGdsQXR0cmlidXRlcyA9IGdsLmdldENvbnRleHRBdHRyaWJ1dGVzKCk7XG4gIHZhciBjb250ZXh0TG9zdCA9IGdsLmlzQ29udGV4dExvc3QoKTtcblxuICB2YXIgZXh0ZW5zaW9uU3RhdGUgPSBjcmVhdGVFeHRlbnNpb25DYWNoZShnbCwgY29uZmlnKTtcbiAgaWYgKCFleHRlbnNpb25TdGF0ZSkge1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICB2YXIgc3RyaW5nU3RvcmUgPSBjcmVhdGVTdHJpbmdTdG9yZSgpO1xuICB2YXIgc3RhdHMkJDEgPSBzdGF0cygpO1xuICB2YXIgZXh0ZW5zaW9ucyA9IGV4dGVuc2lvblN0YXRlLmV4dGVuc2lvbnM7XG4gIHZhciB0aW1lciA9IGNyZWF0ZVRpbWVyKGdsLCBleHRlbnNpb25zKTtcblxuICB2YXIgU1RBUlRfVElNRSA9IGNsb2NrKCk7XG4gIHZhciBXSURUSCA9IGdsLmRyYXdpbmdCdWZmZXJXaWR0aDtcbiAgdmFyIEhFSUdIVCA9IGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQ7XG5cbiAgdmFyIGNvbnRleHRTdGF0ZSA9IHtcbiAgICB0aWNrOiAwLFxuICAgIHRpbWU6IDAsXG4gICAgdmlld3BvcnRXaWR0aDogV0lEVEgsXG4gICAgdmlld3BvcnRIZWlnaHQ6IEhFSUdIVCxcbiAgICBmcmFtZWJ1ZmZlcldpZHRoOiBXSURUSCxcbiAgICBmcmFtZWJ1ZmZlckhlaWdodDogSEVJR0hULFxuICAgIGRyYXdpbmdCdWZmZXJXaWR0aDogV0lEVEgsXG4gICAgZHJhd2luZ0J1ZmZlckhlaWdodDogSEVJR0hULFxuICAgIHBpeGVsUmF0aW86IGNvbmZpZy5waXhlbFJhdGlvXG4gIH07XG4gIHZhciB1bmlmb3JtU3RhdGUgPSB7fTtcbiAgdmFyIGRyYXdTdGF0ZSA9IHtcbiAgICBlbGVtZW50czogbnVsbCxcbiAgICBwcmltaXRpdmU6IDQsIC8vIEdMX1RSSUFOR0xFU1xuICAgIGNvdW50OiAtMSxcbiAgICBvZmZzZXQ6IDAsXG4gICAgaW5zdGFuY2VzOiAtMVxuICB9O1xuXG4gIHZhciBsaW1pdHMgPSB3cmFwTGltaXRzKGdsLCBleHRlbnNpb25zKTtcbiAgdmFyIGF0dHJpYnV0ZVN0YXRlID0gd3JhcEF0dHJpYnV0ZVN0YXRlKFxuICAgIGdsLFxuICAgIGV4dGVuc2lvbnMsXG4gICAgbGltaXRzLFxuICAgIHN0cmluZ1N0b3JlKTtcbiAgdmFyIGJ1ZmZlclN0YXRlID0gd3JhcEJ1ZmZlclN0YXRlKFxuICAgIGdsLFxuICAgIHN0YXRzJCQxLFxuICAgIGNvbmZpZyxcbiAgICBhdHRyaWJ1dGVTdGF0ZSk7XG4gIHZhciBlbGVtZW50U3RhdGUgPSB3cmFwRWxlbWVudHNTdGF0ZShnbCwgZXh0ZW5zaW9ucywgYnVmZmVyU3RhdGUsIHN0YXRzJCQxKTtcbiAgdmFyIHNoYWRlclN0YXRlID0gd3JhcFNoYWRlclN0YXRlKGdsLCBzdHJpbmdTdG9yZSwgc3RhdHMkJDEsIGNvbmZpZyk7XG4gIHZhciB0ZXh0dXJlU3RhdGUgPSBjcmVhdGVUZXh0dXJlU2V0KFxuICAgIGdsLFxuICAgIGV4dGVuc2lvbnMsXG4gICAgbGltaXRzLFxuICAgIGZ1bmN0aW9uICgpIHsgY29yZS5wcm9jcy5wb2xsKCk7IH0sXG4gICAgY29udGV4dFN0YXRlLFxuICAgIHN0YXRzJCQxLFxuICAgIGNvbmZpZyk7XG4gIHZhciByZW5kZXJidWZmZXJTdGF0ZSA9IHdyYXBSZW5kZXJidWZmZXJzKGdsLCBleHRlbnNpb25zLCBsaW1pdHMsIHN0YXRzJCQxLCBjb25maWcpO1xuICB2YXIgZnJhbWVidWZmZXJTdGF0ZSA9IHdyYXBGQk9TdGF0ZShcbiAgICBnbCxcbiAgICBleHRlbnNpb25zLFxuICAgIGxpbWl0cyxcbiAgICB0ZXh0dXJlU3RhdGUsXG4gICAgcmVuZGVyYnVmZmVyU3RhdGUsXG4gICAgc3RhdHMkJDEpO1xuICB2YXIgY29yZSA9IHJlZ2xDb3JlKFxuICAgIGdsLFxuICAgIHN0cmluZ1N0b3JlLFxuICAgIGV4dGVuc2lvbnMsXG4gICAgbGltaXRzLFxuICAgIGJ1ZmZlclN0YXRlLFxuICAgIGVsZW1lbnRTdGF0ZSxcbiAgICB0ZXh0dXJlU3RhdGUsXG4gICAgZnJhbWVidWZmZXJTdGF0ZSxcbiAgICB1bmlmb3JtU3RhdGUsXG4gICAgYXR0cmlidXRlU3RhdGUsXG4gICAgc2hhZGVyU3RhdGUsXG4gICAgZHJhd1N0YXRlLFxuICAgIGNvbnRleHRTdGF0ZSxcbiAgICB0aW1lcixcbiAgICBjb25maWcpO1xuICB2YXIgcmVhZFBpeGVscyA9IHdyYXBSZWFkUGl4ZWxzKFxuICAgIGdsLFxuICAgIGZyYW1lYnVmZmVyU3RhdGUsXG4gICAgY29yZS5wcm9jcy5wb2xsLFxuICAgIGNvbnRleHRTdGF0ZSxcbiAgICBnbEF0dHJpYnV0ZXMsIGV4dGVuc2lvbnMsIGxpbWl0cyk7XG5cbiAgdmFyIG5leHRTdGF0ZSA9IGNvcmUubmV4dDtcbiAgdmFyIGNhbnZhcyA9IGdsLmNhbnZhcztcblxuICB2YXIgcmFmQ2FsbGJhY2tzID0gW107XG4gIHZhciBsb3NzQ2FsbGJhY2tzID0gW107XG4gIHZhciByZXN0b3JlQ2FsbGJhY2tzID0gW107XG4gIHZhciBkZXN0cm95Q2FsbGJhY2tzID0gW2NvbmZpZy5vbkRlc3Ryb3ldO1xuXG4gIHZhciBhY3RpdmVSQUYgPSBudWxsO1xuICBmdW5jdGlvbiBoYW5kbGVSQUYgKCkge1xuICAgIGlmIChyYWZDYWxsYmFja3MubGVuZ3RoID09PSAwKSB7XG4gICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgdGltZXIudXBkYXRlKCk7XG4gICAgICB9XG4gICAgICBhY3RpdmVSQUYgPSBudWxsO1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gc2NoZWR1bGUgbmV4dCBhbmltYXRpb24gZnJhbWVcbiAgICBhY3RpdmVSQUYgPSByYWYubmV4dChoYW5kbGVSQUYpO1xuXG4gICAgLy8gcG9sbCBmb3IgY2hhbmdlc1xuICAgIHBvbGwoKTtcblxuICAgIC8vIGZpcmUgYSBjYWxsYmFjayBmb3IgYWxsIHBlbmRpbmcgcmFmc1xuICAgIGZvciAodmFyIGkgPSByYWZDYWxsYmFja3MubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHZhciBjYiA9IHJhZkNhbGxiYWNrc1tpXTtcbiAgICAgIGlmIChjYikge1xuICAgICAgICBjYihjb250ZXh0U3RhdGUsIG51bGwsIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGZsdXNoIGFsbCBwZW5kaW5nIHdlYmdsIGNhbGxzXG4gICAgZ2wuZmx1c2goKTtcblxuICAgIC8vIHBvbGwgR1BVIHRpbWVycyAqYWZ0ZXIqIGdsLmZsdXNoIHNvIHdlIGRvbid0IGRlbGF5IGNvbW1hbmQgZGlzcGF0Y2hcbiAgICBpZiAodGltZXIpIHtcbiAgICAgIHRpbWVyLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0YXJ0UkFGICgpIHtcbiAgICBpZiAoIWFjdGl2ZVJBRiAmJiByYWZDYWxsYmFja3MubGVuZ3RoID4gMCkge1xuICAgICAgYWN0aXZlUkFGID0gcmFmLm5leHQoaGFuZGxlUkFGKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wUkFGICgpIHtcbiAgICBpZiAoYWN0aXZlUkFGKSB7XG4gICAgICByYWYuY2FuY2VsKGhhbmRsZVJBRik7XG4gICAgICBhY3RpdmVSQUYgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNvbnRleHRMb3NzIChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAvLyBzZXQgY29udGV4dCBsb3N0IGZsYWdcbiAgICBjb250ZXh0TG9zdCA9IHRydWU7XG5cbiAgICAvLyBwYXVzZSByZXF1ZXN0IGFuaW1hdGlvbiBmcmFtZVxuICAgIHN0b3BSQUYoKTtcblxuICAgIC8vIGxvc2UgY29udGV4dFxuICAgIGxvc3NDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHtcbiAgICAgIGNiKCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVDb250ZXh0UmVzdG9yZWQgKGV2ZW50KSB7XG4gICAgLy8gY2xlYXIgZXJyb3IgY29kZVxuICAgIGdsLmdldEVycm9yKCk7XG5cbiAgICAvLyBjbGVhciBjb250ZXh0IGxvc3QgZmxhZ1xuICAgIGNvbnRleHRMb3N0ID0gZmFsc2U7XG5cbiAgICAvLyByZWZyZXNoIHN0YXRlXG4gICAgZXh0ZW5zaW9uU3RhdGUucmVzdG9yZSgpO1xuICAgIHNoYWRlclN0YXRlLnJlc3RvcmUoKTtcbiAgICBidWZmZXJTdGF0ZS5yZXN0b3JlKCk7XG4gICAgdGV4dHVyZVN0YXRlLnJlc3RvcmUoKTtcbiAgICByZW5kZXJidWZmZXJTdGF0ZS5yZXN0b3JlKCk7XG4gICAgZnJhbWVidWZmZXJTdGF0ZS5yZXN0b3JlKCk7XG4gICAgaWYgKHRpbWVyKSB7XG4gICAgICB0aW1lci5yZXN0b3JlKCk7XG4gICAgfVxuXG4gICAgLy8gcmVmcmVzaCBzdGF0ZVxuICAgIGNvcmUucHJvY3MucmVmcmVzaCgpO1xuXG4gICAgLy8gcmVzdGFydCBSQUZcbiAgICBzdGFydFJBRigpO1xuXG4gICAgLy8gcmVzdG9yZSBjb250ZXh0XG4gICAgcmVzdG9yZUNhbGxiYWNrcy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgY2IoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChjYW52YXMpIHtcbiAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihDT05URVhUX0xPU1RfRVZFTlQsIGhhbmRsZUNvbnRleHRMb3NzLCBmYWxzZSk7XG4gICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoQ09OVEVYVF9SRVNUT1JFRF9FVkVOVCwgaGFuZGxlQ29udGV4dFJlc3RvcmVkLCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgICByYWZDYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICBzdG9wUkFGKCk7XG5cbiAgICBpZiAoY2FudmFzKSB7XG4gICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihDT05URVhUX0xPU1RfRVZFTlQsIGhhbmRsZUNvbnRleHRMb3NzKTtcbiAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKENPTlRFWFRfUkVTVE9SRURfRVZFTlQsIGhhbmRsZUNvbnRleHRSZXN0b3JlZCk7XG4gICAgfVxuXG4gICAgc2hhZGVyU3RhdGUuY2xlYXIoKTtcbiAgICBmcmFtZWJ1ZmZlclN0YXRlLmNsZWFyKCk7XG4gICAgcmVuZGVyYnVmZmVyU3RhdGUuY2xlYXIoKTtcbiAgICB0ZXh0dXJlU3RhdGUuY2xlYXIoKTtcbiAgICBlbGVtZW50U3RhdGUuY2xlYXIoKTtcbiAgICBidWZmZXJTdGF0ZS5jbGVhcigpO1xuXG4gICAgaWYgKHRpbWVyKSB7XG4gICAgICB0aW1lci5jbGVhcigpO1xuICAgIH1cblxuICAgIGRlc3Ryb3lDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHtcbiAgICAgIGNiKCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjb21waWxlUHJvY2VkdXJlIChvcHRpb25zKSB7XG4gICAgY2hlY2skMSghIW9wdGlvbnMsICdpbnZhbGlkIGFyZ3MgdG8gcmVnbCh7Li4ufSknKTtcbiAgICBjaGVjayQxLnR5cGUob3B0aW9ucywgJ29iamVjdCcsICdpbnZhbGlkIGFyZ3MgdG8gcmVnbCh7Li4ufSknKTtcblxuICAgIGZ1bmN0aW9uIGZsYXR0ZW5OZXN0ZWRPcHRpb25zIChvcHRpb25zKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcbiAgICAgIGRlbGV0ZSByZXN1bHQudW5pZm9ybXM7XG4gICAgICBkZWxldGUgcmVzdWx0LmF0dHJpYnV0ZXM7XG4gICAgICBkZWxldGUgcmVzdWx0LmNvbnRleHQ7XG5cbiAgICAgIGlmICgnc3RlbmNpbCcgaW4gcmVzdWx0ICYmIHJlc3VsdC5zdGVuY2lsLm9wKSB7XG4gICAgICAgIHJlc3VsdC5zdGVuY2lsLm9wQmFjayA9IHJlc3VsdC5zdGVuY2lsLm9wRnJvbnQgPSByZXN1bHQuc3RlbmNpbC5vcDtcbiAgICAgICAgZGVsZXRlIHJlc3VsdC5zdGVuY2lsLm9wO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBtZXJnZSAobmFtZSkge1xuICAgICAgICBpZiAobmFtZSBpbiByZXN1bHQpIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSByZXN1bHRbbmFtZV07XG4gICAgICAgICAgZGVsZXRlIHJlc3VsdFtuYW1lXTtcbiAgICAgICAgICBPYmplY3Qua2V5cyhjaGlsZCkuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgcmVzdWx0W25hbWUgKyAnLicgKyBwcm9wXSA9IGNoaWxkW3Byb3BdO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBtZXJnZSgnYmxlbmQnKTtcbiAgICAgIG1lcmdlKCdkZXB0aCcpO1xuICAgICAgbWVyZ2UoJ2N1bGwnKTtcbiAgICAgIG1lcmdlKCdzdGVuY2lsJyk7XG4gICAgICBtZXJnZSgncG9seWdvbk9mZnNldCcpO1xuICAgICAgbWVyZ2UoJ3NjaXNzb3InKTtcbiAgICAgIG1lcmdlKCdzYW1wbGUnKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlcGFyYXRlRHluYW1pYyAob2JqZWN0KSB7XG4gICAgICB2YXIgc3RhdGljSXRlbXMgPSB7fTtcbiAgICAgIHZhciBkeW5hbWljSXRlbXMgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtvcHRpb25dO1xuICAgICAgICBpZiAoZHluYW1pYy5pc0R5bmFtaWModmFsdWUpKSB7XG4gICAgICAgICAgZHluYW1pY0l0ZW1zW29wdGlvbl0gPSBkeW5hbWljLnVuYm94KHZhbHVlLCBvcHRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRpY0l0ZW1zW29wdGlvbl0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkeW5hbWljOiBkeW5hbWljSXRlbXMsXG4gICAgICAgIHN0YXRpYzogc3RhdGljSXRlbXNcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUcmVhdCBjb250ZXh0IHZhcmlhYmxlcyBzZXBhcmF0ZSBmcm9tIG90aGVyIGR5bmFtaWMgdmFyaWFibGVzXG4gICAgdmFyIGNvbnRleHQgPSBzZXBhcmF0ZUR5bmFtaWMob3B0aW9ucy5jb250ZXh0IHx8IHt9KTtcbiAgICB2YXIgdW5pZm9ybXMgPSBzZXBhcmF0ZUR5bmFtaWMob3B0aW9ucy51bmlmb3JtcyB8fCB7fSk7XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBzZXBhcmF0ZUR5bmFtaWMob3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9KTtcbiAgICB2YXIgb3B0cyA9IHNlcGFyYXRlRHluYW1pYyhmbGF0dGVuTmVzdGVkT3B0aW9ucyhvcHRpb25zKSk7XG5cbiAgICB2YXIgc3RhdHMkJDEgPSB7XG4gICAgICBncHVUaW1lOiAwLjAsXG4gICAgICBjcHVUaW1lOiAwLjAsXG4gICAgICBjb3VudDogMFxuICAgIH07XG5cbiAgICB2YXIgY29tcGlsZWQgPSBjb3JlLmNvbXBpbGUob3B0cywgYXR0cmlidXRlcywgdW5pZm9ybXMsIGNvbnRleHQsIHN0YXRzJCQxKTtcblxuICAgIHZhciBkcmF3ID0gY29tcGlsZWQuZHJhdztcbiAgICB2YXIgYmF0Y2ggPSBjb21waWxlZC5iYXRjaDtcbiAgICB2YXIgc2NvcGUgPSBjb21waWxlZC5zY29wZTtcblxuICAgIC8vIEZJWE1FOiB3ZSBzaG91bGQgbW9kaWZ5IGNvZGUgZ2VuZXJhdGlvbiBmb3IgYmF0Y2ggY29tbWFuZHMgc28gdGhpc1xuICAgIC8vIGlzbid0IG5lY2Vzc2FyeVxuICAgIHZhciBFTVBUWV9BUlJBWSA9IFtdO1xuICAgIGZ1bmN0aW9uIHJlc2VydmUgKGNvdW50KSB7XG4gICAgICB3aGlsZSAoRU1QVFlfQVJSQVkubGVuZ3RoIDwgY291bnQpIHtcbiAgICAgICAgRU1QVFlfQVJSQVkucHVzaChudWxsKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBFTVBUWV9BUlJBWVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIFJFR0xDb21tYW5kIChhcmdzLCBib2R5KSB7XG4gICAgICB2YXIgaTtcbiAgICAgIGlmIChjb250ZXh0TG9zdCkge1xuICAgICAgICBjaGVjayQxLnJhaXNlKCdjb250ZXh0IGxvc3QnKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgYXJncyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gc2NvcGUuY2FsbCh0aGlzLCBudWxsLCBhcmdzLCAwKVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAodHlwZW9mIGFyZ3MgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZ3M7ICsraSkge1xuICAgICAgICAgICAgc2NvcGUuY2FsbCh0aGlzLCBudWxsLCBib2R5LCBpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmdzKSkge1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBzY29wZS5jYWxsKHRoaXMsIGFyZ3NbaV0sIGJvZHksIGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gc2NvcGUuY2FsbCh0aGlzLCBhcmdzLCBib2R5LCAwKVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmdzID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoYXJncyA+IDApIHtcbiAgICAgICAgICByZXR1cm4gYmF0Y2guY2FsbCh0aGlzLCByZXNlcnZlKGFyZ3MgfCAwKSwgYXJncyB8IDApXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcmdzKSkge1xuICAgICAgICBpZiAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gYmF0Y2guY2FsbCh0aGlzLCBhcmdzLCBhcmdzLmxlbmd0aClcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRyYXcuY2FsbCh0aGlzLCBhcmdzKVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBleHRlbmQoUkVHTENvbW1hbmQsIHtcbiAgICAgIHN0YXRzOiBzdGF0cyQkMVxuICAgIH0pXG4gIH1cblxuICB2YXIgc2V0RkJPID0gZnJhbWVidWZmZXJTdGF0ZS5zZXRGQk8gPSBjb21waWxlUHJvY2VkdXJlKHtcbiAgICBmcmFtZWJ1ZmZlcjogZHluYW1pYy5kZWZpbmUuY2FsbChudWxsLCBEWU5fUFJPUCwgJ2ZyYW1lYnVmZmVyJylcbiAgfSk7XG5cbiAgZnVuY3Rpb24gY2xlYXJJbXBsIChfLCBvcHRpb25zKSB7XG4gICAgdmFyIGNsZWFyRmxhZ3MgPSAwO1xuICAgIGNvcmUucHJvY3MucG9sbCgpO1xuXG4gICAgdmFyIGMgPSBvcHRpb25zLmNvbG9yO1xuICAgIGlmIChjKSB7XG4gICAgICBnbC5jbGVhckNvbG9yKCtjWzBdIHx8IDAsICtjWzFdIHx8IDAsICtjWzJdIHx8IDAsICtjWzNdIHx8IDApO1xuICAgICAgY2xlYXJGbGFncyB8PSBHTF9DT0xPUl9CVUZGRVJfQklUO1xuICAgIH1cbiAgICBpZiAoJ2RlcHRoJyBpbiBvcHRpb25zKSB7XG4gICAgICBnbC5jbGVhckRlcHRoKCtvcHRpb25zLmRlcHRoKTtcbiAgICAgIGNsZWFyRmxhZ3MgfD0gR0xfREVQVEhfQlVGRkVSX0JJVDtcbiAgICB9XG4gICAgaWYgKCdzdGVuY2lsJyBpbiBvcHRpb25zKSB7XG4gICAgICBnbC5jbGVhclN0ZW5jaWwob3B0aW9ucy5zdGVuY2lsIHwgMCk7XG4gICAgICBjbGVhckZsYWdzIHw9IEdMX1NURU5DSUxfQlVGRkVSX0JJVDtcbiAgICB9XG5cbiAgICBjaGVjayQxKCEhY2xlYXJGbGFncywgJ2NhbGxlZCByZWdsLmNsZWFyIHdpdGggbm8gYnVmZmVyIHNwZWNpZmllZCcpO1xuICAgIGdsLmNsZWFyKGNsZWFyRmxhZ3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXIgKG9wdGlvbnMpIHtcbiAgICBjaGVjayQxKFxuICAgICAgdHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnICYmIG9wdGlvbnMsXG4gICAgICAncmVnbC5jbGVhcigpIHRha2VzIGFuIG9iamVjdCBhcyBpbnB1dCcpO1xuICAgIGlmICgnZnJhbWVidWZmZXInIGluIG9wdGlvbnMpIHtcbiAgICAgIGlmIChvcHRpb25zLmZyYW1lYnVmZmVyICYmXG4gICAgICAgICAgb3B0aW9ucy5mcmFtZWJ1ZmZlcl9yZWdsVHlwZSA9PT0gJ2ZyYW1lYnVmZmVyQ3ViZScpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2OyArK2kpIHtcbiAgICAgICAgICBzZXRGQk8oZXh0ZW5kKHtcbiAgICAgICAgICAgIGZyYW1lYnVmZmVyOiBvcHRpb25zLmZyYW1lYnVmZmVyLmZhY2VzW2ldXG4gICAgICAgICAgfSwgb3B0aW9ucyksIGNsZWFySW1wbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldEZCTyhvcHRpb25zLCBjbGVhckltcGwpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjbGVhckltcGwobnVsbCwgb3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZnJhbWUgKGNiKSB7XG4gICAgY2hlY2skMS50eXBlKGNiLCAnZnVuY3Rpb24nLCAncmVnbC5mcmFtZSgpIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgIHJhZkNhbGxiYWNrcy5wdXNoKGNiKTtcblxuICAgIGZ1bmN0aW9uIGNhbmNlbCAoKSB7XG4gICAgICAvLyBGSVhNRTogIHNob3VsZCB3ZSBjaGVjayBzb21ldGhpbmcgb3RoZXIgdGhhbiBlcXVhbHMgY2IgaGVyZT9cbiAgICAgIC8vIHdoYXQgaWYgYSB1c2VyIGNhbGxzIGZyYW1lIHR3aWNlIHdpdGggdGhlIHNhbWUgY2FsbGJhY2suLi5cbiAgICAgIC8vXG4gICAgICB2YXIgaSA9IGZpbmQocmFmQ2FsbGJhY2tzLCBjYik7XG4gICAgICBjaGVjayQxKGkgPj0gMCwgJ2Nhbm5vdCBjYW5jZWwgYSBmcmFtZSB0d2ljZScpO1xuICAgICAgZnVuY3Rpb24gcGVuZGluZ0NhbmNlbCAoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGZpbmQocmFmQ2FsbGJhY2tzLCBwZW5kaW5nQ2FuY2VsKTtcbiAgICAgICAgcmFmQ2FsbGJhY2tzW2luZGV4XSA9IHJhZkNhbGxiYWNrc1tyYWZDYWxsYmFja3MubGVuZ3RoIC0gMV07XG4gICAgICAgIHJhZkNhbGxiYWNrcy5sZW5ndGggLT0gMTtcbiAgICAgICAgaWYgKHJhZkNhbGxiYWNrcy5sZW5ndGggPD0gMCkge1xuICAgICAgICAgIHN0b3BSQUYoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmFmQ2FsbGJhY2tzW2ldID0gcGVuZGluZ0NhbmNlbDtcbiAgICB9XG5cbiAgICBzdGFydFJBRigpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNhbmNlbDogY2FuY2VsXG4gICAgfVxuICB9XG5cbiAgLy8gcG9sbCB2aWV3cG9ydFxuICBmdW5jdGlvbiBwb2xsVmlld3BvcnQgKCkge1xuICAgIHZhciB2aWV3cG9ydCA9IG5leHRTdGF0ZS52aWV3cG9ydDtcbiAgICB2YXIgc2Npc3NvckJveCA9IG5leHRTdGF0ZS5zY2lzc29yX2JveDtcbiAgICB2aWV3cG9ydFswXSA9IHZpZXdwb3J0WzFdID0gc2Npc3NvckJveFswXSA9IHNjaXNzb3JCb3hbMV0gPSAwO1xuICAgIGNvbnRleHRTdGF0ZS52aWV3cG9ydFdpZHRoID1cbiAgICAgIGNvbnRleHRTdGF0ZS5mcmFtZWJ1ZmZlcldpZHRoID1cbiAgICAgIGNvbnRleHRTdGF0ZS5kcmF3aW5nQnVmZmVyV2lkdGggPVxuICAgICAgdmlld3BvcnRbMl0gPVxuICAgICAgc2Npc3NvckJveFsyXSA9IGdsLmRyYXdpbmdCdWZmZXJXaWR0aDtcbiAgICBjb250ZXh0U3RhdGUudmlld3BvcnRIZWlnaHQgPVxuICAgICAgY29udGV4dFN0YXRlLmZyYW1lYnVmZmVySGVpZ2h0ID1cbiAgICAgIGNvbnRleHRTdGF0ZS5kcmF3aW5nQnVmZmVySGVpZ2h0ID1cbiAgICAgIHZpZXdwb3J0WzNdID1cbiAgICAgIHNjaXNzb3JCb3hbM10gPSBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0O1xuICB9XG5cbiAgZnVuY3Rpb24gcG9sbCAoKSB7XG4gICAgY29udGV4dFN0YXRlLnRpY2sgKz0gMTtcbiAgICBjb250ZXh0U3RhdGUudGltZSA9IG5vdygpO1xuICAgIHBvbGxWaWV3cG9ydCgpO1xuICAgIGNvcmUucHJvY3MucG9sbCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVmcmVzaCAoKSB7XG4gICAgcG9sbFZpZXdwb3J0KCk7XG4gICAgY29yZS5wcm9jcy5yZWZyZXNoKCk7XG4gICAgaWYgKHRpbWVyKSB7XG4gICAgICB0aW1lci51cGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBub3cgKCkge1xuICAgIHJldHVybiAoY2xvY2soKSAtIFNUQVJUX1RJTUUpIC8gMTAwMC4wXG4gIH1cblxuICByZWZyZXNoKCk7XG5cbiAgZnVuY3Rpb24gYWRkTGlzdGVuZXIgKGV2ZW50LCBjYWxsYmFjaykge1xuICAgIGNoZWNrJDEudHlwZShjYWxsYmFjaywgJ2Z1bmN0aW9uJywgJ2xpc3RlbmVyIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXG4gICAgdmFyIGNhbGxiYWNrcztcbiAgICBzd2l0Y2ggKGV2ZW50KSB7XG4gICAgICBjYXNlICdmcmFtZSc6XG4gICAgICAgIHJldHVybiBmcmFtZShjYWxsYmFjaylcbiAgICAgIGNhc2UgJ2xvc3QnOlxuICAgICAgICBjYWxsYmFja3MgPSBsb3NzQ2FsbGJhY2tzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAncmVzdG9yZSc6XG4gICAgICAgIGNhbGxiYWNrcyA9IHJlc3RvcmVDYWxsYmFja3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdkZXN0cm95JzpcbiAgICAgICAgY2FsbGJhY2tzID0gZGVzdHJveUNhbGxiYWNrcztcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNoZWNrJDEucmFpc2UoJ2ludmFsaWQgZXZlbnQsIG11c3QgYmUgb25lIG9mIGZyYW1lLGxvc3QscmVzdG9yZSxkZXN0cm95Jyk7XG4gICAgfVxuXG4gICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgIHJldHVybiB7XG4gICAgICBjYW5jZWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBpZiAoY2FsbGJhY2tzW2ldID09PSBjYWxsYmFjaykge1xuICAgICAgICAgICAgY2FsbGJhY2tzW2ldID0gY2FsbGJhY2tzW2NhbGxiYWNrcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5wb3AoKTtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciByZWdsID0gZXh0ZW5kKGNvbXBpbGVQcm9jZWR1cmUsIHtcbiAgICAvLyBDbGVhciBjdXJyZW50IEZCT1xuICAgIGNsZWFyOiBjbGVhcixcblxuICAgIC8vIFNob3J0IGN1dHMgZm9yIGR5bmFtaWMgdmFyaWFibGVzXG4gICAgcHJvcDogZHluYW1pYy5kZWZpbmUuYmluZChudWxsLCBEWU5fUFJPUCksXG4gICAgY29udGV4dDogZHluYW1pYy5kZWZpbmUuYmluZChudWxsLCBEWU5fQ09OVEVYVCksXG4gICAgdGhpczogZHluYW1pYy5kZWZpbmUuYmluZChudWxsLCBEWU5fU1RBVEUpLFxuXG4gICAgLy8gZXhlY3V0ZXMgYW4gZW1wdHkgZHJhdyBjb21tYW5kXG4gICAgZHJhdzogY29tcGlsZVByb2NlZHVyZSh7fSksXG5cbiAgICAvLyBSZXNvdXJjZXNcbiAgICBidWZmZXI6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICByZXR1cm4gYnVmZmVyU3RhdGUuY3JlYXRlKG9wdGlvbnMsIEdMX0FSUkFZX0JVRkZFUiwgZmFsc2UsIGZhbHNlKVxuICAgIH0sXG4gICAgZWxlbWVudHM6IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICByZXR1cm4gZWxlbWVudFN0YXRlLmNyZWF0ZShvcHRpb25zLCBmYWxzZSlcbiAgICB9LFxuICAgIHRleHR1cmU6IHRleHR1cmVTdGF0ZS5jcmVhdGUyRCxcbiAgICBjdWJlOiB0ZXh0dXJlU3RhdGUuY3JlYXRlQ3ViZSxcbiAgICByZW5kZXJidWZmZXI6IHJlbmRlcmJ1ZmZlclN0YXRlLmNyZWF0ZSxcbiAgICBmcmFtZWJ1ZmZlcjogZnJhbWVidWZmZXJTdGF0ZS5jcmVhdGUsXG4gICAgZnJhbWVidWZmZXJDdWJlOiBmcmFtZWJ1ZmZlclN0YXRlLmNyZWF0ZUN1YmUsXG5cbiAgICAvLyBFeHBvc2UgY29udGV4dCBhdHRyaWJ1dGVzXG4gICAgYXR0cmlidXRlczogZ2xBdHRyaWJ1dGVzLFxuXG4gICAgLy8gRnJhbWUgcmVuZGVyaW5nXG4gICAgZnJhbWU6IGZyYW1lLFxuICAgIG9uOiBhZGRMaXN0ZW5lcixcblxuICAgIC8vIFN5c3RlbSBsaW1pdHNcbiAgICBsaW1pdHM6IGxpbWl0cyxcbiAgICBoYXNFeHRlbnNpb246IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICByZXR1cm4gbGltaXRzLmV4dGVuc2lvbnMuaW5kZXhPZihuYW1lLnRvTG93ZXJDYXNlKCkpID49IDBcbiAgICB9LFxuXG4gICAgLy8gUmVhZCBwaXhlbHNcbiAgICByZWFkOiByZWFkUGl4ZWxzLFxuXG4gICAgLy8gRGVzdHJveSByZWdsIGFuZCBhbGwgYXNzb2NpYXRlZCByZXNvdXJjZXNcbiAgICBkZXN0cm95OiBkZXN0cm95LFxuXG4gICAgLy8gRGlyZWN0IEdMIHN0YXRlIG1hbmlwdWxhdGlvblxuICAgIF9nbDogZ2wsXG4gICAgX3JlZnJlc2g6IHJlZnJlc2gsXG5cbiAgICBwb2xsOiBmdW5jdGlvbiAoKSB7XG4gICAgICBwb2xsKCk7XG4gICAgICBpZiAodGltZXIpIHtcbiAgICAgICAgdGltZXIudXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8vIEN1cnJlbnQgdGltZVxuICAgIG5vdzogbm93LFxuXG4gICAgLy8gcmVnbCBTdGF0aXN0aWNzIEluZm9ybWF0aW9uXG4gICAgc3RhdHM6IHN0YXRzJCQxXG4gIH0pO1xuXG4gIGNvbmZpZy5vbkRvbmUobnVsbCwgcmVnbCk7XG5cbiAgcmV0dXJuIHJlZ2xcbn1cblxucmV0dXJuIHdyYXBSRUdMO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVnbC5qcy5tYXBcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJodG1sLGJvZHl7Zm9udC1mYW1pbHk6cmVkYWN0aW9uOy13ZWJraXQtZm9udC1zbW9vdGhpbmc6YW50aWFsaWFzZWQ7cGFkZGluZzowcHg7bWFyZ2luOjBweH1ib2R5e2JhY2tncm91bmQ6bGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCByZWQsIHB1cnBsZSwgYmx1ZSl9LmlubmVyX2JvZHl7YmFja2dyb3VuZC1jb2xvcjp3aGl0ZTttYXJnaW46OHB4O3BhZGRpbmctbGVmdDoxMHB4O3BhZGRpbmctcmlnaHQ6MTBweH1we2ZvbnQtc2l6ZToxLjRlbX1wLnNtYWxse2ZvbnQtc2l6ZToxLjFlbX0uc2hhZG93e2JveC1zaGFkb3c6MCA0cHggNHB4IDAgcmdiYSgwLDAsMCwwLjEpfWgxLGgyLGgzLGg0e3RleHQtYWxpZ246Y2VudGVyfSNoZWFkZXItY29udGFpbmVye2NvbG9yOndoaXRlfSNoZWFkZXItY29udGFpbmVyIGgxe2xldHRlci1zcGFjaW5nOi4wOGVtO2ZvbnQtc2l6ZTo1LjVlbTttYXJnaW46MHB4fSNoZWFkZXItY29udGFpbmVyIGF7Y29sb3I6d2hpdGV9I2hlYWRlci1jb250YWluZXIgLm1haW4taGVhZGluZyBpbWd7bWF4LXdpZHRoOjkwMHB4fS50YWd7Zm9udC1zaXplOjEuMmVtO21hcmdpbjowcHg7bWFyZ2luLXJpZ2h0OjFlbTttYXJnaW4tbGVmdDoxZW07ZGlzcGxheTppbmxpbmUtYmxvY2t9LmNlbnRlcnt0ZXh0LWFsaWduOmNlbnRlcn0uY29sLC5jb2wyLC5jb2wzLC5jb2w0e2Rpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOnRvcH0uY29sMnt3aWR0aDo1MCV9LmNvbDN7d2lkdGg6MzMlfS5jb2w0e3dpZHRoOjI1JX0uY29tcGFjdG5lc3NfdGlsZXtkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDpjYWxjKDUwJSAtIDIycHgpO3ZlcnRpY2FsLWFsaWduOnRvcDtwYWRkaW5nLWxlZnQ6MTBweDtwYWRkaW5nLXJpZ2h0OjEwcHh9LmNvbXBhY3RuZXNzX3RpbGUgcHt0ZXh0LWFsaWduOmNlbnRlciAhaW1wb3J0YW50fS5jb21wYWN0bmVzc190aWxlOm50aC1jaGlsZCgxKXtib3JkZXItYm90dG9tOjFweCBkYXNoZWQ7Ym9yZGVyLXJpZ2h0OjFweCBkYXNoZWR9LmNvbXBhY3RuZXNzX3RpbGU6bnRoLWNoaWxkKDIpe2JvcmRlci1ib3R0b206MXB4IGRhc2hlZH0uY29tcGFjdG5lc3NfdGlsZTpudGgtY2hpbGQoMyl7Ym9yZGVyLXJpZ2h0OjFweCBkYXNoZWQ7Ym9yZGVyLWJvdHRvbToxcHggZGFzaGVkfS5jb21wYWN0bmVzc190aWxlOm50aC1jaGlsZCg0KXtib3JkZXItYm90dG9tOjFweCBkYXNoZWR9Lm91dGVyLXRleHQtY29udGFpbmVye3dpZHRoOjEwMCU7dGV4dC1hbGlnbjpjZW50ZXJ9Lm91dGVyLXRleHQtY29udGFpbmVyIC5pbm5lci10ZXh0LWNvbnRhaW5lcnt3aWR0aDoxMDAlO21heC13aWR0aDo5MDBweDtkaXNwbGF5OmlubGluZS1ibG9ja30ub3V0ZXItdGV4dC1jb250YWluZXIgLmlubmVyLXRleHQtY29udGFpbmVyIHB7dGV4dC1hbGlnbjpqdXN0aWZ5O3BhZGRpbmctbGVmdDoxMHB4O3BhZGRpbmctcmlnaHQ6MTBweH0ub3V0ZXItdGV4dC1jb250YWluZXIgLmlubmVyLXRleHQtY29udGFpbmVyIGltZ3t0ZXh0LWFsaWduOmNlbnRlcjt3aWR0aDoxMDAlO21heC13aWR0aDo3MDBweH0ub3V0ZXItdGV4dC1jb250YWluZXIgLmlubmVyLXRleHQtY29udGFpbmVyLndpZGV7bWF4LXdpZHRoOjEyMDBweH0udmlld2VyX3Jvd3t3aWR0aDoxMDAlO2Rpc3BsYXk6aW5saW5lLWJsb2NrfS52aWV3ZXJfcm93IC5kaXN0cmljdC12aWV3ZXIsLnZpZXdlcl9yb3cgLmRpc3RyaWN0LXRleHR7ZGlzcGxheTppbmxpbmUtYmxvY2t9LnZpZXdlcl9yb3cgLmRpc3RyaWN0LXZpZXdlcnt0ZXh0LWFsaWduOmNlbnRlcjt0b3A6MHB4O2xlZnQ6NSU7d2lkdGg6NDUlfS52aWV3ZXJfcm93IC5kaXN0cmljdC12aWV3ZXIgLnBhcmNvb3Jkc3t0ZXh0LWFsaWduOmluaXRpYWw7d2lkdGg6MTAwJTtoZWlnaHQ6MjAwcHh9LnZpZXdlcl9yb3cgLmRpc3RyaWN0LXZpZXdlciBjYW52YXN7d2lkdGg6MTAwJTtjdXJzb3I6cG9pbnRlcn0udmlld2VyX3JvdyAuZGlzdHJpY3Qtdmlld2VyIC5wYWRkaW5ne2hlaWdodDoyMHB4fS52aWV3ZXJfcm93IC5kaXN0cmljdC12aWV3ZXIgLnZpZXdfY291bnR7Zm9udC1zaXplOjEuM2VtO29wYWNpdHk6MC44fS52aWV3ZXJfcm93IC5kaXN0cmljdC12aWV3ZXIgaW1nLmxlZ2VuZHt3aWR0aDoxMDAlO21heC13aWR0aDo1MDBweH0udmlld2VyX3JvdyAuZGlzdHJpY3QtdGV4dHt3aWR0aDpjYWxjKDUwJSAtIDQwcHgpO3ZlcnRpY2FsLWFsaWduOnRvcDtmbG9hdDpyaWdodDtwYWRkaW5nLXRvcDo1MHZoO3BhZGRpbmctYm90dG9tOjMwdmh9LnZpZXdlcl9yb3cgLmRpc3RyaWN0LXRleHQgLmRpc3RyaWN0LXRleHQtaW5uZXJ7bWF4LXdpZHRoOjQwMHB4O2Zsb2F0OmxlZnR9LnZpZXdlcl9yb3cgLmRpc3RyaWN0LXRleHQgLnNjcm9sbF9ibG9ja3ttYXJnaW4tdG9wOjE1MHB4O21hcmdpbi1ib3R0b206MTUwcHg7cGFkZGluZzoyNXB4O3RleHQtYWxpZ246Y2VudGVyO2JvcmRlci1sZWZ0OjFweCBzb2xpZCByZ2JhKDAsMCwwLDApfS52aWV3ZXJfcm93IC5kaXN0cmljdC10ZXh0IC5zY3JvbGxfYmxvY2sgcHt0ZXh0LWFsaWduOmxlZnR9LnZpZXdlcl9yb3cgLmRpc3RyaWN0LXRleHQgLnNjcm9sbF9ibG9jay5ibG9ja19mb2N1c3tib3JkZXItbGVmdDoxcHggc29saWR9LnZpZXdlcl9yb3cgLmRpc3RyaWN0LXRleHQgLnNjcm9sbF9ibG9jayBpbWd7bWF4LXdpZHRoOjEwMCV9QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAxMDAwcHgpeyNoZWFkZXItY29udGFpbmVyIGgxe2ZvbnQtc2l6ZTozLjRlbTttYXJnaW46MC4yZW19cHtmb250LXNpemU6MS4yZW19cC5zbWFsbHtmb250LXNpemU6MS4wZW19LmNvbDJ7d2lkdGg6MTAwJX0udGFne3dpZHRoOjE1MHB4O2ZvbnQtc2l6ZToxLjBlbX0udmlld2VyX3JvdyAuZGlzdHJpY3Qtdmlld2Vye2xlZnQ6MTBweDt3aWR0aDpjYWxjKDEwMCUgLSAyMHB4KTt6LWluZGV4OjI7YmFja2dyb3VuZC1jb2xvcjp3aGl0ZX0udmlld2VyX3JvdyAuZGlzdHJpY3Qtdmlld2VyIC5oZWFkZXJ7bWFyZ2luOjAuMmVtO2ZvbnQtc2l6ZToxLjZlbX0udmlld2VyX3JvdyAuZGlzdHJpY3Qtdmlld2VyIC5wYXJjb29yZHN7aGVpZ2h0OjE1MHB4fS52aWV3ZXJfcm93IC5kaXN0cmljdC12aWV3ZXIgLnBhZGRpbmd7aGVpZ2h0OjBweH0udmlld2VyX3JvdyAuZGlzdHJpY3QtdGV4dHt3aWR0aDoxMDAlO3BhZGRpbmctYm90dG9tOjB2aH0udmlld2VyX3JvdyAuZGlzdHJpY3QtdGV4dCAuZGlzdHJpY3QtdGV4dC1pbm5lcnttYXgtd2lkdGg6MTAwJTtwYWRkaW5nOjEwJX19XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsIlwidXNlIHN0cmljdFwiXG5cbmZ1bmN0aW9uIGlvdGEobikge1xuICB2YXIgcmVzdWx0ID0gbmV3IEFycmF5KG4pXG4gIGZvcih2YXIgaT0wOyBpPG47ICsraSkge1xuICAgIHJlc3VsdFtpXSA9IGlcbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW90YSIsIi8qIVxuICogRGV0ZXJtaW5lIGlmIGFuIG9iamVjdCBpcyBhIEJ1ZmZlclxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwiZnVuY3Rpb24gaXNBcnJheUxpa2UoaW5wdXQpIHtcbiAgICByZXR1cm4gaW5wdXQubGVuZ3RoICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBsb2FkU2luZ2xlSW1hZ2UoaW1hZ2UpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgaWYgKGltYWdlLm5hdHVyYWxXaWR0aCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGJyb3dzZXIgY2FuIGRldGVybWluZSB0aGUgbmF0dXJhbFdpZHRoIHRoZSBpbWFnZSBpcyBhbHJlYWR5IGxvYWRlZCBzdWNjZXNzZnVsbHlcbiAgICAgICAgICAgIHJlc29sdmUoaW1hZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGltYWdlLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgaW1hZ2UgaXMgY29tcGxldGUgYnV0IHRoZSBuYXR1cmFsV2lkdGggaXMgMHB4IGl0IGlzIHByb2JhYmx5IGJyb2tlblxuICAgICAgICAgICAgcmVqZWN0KGltYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdWxmaWxsKTtcbiAgICAgICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVsZmlsbCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbCgpIHtcbiAgICAgICAgICAgIGlmIChpbWFnZS5uYXR1cmFsV2lkdGgpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGltYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlamVjdChpbWFnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgZnVsZmlsbCk7XG4gICAgICAgICAgICBpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bGZpbGwpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocHJvbWlzZSwgeyBpbWFnZTogaW1hZ2UgfSk7XG59XG5mdW5jdGlvbiBsb2FkSW1hZ2VzKGlucHV0LCBhdHRyaWJ1dGVzKSB7XG4gICAgaWYgKGF0dHJpYnV0ZXMgPT09IHZvaWQgMCkgeyBhdHRyaWJ1dGVzID0ge307IH1cbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBsb2FkU2luZ2xlSW1hZ2UoaW5wdXQpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAvKiBDcmVhdGUgYSA8aW1nPiBmcm9tIGEgc3RyaW5nICovXG4gICAgICAgIHZhciBzcmMgPSBpbnB1dDtcbiAgICAgICAgdmFyIGltYWdlXzEgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gaW1hZ2VfMS5zZXRBdHRyaWJ1dGUobmFtZSwgYXR0cmlidXRlc1tuYW1lXSk7IH0pO1xuICAgICAgICBpbWFnZV8xLnNyYyA9IHNyYztcbiAgICAgICAgcmV0dXJuIGxvYWRTaW5nbGVJbWFnZShpbWFnZV8xKTtcbiAgICB9XG4gICAgaWYgKGlzQXJyYXlMaWtlKGlucHV0KSkge1xuICAgICAgICAvLyBNb21lbnRhcmlseSBpZ25vcmUgZXJyb3JzXG4gICAgICAgIHZhciByZWZsZWN0ID0gZnVuY3Rpb24gKGltZykgeyByZXR1cm4gbG9hZEltYWdlcyhpbWcsIGF0dHJpYnV0ZXMpLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgeyByZXR1cm4gZXJyb3I7IH0pOyB9O1xuICAgICAgICB2YXIgcmVmbGVjdGVkID0gW10ubWFwLmNhbGwoaW5wdXQsIHJlZmxlY3QpO1xuICAgICAgICB2YXIgdHNGaXhfMSA9IFByb21pc2UuYWxsKHJlZmxlY3RlZCkudGhlbihmdW5jdGlvbiAocmVzdWx0cykge1xuICAgICAgICAgICAgdmFyIGxvYWRlZCA9IHJlc3VsdHMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Lm5hdHVyYWxXaWR0aDsgfSk7XG4gICAgICAgICAgICBpZiAobG9hZGVkLmxlbmd0aCA9PT0gcmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9hZGVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHtcbiAgICAgICAgICAgICAgICBsb2FkZWQ6IGxvYWRlZCxcbiAgICAgICAgICAgICAgICBlcnJvcmVkOiByZXN1bHRzLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4gIXgubmF0dXJhbFdpZHRoOyB9KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBWYXJpYWJsZXMgbmFtZWQgYHRzRml4YCBhcmUgb25seSBoZXJlIGJlY2F1c2UgVHlwZVNjcmlwdCBoYXRlcyBQcm9taXNlLXJldHVybmluZyBmdW5jdGlvbnMuXG4gICAgICAgIHJldHVybiB0c0ZpeF8xO1xuICAgIH1cbiAgICB2YXIgdHNGaXggPSBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdpbnB1dCBpcyBub3QgYW4gaW1hZ2UsIGEgVVJMIHN0cmluZywgb3IgYW4gYXJyYXkgb2YgdGhlbS4nKSk7XG4gICAgcmV0dXJuIHRzRml4O1xufVxuZXhwb3J0IGRlZmF1bHQgbG9hZEltYWdlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImltcG9ydCBpbWFnZV9wcm9taXNlIGZyb20gJ2ltYWdlLXByb21pc2UnO1xuaW1wb3J0IG5kYXJyYXkgZnJvbSAnbmRhcnJheSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbWFnZV9kYXRhKHNyYzogc3RyaW5nKSB7XG4gICAgLyogIEdpdmVuIGEgdXJsLCByZXR1cm4gdGhlIGltYWdlIGRhdGEgYXMgYSBSR0JBIG5kYXJyYXkuXG4gICAgKi9cbiAgICBjb25zdCBpbWcgPSBhd2FpdCBpbWFnZV9wcm9taXNlKHNyYylcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXG4gICAgY2FudmFzLndpZHRoID0gaW1nLm5hdHVyYWxXaWR0aFxuICAgIGNhbnZhcy5oZWlnaHQgPSBpbWcubmF0dXJhbEhlaWdodFxuICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCAwLCAwKVxuICAgIGNvbnN0IGRhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCkuZGF0YVxuICAgIHJldHVybiBuZGFycmF5KGRhdGEsIFsgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0LCA0IF0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaF9qc29uKHVybDogc3RyaW5nLCBwYXJhbXM/Om9iamVjdCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIGZldGNoKHVybCkudGhlbihyZXNwID0+IHJlc3Aub2sgPyByZXNwLmpzb24oKSA6IG51bGwgKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3VtKGFycjogbnVtYmVyW10pOm51bWJlciB7XG4gICAgcmV0dXJuIGFyci5yZWR1Y2UoKGEsIGIpID0+IGErYilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lYW4oYXJyOiBudW1iZXJbXSk6bnVtYmVyIHtcbiAgICByZXR1cm4gc3VtKGFycikgLyBhcnIubGVuZ3RoXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW1wbGUoYXJyOiBhbnlbXSwgbjogbnVtYmVyKSB7XG4gICAgbGV0IHNodWZmbGVkID0gYXJyLnNsaWNlKDApLCBpID0gYXJyLmxlbmd0aCwgdGVtcCwgaW5kZXhcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGluZGV4ID0gTWF0aC5mbG9vcigoaSArIDEpICogTWF0aC5yYW5kb20oKSk7XG4gICAgICAgIHRlbXAgPSBzaHVmZmxlZFtpbmRleF07XG4gICAgICAgIHNodWZmbGVkW2luZGV4XSA9IHNodWZmbGVkW2ldO1xuICAgICAgICBzaHVmZmxlZFtpXSA9IHRlbXA7XG4gICAgfVxuICAgIHJldHVybiBzaHVmZmxlZC5zbGljZSgwLCBuKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xhbXAodjpudW1iZXIsIG1pbjpudW1iZXIsIG1heDpudW1iZXIpOm51bWJlciB7XG4gICAgcmV0dXJuIE1hdGgubWluKG1heCwgTWF0aC5tYXgobWluLCB2KSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhbmdlKG46IG51bWJlcik6bnVtYmVyW10ge1xuICAgIHJldHVybiBuZXcgQXJyYXkobikuZmlsbCgwKS5tYXAoKF8sIGkpID0+IGkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpblZpZXcoZWw6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gICAgY29uc3QgeyB0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQgfSA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgLy8gY29uc29sZS5sb2coeyB0b3AsIGxlZnQsIGJvdHRvbSwgcmlnaHQgfSk7XG4gICAgcmV0dXJuIChcbiAgICAgICAgKHRvcCA8IDAgJiYgYm90dG9tID4gMCkgfHxcbiAgICAgICAgKHRvcCA8IHdpbmRvdy5pbm5lckhlaWdodCAmJiBib3R0b20gPiB3aW5kb3cuaW5uZXJIZWlnaHQpXG4gICAgKVxufSIsImltcG9ydCBkcmF3X21hcF9zaGFkZXIgZnJvbSAnLi9zaGFkZXJzL2RyYXdfbWFwJ1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0IHsgUnVuRGF0YSwgU3RhdGVEYXRhIH0gZnJvbSAnLi9kYXRhdHlwZXMnXG5kZWNsYXJlIGxldCBkMzogYW55O1xuZGVjbGFyZSBsZXQgd2luZG93OiBhbnk7XG5cbi8vIGZ1bmN0aW9uIG5vcm0oYXJyYXkpIHtcbi8vICAgICBsZXQgW21pbiwgbWF4XSA9IFtJbmZpbml0eSwgLUluZmluaXR5XVxuLy8gICAgIGZvciAoY29uc3QgdiBvZiBhcnJheSkge1xuLy8gICAgICAgICBtaW4gPSB2IDwgbWluID8gdiA6IG1pblxuLy8gICAgICAgICBtYXggPSB2ID4gbWF4ID8gdiA6IG1pblxuLy8gICAgIH1cbi8vICAgICAvLyBjb25zdCBtaW4gPSBNYXRoLm1pbiguLi5hcnJheS5maWx0ZXIoeCA9PiAhaXNOYU4oeCkpKVxuLy8gICAgIC8vIGNvbnN0IG1heCA9IE1hdGgubWF4KC4uLmFycmF5LmZpbHRlcih4ID0+ICFpc05hTih4KSkpXG4vLyAgICAgcmV0dXJuIGFycmF5Lm1hcCh4ID0+ICh4LW1pbikgLyAobWF4LW1pbikpXG4vLyB9XG5cblxuZnVuY3Rpb24gZGlzdHJpY3RfY29sb3JfdmFsdWVzKFxuICAgIGRpc3RyaWN0OiBudW1iZXJbXSxcbiAgICBuX2Rpc3RyaWN0czpudW1iZXIsXG4gICAgc3RhdGVkYXRhOiBTdGF0ZURhdGFcbik6bnVtYmVyW10ge1xuICAgIGNvbnN0IHBhcnR5XzEgPSBuZXcgQXJyYXkobl9kaXN0cmljdHMpLmZpbGwoMClcbiAgICBjb25zdCBwYXJ0eV8yID0gbmV3IEFycmF5KG5fZGlzdHJpY3RzKS5maWxsKDApXG4gICAgZGlzdHJpY3QuZm9yRWFjaCgoZGk6bnVtYmVyLCB0aWxlX2lkeDpudW1iZXIpID0+IHtcbiAgICAgICAgcGFydHlfMVtkaV0gKz0gc3RhdGVkYXRhLnZvdGVyc1t0aWxlX2lkeF1bMF1cbiAgICAgICAgcGFydHlfMltkaV0gKz0gc3RhdGVkYXRhLnZvdGVyc1t0aWxlX2lkeF1bMV1cbiAgICB9KVxuICAgIGNvbnN0IGRpc3RfdmFsdWVzID0gcGFydHlfMS5tYXAoKHYsIGlkeCkgPT4ge1xuICAgICAgICBsZXQgcCA9ICgodi1wYXJ0eV8yW2lkeF0pIC8gKHYrcGFydHlfMltpZHhdKSlcbiAgICAgICAgcmV0dXJuIGNsYW1wKChwKjMuNSkrMC41LCAwLCAxKVxuICAgIH0pXG4gICAgY29uc3QgdGlsZV92YWx1ZXMgPSBzdGF0ZWRhdGEudm90ZXJzLm1hcCgoXyAsaSkgPT4ge1xuICAgICAgICByZXR1cm4gZGlzdF92YWx1ZXNbZGlzdHJpY3RbaV1dXG4gICAgfSlcbiAgICByZXR1cm4gdGlsZV92YWx1ZXNcbn1cblxuZnVuY3Rpb24gdGlsZV9jb2xvcl92YWx1ZXMoXG4gICAgZGlzdHJpY3Q6IG51bWJlcltdLFxuICAgIG5fZGlzdHJpY3RzOm51bWJlcixcbiAgICBzdGF0ZWRhdGE6IFN0YXRlRGF0YVxuKTpudW1iZXJbXSB7XG4gICAgY29uc3Qgbl90aWxlcyA9IHN0YXRlZGF0YS52b3RlcnMubGVuZ3RoXG4gICAgY29uc3QgZGlzdF9jb2xvcnMgPSBzdGF0ZWRhdGEudm90ZXJzLm1hcCh2b3RlcnMgPT4ge1xuICAgICAgICBjb25zdCB2ID0gKHZvdGVyc1swXS12b3RlcnNbMV0pIC8gKHZvdGVyc1swXSt2b3RlcnNbMV0pXG4gICAgICAgIHJldHVybiBjbGFtcCh2KzAuNSwgMCwgMSlcbiAgICB9KVxuICAgIHJldHVybiBkaXN0X2NvbG9yc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZHJhd19kaXN0cmljdHMoXG4gICAgcmVnbDogYW55LFxuICAgIG1hcF9kYXRhOiBhbnksXG4gICAgc3RhdGVkYXRhOiBTdGF0ZURhdGEsXG4gICAgbWV0aG9kOiBcImRpc3RyaWN0c1wiIHwgXCJ0aWxlc1wiXG4pIHtcbiAgICBjb25zdCBjb2xvcl9zaXplID0gMTAyNFxuICAgIGNvbnN0IGRyYXdfbWFwID0gZHJhd19tYXBfc2hhZGVyKHJlZ2wpXG4gICAgY29uc3QgbWFwX3RleHR1cmUgPSByZWdsLnRleHR1cmUobWFwX2RhdGEpXG4gICAgbGV0IGNvbG9yX3ZhbHVlcyA9IG5ldyBGbG9hdDMyQXJyYXkoY29sb3Jfc2l6ZSpjb2xvcl9zaXplKS5maWxsKDApXG4gICAgLy8gY29sb3JUeXBlOiByZWdsLmhhc0V4dGVuc2lvbignb2VzX3RleHR1cmVfaGFsZl9mbG9hdCcpID8gJ2hhbGYgZmxvYXQnIDogJ2Zsb2F0JyxcblxuICAgIGNvbnN0IGFsbF9jb2xvcnMgPSByZWdsLnRleHR1cmUoe1xuICAgICAgICBkYXRhOiBuZXcgQXJyYXkoMTAyNCkuZmlsbCgwKS5tYXAoKF8sIGkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgciwgZywgYiB9ID0gZDMuY29sb3IoZDMuaW50ZXJwb2xhdGVSZEJ1KGkgLyAxMDI0KSlcbiAgICAgICAgICAgIHJldHVybiBbIHIsIGcsIGIgXVxuICAgICAgICB9KSxcbiAgICAgICAgc2hhcGU6IFsxMDI0LCAxLCAzXVxuICAgIH0pXG5cbiAgICByZXR1cm4gKG54OiBudW1iZXIsIG55OiBudW1iZXIsIHNvbHV0aW9uczogbnVtYmVyW11bXSkgPT4ge1xuICAgICAgICBsZXQgaWR4ID0gMFxuICAgICAgICBjb25zb2xlLnRpbWUoJ2RyYXcnKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvbHV0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHZhbHVlc1xuICAgICAgICAgICAgaWYgKG1ldGhvZCA9PSAnZGlzdHJpY3RzJykge1xuICAgICAgICAgICAgICAgIHZhbHVlcyA9IGRpc3RyaWN0X2NvbG9yX3ZhbHVlcyhzb2x1dGlvbnNbaV0sIDgsIHN0YXRlZGF0YSlcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWVzID0gdGlsZV9jb2xvcl92YWx1ZXMoc29sdXRpb25zW2ldLCA4LCBzdGF0ZWRhdGEpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc29sdXRpb25zWzBdLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgY29sb3JfdmFsdWVzW2lkeCsrXSA9IHZhbHVlc1tqXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbG9yX3ZhbHVlcy5maWxsKDI1NSwgaWR4KVxuICAgICAgICBjb25zdCBjb2xvcnMgPSByZWdsLnRleHR1cmUoe1xuICAgICAgICAgICAgZGF0YTogY29sb3JfdmFsdWVzLFxuICAgICAgICAgICAgc2hhcGU6IFsgY29sb3Jfc2l6ZSwgY29sb3Jfc2l6ZSwgMSBdXG4gICAgICAgIH0pXG4gICAgICAgIGRyYXdfbWFwKHtcbiAgICAgICAgICAgIGNvbG9ycyxcbiAgICAgICAgICAgIG54LCBueSxcbiAgICAgICAgICAgIGFsbF9jb2xvcnMsXG4gICAgICAgICAgICBtYXA6IG1hcF90ZXh0dXJlLFxuICAgICAgICAgICAgbl90aWxlczogc3RhdGVkYXRhLnZvdGVycy5sZW5ndGgsXG4gICAgICAgICAgICBjb2xvcl90ZXh0dXJlX3NpemU6IGNvbG9yX3NpemVcbiAgICAgICAgfSlcbiAgICAgICAgY29uc29sZS50aW1lRW5kKCdkcmF3JylcbiAgICB9XG59XG5cbiIsImRlY2xhcmUgdmFyIGQzOiBhbnk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKFxuICAgIGRpdjpIVE1MRWxlbWVudCxcbiAgICAvLyBkYXRhOm51bWJlcltdW10sXG4gICAgZGF0YTphbnlbXSxcbiAgICAvLyBuYW1lczpzdHJpbmdbXSxcbiAgICBvbl9jaGFuZ2U6RnVuY3Rpb25cbikge1xuICAgIC8vIGRpbWVuc2lvblRpdGxlczogWy4uLm5hbWVzLCAnaW5kZXgnXSxcbiAgICAvLyBoaWRlQXhpczogWydpbmRleCddXG4gICAgY29uc3QgcGFyY29vcmRzID0gZDMucGFyY29vcmRzKCkoZGl2KVxuICAgICAgICAuYWxwaGEoMC4xNSlcbiAgICAgICAgLmRhdGEoZGF0YSlcbiAgICAgICAgLy8gLmRhdGEoZGF0YS5tYXAoKHYsIGkpID0+IHtcbiAgICAgICAgLy8gICAgIGNvbnN0IG9iajpvYmplY3QgPSB7IGluZGV4OiBpIH1cbiAgICAgICAgLy8gICAgIHYuZm9yRWFjaCgoX3Y6bnVtYmVyLCBfaTpudW1iZXIpID0+IG9ialtuYW1lc1tfaV1dID0gX3YpXG4gICAgICAgIC8vICAgICByZXR1cm4gb2JqXG4gICAgICAgIC8vIH0pKVxuICAgICAgICAuaGlkZUF4aXMoWydpbmRleCddKVxuICAgICAgICAvLyAuY29tcG9zaXRlKCdkYXJrZXInKVxuICAgICAgICAucmVuZGVyKClcbiAgICAgICAgLnNoYWRvd3MoKVxuICAgICAgICAvLyAuYXV0b3NjYWxlKClcbiAgICAgICAgLnJlb3JkZXJhYmxlKClcbiAgICAgICAgLmJydXNoTW9kZSgnMUQtYXhlcycpICAvLyBlbmFibGUgYnJ1c2hpbmdcblxuICAgIHBhcmNvb3Jkcy5vbignYnJ1c2gnLCAodmFsdWVzOiBhbnlbXSkgPT4ge1xuICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCA9PSAwKSByZXR1cm5cbiAgICAgICAgb25fY2hhbmdlKHZhbHVlcy5tYXAobyA9PiBvLmluZGV4KSwgdmFsdWVzKVxuICAgIH0pXG4gICAgcmV0dXJuIHBhcmNvb3Jkc1xufVxuIiwiaW1wb3J0ICcuLi9zcmMvc3R5bGUuc2NzcydcbmltcG9ydCB7IGZldGNoX2pzb24sIGltYWdlX2RhdGEsIHN1bSwgc2FtcGxlLCByYW5nZSwgY2xhbXAsIGluVmlldyB9IGZyb20gJy4vdXRpbHMnXG5pbXBvcnQgYmluZF9wYXJjb29yZHMgZnJvbSAnLi9wYXJhbGxlbF9jb29yZHMnXG5pbXBvcnQgeyBSdW5EYXRhLCBTdGF0ZURhdGEgfSBmcm9tICcuL2RhdGF0eXBlcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xuICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnRcbiAgICB2aWV3ZXJfZGl2OiBIVE1MRWxlbWVudFxuICAgIG5lZWRzX2RyYXc6IGJvb2xlYW5cbiAgICBwYXJjb29yZHM6IGFueVxuICAgIGN1cnJlbnQ6IG51bWJlcltdXG4gICAgbng6IG51bWJlclxuICAgIG55OiBudW1iZXJcbiAgICBueF9tYXg6IG51bWJlclxuICAgIG55X21heDogbnVtYmVyXG4gICAgdmFsdWVzOiBhbnlbXVxuICAgIGRyYXc6ICh4Om51bWJlciwgeTpudW1iZXIsIHNvbHV0aW9uczogbnVtYmVyW11bXSkgPT4gdm9pZFxuICAgIHJ1bmRhdGE6IFJ1bkRhdGFcbiAgICBzY3JvbGxfYmxvY2tzOiBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PlxuICAgIGJydXNoZWRfaW5kZXhlczogbnVtYmVyW11cbiAgICBjb25zdHJ1Y3RvcihkcmF3X2NvbW1hbmQsIGNvbnRhaW5lciwgcnVuZGF0YTogUnVuRGF0YSkge1xuICAgICAgICB0aGlzLmRyYXcgPSBkcmF3X2NvbW1hbmRcbiAgICAgICAgdGhpcy5ueF9tYXggPSA0XG4gICAgICAgIHRoaXMubnlfbWF4ID0gNFxuICAgICAgICB0aGlzLm54ID0gdGhpcy5ueF9tYXhcbiAgICAgICAgdGhpcy5ueSA9IHRoaXMubnlfbWF4XG4gICAgICAgIHRoaXMubmVlZHNfZHJhdyA9IHRydWVcbiAgICAgICAgdGhpcy5icnVzaGVkX2luZGV4ZXMgPSByYW5nZShydW5kYXRhLnNvbHV0aW9ucy5sZW5ndGgpXG4gICAgICAgIHRoaXMuY3VycmVudCA9IHNhbXBsZSh0aGlzLmJydXNoZWRfaW5kZXhlcywgdGhpcy5ueCp0aGlzLm55KVxuICAgICAgICB0aGlzLnJ1bmRhdGEgPSBydW5kYXRhXG4gICAgICAgIHRoaXMudmFsdWVzID0gcnVuZGF0YS52YWx1ZXMubWFwKCh2LCBpKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvYmo6b2JqZWN0ID0geyBpbmRleDogaSB9XG4gICAgICAgICAgICB2LmZvckVhY2goKF92Om51bWJlciwgX2k6bnVtYmVyKSA9PiBvYmpbcnVuZGF0YS5jb25maWcubWV0cmljc1tfaV1dID0gX3YpXG4gICAgICAgICAgICByZXR1cm4gb2JqXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMucGFyY29vcmRzID0gYmluZF9wYXJjb29yZHMoXG4gICAgICAgICAgICBjb250YWluZXIucXVlcnlTZWxlY3RvcignLnBhcmNvb3JkcycpLCB0aGlzLnZhbHVlcywgKGlkeCkgPT4gdGhpcy5fb25QYXJDb29yZHNVcGRhdGUoaWR4KVxuICAgICAgICApXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyXG4gICAgICAgIHRoaXMudmlld2VyX2RpdiA9IHRoaXMuY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5kaXN0cmljdC12aWV3ZXInKVxuICAgICAgICB0aGlzLnNjcm9sbF9ibG9ja3MgPSB0aGlzLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcuc2Nyb2xsX2Jsb2NrJylcbiAgICB9XG5cbiAgICBfb25QYXJDb29yZHNVcGRhdGUoYnJ1c2hlZF9pbmRleGVzOiBudW1iZXJbXSkge1xuICAgICAgICBjb25zdCB7IGN1cnJlbnQsIHBhcmNvb3JkcywgbnhfbWF4LCBueV9tYXggfSA9IHRoaXNcbiAgICAgICAgdGhpcy5icnVzaGVkX2luZGV4ZXMgPSBicnVzaGVkX2luZGV4ZXNcbiAgICAgICAgaWYgKGN1cnJlbnQubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHBhcmNvb3Jkcy51bmhpZ2hsaWdodCgpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50ID0gc2FtcGxlKGJydXNoZWRfaW5kZXhlcywgTWF0aC5taW4oYnJ1c2hlZF9pbmRleGVzLmxlbmd0aCwgbnhfbWF4Km55X21heCkpXG4gICAgICAgIHRoaXMubmVlZHNfZHJhdyA9IHRydWVcbiAgICB9XG5cbiAgICBvbkNsaWNrKHg6IG51bWJlciwgeTpudW1iZXIpIHtcbiAgICAgICAgLyogeCBhbmQgeSBhcmUgYm90aCBwZXJjZW50cy4gKi9cbiAgICAgICAgY29uc3QgeyAgcGFyY29vcmRzLCBueCwgbnksIG54X21heCwgbnlfbWF4fSA9IHRoaXNcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudC5sZW5ndGggPT0gMSkgeyAvLyBSZXNldC5cbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHNhbXBsZShyYW5nZSh0aGlzLnJ1bmRhdGEuc29sdXRpb25zLmxlbmd0aCksIG54X21heCpueV9tYXgpXG4gICAgICAgICAgICB0aGlzLm5lZWRzX2RyYXcgPSB0cnVlXG4gICAgICAgICAgICBwYXJjb29yZHMudW5oaWdobGlnaHQoKVxuICAgICAgICB9IGVsc2UgeyAvLyBEcmF3IGp1c3Qgb25lLlxuICAgICAgICAgICAgY29uc3QgY19pID0gTWF0aC5mbG9vcih4ICogbngpXG4gICAgICAgICAgICBjb25zdCBjX2ogPSBNYXRoLmZsb29yKHkgKiBueSlcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IFsgdGhpcy5jdXJyZW50WyAoY19pKm54KSArIGNfaiBdIF1cbiAgICAgICAgICAgIHRoaXMubmVlZHNfZHJhdyA9IHRydWVcbiAgICAgICAgICAgIHBhcmNvb3Jkcy5oaWdobGlnaHQoW3RoaXMudmFsdWVzW3RoaXMuY3VycmVudFswXV1dKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Nb3VzZU1vdmUoeDogbnVtYmVyLCB5Om51bWJlcikge1xuICAgICAgICAvKiB4IGFuZCB5IGFyZSBib3RoIHBlcmNlbnRzLiAqL1xuICAgICAgICBjb25zdCB7IG54LCBueSwgcnVuZGF0YSwgdmFsdWVzLCBwYXJjb29yZHMsIGN1cnJlbnQgfSA9IHRoaXNcbiAgICAgICAgY29uc3QgY19pID0gTWF0aC5mbG9vcih4ICogbngpXG4gICAgICAgIGNvbnN0IGNfaiA9IE1hdGguZmxvb3IoeSAqIG55KVxuICAgICAgICBjb25zdCBpbmRleCA9IGN1cnJlbnRbKGNfaSpueCkgKyBjX2pdXG4gICAgICAgIHBhcmNvb3Jkcy5oaWdobGlnaHQoW3ZhbHVlc1tpbmRleF1dKVxuICAgIH1cblxuICAgIG9uTW91c2VMZWF2ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudC5sZW5ndGggPiAxKSB7IC8vIElmIG9ubHkgb25lIGlzIHNlbGVjdGVkLCBrZWVwIGl0IGhpZ2hsaWdodGVkLlxuICAgICAgICAgICAgdGhpcy5wYXJjb29yZHMudW5oaWdobGlnaHQoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25TY3JvbGwoKSB7XG4gICAgICAgIGNvbnN0IHsgdmlld2VyX2RpdiB9ID0gdGhpc1xuICAgICAgICBjb25zdCB7IHRvcCwgYm90dG9tLCBoZWlnaHQgfSA9IHRoaXMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgIGNvbnN0IHN0aWNrX3RvcF9wb2ludCA9IDBcbiAgICAgICAgdmlld2VyX2Rpdi5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCdcbiAgICAgICAgLy8gY29uc29sZS5sb2codmlld2VyX2RpdiwgdG9wLCBib3R0b20pO1xuICAgICAgICBpZiAoYm90dG9tIDwgd2luZG93LmlubmVySGVpZ2h0KSB7XG4gICAgICAgICAgICB2aWV3ZXJfZGl2LnN0eWxlLnRvcCA9IChib3R0b20gLSB3aW5kb3cuaW5uZXJIZWlnaHQpICsgJ3B4J1xuICAgICAgICB9IGVsc2UgaWYgKHRvcCA8IHN0aWNrX3RvcF9wb2ludCkgeyAvLyBTdHVjayB0byB2aWV3LlxuICAgICAgICAgICAgdmlld2VyX2Rpdi5zdHlsZS50b3AgPSBzdGlja190b3BfcG9pbnQrJ3B4J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmlld2VyX2Rpdi5zdHlsZS50b3AgPSB0b3AgKyAncHgnICAgLy8gU2Nyb2xsIG5vcm1hbGx5IHdoZW4gYmVsb3cuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlU2Nyb2xsQmxvY2tzKClcbiAgICB9XG5cbiAgICBfdXBkYXRlU2Nyb2xsQmxvY2tzKCkge1xuICAgICAgICBsZXQgbW9zdF9taWRkbGUgPSBudWxsXG4gICAgICAgIGNvbnN0IG1vYmlsZSA9IHdpbmRvdy5pbm5lcldpZHRoIDwgODAwXG4gICAgICAgIHRoaXMuc2Nyb2xsX2Jsb2Nrcy5mb3JFYWNoKGJsb2NrID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgdG9wLCBoZWlnaHQgfSA9IGJsb2NrLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICAgICAgICBjb25zdCB5X3BlcmMgPSAodG9wK2hlaWdodC8yKSAvIHdpbmRvdy5pbm5lckhlaWdodFxuICAgICAgICAgICAgY29uc3QgZnJvbV9taWQgPSBNYXRoLmFicyh5X3BlcmMgLSAobW9iaWxlID8gMC43NSA6IDAuNSkpKjJcbiAgICAgICAgICAgIGJsb2NrLnN0eWxlLm9wYWNpdHkgPSAoMS4wIC0gY2xhbXAoZnJvbV9taWQsIDAsIDEpKS50b1N0cmluZygpXG4gICAgICAgICAgICBibG9jay5jbGFzc0xpc3QucmVtb3ZlKCdibG9ja19mb2N1cycpXG4gICAgICAgICAgICBpZiAobW9zdF9taWRkbGUgPT0gbnVsbCB8fCBmcm9tX21pZCA8IG1vc3RfbWlkZGxlWzBdKSB7XG4gICAgICAgICAgICAgICAgbW9zdF9taWRkbGUgPSBbZnJvbV9taWQsIGJsb2NrXVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBtb3N0X21pZGRsZVsxXS5jbGFzc0xpc3QuYWRkKCdibG9ja19mb2N1cycpXG4gICAgfVxuXG4gICAgb25SZXNpemUoKSB7XG4gICAgICAgIGNvbnN0IHsgcGFyY29vcmRzLCB2aWV3ZXJfZGl2IH0gPSB0aGlzXG4gICAgICAgIHBhcmNvb3Jkcy53aWR0aCh2aWV3ZXJfZGl2LmNsaWVudFdpZHRoKVxuICAgICAgICBwYXJjb29yZHMucmVzaXplKClcbiAgICAgICAgcGFyY29vcmRzLnJlbmRlcigpXG4gICAgLy8gICAgIC8vIG54ID0gX254XG4gICAgLy8gICAgIC8vIG55ID0gX255XG4gICAgLy8gICAgIC8vIG54ID0gTWF0aC5mbG9vcihjYW52YXMuY2xpZW50V2lkdGggLyBkaXN0X3dpZHRoKVxuICAgIC8vICAgICAvLyBueSA9IE1hdGguZmxvb3IoY2FudmFzLmNsaWVudEhlaWdodCAvIGRpc3Rfd2lkdGgpXG4gICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKCdzZXR0aW5nJywge254LCBueX0pXG4gICAgLy8gICAgIC8vIGRyYXcgPSBkcmF3X2Rpc3RyaWN0cyggcmVnbCwgbWFwX2RhdGEsIHN0YXRlZGF0YSApXG4gICAgLy8gICAgIC8vIHdpbmRvdy5tYXBfdGV4dHVyZS5yZXNpemUod2lkdGgsIGhlaWdodClcbiAgICAvLyAgICAgLy8gY3VycmVudCA9IHNhbXBsZShyYW5nZShzb2x1dGlvbnMubGVuZ3RoKSwgbngqbnkpXG4gICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKHtueCwgbnksIHdpZHRoLCBoZWlnaHR9LCBjdXJyZW50Lmxlbmd0aCk7XG4gICAgLy8gICAgIC8vIG5lZWRzX2RyYXcgPSB0cnVlXG4gICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIG9uU3RlcCgpIHtcbiAgICAgICAgY29uc3QgeyBuZWVkc19kcmF3LCBkcmF3LCBjdXJyZW50LCBydW5kYXRhLCB2aWV3ZXJfZGl2LCBicnVzaGVkX2luZGV4ZXMgfSA9IHRoaXNcblxuICAgICAgICBpZiAobmVlZHNfZHJhdykge1xuICAgICAgICAgICAgdGhpcy5ueCA9IE1hdGgubWluKE1hdGguY2VpbChNYXRoLnNxcnQoY3VycmVudC5sZW5ndGgpKSwgdGhpcy5ueF9tYXgpXG4gICAgICAgICAgICB0aGlzLm55ID0gdGhpcy5ueFxuICAgICAgICAgICAgZHJhdyh0aGlzLm54LCB0aGlzLm55LCBjdXJyZW50Lm1hcChpID0+IHJ1bmRhdGEuc29sdXRpb25zW2ldKSlcbiAgICAgICAgICAgIHZpZXdlcl9kaXYucXVlcnlTZWxlY3RvcignLnZpZXdfY291bnQnKS5pbm5lckhUTUwgPSBgVmlld2luZyAke2N1cnJlbnQubGVuZ3RofSAvICR7YnJ1c2hlZF9pbmRleGVzLmxlbmd0aH1gXG4gICAgICAgICAgICB0aGlzLm5lZWRzX2RyYXcgPSBmYWxzZVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmVlZHNEcmF3KCkge1xuICAgICAgICB0aGlzLm5lZWRzX2RyYXcgPSB0cnVlXG4gICAgfVxufVxuIiwiaW1wb3J0ICcuLi9zcmMvc3R5bGUuc2NzcydcbmltcG9ydCB7IGltYWdlX2RhdGEgfSBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0IG5kYXJyYXkgZnJvbSAnbmRhcnJheSdcbmltcG9ydCBSZWdsIGZyb20gJ3JlZ2wnXG5pbXBvcnQgYmluZF9wYXJjb29yZHMgZnJvbSAnLi9wYXJhbGxlbF9jb29yZHMnXG5pbXBvcnQgeyBmZXRjaF9qc29uLCBzdW0sIHNhbXBsZSwgcmFuZ2UsIGNsYW1wLCBpblZpZXcgfSBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0IHsgZHJhd19kaXN0cmljdHMgfSBmcm9tICcuL2RyYXdfY29tbWFuZCdcbmltcG9ydCB7IFJ1bkRhdGEsIFN0YXRlRGF0YSB9IGZyb20gJy4vZGF0YXR5cGVzJ1xuaW1wb3J0IFJlc3VsdFZpZXdlciBmcm9tICcuL1Jlc3VsdFZpZXdlcidcbmRlY2xhcmUgbGV0IHdpbmRvdzogYW55O1xuXG5hc3luYyBmdW5jdGlvbiBsb2FkX3ZpZXdlcnMocmVnbCk6IFByb21pc2U8UmVzdWx0Vmlld2VyW10+IHtcbiAgICBjb25zdCB2aWV3ZXJzID0gW11cbiAgICBjb25zdCBbIG1hcGRhdGEsIHN0YXRlZGF0YSBdOlsgYW55LCBTdGF0ZURhdGEgXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgaW1hZ2VfZGF0YShgLi9kYXRhL3dhcmRzLnBuZ2ApLFxuICAgICAgICBmZXRjaF9qc29uKGAuL2RhdGEvc3RhdGVkYXRhLmpzb25gKVxuICAgIF0pXG4gICAgY29uc3QgZHJhd19jbWQgPSBkcmF3X2Rpc3RyaWN0cyhyZWdsLCBtYXBkYXRhLCBzdGF0ZWRhdGEsICdkaXN0cmljdHMnKSAvLyBDb21waWxlIHdlYmdsIHNoYWRlciBhbmQgZW5jbG9zZSBkYXRhLlxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy52aWV3ZXJfcm93JykuZm9yRWFjaChhc3luYyAocm93OiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBkYXRhcGF0aCA9IHJvdy5kYXRhc2V0LmRhdGFwYXRoXG4gICAgICAgIGNvbnN0IHJ1bmRhdGE6UnVuRGF0YSA9IGF3YWl0IGZldGNoX2pzb24oYC4vZGF0YS8ke2RhdGFwYXRofS9ydW5kYXRhLmpzb25gKVxuICAgICAgICB2aWV3ZXJzLnB1c2gobmV3IFJlc3VsdFZpZXdlcihkcmF3X2NtZCwgcm93LCBydW5kYXRhKSlcbiAgICB9KVxuICAgIHJldHVybiB2aWV3ZXJzXG59XG5cbmFzeW5jIGZ1bmN0aW9uIG1haW4oKSB7XG5cbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdjYW52YXMnKVxuICAgIGNvbnN0IHJlZ2wgPSBSZWdsKHtcbiAgICAgICAgY2FudmFzLFxuICAgICAgICBleHRlbnNpb25zOiBbICdvZXNfdGV4dHVyZV9mbG9hdCcgXSxcbiAgICAgICAgb3B0aW9uYWxFeHRlbnNpb25zOiBbICdvZXNfdGV4dHVyZV9oYWxmX2Zsb2F0J10sXG4gICAgICAgIGF0dHJpYnV0ZXM6IHsgYW50aWFsaWFzOiB0cnVlIH1cbiAgICB9KVxuXG4gICAgY29uc3Qgdmlld2VycyA9IGF3YWl0IGxvYWRfdmlld2VycyhyZWdsKVxuICAgIGxldCBsYXN0X3Njcm9sbCA9IG51bGxcbiAgICBsZXQgYWN0aXZlX3ZpZXdlcjpSZXN1bHRWaWV3ZXIgPSBudWxsXG5cbiAgICBmdW5jdGlvbiBzdGVwKCkge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApXG4gICAgICAgIGlmIChsYXN0X3Njcm9sbCAhPSB3aW5kb3cuc2Nyb2xsWSkge1xuICAgICAgICAgICAgdmlld2Vycy5mb3JFYWNoKHYgPT4gdi5vblNjcm9sbCgpKVxuICAgICAgICAgICAgbGFzdF9zY3JvbGwgPSB3aW5kb3cuc2Nyb2xsWVxuICAgICAgICB9XG4gICAgICAgIGlmICghYWN0aXZlX3ZpZXdlcikge1xuICAgICAgICAgICAgYWN0aXZlX3ZpZXdlciA9IHZpZXdlcnMuZmluZCh2ID0+IGluVmlldyh2LmNvbnRhaW5lcikpXG4gICAgICAgICAgICBpZiAoYWN0aXZlX3ZpZXdlcikge1xuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdzd2l0Y2ggdG8nLCBhY3RpdmVfdmlld2VyLmNvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgYWN0aXZlX3ZpZXdlci52aWV3ZXJfZGl2LnF1ZXJ5U2VsZWN0b3IoJy5jYW52YXNfY29udGFpbmVyJykuYXBwZW5kKGNhbnZhcylcbiAgICAgICAgICAgICAgICBhY3RpdmVfdmlld2VyLm5lZWRzRHJhdygpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGl2ZV92aWV3ZXIpIHtcbiAgICAgICAgICAgIGFjdGl2ZV92aWV3ZXIub25TdGVwKClcbiAgICAgICAgICAgIGlmICghaW5WaWV3KGFjdGl2ZV92aWV3ZXIuY29udGFpbmVyKSkge1xuICAgICAgICAgICAgICAgIGFjdGl2ZV92aWV3ZXIgPSBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzaXplID0gYXN5bmMgKCkgPT4gIHtcbiAgICAgICAgLy8gY29uc3QgbW9iaWxlID0gd2luZG93LmlubmVyV2lkdGggPCA4MDBcbiAgICAgICAgLy8gbGV0IG5ld193ID0gdmlld2Vyc1swXS52aWV3ZXIuY2xpZW50V2lkdGhcbiAgICAgICAgLy8gbGV0IG5ld19oID0gd2luZG93LmlubmVySGVpZ2h0IC0gMzIwXG4gICAgICAgIC8vIGlmIChtb2JpbGUpIHtcbiAgICAgICAgLy8gICAgIC8vIGxldCBuZXdfdyA9IHZpZXdlcnNbMF0udmlld2VyLmNsaWVudFdpZHRoXG4gICAgICAgIC8vICAgICBuZXdfaCA9ICh3aW5kb3cuaW5uZXJIZWlnaHQgLyAyKSAtIDEwMFxuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coe25ld19ofSk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgLy8gY29uc3QgYmFzZV9kaW0gPSBNYXRoLm1pbih3aW5kb3cuaW5uZXJXaWR0aCAvIDEyLCAyNTYpXG4gICAgICAgIC8vIGNvbnN0IGRpbSA9IG5ld19oIC8gTWF0aC5mbG9vcihuZXdfaCAvIGJhc2VfZGltKVxuICAgICAgICAvLyBuZXdfdyAtPSBuZXdfdyAlIGRpbVxuICAgICAgICAvLyBjYW52YXMuc3R5bGUud2lkdGggPSBuZXdfdyArICdweCdcbiAgICAgICAgLy8gY2FudmFzLnN0eWxlLmhlaWdodCA9IG5ld19oICsgJ3B4J1xuICAgICAgICAvLyAvLyBjb25zb2xlLmxvZyhuZXdfdyAvIGRpbSwgbmV3X2ggLyBkaW0pXG4gICAgICAgIHZpZXdlcnMuZm9yRWFjaCh2ID0+IHYub25SZXNpemUoKSlcbiAgICB9XG4gICAgY2FudmFzLm9uY2xpY2sgPSAoeyBvZmZzZXRYOiB4LCBvZmZzZXRZOiB5IH0pID0+IHtcbiAgICAgICAgY29uc3QgeyBjbGllbnRXaWR0aDogd2lkdGgsIGNsaWVudEhlaWdodDogaGVpZ2h0IH0gPSBjYW52YXNcbiAgICAgICAgYWN0aXZlX3ZpZXdlci5vbkNsaWNrKHggLyB3aWR0aCwgeSAvIGhlaWdodClcbiAgICB9XG4gICAgY2FudmFzLm9ubW91c2Vtb3ZlID0gKHsgb2Zmc2V0WDogeCwgb2Zmc2V0WTogeSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgY2xpZW50V2lkdGg6IHdpZHRoLCBjbGllbnRIZWlnaHQ6IGhlaWdodCB9ID0gY2FudmFzXG4gICAgICAgIGFjdGl2ZV92aWV3ZXIub25Nb3VzZU1vdmUoeCAvIHdpZHRoLCB5IC8gaGVpZ2h0KVxuICAgIH1cbiAgICBjYW52YXMub25tb3VzZWxlYXZlID0gKCkgPT4ge1xuICAgICAgICBhY3RpdmVfdmlld2VyLm9uTW91c2VMZWF2ZSgpXG4gICAgfVxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcClcbiAgICB3aW5kb3cub25yZXNpemUgPSByZXNpemVcbiAgICByZXNpemUoKVxufVxuXG5tYWluKClcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJlZ2w6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIHJlZ2woe1xuICAgICAgICBmcmFnOiBgXG4gICAgICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcbiAgICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xuICAgICAgICB1bmlmb3JtIHNhbXBsZXIyRCBjb2xvcnM7XG4gICAgICAgIHVuaWZvcm0gc2FtcGxlcjJEIGFsbF9jb2xvcnM7XG4gICAgICAgIHVuaWZvcm0gdmVjMiB1X3NpemU7XG4gICAgICAgIHZhcnlpbmcgdmVjMiB1djtcblxuICAgICAgICB1bmlmb3JtIGZsb2F0IG54O1xuICAgICAgICB1bmlmb3JtIGZsb2F0IG55O1xuICAgICAgICB1bmlmb3JtIGZsb2F0IGNvbG9yX3RleHR1cmVfc2l6ZTtcbiAgICAgICAgdW5pZm9ybSBmbG9hdCBuX3RpbGVzO1xuXG4gICAgICAgIGNvbnN0IGZsb2F0IHMxNiA9IDY1NjUzLjA7XG4gICAgICAgIGNvbnN0IGZsb2F0IHM4ICA9IDI1Ni4wO1xuICAgICAgICBjb25zdCB2ZWMzIFJFRCAgID0gdmVjMygxLjAsIDAuMCwgMC4wKTtcbiAgICAgICAgY29uc3QgdmVjMyBCTFVFICA9IHZlYzMoMC4wLCAwLjAsIDEuMCk7XG4gICAgICAgIGNvbnN0IHZlYzMgV0hJVEUgPSB2ZWMzKDEuMCwgMS4wLCAxLjApO1xuXG4gICAgICAgIC8vIHZlYzQgUmRCdShmbG9hdCB2YWx1ZSkge1xuICAgICAgICAgICAgLy8gcmV0dXJuIHJkYnVfY29sb3JzW2ludCh2YWx1ZSAqIDUxMildXG4gICAgICAgICAgICAvLyBpZiAodmFsdWUgPCAwLjUpIHtcbiAgICAgICAgICAgIC8vICAgICBmbG9hdCBwID0gdmFsdWUgLyAwLjU7XG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIHZlYzQobWl4KEJMVUUsIFdISVRFLCBwKSwgMS4wKTtcbiAgICAgICAgICAgIC8vIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyAgICAgZmxvYXQgcCA9ICh2YWx1ZSAtIDAuNSkgLyAwLjU7XG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIHZlYzQobWl4KFdISVRFLCBSRUQsIHApLCAxLjApO1xuICAgICAgICAgICAgLy8gfVxuICAgICAgICAvLyB9XG5cbiAgICAgICAgdmVjMiB0aWxlSWR4MmNvbG9yUG9zKGludCB0aWxlX2luZGV4LCB2ZWMyIGNlbGwpIHtcbiAgICAgICAgICAgIGZsb2F0IGdsb2JhbF9pbmRleCA9IGZsb2F0KHRpbGVfaW5kZXgpICsgKChjZWxsLnkgKiBueCkrY2VsbC54KSAqIG5fdGlsZXM7XG4gICAgICAgICAgICByZXR1cm4gdmVjMihcbiAgICAgICAgICAgICAgICAobW9kKCBnbG9iYWxfaW5kZXgsIGNvbG9yX3RleHR1cmVfc2l6ZSApKSAvIGNvbG9yX3RleHR1cmVfc2l6ZSxcbiAgICAgICAgICAgICAgICBmbG9vciggZ2xvYmFsX2luZGV4IC8gY29sb3JfdGV4dHVyZV9zaXplICkgLyBjb2xvcl90ZXh0dXJlX3NpemVcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnQgZ2V0X3RpbGVfaW5kZXgodmVjMiBfdXYsIHZlYzIgY2VsbCkge1xuICAgICAgICAgICAgdmVjMiBjZWxsX3NoYXBlID0gdmVjMigxLjAvbngsIDEuMC9ueSk7XG4gICAgICAgICAgICB2ZWMyIGNlbGxfdXYgPSB2ZWMyKChfdXYueCAtIGNlbGwueCpjZWxsX3NoYXBlLngpL2NlbGxfc2hhcGUueCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKF91di55IC0gY2VsbC55KmNlbGxfc2hhcGUueSkvY2VsbF9zaGFwZS55KTtcbiAgICAgICAgICAgIHZlYzMgdmFsdWUgPSB0ZXh0dXJlMkQobWFwLCBjZWxsX3V2KS5yZ2I7XG4gICAgICAgICAgICBpbnQgdGlsZV9pbmRleCA9IGludCh2YWx1ZS5yICogMjU1LjAqczE2KSArIChpbnQodmFsdWUuZyAqIDI1NS4wICpzOCkpICsgaW50KHZhbHVlLmIgKiAyNTUuMCk7XG4gICAgICAgICAgICByZXR1cm4gdGlsZV9pbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZlYzMgZ2V0X2NvbG9yKGludCB0aWxlX2luZGV4LCB2ZWMyIGNlbGwpIHtcbiAgICAgICAgICAgIHZlYzIgY29sb3JQb3MgPSB0aWxlSWR4MmNvbG9yUG9zKHRpbGVfaW5kZXggLSAxLCBjZWxsKTtcbiAgICAgICAgICAgIGZsb2F0IGNvbG9yX3ZhbHVlID0gdGV4dHVyZTJEKGNvbG9ycywgY29sb3JQb3MpLng7XG5cbiAgICAgICAgICAgIHZlYzMgY29sb3IgPSB0ZXh0dXJlMkQoYWxsX2NvbG9ycywgdmVjMihjb2xvcl92YWx1ZSwgMC4wKSkucmdiO1xuICAgICAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgICAgICAgICAgLy8gcmV0dXJuIHZlYzMoY29sb3JfdmFsdWUsIDAuMCwgMC4wKTtcbiAgICAgICAgICAgIC8vIHZlYzMgY29sb3IgPSB0ZXh0dXJlMkQoY29sb3JzLCBjb2xvclBvcykucmdiO1xuICAgICAgICAgICAgLy8gcmV0dXJuIGNvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgdm9pZCBtYWluICgpIHtcbiAgICAgICAgICAgIC8vIFdlIGFyZSBkcmF3aW5nIGEgZ3JpZCBvZiBtYXBzLiBGaXJzdCBmaW5kIHRoZSBjZWxsIGluZGV4LlxuICAgICAgICAgICAgdmVjMiBjZWxsID0gdmVjMihmbG9vcih1di54ICogbngpLCBmbG9vcih1di55ICogbnkpKTtcblxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIG9mZnNldCB3aXRoaW4gdGhpcyBjZWxsLlxuICAgICAgICAgICAgaW50IHRpbGVfaW5kZXggPSBnZXRfdGlsZV9pbmRleCh1diwgY2VsbCk7XG4gICAgICAgICAgICBpZiAodGlsZV9pbmRleCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgZGlzY2FyZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmVjMyBjb2xvciA9IGdldF9jb2xvcih0aWxlX2luZGV4LCBjZWxsKTtcbiAgICAgICAgICAgIGludCB0aV9sZWZ0ID0gZ2V0X3RpbGVfaW5kZXgodmVjMih1dit2ZWMyKDAuMCwgLTEuMCkqdV9zaXplKSwgY2VsbCk7XG4gICAgICAgICAgICBpbnQgdGlfdG9wID0gZ2V0X3RpbGVfaW5kZXgodmVjMih1dit2ZWMyKC0xLjAsIDAuMCkqdV9zaXplKSwgY2VsbCk7XG4gICAgICAgICAgICAvL2ludCB0aV90b3BfbGVmdCA9IGdldF90aWxlX2luZGV4KHZlYzIodXYrdmVjMigtMS4wLCAtMS4wKSp1X3NpemUpLCBjZWxsKTtcblxuICAgICAgICAgICAgaW50IHRpX3JpZ2h0ID0gZ2V0X3RpbGVfaW5kZXgodmVjMih1dit2ZWMyKDAuMCwgMS4wKSp1X3NpemUpLCBjZWxsKTtcbiAgICAgICAgICAgIGludCB0aV9ib3R0b20gPSBnZXRfdGlsZV9pbmRleCh2ZWMyKHV2K3ZlYzIoMS4wLCAtMC4wKSp1X3NpemUpLCBjZWxsKTtcblxuICAgICAgICAgICAgYm9vbCBlcSA9IGFsbChlcXVhbChjb2xvciwgZ2V0X2NvbG9yKHRpX3RvcCwgY2VsbCkpKSAmJiBcXFxuICAgICAgICAgICAgICAgICAgICAgIGFsbChlcXVhbChjb2xvciwgZ2V0X2NvbG9yKHRpX2xlZnQsIGNlbGwpKSkgJiYgXFxcbiAgICAgICAgICAgICAgICAgICAgICBhbGwoZXF1YWwoY29sb3IsIGdldF9jb2xvcih0aV9yaWdodCwgY2VsbCkpKSAmJiBcXFxuICAgICAgICAgICAgICAgICAgICAgIGFsbChlcXVhbChjb2xvciwgZ2V0X2NvbG9yKHRpX2JvdHRvbSwgY2VsbCkpKTtcblxuICAgICAgICAgICAgaWYgKCFlcSkge1xuICAgICAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoV0hJVEUsIDEuMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoY29sb3IsIDEuMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1gLFxuICAgICAgICB2ZXJ0OiBgXG4gICAgICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcbiAgICAgICAgYXR0cmlidXRlIHZlYzIgcG9zaXRpb247XG4gICAgICAgIHZhcnlpbmcgdmVjMiB1djtcbiAgICAgICAgdm9pZCBtYWluICgpIHtcbiAgICAgICAgICB1diA9IHZlYzIocG9zaXRpb24ueSwgMS4wIC0gcG9zaXRpb24ueCk7XG4gICAgICAgICAgZ2xfUG9zaXRpb24gPSB2ZWM0KDEuMCAtIDIuMCAqIHBvc2l0aW9uLCAwLCAxKTtcbiAgICAgICAgfWAsXG4gICAgICAgIGF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBbLTIsIDAsIDAsIC0yLCAyLCAyXVxuICAgICAgICB9LFxuICAgICAgICB1bmlmb3Jtczoge1xuICAgICAgICAgICAgbng6IHJlZ2wucHJvcCgnbnknKSxcbiAgICAgICAgICAgIG55OiByZWdsLnByb3AoJ254JyksXG4gICAgICAgICAgICBtYXA6IHJlZ2wucHJvcCgnbWFwJyksXG4gICAgICAgICAgICBjb2xvcnM6IHJlZ2wucHJvcCgnY29sb3JzJyksXG4gICAgICAgICAgICBhbGxfY29sb3JzOiByZWdsLnByb3AoJ2FsbF9jb2xvcnMnKSxcbiAgICAgICAgICAgIG5fdGlsZXM6IHJlZ2wucHJvcCgnbl90aWxlcycpLFxuICAgICAgICAgICAgY29sb3JfdGV4dHVyZV9zaXplOiByZWdsLnByb3AoJ2NvbG9yX3RleHR1cmVfc2l6ZScpLFxuICAgICAgICAgICAgdV9zaXplOiBjdHggPT4gWzEgLyBjdHguZnJhbWVidWZmZXJXaWR0aCwgMSAvIGN0eC5mcmFtZWJ1ZmZlckhlaWdodF0sXG4gICAgICAgIH0sXG4gICAgICAgIGNvdW50OiAzXG4gICAgfSlcbn0iXSwic291cmNlUm9vdCI6IiJ9