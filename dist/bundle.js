!function(e){var t={};function r(n){if(t[n])return t[n].exports;var a=t[n]={i:n,l:!1,exports:{}};return e[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(n,a,function(t){return e[t]}.bind(null,a));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=8)}([function(e,t,r){var n=r(6),a=r(7),i="undefined"!=typeof Float64Array;function o(e,t){return e[0]-t[0]}function f(){var e,t=this.stride,r=new Array(t.length);for(e=0;e<r.length;++e)r[e]=[Math.abs(t[e]),e];r.sort(o);var n=new Array(r.length);for(e=0;e<n.length;++e)n[e]=r[e][1];return n}function u(e,t){var r=["View",t,"d",e].join("");t<0&&(r="View_Nil"+e);var a="generic"===e;if(-1===t){var i="function "+r+"(a){this.data=a;};var proto="+r+".prototype;proto.dtype='"+e+"';proto.index=function(){return -1};proto.size=0;proto.dimension=-1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function(){return new "+r+"(this.data);};proto.get=proto.set=function(){};proto.pick=function(){return null};return function construct_"+r+"(a){return new "+r+"(a);}";return new Function(i)()}if(0===t){i="function "+r+"(a,d) {this.data = a;this.offset = d};var proto="+r+".prototype;proto.dtype='"+e+"';proto.index=function(){return this.offset};proto.dimension=0;proto.size=1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function "+r+"_copy() {return new "+r+"(this.data,this.offset)};proto.pick=function "+r+"_pick(){return TrivialArray(this.data);};proto.valueOf=proto.get=function "+r+"_get(){return "+(a?"this.data.get(this.offset)":"this.data[this.offset]")+"};proto.set=function "+r+"_set(v){return "+(a?"this.data.set(this.offset,v)":"this.data[this.offset]=v")+"};return function construct_"+r+"(a,b,c,d){return new "+r+"(a,d)}";return new Function("TrivialArray",i)(s[e][0])}i=["'use strict'"];var o=n(t),u=o.map((function(e){return"i"+e})),c="this.offset+"+o.map((function(e){return"this.stride["+e+"]*i"+e})).join("+"),l=o.map((function(e){return"b"+e})).join(","),d=o.map((function(e){return"c"+e})).join(",");i.push("function "+r+"(a,"+l+","+d+",d){this.data=a","this.shape=["+l+"]","this.stride=["+d+"]","this.offset=d|0}","var proto="+r+".prototype","proto.dtype='"+e+"'","proto.dimension="+t),i.push("Object.defineProperty(proto,'size',{get:function "+r+"_size(){return "+o.map((function(e){return"this.shape["+e+"]"})).join("*"),"}})"),1===t?i.push("proto.order=[0]"):(i.push("Object.defineProperty(proto,'order',{get:"),t<4?(i.push("function "+r+"_order(){"),2===t?i.push("return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})"):3===t&&i.push("var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);if(s0>s1){if(s1>s2){return [2,1,0];}else if(s0>s2){return [1,2,0];}else{return [1,0,2];}}else if(s0>s2){return [2,0,1];}else if(s2>s1){return [0,1,2];}else{return [0,2,1];}}})")):i.push("ORDER})")),i.push("proto.set=function "+r+"_set("+u.join(",")+",v){"),a?i.push("return this.data.set("+c+",v)}"):i.push("return this.data["+c+"]=v}"),i.push("proto.get=function "+r+"_get("+u.join(",")+"){"),a?i.push("return this.data.get("+c+")}"):i.push("return this.data["+c+"]}"),i.push("proto.index=function "+r+"_index(",u.join(),"){return "+c+"}"),i.push("proto.hi=function "+r+"_hi("+u.join(",")+"){return new "+r+"(this.data,"+o.map((function(e){return["(typeof i",e,"!=='number'||i",e,"<0)?this.shape[",e,"]:i",e,"|0"].join("")})).join(",")+","+o.map((function(e){return"this.stride["+e+"]"})).join(",")+",this.offset)}");var p=o.map((function(e){return"a"+e+"=this.shape["+e+"]"})),m=o.map((function(e){return"c"+e+"=this.stride["+e+"]"}));i.push("proto.lo=function "+r+"_lo("+u.join(",")+"){var b=this.offset,d=0,"+p.join(",")+","+m.join(","));for(var h=0;h<t;++h)i.push("if(typeof i"+h+"==='number'&&i"+h+">=0){d=i"+h+"|0;b+=c"+h+"*d;a"+h+"-=d}");i.push("return new "+r+"(this.data,"+o.map((function(e){return"a"+e})).join(",")+","+o.map((function(e){return"c"+e})).join(",")+",b)}"),i.push("proto.step=function "+r+"_step("+u.join(",")+"){var "+o.map((function(e){return"a"+e+"=this.shape["+e+"]"})).join(",")+","+o.map((function(e){return"b"+e+"=this.stride["+e+"]"})).join(",")+",c=this.offset,d=0,ceil=Math.ceil");for(h=0;h<t;++h)i.push("if(typeof i"+h+"==='number'){d=i"+h+"|0;if(d<0){c+=b"+h+"*(a"+h+"-1);a"+h+"=ceil(-a"+h+"/d)}else{a"+h+"=ceil(a"+h+"/d)}b"+h+"*=d}");i.push("return new "+r+"(this.data,"+o.map((function(e){return"a"+e})).join(",")+","+o.map((function(e){return"b"+e})).join(",")+",c)}");var b=new Array(t),v=new Array(t);for(h=0;h<t;++h)b[h]="a[i"+h+"]",v[h]="b[i"+h+"]";i.push("proto.transpose=function "+r+"_transpose("+u+"){"+u.map((function(e,t){return e+"=("+e+"===undefined?"+t+":"+e+"|0)"})).join(";"),"var a=this.shape,b=this.stride;return new "+r+"(this.data,"+b.join(",")+","+v.join(",")+",this.offset)}"),i.push("proto.pick=function "+r+"_pick("+u+"){var a=[],b=[],c=this.offset");for(h=0;h<t;++h)i.push("if(typeof i"+h+"==='number'&&i"+h+">=0){c=(c+this.stride["+h+"]*i"+h+")|0}else{a.push(this.shape["+h+"]);b.push(this.stride["+h+"])}");return i.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}"),i.push("return function construct_"+r+"(data,shape,stride,offset){return new "+r+"(data,"+o.map((function(e){return"shape["+e+"]"})).join(",")+","+o.map((function(e){return"stride["+e+"]"})).join(",")+",offset)}"),new Function("CTOR_LIST","ORDER",i.join("\n"))(s[e],f)}var s={float32:[],float64:[],int8:[],int16:[],int32:[],uint8:[],uint16:[],uint32:[],array:[],uint8_clamped:[],bigint64:[],biguint64:[],buffer:[],generic:[]};e.exports=function(e,t,r,n){if(void 0===e)return(0,s.array[0])([]);"number"==typeof e&&(e=[e]),void 0===t&&(t=[e.length]);var o=t.length;if(void 0===r){r=new Array(o);for(var f=o-1,c=1;f>=0;--f)r[f]=c,c*=t[f]}if(void 0===n){n=0;for(f=0;f<o;++f)r[f]<0&&(n-=(t[f]-1)*r[f])}for(var l=function(e){if(a(e))return"buffer";if(i)switch(Object.prototype.toString.call(e)){case"[object Float64Array]":return"float64";case"[object Float32Array]":return"float32";case"[object Int8Array]":return"int8";case"[object Int16Array]":return"int16";case"[object Int32Array]":return"int32";case"[object Uint8Array]":return"uint8";case"[object Uint16Array]":return"uint16";case"[object Uint32Array]":return"uint32";case"[object Uint8ClampedArray]":return"uint8_clamped";case"[object BigInt64Array]":return"bigint64";case"[object BigUint64Array]":return"biguint64"}return Array.isArray(e)?"array":"generic"}(e),d=s[l];d.length<=o+1;)d.push(u(l,d.length-1));return(0,d[o+1])(e,t,r,n)}},function(e,t,r){e.exports=function(){"use strict";var e=function(e){return e instanceof Uint8Array||e instanceof Uint16Array||e instanceof Uint32Array||e instanceof Int8Array||e instanceof Int16Array||e instanceof Int32Array||e instanceof Float32Array||e instanceof Float64Array||e instanceof Uint8ClampedArray},t=function(e,t){for(var r=Object.keys(t),n=0;n<r.length;++n)e[r[n]]=t[r[n]];return e};function r(e){var t=new Error("(regl) "+e);throw console.error(t),t}function n(e,t){e||r(t)}function a(e){return e?": "+e:""}function i(e,t,n){t.indexOf(e)<0&&r("invalid value"+a(n)+". must be one of: "+t)}var o=["gl","canvas","container","attributes","pixelRatio","extensions","optionalExtensions","profile","onDone"];function f(e,t){for(e+="";e.length<t;)e=" "+e;return e}function u(){this.name="unknown",this.lines=[],this.index={},this.hasErrors=!1}function s(e,t){this.number=e,this.line=t,this.errors=[]}function c(e,t,r){this.file=e,this.line=t,this.message=r}function l(){var e=new Error,t=(e.stack||e).toString(),r=/compileProcedure.*\n\s*at.*\((.*)\)/.exec(t);if(r)return r[1];var n=/compileProcedure.*\n\s*at\s+(.*)(\n|$)/.exec(t);return n?n[1]:"unknown"}function d(){var e=new Error,t=(e.stack||e).toString(),r=/at REGLCommand.*\n\s+at.*\((.*)\)/.exec(t);if(r)return r[1];var n=/at REGLCommand.*\n\s+at\s+(.*)\n/.exec(t);return n?n[1]:"unknown"}function p(e,t){var r,n=e.split("\n"),a=1,i=0,o={unknown:new u,0:new u};o.unknown.name=o[0].name=t||l(),o.unknown.lines.push(new s(0,""));for(var f=0;f<n.length;++f){var c=n[f],d=/^\s*\#\s*(\w+)\s+(.+)\s*$/.exec(c);if(d)switch(d[1]){case"line":var p=/(\d+)(\s+\d+)?/.exec(d[2]);p&&(a=0|p[1],p[2]&&((i=0|p[2])in o||(o[i]=new u)));break;case"define":var m=/SHADER_NAME(_B64)?\s+(.*)$/.exec(d[2]);m&&(o[i].name=m[1]?(r=m[2],"undefined"!=typeof atob?atob(r):"base64:"+r):m[2])}o[i].lines.push(new s(a++,c))}return Object.keys(o).forEach((function(e){var t=o[e];t.lines.forEach((function(e){t.index[e.number]=e}))})),o}function m(e){e._commandRef=l()}function h(e,t){var n=d();r(e+" in command "+(t||l())+("unknown"===n?"":" called from "+n))}function b(e,t,r,n){typeof e!==t&&h("invalid parameter type"+a(r)+". expected "+t+", got "+typeof e,n||l())}var v={};function g(e,t){return 32820===e||32819===e||33635===e?2:34042===e?4:v[e]*t}function y(e){return!(e&e-1||!e)}v[5120]=v[5121]=1,v[5122]=v[5123]=v[36193]=v[33635]=v[32819]=v[32820]=2,v[5124]=v[5125]=v[5126]=v[34042]=4;var x=t(n,{optional:function(e){e()},raise:r,commandRaise:h,command:function(e,t,r){e||h(t,r||l())},parameter:function(e,t,n){e in t||r("unknown parameter ("+e+")"+a(n)+". possible values: "+Object.keys(t).join())},commandParameter:function(e,t,r,n){e in t||h("unknown parameter ("+e+")"+a(r)+". possible values: "+Object.keys(t).join(),n||l())},constructor:function(e){Object.keys(e).forEach((function(e){o.indexOf(e)<0&&r('invalid regl constructor argument "'+e+'". must be one of '+o)}))},type:function(e,t,n){typeof e!==t&&r("invalid parameter type"+a(n)+". expected "+t+", got "+typeof e)},commandType:b,isTypedArray:function(t,n){e(t)||r("invalid parameter type"+a(n)+". must be a typed array")},nni:function(e,t){e>=0&&(0|e)===e||r("invalid parameter type, ("+e+")"+a(t)+". must be a nonnegative integer")},oneOf:i,shaderError:function(e,t,r,a,i){if(!e.getShaderParameter(t,e.COMPILE_STATUS)){var o=e.getShaderInfoLog(t),u=a===e.FRAGMENT_SHADER?"fragment":"vertex";b(r,"string",u+" shader source must be a string",i);var s=p(r,i),l=function(e){var t=[];return e.split("\n").forEach((function(e){if(!(e.length<5)){var r=/^ERROR\:\s+(\d+)\:(\d+)\:\s*(.*)$/.exec(e);r?t.push(new c(0|r[1],0|r[2],r[3].trim())):e.length>0&&t.push(new c("unknown",0,e))}})),t}(o);!function(e,t){t.forEach((function(t){var r=e[t.file];if(r){var n=r.index[t.line];if(n)return n.errors.push(t),void(r.hasErrors=!0)}e.unknown.hasErrors=!0,e.unknown.lines[0].errors.push(t)}))}(s,l),Object.keys(s).forEach((function(e){var t=s[e];if(t.hasErrors){var r=[""],n=[""];a("file number "+e+": "+t.name+"\n","color:red;text-decoration:underline;font-weight:bold"),t.lines.forEach((function(e){if(e.errors.length>0){a(f(e.number,4)+"|  ","background-color:yellow; font-weight:bold"),a(e.line+"\n","color:red; background-color:yellow; font-weight:bold");var t=0;e.errors.forEach((function(r){var n=r.message,i=/^\s*\'(.*)\'\s*\:\s*(.*)$/.exec(n);if(i){var o=i[1];switch(n=i[2],o){case"assign":o="="}t=Math.max(e.line.indexOf(o,t),0)}else t=0;a(f("| ",6)),a(f("^^^",t+3)+"\n","font-weight:bold"),a(f("| ",6)),a(n+"\n","font-weight:bold")})),a(f("| ",6)+"\n")}else a(f(e.number,4)+"|  "),a(e.line+"\n","color:red")})),"undefined"==typeof document||window.chrome?console.log(r.join("")):(n[0]=r.join("%c"),console.log.apply(console,n))}function a(e,t){r.push(e),n.push(t||"")}})),n.raise("Error compiling "+u+" shader, "+s[0].name)}},linkError:function(e,t,r,a,i){if(!e.getProgramParameter(t,e.LINK_STATUS)){var o=e.getProgramInfoLog(t),f=p(r,i),u='Error linking program with vertex shader, "'+p(a,i)[0].name+'", and fragment shader "'+f[0].name+'"';"undefined"!=typeof document?console.log("%c"+u+"\n%c"+o,"color:red;text-decoration:underline;font-weight:bold","color:red"):console.log(u+"\n"+o),n.raise(u)}},callSite:d,saveCommandRef:m,saveDrawInfo:function(e,t,r,n){function a(e){return e?n.id(e):0}function i(e,t){Object.keys(t).forEach((function(t){e[n.id(t)]=!0}))}m(e),e._fragId=a(e.static.frag),e._vertId=a(e.static.vert);var o=e._uniformSet={};i(o,t.static),i(o,t.dynamic);var f=e._attributeSet={};i(f,r.static),i(f,r.dynamic),e._hasCount="count"in e.static||"count"in e.dynamic||"elements"in e.static||"elements"in e.dynamic},framebufferFormat:function(e,t,r){e.texture?i(e.texture._texture.internalformat,t,"unsupported texture format for attachment"):i(e.renderbuffer._renderbuffer.format,r,"unsupported renderbuffer format for attachment")},guessCommand:l,texture2D:function(e,t,r){var a,i=t.width,o=t.height,f=t.channels;n(i>0&&i<=r.maxTextureSize&&o>0&&o<=r.maxTextureSize,"invalid texture shape"),33071===e.wrapS&&33071===e.wrapT||n(y(i)&&y(o),"incompatible wrap mode for texture, both width and height must be power of 2"),1===t.mipmask?1!==i&&1!==o&&n(9984!==e.minFilter&&9986!==e.minFilter&&9985!==e.minFilter&&9987!==e.minFilter,"min filter requires mipmap"):(n(y(i)&&y(o),"texture must be a square power of 2 to support mipmapping"),n(t.mipmask===(i<<1)-1,"missing or incomplete mipmap data")),5126===t.type&&(r.extensions.indexOf("oes_texture_float_linear")<0&&n(9728===e.minFilter&&9728===e.magFilter,"filter not supported, must enable oes_texture_float_linear"),n(!e.genMipmaps,"mipmap generation not supported with float textures"));var u=t.images;for(a=0;a<16;++a)if(u[a]){var s=i>>a,c=o>>a;n(t.mipmask&1<<a,"missing mipmap data");var l=u[a];if(n(l.width===s&&l.height===c,"invalid shape for mip images"),n(l.format===t.format&&l.internalformat===t.internalformat&&l.type===t.type,"incompatible type for mip image"),l.compressed);else if(l.data){var d=Math.ceil(g(l.type,f)*s/l.unpackAlignment)*l.unpackAlignment;n(l.data.byteLength===d*c,"invalid data for image, buffer size is inconsistent with image format")}else l.element||l.copy}else e.genMipmaps||n(0==(t.mipmask&1<<a),"extra mipmap data");t.compressed&&n(!e.genMipmaps,"mipmap generation for compressed images not supported")},textureCube:function(e,t,r,a){var i=e.width,o=e.height,f=e.channels;n(i>0&&i<=a.maxTextureSize&&o>0&&o<=a.maxTextureSize,"invalid texture shape"),n(i===o,"cube map must be square"),n(33071===t.wrapS&&33071===t.wrapT,"wrap mode not supported by cube map");for(var u=0;u<r.length;++u){var s=r[u];n(s.width===i&&s.height===o,"inconsistent cube map face shape"),t.genMipmaps&&(n(!s.compressed,"can not generate mipmap for compressed textures"),n(1===s.mipmask,"can not specify mipmaps and generate mipmaps"));for(var c=s.images,l=0;l<16;++l){var d=c[l];if(d){var p=i>>l,m=o>>l;n(s.mipmask&1<<l,"missing mipmap data"),n(d.width===p&&d.height===m,"invalid shape for mip images"),n(d.format===e.format&&d.internalformat===e.internalformat&&d.type===e.type,"incompatible type for mip image"),d.compressed||(d.data?n(d.data.byteLength===p*m*Math.max(g(d.type,f),d.unpackAlignment),"invalid data for image, buffer size is inconsistent with image format"):d.element||d.copy)}}}}}),w=0;function _(e,t){this.id=w++,this.type=e,this.data=t}function k(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"')}function A(e){return"["+function e(t){if(0===t.length)return[];var r=t.charAt(0),n=t.charAt(t.length-1);if(t.length>1&&r===n&&('"'===r||"'"===r))return['"'+k(t.substr(1,t.length-2))+'"'];var a=/\[(false|true|null|\d+|'[^']*'|"[^"]*")\]/.exec(t);if(a)return e(t.substr(0,a.index)).concat(e(a[1])).concat(e(t.substr(a.index+a[0].length)));var i=t.split(".");if(1===i.length)return['"'+k(t)+'"'];for(var o=[],f=0;f<i.length;++f)o=o.concat(e(i[f]));return o}(e).join("][")+"]"}var S={DynamicVariable:_,define:function(e,t){return new _(e,A(t+""))},isDynamic:function(e){return"function"==typeof e&&!e._reglType||e instanceof _},unbox:function(e,t){return"function"==typeof e?new _(0,e):e},accessor:A},j={next:"function"==typeof requestAnimationFrame?function(e){return requestAnimationFrame(e)}:function(e){return setTimeout(e,16)},cancel:"function"==typeof cancelAnimationFrame?function(e){return cancelAnimationFrame(e)}:clearTimeout},E="undefined"!=typeof performance&&performance.now?function(){return performance.now()}:function(){return+new Date};function T(e){return"string"==typeof e?e.split():(x(Array.isArray(e),"invalid extension array"),e)}function D(e){return"string"==typeof e?(x("undefined"!=typeof document,"not supported outside of DOM"),document.querySelector(e)):e}function O(e){var r,n,a,i,o,f=e||{},u={},s=[],c=[],l="undefined"==typeof window?1:window.devicePixelRatio,d=!1,p=function(e){e&&x.raise(e)},m=function(){};if("string"==typeof f?(x("undefined"!=typeof document,"selector queries only supported in DOM enviroments"),r=document.querySelector(f),x(r,"invalid query string for element")):"object"==typeof f?"string"==typeof(o=f).nodeName&&"function"==typeof o.appendChild&&"function"==typeof o.getBoundingClientRect?r=f:function(e){return"function"==typeof e.drawArrays||"function"==typeof e.drawElements}(f)?a=(i=f).canvas:(x.constructor(f),"gl"in f?i=f.gl:"canvas"in f?a=D(f.canvas):"container"in f&&(n=D(f.container)),"attributes"in f&&(u=f.attributes,x.type(u,"object","invalid context attributes")),"extensions"in f&&(s=T(f.extensions)),"optionalExtensions"in f&&(c=T(f.optionalExtensions)),"onDone"in f&&(x.type(f.onDone,"function","invalid or missing onDone callback"),p=f.onDone),"profile"in f&&(d=!!f.profile),"pixelRatio"in f&&(l=+f.pixelRatio,x(l>0,"invalid pixel ratio"))):x.raise("invalid arguments to regl"),r&&("canvas"===r.nodeName.toLowerCase()?a=r:n=r),!i){if(!a){x("undefined"!=typeof document,"must manually specify webgl context outside of DOM environments");var h=function(e,r,n){var a=document.createElement("canvas");function i(){var r=window.innerWidth,i=window.innerHeight;if(e!==document.body){var o=e.getBoundingClientRect();r=o.right-o.left,i=o.bottom-o.top}a.width=n*r,a.height=n*i,t(a.style,{width:r+"px",height:i+"px"})}return t(a.style,{border:0,margin:0,padding:0,top:0,left:0}),e.appendChild(a),e===document.body&&(a.style.position="absolute",t(e.style,{margin:0,padding:0})),window.addEventListener("resize",i,!1),i(),{canvas:a,onDestroy:function(){window.removeEventListener("resize",i),e.removeChild(a)}}}(n||document.body,0,l);if(!h)return null;a=h.canvas,m=h.onDestroy}i=function(e,t){function r(r){try{return e.getContext(r,t)}catch(e){return null}}return r("webgl")||r("experimental-webgl")||r("webgl-experimental")}(a,u)}return i?{gl:i,canvas:a,container:n,extensions:s,optionalExtensions:c,pixelRatio:l,profile:d,onDone:p,onDestroy:m}:(m(),p("webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org"),null)}function C(e,t){for(var r=Array(e),n=0;n<e;++n)r[n]=t(n);return r}function F(e){var t,r;return t=(e>65535)<<4,t|=r=((e>>>=t)>255)<<3,t|=r=((e>>>=r)>15)<<2,(t|=r=((e>>>=r)>3)<<1)|(e>>>=r)>>1}function z(){var e=C(8,(function(){return[]}));function t(t){var r=function(e){for(var t=16;t<=1<<28;t*=16)if(e<=t)return t;return 0}(t),n=e[F(r)>>2];return n.length>0?n.pop():new ArrayBuffer(r)}function r(t){e[F(t.byteLength)>>2].push(t)}return{alloc:t,free:r,allocType:function(e,r){var n=null;switch(e){case 5120:n=new Int8Array(t(r),0,r);break;case 5121:n=new Uint8Array(t(r),0,r);break;case 5122:n=new Int16Array(t(2*r),0,r);break;case 5123:n=new Uint16Array(t(2*r),0,r);break;case 5124:n=new Int32Array(t(4*r),0,r);break;case 5125:n=new Uint32Array(t(4*r),0,r);break;case 5126:n=new Float32Array(t(4*r),0,r);break;default:return null}return n.length!==r?n.subarray(0,r):n},freeType:function(e){r(e.buffer)}}}var B=z();function P(t){return!!t&&"object"==typeof t&&Array.isArray(t.shape)&&Array.isArray(t.stride)&&"number"==typeof t.offset&&t.shape.length===t.stride.length&&(Array.isArray(t.data)||e(t.data))}B.zero=z();var M=function(e){return Object.keys(e).map((function(t){return e[t]}))},I={shape:function(e){for(var t=[],r=e;r.length;r=r[0])t.push(r.length);return t},flatten:function(e,t,r,n){var a=1;if(t.length)for(var i=0;i<t.length;++i)a*=t[i];else a=0;var o=n||B.allocType(r,a);switch(t.length){case 0:break;case 1:!function(e,t,r){for(var n=0;n<t;++n)r[n]=e[n]}(e,t[0],o);break;case 2:!function(e,t,r,n){for(var a=0,i=0;i<t;++i)for(var o=e[i],f=0;f<r;++f)n[a++]=o[f]}(e,t[0],t[1],o);break;case 3:R(e,t[0],t[1],t[2],o,0);break;default:!function e(t,r,n,a,i){for(var o=1,f=n+1;f<r.length;++f)o*=r[f];var u=r[n];if(r.length-n==4){var s=r[n+1],c=r[n+2],l=r[n+3];for(f=0;f<u;++f)R(t[f],s,c,l,a,i),i+=o}else for(f=0;f<u;++f)e(t[f],r,n+1,a,i),i+=o}(e,t,0,o,0)}return o}};function R(e,t,r,n,a,i){for(var o=i,f=0;f<t;++f)for(var u=e[f],s=0;s<r;++s)for(var c=u[s],l=0;l<n;++l)a[o++]=c[l]}var L={"[object Int8Array]":5120,"[object Int16Array]":5122,"[object Int32Array]":5124,"[object Uint8Array]":5121,"[object Uint8ClampedArray]":5121,"[object Uint16Array]":5123,"[object Uint32Array]":5125,"[object Float32Array]":5126,"[object Float64Array]":5121,"[object ArrayBuffer]":5121},W={int8:5120,int16:5122,int32:5124,uint8:5121,uint16:5123,uint32:5125,float:5126,float32:5126},U={dynamic:35048,stream:35040,static:35044},H=I.flatten,q=I.shape,N=[];function G(e){return 0|L[Object.prototype.toString.call(e)]}function Q(e,t){for(var r=0;r<t.length;++r)e[r]=t[r]}function V(e,t,r,n,a,i,o){for(var f=0,u=0;u<r;++u)for(var s=0;s<n;++s)e[f++]=t[a*u+i*s+o]}N[5120]=1,N[5122]=2,N[5124]=4,N[5121]=1,N[5123]=2,N[5125]=4,N[5126]=4;var Y={points:0,point:0,lines:1,line:1,triangles:4,triangle:4,"line loop":2,"line strip":3,"triangle strip":5,"triangle fan":6},X=new Float32Array(1),$=new Uint32Array(X.buffer);function J(e){for(var t=B.allocType(5123,e.length),r=0;r<e.length;++r)if(isNaN(e[r]))t[r]=65535;else if(e[r]===1/0)t[r]=31744;else if(e[r]===-1/0)t[r]=64512;else{X[0]=e[r];var n=$[0],a=n>>>31<<15,i=(n<<1>>>24)-127,o=n>>13&1023;if(i<-24)t[r]=a;else if(i<-14){var f=-14-i;t[r]=a+(o+1024>>f)}else t[r]=i>15?a+31744:a+(i+15<<10)+o}return t}function K(t){return Array.isArray(t)||e(t)}var Z=function(e){return!(e&e-1||!e)},ee=[9984,9986,9985,9987],te=[0,6409,6410,6407,6408],re={};function ne(e){return"[object "+e+"]"}re[6409]=re[6406]=re[6402]=1,re[34041]=re[6410]=2,re[6407]=re[35904]=3,re[6408]=re[35906]=4;var ae=ne("HTMLCanvasElement"),ie=ne("CanvasRenderingContext2D"),oe=ne("ImageBitmap"),fe=ne("HTMLImageElement"),ue=ne("HTMLVideoElement"),se=Object.keys(L).concat([ae,ie,oe,fe,ue]),ce=[];ce[5121]=1,ce[5126]=4,ce[36193]=2,ce[5123]=2,ce[5125]=4;var le=[];function de(e){return Array.isArray(e)&&(0===e.length||"number"==typeof e[0])}function pe(e){return!!Array.isArray(e)&&!(0===e.length||!K(e[0]))}function me(e){return Object.prototype.toString.call(e)}function he(e){return me(e)===ae}function be(e){if(!e)return!1;var t=me(e);return se.indexOf(t)>=0||de(e)||pe(e)||P(e)}function ve(e){return 0|L[Object.prototype.toString.call(e)]}function ge(e,t){return B.allocType(36193===e.type?5126:e.type,t)}function ye(e,t){36193===e.type?(e.data=J(t),B.freeType(t)):e.data=t}function xe(e,t,r,n,a,i){var o;if(o=void 0!==le[e]?le[e]:re[e]*ce[t],i&&(o*=6),a){for(var f=0,u=r;u>=1;)f+=o*u*u,u/=2;return f}return o*r*n}function we(r,n,a,i,o,f,u){var s={"don't care":4352,"dont care":4352,nice:4354,fast:4353},c={repeat:10497,clamp:33071,mirror:33648},l={nearest:9728,linear:9729},d=t({mipmap:9987,"nearest mipmap nearest":9984,"linear mipmap nearest":9985,"nearest mipmap linear":9986,"linear mipmap linear":9987},l),p={none:0,browser:37444},m={uint8:5121,rgba4:32819,rgb565:33635,"rgb5 a1":32820},h={alpha:6406,luminance:6409,"luminance alpha":6410,rgb:6407,rgba:6408,rgba4:32854,"rgb5 a1":32855,rgb565:36194},b={};n.ext_srgb&&(h.srgb=35904,h.srgba=35906),n.oes_texture_float&&(m.float32=m.float=5126),n.oes_texture_half_float&&(m.float16=m["half float"]=36193),n.webgl_depth_texture&&(t(h,{depth:6402,"depth stencil":34041}),t(m,{uint16:5123,uint32:5125,"depth stencil":34042})),n.webgl_compressed_texture_s3tc&&t(b,{"rgb s3tc dxt1":33776,"rgba s3tc dxt1":33777,"rgba s3tc dxt3":33778,"rgba s3tc dxt5":33779}),n.webgl_compressed_texture_atc&&t(b,{"rgb atc":35986,"rgba atc explicit alpha":35987,"rgba atc interpolated alpha":34798}),n.webgl_compressed_texture_pvrtc&&t(b,{"rgb pvrtc 4bppv1":35840,"rgb pvrtc 2bppv1":35841,"rgba pvrtc 4bppv1":35842,"rgba pvrtc 2bppv1":35843}),n.webgl_compressed_texture_etc1&&(b["rgb etc1"]=36196);var v=Array.prototype.slice.call(r.getParameter(34467));Object.keys(b).forEach((function(e){var t=b[e];v.indexOf(t)>=0&&(h[e]=t)}));var g=Object.keys(h);a.textureFormats=g;var y=[];Object.keys(h).forEach((function(e){var t=h[e];y[t]=e}));var w=[];Object.keys(m).forEach((function(e){var t=m[e];w[t]=e}));var _=[];Object.keys(l).forEach((function(e){_[l[e]]=e}));var k=[];Object.keys(d).forEach((function(e){var t=d[e];k[t]=e}));var A=[];Object.keys(c).forEach((function(e){A[c[e]]=e}));var S=g.reduce((function(e,t){var r=h[t];return 6409===r||6406===r||6409===r||6410===r||6402===r||34041===r?e[r]=r:32855===r||t.indexOf("rgba")>=0?e[r]=6408:e[r]=6407,e}),{});function j(){this.internalformat=6408,this.format=6408,this.type=5121,this.compressed=!1,this.premultiplyAlpha=!1,this.flipY=!1,this.unpackAlignment=1,this.colorSpace=37444,this.width=0,this.height=0,this.channels=0}function E(e,t){e.internalformat=t.internalformat,e.format=t.format,e.type=t.type,e.compressed=t.compressed,e.premultiplyAlpha=t.premultiplyAlpha,e.flipY=t.flipY,e.unpackAlignment=t.unpackAlignment,e.colorSpace=t.colorSpace,e.width=t.width,e.height=t.height,e.channels=t.channels}function T(e,t){if("object"==typeof t&&t){if("premultiplyAlpha"in t&&(x.type(t.premultiplyAlpha,"boolean","invalid premultiplyAlpha"),e.premultiplyAlpha=t.premultiplyAlpha),"flipY"in t&&(x.type(t.flipY,"boolean","invalid texture flip"),e.flipY=t.flipY),"alignment"in t&&(x.oneOf(t.alignment,[1,2,4,8],"invalid texture unpack alignment"),e.unpackAlignment=t.alignment),"colorSpace"in t&&(x.parameter(t.colorSpace,p,"invalid colorSpace"),e.colorSpace=p[t.colorSpace]),"type"in t){var r=t.type;x(n.oes_texture_float||!("float"===r||"float32"===r),"you must enable the OES_texture_float extension in order to use floating point textures."),x(n.oes_texture_half_float||!("half float"===r||"float16"===r),"you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures."),x(n.webgl_depth_texture||!("uint16"===r||"uint32"===r||"depth stencil"===r),"you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures."),x.parameter(r,m,"invalid texture type"),e.type=m[r]}var i=e.width,o=e.height,f=e.channels,u=!1;"shape"in t?(x(Array.isArray(t.shape)&&t.shape.length>=2,"shape must be an array"),i=t.shape[0],o=t.shape[1],3===t.shape.length&&(f=t.shape[2],x(f>0&&f<=4,"invalid number of channels"),u=!0),x(i>=0&&i<=a.maxTextureSize,"invalid width"),x(o>=0&&o<=a.maxTextureSize,"invalid height")):("radius"in t&&(i=o=t.radius,x(i>=0&&i<=a.maxTextureSize,"invalid radius")),"width"in t&&(i=t.width,x(i>=0&&i<=a.maxTextureSize,"invalid width")),"height"in t&&(o=t.height,x(o>=0&&o<=a.maxTextureSize,"invalid height")),"channels"in t&&(f=t.channels,x(f>0&&f<=4,"invalid number of channels"),u=!0)),e.width=0|i,e.height=0|o,e.channels=0|f;var s=!1;if("format"in t){var c=t.format;x(n.webgl_depth_texture||!("depth"===c||"depth stencil"===c),"you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures."),x.parameter(c,h,"invalid texture format");var l=e.internalformat=h[c];e.format=S[l],c in m&&("type"in t||(e.type=m[c])),c in b&&(e.compressed=!0),s=!0}!u&&s?e.channels=re[e.format]:u&&!s?e.channels!==te[e.format]&&(e.format=e.internalformat=te[e.channels]):s&&u&&x(e.channels===re[e.format],"number of channels inconsistent with specified format")}}function D(e){r.pixelStorei(37440,e.flipY),r.pixelStorei(37441,e.premultiplyAlpha),r.pixelStorei(37443,e.colorSpace),r.pixelStorei(3317,e.unpackAlignment)}function O(){j.call(this),this.xOffset=0,this.yOffset=0,this.data=null,this.needsFree=!1,this.element=null,this.needsCopy=!1}function C(t,r){var n=null;if(be(r)?n=r:r&&(x.type(r,"object","invalid pixel data type"),T(t,r),"x"in r&&(t.xOffset=0|r.x),"y"in r&&(t.yOffset=0|r.y),be(r.data)&&(n=r.data)),x(!t.compressed||n instanceof Uint8Array,"compressed texture data must be stored in a uint8array"),r.copy){x(!n,"can not specify copy and data field for the same texture");var i=o.viewportWidth,f=o.viewportHeight;t.width=t.width||i-t.xOffset,t.height=t.height||f-t.yOffset,t.needsCopy=!0,x(t.xOffset>=0&&t.xOffset<i&&t.yOffset>=0&&t.yOffset<f&&t.width>0&&t.width<=i&&t.height>0&&t.height<=f,"copy texture read out of bounds")}else if(n){if(e(n))t.channels=t.channels||4,t.data=n,"type"in r||5121!==t.type||(t.type=ve(n));else if(de(n))t.channels=t.channels||4,function(e,t){var r=t.length;switch(e.type){case 5121:case 5123:case 5125:case 5126:var n=B.allocType(e.type,r);n.set(t),e.data=n;break;case 36193:e.data=J(t);break;default:x.raise("unsupported texture type, must specify a typed array")}}(t,n),t.alignment=1,t.needsFree=!0;else if(P(n)){var u=n.data;Array.isArray(u)||5121!==t.type||(t.type=ve(u));var s,c,l,d,p,m,h=n.shape,b=n.stride;3===h.length?(l=h[2],m=b[2]):(x(2===h.length,"invalid ndarray pixel data, must be 2 or 3D"),l=1,m=1),s=h[0],c=h[1],d=b[0],p=b[1],t.alignment=1,t.width=s,t.height=c,t.channels=l,t.format=t.internalformat=te[l],t.needsFree=!0,function(e,t,r,n,a,i){for(var o=e.width,f=e.height,u=e.channels,s=ge(e,o*f*u),c=0,l=0;l<f;++l)for(var d=0;d<o;++d)for(var p=0;p<u;++p)s[c++]=t[r*d+n*l+a*p+i];ye(e,s)}(t,u,d,p,m,n.offset)}else if(he(n)||me(n)===ie)he(n)?t.element=n:t.element=n.canvas,t.width=t.element.width,t.height=t.element.height,t.channels=4;else if(function(e){return me(e)===oe}(n))t.element=n,t.width=n.width,t.height=n.height,t.channels=4;else if(function(e){return me(e)===fe}(n))t.element=n,t.width=n.naturalWidth,t.height=n.naturalHeight,t.channels=4;else if(function(e){return me(e)===ue}(n))t.element=n,t.width=n.videoWidth,t.height=n.videoHeight,t.channels=4;else if(pe(n)){var v=t.width||n[0].length,g=t.height||n.length,y=t.channels;y=K(n[0][0])?y||n[0][0].length:y||1;for(var w=I.shape(n),_=1,k=0;k<w.length;++k)_*=w[k];var A=ge(t,_);I.flatten(n,w,"",A),ye(t,A),t.alignment=1,t.width=v,t.height=g,t.channels=y,t.format=t.internalformat=te[y],t.needsFree=!0}}else t.width=t.width||1,t.height=t.height||1,t.channels=t.channels||4;5126===t.type?x(a.extensions.indexOf("oes_texture_float")>=0,"oes_texture_float extension not enabled"):36193===t.type&&x(a.extensions.indexOf("oes_texture_half_float")>=0,"oes_texture_half_float extension not enabled")}function F(e,t,n){var a=e.element,o=e.data,f=e.internalformat,u=e.format,s=e.type,c=e.width,l=e.height,d=e.channels;if(D(e),a)r.texImage2D(t,n,u,u,s,a);else if(e.compressed)r.compressedTexImage2D(t,n,f,c,l,0,o);else if(e.needsCopy)i(),r.copyTexImage2D(t,n,u,e.xOffset,e.yOffset,c,l,0);else{var p=!o;p&&(o=B.zero.allocType(s,c*l*d)),r.texImage2D(t,n,u,c,l,0,u,s,o),p&&o&&B.zero.freeType(o)}}function z(e,t,n,a,o){var f=e.element,u=e.data,s=e.internalformat,c=e.format,l=e.type,d=e.width,p=e.height;D(e),f?r.texSubImage2D(t,o,n,a,c,l,f):e.compressed?r.compressedTexSubImage2D(t,o,n,a,s,d,p,u):e.needsCopy?(i(),r.copyTexSubImage2D(t,o,n,a,e.xOffset,e.yOffset,d,p)):r.texSubImage2D(t,o,n,a,d,p,c,l,u)}var R=[];function L(){return R.pop()||new O}function W(e){e.needsFree&&B.freeType(e.data),O.call(e),R.push(e)}function U(){j.call(this),this.genMipmaps=!1,this.mipmapHint=4352,this.mipmask=0,this.images=Array(16)}function H(e,t,r){var n=e.images[0]=L();e.mipmask=1,n.width=e.width=t,n.height=e.height=r,n.channels=e.channels=4}function q(e,t){var r=null;if(be(t))E(r=e.images[0]=L(),e),C(r,t),e.mipmask=1;else if(T(e,t),Array.isArray(t.mipmap))for(var n=t.mipmap,a=0;a<n.length;++a)E(r=e.images[a]=L(),e),r.width>>=a,r.height>>=a,C(r,n[a]),e.mipmask|=1<<a;else E(r=e.images[0]=L(),e),C(r,t),e.mipmask=1;E(e,e.images[0]),(e.compressed&&33776===e.internalformat||33777===e.internalformat||33778===e.internalformat||33779===e.internalformat)&&x(e.width%4==0&&e.height%4==0,"for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4")}function N(e,t){for(var r=e.images,n=0;n<r.length;++n){if(!r[n])return;F(r[n],t,n)}}var G=[];function Q(){var e=G.pop()||new U;j.call(e),e.mipmask=0;for(var t=0;t<16;++t)e.images[t]=null;return e}function V(e){for(var t=e.images,r=0;r<t.length;++r)t[r]&&W(t[r]),t[r]=null;G.push(e)}function Y(){this.minFilter=9728,this.magFilter=9728,this.wrapS=33071,this.wrapT=33071,this.anisotropic=1,this.genMipmaps=!1,this.mipmapHint=4352}function X(e,t){if("min"in t){var r=t.min;x.parameter(r,d),e.minFilter=d[r],ee.indexOf(e.minFilter)>=0&&!("faces"in t)&&(e.genMipmaps=!0)}if("mag"in t){var n=t.mag;x.parameter(n,l),e.magFilter=l[n]}var i=e.wrapS,o=e.wrapT;if("wrap"in t){var f=t.wrap;"string"==typeof f?(x.parameter(f,c),i=o=c[f]):Array.isArray(f)&&(x.parameter(f[0],c),x.parameter(f[1],c),i=c[f[0]],o=c[f[1]])}else{if("wrapS"in t){var u=t.wrapS;x.parameter(u,c),i=c[u]}if("wrapT"in t){var p=t.wrapT;x.parameter(p,c),o=c[p]}}if(e.wrapS=i,e.wrapT=o,"anisotropic"in t){var m=t.anisotropic;x("number"==typeof m&&m>=1&&m<=a.maxAnisotropic,"aniso samples must be between 1 and "),e.anisotropic=t.anisotropic}if("mipmap"in t){var h=!1;switch(typeof t.mipmap){case"string":x.parameter(t.mipmap,s,"invalid mipmap hint"),e.mipmapHint=s[t.mipmap],e.genMipmaps=!0,h=!0;break;case"boolean":h=e.genMipmaps=t.mipmap;break;case"object":x(Array.isArray(t.mipmap),"invalid mipmap type"),e.genMipmaps=!1,h=!0;break;default:x.raise("invalid mipmap type")}!h||"min"in t||(e.minFilter=9984)}}function $(e,t){r.texParameteri(t,10241,e.minFilter),r.texParameteri(t,10240,e.magFilter),r.texParameteri(t,10242,e.wrapS),r.texParameteri(t,10243,e.wrapT),n.ext_texture_filter_anisotropic&&r.texParameteri(t,34046,e.anisotropic),e.genMipmaps&&(r.hint(33170,e.mipmapHint),r.generateMipmap(t))}var ne=0,ae={},se=a.maxTextureUnits,ce=Array(se).map((function(){return null}));function le(e){j.call(this),this.mipmask=0,this.internalformat=6408,this.id=ne++,this.refCount=1,this.target=e,this.texture=r.createTexture(),this.unit=-1,this.bindCount=0,this.texInfo=new Y,u.profile&&(this.stats={size:0})}function we(e){r.activeTexture(33984),r.bindTexture(e.target,e.texture)}function _e(){var e=ce[0];e?r.bindTexture(e.target,e.texture):r.bindTexture(3553,null)}function ke(e){var t=e.texture;x(t,"must not double destroy texture");var n=e.unit,a=e.target;n>=0&&(r.activeTexture(33984+n),r.bindTexture(a,null),ce[n]=null),r.deleteTexture(t),e.texture=null,e.params=null,e.pixels=null,e.refCount=0,delete ae[e.id],f.textureCount--}return t(le.prototype,{bind:function(){this.bindCount+=1;var e=this.unit;if(e<0){for(var t=0;t<se;++t){var n=ce[t];if(n){if(n.bindCount>0)continue;n.unit=-1}ce[t]=this,e=t;break}e>=se&&x.raise("insufficient number of texture units"),u.profile&&f.maxTextureUnits<e+1&&(f.maxTextureUnits=e+1),this.unit=e,r.activeTexture(33984+e),r.bindTexture(this.target,this.texture)}return e},unbind:function(){this.bindCount-=1},decRef:function(){--this.refCount<=0&&ke(this)}}),u.profile&&(f.getTotalTextureSize=function(){var e=0;return Object.keys(ae).forEach((function(t){e+=ae[t].stats.size})),e}),{create2D:function(e,t){var n=new le(3553);function i(e,t){var r=n.texInfo;Y.call(r);var o=Q();return"number"==typeof e?H(o,0|e,"number"==typeof t?0|t:0|e):e?(x.type(e,"object","invalid arguments to regl.texture"),X(r,e),q(o,e)):H(o,1,1),r.genMipmaps&&(o.mipmask=(o.width<<1)-1),n.mipmask=o.mipmask,E(n,o),x.texture2D(r,o,a),n.internalformat=o.internalformat,i.width=o.width,i.height=o.height,we(n),N(o,3553),$(r,3553),_e(),V(o),u.profile&&(n.stats.size=xe(n.internalformat,n.type,o.width,o.height,r.genMipmaps,!1)),i.format=y[n.internalformat],i.type=w[n.type],i.mag=_[r.magFilter],i.min=k[r.minFilter],i.wrapS=A[r.wrapS],i.wrapT=A[r.wrapT],i}return ae[n.id]=n,f.textureCount++,i(e,t),i.subimage=function(e,t,r,a){x(!!e,"must specify image data");var o=0|t,f=0|r,u=0|a,s=L();return E(s,n),s.width=0,s.height=0,C(s,e),s.width=s.width||(n.width>>u)-o,s.height=s.height||(n.height>>u)-f,x(n.type===s.type&&n.format===s.format&&n.internalformat===s.internalformat,"incompatible format for texture.subimage"),x(o>=0&&f>=0&&o+s.width<=n.width&&f+s.height<=n.height,"texture.subimage write out of bounds"),x(n.mipmask&1<<u,"missing mipmap data"),x(s.data||s.element||s.needsCopy,"missing image data"),we(n),z(s,3553,o,f,u),_e(),W(s),i},i.resize=function(e,t){var a,o=0|e,f=0|t||o;if(o===n.width&&f===n.height)return i;i.width=n.width=o,i.height=n.height=f,we(n);for(var s=n.channels,c=n.type,l=0;n.mipmask>>l;++l){var d=o>>l,p=f>>l;if(!d||!p)break;a=B.zero.allocType(c,d*p*s),r.texImage2D(3553,l,n.format,d,p,0,n.format,n.type,a),a&&B.zero.freeType(a)}return _e(),u.profile&&(n.stats.size=xe(n.internalformat,n.type,o,f,!1,!1)),i},i._reglType="texture2d",i._texture=n,u.profile&&(i.stats=n.stats),i.destroy=function(){n.decRef()},i},createCube:function(e,t,n,i,o,s){var c=new le(34067);ae[c.id]=c,f.cubeCount++;var l=new Array(6);function d(e,t,r,n,i,o){var f,s=c.texInfo;for(Y.call(s),f=0;f<6;++f)l[f]=Q();if("number"!=typeof e&&e)if("object"==typeof e)if(t)q(l[0],e),q(l[1],t),q(l[2],r),q(l[3],n),q(l[4],i),q(l[5],o);else if(X(s,e),T(c,e),"faces"in e){var p=e.faces;for(x(Array.isArray(p)&&6===p.length,"cube faces must be a length 6 array"),f=0;f<6;++f)x("object"==typeof p[f]&&!!p[f],"invalid input for cube map face"),E(l[f],c),q(l[f],p[f])}else for(f=0;f<6;++f)q(l[f],e);else x.raise("invalid arguments to cube map");else{var m=0|e||1;for(f=0;f<6;++f)H(l[f],m,m)}for(E(c,l[0]),a.npotTextureCube||x(Z(c.width)&&Z(c.height),"your browser does not support non power or two texture dimensions"),s.genMipmaps?c.mipmask=(l[0].width<<1)-1:c.mipmask=l[0].mipmask,x.textureCube(c,s,l,a),c.internalformat=l[0].internalformat,d.width=l[0].width,d.height=l[0].height,we(c),f=0;f<6;++f)N(l[f],34069+f);for($(s,34067),_e(),u.profile&&(c.stats.size=xe(c.internalformat,c.type,d.width,d.height,s.genMipmaps,!0)),d.format=y[c.internalformat],d.type=w[c.type],d.mag=_[s.magFilter],d.min=k[s.minFilter],d.wrapS=A[s.wrapS],d.wrapT=A[s.wrapT],f=0;f<6;++f)V(l[f]);return d}return d(e,t,n,i,o,s),d.subimage=function(e,t,r,n,a){x(!!t,"must specify image data"),x("number"==typeof e&&e===(0|e)&&e>=0&&e<6,"invalid face");var i=0|r,o=0|n,f=0|a,u=L();return E(u,c),u.width=0,u.height=0,C(u,t),u.width=u.width||(c.width>>f)-i,u.height=u.height||(c.height>>f)-o,x(c.type===u.type&&c.format===u.format&&c.internalformat===u.internalformat,"incompatible format for texture.subimage"),x(i>=0&&o>=0&&i+u.width<=c.width&&o+u.height<=c.height,"texture.subimage write out of bounds"),x(c.mipmask&1<<f,"missing mipmap data"),x(u.data||u.element||u.needsCopy,"missing image data"),we(c),z(u,34069+e,i,o,f),_e(),W(u),d},d.resize=function(e){var t=0|e;if(t!==c.width){d.width=c.width=t,d.height=c.height=t,we(c);for(var n=0;n<6;++n)for(var a=0;c.mipmask>>a;++a)r.texImage2D(34069+n,a,c.format,t>>a,t>>a,0,c.format,c.type,null);return _e(),u.profile&&(c.stats.size=xe(c.internalformat,c.type,d.width,d.height,!1,!0)),d}},d._reglType="textureCube",d._texture=c,u.profile&&(d.stats=c.stats),d.destroy=function(){c.decRef()},d},clear:function(){for(var e=0;e<se;++e)r.activeTexture(33984+e),r.bindTexture(3553,null),ce[e]=null;M(ae).forEach(ke),f.cubeCount=0,f.textureCount=0},getTexture:function(e){return null},restore:function(){for(var e=0;e<se;++e){var t=ce[e];t&&(t.bindCount=0,t.unit=-1,ce[e]=null)}M(ae).forEach((function(e){e.texture=r.createTexture(),r.bindTexture(e.target,e.texture);for(var t=0;t<32;++t)if(0!=(e.mipmask&1<<t))if(3553===e.target)r.texImage2D(3553,t,e.internalformat,e.width>>t,e.height>>t,0,e.internalformat,e.type,null);else for(var n=0;n<6;++n)r.texImage2D(34069+n,t,e.internalformat,e.width>>t,e.height>>t,0,e.internalformat,e.type,null);$(e.texInfo,e.target)}))}}}le[32854]=2,le[32855]=2,le[36194]=2,le[34041]=4,le[33776]=.5,le[33777]=.5,le[33778]=1,le[33779]=1,le[35986]=.5,le[35987]=1,le[34798]=1,le[35840]=.5,le[35841]=.25,le[35842]=.5,le[35843]=.25,le[36196]=.5;var _e=[];function ke(e,t,r){return _e[e]*t*r}_e[32854]=2,_e[32855]=2,_e[36194]=2,_e[33189]=2,_e[36168]=1,_e[34041]=4,_e[35907]=4,_e[34836]=16,_e[34842]=8,_e[34843]=6;var Ae=[6407,6408],Se=[];Se[6408]=4,Se[6407]=3;var je=[];je[5121]=1,je[5126]=4,je[36193]=2;var Ee=[32854,32855,36194,35907,34842,34843,34836],Te={};function De(){this.state=0,this.x=0,this.y=0,this.z=0,this.w=0,this.buffer=null,this.size=0,this.normalized=!1,this.type=5126,this.offset=0,this.stride=0,this.divisor=0}function Oe(t,r,n,a,i,o,f){function u(u){var s;null===r.next?(x(i.preserveDrawingBuffer,'you must create a webgl context with "preserveDrawingBuffer":true in order to read pixels from the drawing buffer'),s=5121):(x(null!==r.next.colorAttachments[0].texture,"You cannot read from a renderbuffer"),s=r.next.colorAttachments[0].texture._texture.type,o.oes_texture_float?(x(5121===s||5126===s,"Reading from a framebuffer is only allowed for the types 'uint8' and 'float'"),5126===s&&x(f.readFloat,"Reading 'float' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float")):x(5121===s,"Reading from a framebuffer is only allowed for the type 'uint8'"));var c=0,l=0,d=a.framebufferWidth,p=a.framebufferHeight,m=null;e(u)?m=u:u&&(x.type(u,"object","invalid arguments to regl.read()"),c=0|u.x,l=0|u.y,x(c>=0&&c<a.framebufferWidth,"invalid x offset for regl.read"),x(l>=0&&l<a.framebufferHeight,"invalid y offset for regl.read"),d=0|(u.width||a.framebufferWidth-c),p=0|(u.height||a.framebufferHeight-l),m=u.data||null),m&&(5121===s?x(m instanceof Uint8Array,"buffer must be 'Uint8Array' when reading from a framebuffer of type 'uint8'"):5126===s&&x(m instanceof Float32Array,"buffer must be 'Float32Array' when reading from a framebuffer of type 'float'")),x(d>0&&d+c<=a.framebufferWidth,"invalid width for read pixels"),x(p>0&&p+l<=a.framebufferHeight,"invalid height for read pixels"),n();var h=d*p*4;return m||(5121===s?m=new Uint8Array(h):5126===s&&(m=m||new Float32Array(h))),x.isTypedArray(m,"data buffer for regl.read() must be a typedarray"),x(m.byteLength>=h,"data buffer for regl.read() too small"),t.pixelStorei(3333,4),t.readPixels(c,l,d,p,6408,s,m),m}return function(e){return e&&"framebuffer"in e?function(e){var t;return r.setFBO({framebuffer:e.framebuffer},(function(){t=u(e)})),t}(e):u(e)}}function Ce(e){return Array.prototype.slice.call(e)}function Fe(e){return Ce(e).join("")}Te[36053]="complete",Te[36054]="incomplete attachment",Te[36057]="incomplete dimensions",Te[36055]="incomplete, missing attachment",Te[36061]="unsupported";var ze="xyzw".split(""),Be="profile",Pe="framebuffer",Me="vert",Ie="frag",Re="elements",Le="primitive",We="count",Ue="offset",He="instances",qe=Pe+"Width",Ne=Pe+"Height",Ge=["blend.func","blend.equation","stencil.func","stencil.opFront","stencil.opBack","sample.coverage","viewport","scissor.box","polygonOffset.offset"],Qe={0:0,1:1,zero:0,one:1,"src color":768,"one minus src color":769,"src alpha":770,"one minus src alpha":771,"dst color":774,"one minus dst color":775,"dst alpha":772,"one minus dst alpha":773,"constant color":32769,"one minus constant color":32770,"constant alpha":32771,"one minus constant alpha":32772,"src alpha saturate":776},Ve=["constant color, constant alpha","one minus constant color, constant alpha","constant color, one minus constant alpha","one minus constant color, one minus constant alpha","constant alpha, constant color","constant alpha, one minus constant color","one minus constant alpha, constant color","one minus constant alpha, one minus constant color"],Ye={never:512,less:513,"<":513,equal:514,"=":514,"==":514,"===":514,lequal:515,"<=":515,greater:516,">":516,notequal:517,"!=":517,"!==":517,gequal:518,">=":518,always:519},Xe={0:0,zero:0,keep:7680,replace:7681,increment:7682,decrement:7683,"increment wrap":34055,"decrement wrap":34056,invert:5386},$e={frag:35632,vert:35633},Je={cw:2304,ccw:2305};function Ke(t){return Array.isArray(t)||e(t)||P(t)}function Ze(e){return e.sort((function(e,t){return"viewport"===e?-1:"viewport"===t?1:e<t?-1:1}))}function et(e,t,r,n){this.thisDep=e,this.contextDep=t,this.propDep=r,this.append=n}function tt(e){return e&&!(e.thisDep||e.contextDep||e.propDep)}function rt(e){return new et(!1,!1,!1,e)}function nt(e,t){var r=e.type;if(0===r){var n=e.data.length;return new et(!0,n>=1,n>=2,t)}if(4===r){var a=e.data;return new et(a.thisDep,a.contextDep,a.propDep,t)}return new et(3===r,2===r,1===r,t)}var at=new et(!1,!1,!1,(function(){}));function it(e,r,n,a,i,o,f,u,s,c,l,d,p,m,h){var b=c.Record,v={add:32774,subtract:32778,"reverse subtract":32779};n.ext_blend_minmax&&(v.min=32775,v.max=32776);var g=n.angle_instanced_arrays,y=n.webgl_draw_buffers,w={dirty:!0,profile:h.profile},_={},k=[],A={},j={};function E(e){return e.replace(".","_")}function T(e,t,r){var n=E(e);k.push(e),_[n]=w[n]=!!r,A[n]=t}function D(e,t,r){var n=E(e);k.push(e),Array.isArray(r)?(w[n]=r.slice(),_[n]=r.slice()):w[n]=_[n]=r,j[n]=t}T("dither",3024),T("blend.enable",3042),D("blend.color","blendColor",[0,0,0,0]),D("blend.equation","blendEquationSeparate",[32774,32774]),D("blend.func","blendFuncSeparate",[1,0,1,0]),T("depth.enable",2929,!0),D("depth.func","depthFunc",513),D("depth.range","depthRange",[0,1]),D("depth.mask","depthMask",!0),D("colorMask","colorMask",[!0,!0,!0,!0]),T("cull.enable",2884),D("cull.face","cullFace",1029),D("frontFace","frontFace",2305),D("lineWidth","lineWidth",1),T("polygonOffset.enable",32823),D("polygonOffset.offset","polygonOffset",[0,0]),T("sample.alpha",32926),T("sample.enable",32928),D("sample.coverage","sampleCoverage",[1,!1]),T("stencil.enable",2960),D("stencil.mask","stencilMask",-1),D("stencil.func","stencilFunc",[519,0,-1]),D("stencil.opFront","stencilOpSeparate",[1028,7680,7680,7680]),D("stencil.opBack","stencilOpSeparate",[1029,7680,7680,7680]),T("scissor.enable",3089),D("scissor.box","scissor",[0,0,e.drawingBufferWidth,e.drawingBufferHeight]),D("viewport","viewport",[0,0,e.drawingBufferWidth,e.drawingBufferHeight]);var O={gl:e,context:p,strings:r,next:_,current:w,draw:d,elements:o,buffer:i,shader:l,attributes:c.state,uniforms:s,framebuffer:u,extensions:n,timer:m,isBufferArgs:Ke},F={primTypes:Y,compareFuncs:Ye,blendFuncs:Qe,blendEquations:v,stencilOps:Xe,glTypes:W,orientationType:Je};x.optional((function(){O.isArrayLike=K})),y&&(F.backBuffer=[1029],F.drawBuffer=C(a.maxDrawbuffers,(function(e){return 0===e?[0]:C(e,(function(e){return 36064+e}))})));var z=0;function B(){var e=function(){var e=0,r=[],n=[];function a(){var r=[],n=[];return t((function(){r.push.apply(r,Ce(arguments))}),{def:function(){var t="v"+e++;return n.push(t),arguments.length>0&&(r.push(t,"="),r.push.apply(r,Ce(arguments)),r.push(";")),t},toString:function(){return Fe([n.length>0?"var "+n.join(",")+";":"",Fe(r)])}})}function i(){var e=a(),r=a(),n=e.toString,i=r.toString;function o(t,n){r(t,n,"=",e.def(t,n),";")}return t((function(){e.apply(e,Ce(arguments))}),{def:e.def,entry:e,exit:r,save:o,set:function(t,r,n){o(t,r),e(t,r,"=",n,";")},toString:function(){return n()+i()}})}var o=a(),f={};return{global:o,link:function(t){for(var a=0;a<n.length;++a)if(n[a]===t)return r[a];var i="g"+e++;return r.push(i),n.push(t),i},block:a,proc:function(e,r){var n=[];function a(){var e="a"+n.length;return n.push(e),e}r=r||0;for(var o=0;o<r;++o)a();var u=i(),s=u.toString;return f[e]=t(u,{arg:a,toString:function(){return Fe(["function(",n.join(),"){",s(),"}"])}})},scope:i,cond:function(){var e=Fe(arguments),r=i(),n=i(),a=r.toString,o=n.toString;return t(r,{then:function(){return r.apply(r,Ce(arguments)),this},else:function(){return n.apply(n,Ce(arguments)),this},toString:function(){var t=o();return t&&(t="else{"+t+"}"),Fe(["if(",e,"){",a(),"}",t])}})},compile:function(){var e=['"use strict";',o,"return {"];Object.keys(f).forEach((function(t){e.push('"',t,'":',f[t].toString(),",")})),e.push("}");var t=Fe(e).replace(/;/g,";\n").replace(/}/g,"}\n").replace(/{/g,"{\n");return Function.apply(null,r.concat(t)).apply(null,n)}}}(),n=e.link,a=e.global;e.id=z++,e.batchId="0";var i=n(O),o=e.shared={props:"a0"};Object.keys(O).forEach((function(e){o[e]=a.def(i,".",e)})),x.optional((function(){e.CHECK=n(x),e.commandStr=x.guessCommand(),e.command=n(e.commandStr),e.assert=function(e,t,r){e("if(!(",t,"))",this.CHECK,".commandRaise(",n(r),",",this.command,");")},F.invalidBlendCombinations=Ve}));var f=e.next={},u=e.current={};Object.keys(j).forEach((function(e){Array.isArray(w[e])&&(f[e]=a.def(o.next,".",e),u[e]=a.def(o.current,".",e))}));var s=e.constants={};Object.keys(F).forEach((function(e){s[e]=a.def(JSON.stringify(F[e]))})),e.invoke=function(t,r){switch(r.type){case 0:var a=["this",o.context,o.props,e.batchId];return t.def(n(r.data),".call(",a.slice(0,Math.max(r.data.length+1,4)),")");case 1:return t.def(o.props,r.data);case 2:return t.def(o.context,r.data);case 3:return t.def("this",r.data);case 4:return r.data.append(e,t),r.data.ref}},e.attribCache={};var l={};return e.scopeAttrib=function(e){var t=r.id(e);if(t in l)return l[t];var a=c.scope[t];return a||(a=c.scope[t]=new b),l[t]=n(a)},e}function P(e,t,n,f,s){var c=e.static,d=e.dynamic;x.optional((function(){var e=[Pe,Me,Ie,Re,Le,Ue,We,He,Be].concat(k);function t(t){Object.keys(t).forEach((function(t){x.command(e.indexOf(t)>=0,'unknown parameter "'+t+'"',s.commandStr)}))}t(c),t(d)}));var p=function(e,t){var r=e.static,n=e.dynamic;if(Pe in r){var a=r[Pe];return a?(a=u.getFramebuffer(a),x.command(a,"invalid framebuffer object"),rt((function(e,t){var r=e.link(a),n=e.shared;t.set(n.framebuffer,".next",r);var i=n.context;return t.set(i,"."+qe,r+".width"),t.set(i,"."+Ne,r+".height"),r}))):rt((function(e,t){var r=e.shared;t.set(r.framebuffer,".next","null");var n=r.context;return t.set(n,"."+qe,n+".drawingBufferWidth"),t.set(n,"."+Ne,n+".drawingBufferHeight"),"null"}))}if(Pe in n){var i=n[Pe];return nt(i,(function(e,t){var r=e.invoke(t,i),n=e.shared,a=n.framebuffer,o=t.def(a,".getFramebuffer(",r,")");x.optional((function(){e.assert(t,"!"+r+"||"+o,"invalid framebuffer object")})),t.set(a,".next",o);var f=n.context;return t.set(f,"."+qe,o+"?"+o+".width:"+f+".drawingBufferWidth"),t.set(f,"."+Ne,o+"?"+o+".height:"+f+".drawingBufferHeight"),o}))}return null}(e),m=function(e,t,r){var n=e.static,a=e.dynamic;function i(e){if(e in n){var i=n[e];x.commandType(i,"object","invalid "+e,r.commandStr);var o,f,u=!0,s=0|i.x,c=0|i.y;return"width"in i?(o=0|i.width,x.command(o>=0,"invalid "+e,r.commandStr)):u=!1,"height"in i?(f=0|i.height,x.command(f>=0,"invalid "+e,r.commandStr)):u=!1,new et(!u&&t&&t.thisDep,!u&&t&&t.contextDep,!u&&t&&t.propDep,(function(e,t){var r=e.shared.context,n=o;"width"in i||(n=t.def(r,".",qe,"-",s));var a=f;return"height"in i||(a=t.def(r,".",Ne,"-",c)),[s,c,n,a]}))}if(e in a){var l=a[e],d=nt(l,(function(t,r){var n=t.invoke(r,l);x.optional((function(){t.assert(r,n+"&&typeof "+n+'==="object"',"invalid "+e)}));var a=t.shared.context,i=r.def(n,".x|0"),o=r.def(n,".y|0"),f=r.def('"width" in ',n,"?",n,".width|0:","(",a,".",qe,"-",i,")"),u=r.def('"height" in ',n,"?",n,".height|0:","(",a,".",Ne,"-",o,")");return x.optional((function(){t.assert(r,f+">=0&&"+u+">=0","invalid "+e)})),[i,o,f,u]}));return t&&(d.thisDep=d.thisDep||t.thisDep,d.contextDep=d.contextDep||t.contextDep,d.propDep=d.propDep||t.propDep),d}return t?new et(t.thisDep,t.contextDep,t.propDep,(function(e,t){var r=e.shared.context;return[0,0,t.def(r,".",qe),t.def(r,".",Ne)]})):null}var o=i("viewport");if(o){var f=o;o=new et(o.thisDep,o.contextDep,o.propDep,(function(e,t){var r=f.append(e,t),n=e.shared.context;return t.set(n,".viewportWidth",r[2]),t.set(n,".viewportHeight",r[3]),r}))}return{viewport:o,scissor_box:i("scissor.box")}}(e,p,s),h=function(e,t){var r=e.static,n=e.dynamic,a=function(){if(Re in r){var e=r[Re];Ke(e)?e=o.getElements(o.create(e,!0)):e&&(e=o.getElements(e),x.command(e,"invalid elements",t.commandStr));var a=rt((function(t,r){if(e){var n=t.link(e);return t.ELEMENTS=n,n}return t.ELEMENTS=null,null}));return a.value=e,a}if(Re in n){var i=n[Re];return nt(i,(function(e,t){var r=e.shared,n=r.isBufferArgs,a=r.elements,o=e.invoke(t,i),f=t.def("null"),u=t.def(n,"(",o,")"),s=e.cond(u).then(f,"=",a,".createStream(",o,");").else(f,"=",a,".getElements(",o,");");return x.optional((function(){e.assert(s.else,"!"+o+"||"+f,"invalid elements")})),t.entry(s),t.exit(e.cond(u).then(a,".destroyStream(",f,");")),e.ELEMENTS=f,f}))}return null}();function i(e,i){if(e in r){var o=0|r[e];return x.command(!i||o>=0,"invalid "+e,t.commandStr),rt((function(e,t){return i&&(e.OFFSET=o),o}))}if(e in n){var f=n[e];return nt(f,(function(t,r){var n=t.invoke(r,f);return i&&(t.OFFSET=n,x.optional((function(){t.assert(r,n+">=0","invalid "+e)}))),n}))}return i&&a?rt((function(e,t){return e.OFFSET="0",0})):null}var f=i(Ue,!0);return{elements:a,primitive:function(){if(Le in r){var e=r[Le];return x.commandParameter(e,Y,"invalid primitve",t.commandStr),rt((function(t,r){return Y[e]}))}if(Le in n){var i=n[Le];return nt(i,(function(e,t){var r=e.constants.primTypes,n=e.invoke(t,i);return x.optional((function(){e.assert(t,n+" in "+r,"invalid primitive, must be one of "+Object.keys(Y))})),t.def(r,"[",n,"]")}))}return a?tt(a)?a.value?rt((function(e,t){return t.def(e.ELEMENTS,".primType")})):rt((function(){return 4})):new et(a.thisDep,a.contextDep,a.propDep,(function(e,t){var r=e.ELEMENTS;return t.def(r,"?",r,".primType:",4)})):null}(),count:function(){if(We in r){var e=0|r[We];return x.command("number"==typeof e&&e>=0,"invalid vertex count",t.commandStr),rt((function(){return e}))}if(We in n){var i=n[We];return nt(i,(function(e,t){var r=e.invoke(t,i);return x.optional((function(){e.assert(t,"typeof "+r+'==="number"&&'+r+">=0&&"+r+"===("+r+"|0)","invalid vertex count")})),r}))}if(a){if(tt(a)){if(a)return f?new et(f.thisDep,f.contextDep,f.propDep,(function(e,t){var r=t.def(e.ELEMENTS,".vertCount-",e.OFFSET);return x.optional((function(){e.assert(t,r+">=0","invalid vertex offset/element buffer too small")})),r})):rt((function(e,t){return t.def(e.ELEMENTS,".vertCount")}));var o=rt((function(){return-1}));return x.optional((function(){o.MISSING=!0})),o}var u=new et(a.thisDep||f.thisDep,a.contextDep||f.contextDep,a.propDep||f.propDep,(function(e,t){var r=e.ELEMENTS;return e.OFFSET?t.def(r,"?",r,".vertCount-",e.OFFSET,":-1"):t.def(r,"?",r,".vertCount:-1")}));return x.optional((function(){u.DYNAMIC=!0})),u}return null}(),instances:i(He,!1),offset:f}}(e,s),y=function(e,t){var r=e.static,n=e.dynamic,i={};return k.forEach((function(e){var o=E(e);function f(t,a){if(e in r){var f=t(r[e]);i[o]=rt((function(){return f}))}else if(e in n){var u=n[e];i[o]=nt(u,(function(e,t){return a(e,t,e.invoke(t,u))}))}}switch(e){case"cull.enable":case"blend.enable":case"dither":case"stencil.enable":case"depth.enable":case"scissor.enable":case"polygonOffset.enable":case"sample.alpha":case"sample.enable":case"depth.mask":return f((function(r){return x.commandType(r,"boolean",e,t.commandStr),r}),(function(t,r,n){return x.optional((function(){t.assert(r,"typeof "+n+'==="boolean"',"invalid flag "+e,t.commandStr)})),n}));case"depth.func":return f((function(r){return x.commandParameter(r,Ye,"invalid "+e,t.commandStr),Ye[r]}),(function(t,r,n){var a=t.constants.compareFuncs;return x.optional((function(){t.assert(r,n+" in "+a,"invalid "+e+", must be one of "+Object.keys(Ye))})),r.def(a,"[",n,"]")}));case"depth.range":return f((function(e){return x.command(K(e)&&2===e.length&&"number"==typeof e[0]&&"number"==typeof e[1]&&e[0]<=e[1],"depth range is 2d array",t.commandStr),e}),(function(e,t,r){return x.optional((function(){e.assert(t,e.shared.isArrayLike+"("+r+")&&"+r+".length===2&&typeof "+r+'[0]==="number"&&typeof '+r+'[1]==="number"&&'+r+"[0]<="+r+"[1]","depth range must be a 2d array")})),[t.def("+",r,"[0]"),t.def("+",r,"[1]")]}));case"blend.func":return f((function(e){x.commandType(e,"object","blend.func",t.commandStr);var r="srcRGB"in e?e.srcRGB:e.src,n="srcAlpha"in e?e.srcAlpha:e.src,a="dstRGB"in e?e.dstRGB:e.dst,i="dstAlpha"in e?e.dstAlpha:e.dst;return x.commandParameter(r,Qe,o+".srcRGB",t.commandStr),x.commandParameter(n,Qe,o+".srcAlpha",t.commandStr),x.commandParameter(a,Qe,o+".dstRGB",t.commandStr),x.commandParameter(i,Qe,o+".dstAlpha",t.commandStr),x.command(-1===Ve.indexOf(r+", "+a),"unallowed blending combination (srcRGB, dstRGB) = ("+r+", "+a+")",t.commandStr),[Qe[r],Qe[a],Qe[n],Qe[i]]}),(function(t,r,n){var a=t.constants.blendFuncs;function i(i,o){var f=r.def('"',i,o,'" in ',n,"?",n,".",i,o,":",n,".",i);return x.optional((function(){t.assert(r,f+" in "+a,"invalid "+e+"."+i+o+", must be one of "+Object.keys(Qe))})),f}x.optional((function(){t.assert(r,n+"&&typeof "+n+'==="object"',"invalid blend func, must be an object")}));var o=i("src","RGB"),f=i("dst","RGB");x.optional((function(){var e=t.constants.invalidBlendCombinations;t.assert(r,e+".indexOf("+o+'+", "+'+f+") === -1 ","unallowed blending combination for (srcRGB, dstRGB)")}));var u=r.def(a,"[",o,"]"),s=r.def(a,"[",i("src","Alpha"),"]");return[u,r.def(a,"[",f,"]"),s,r.def(a,"[",i("dst","Alpha"),"]")]}));case"blend.equation":return f((function(r){return"string"==typeof r?(x.commandParameter(r,v,"invalid "+e,t.commandStr),[v[r],v[r]]):"object"==typeof r?(x.commandParameter(r.rgb,v,e+".rgb",t.commandStr),x.commandParameter(r.alpha,v,e+".alpha",t.commandStr),[v[r.rgb],v[r.alpha]]):void x.commandRaise("invalid blend.equation",t.commandStr)}),(function(t,r,n){var a=t.constants.blendEquations,i=r.def(),o=r.def(),f=t.cond("typeof ",n,'==="string"');return x.optional((function(){function r(e,r,n){t.assert(e,n+" in "+a,"invalid "+r+", must be one of "+Object.keys(v))}r(f.then,e,n),t.assert(f.else,n+"&&typeof "+n+'==="object"',"invalid "+e),r(f.else,e+".rgb",n+".rgb"),r(f.else,e+".alpha",n+".alpha")})),f.then(i,"=",o,"=",a,"[",n,"];"),f.else(i,"=",a,"[",n,".rgb];",o,"=",a,"[",n,".alpha];"),r(f),[i,o]}));case"blend.color":return f((function(e){return x.command(K(e)&&4===e.length,"blend.color must be a 4d array",t.commandStr),C(4,(function(t){return+e[t]}))}),(function(e,t,r){return x.optional((function(){e.assert(t,e.shared.isArrayLike+"("+r+")&&"+r+".length===4","blend.color must be a 4d array")})),C(4,(function(e){return t.def("+",r,"[",e,"]")}))}));case"stencil.mask":return f((function(e){return x.commandType(e,"number",o,t.commandStr),0|e}),(function(e,t,r){return x.optional((function(){e.assert(t,"typeof "+r+'==="number"',"invalid stencil.mask")})),t.def(r,"|0")}));case"stencil.func":return f((function(r){x.commandType(r,"object",o,t.commandStr);var n=r.cmp||"keep",a=r.ref||0,i="mask"in r?r.mask:-1;return x.commandParameter(n,Ye,e+".cmp",t.commandStr),x.commandType(a,"number",e+".ref",t.commandStr),x.commandType(i,"number",e+".mask",t.commandStr),[Ye[n],a,i]}),(function(e,t,r){var n=e.constants.compareFuncs;return x.optional((function(){function a(){e.assert(t,Array.prototype.join.call(arguments,""),"invalid stencil.func")}a(r+"&&typeof ",r,'==="object"'),a('!("cmp" in ',r,")||(",r,".cmp in ",n,")")})),[t.def('"cmp" in ',r,"?",n,"[",r,".cmp]",":",7680),t.def(r,".ref|0"),t.def('"mask" in ',r,"?",r,".mask|0:-1")]}));case"stencil.opFront":case"stencil.opBack":return f((function(r){x.commandType(r,"object",o,t.commandStr);var n=r.fail||"keep",a=r.zfail||"keep",i=r.zpass||"keep";return x.commandParameter(n,Xe,e+".fail",t.commandStr),x.commandParameter(a,Xe,e+".zfail",t.commandStr),x.commandParameter(i,Xe,e+".zpass",t.commandStr),["stencil.opBack"===e?1029:1028,Xe[n],Xe[a],Xe[i]]}),(function(t,r,n){var a=t.constants.stencilOps;function i(i){return x.optional((function(){t.assert(r,'!("'+i+'" in '+n+")||("+n+"."+i+" in "+a+")","invalid "+e+"."+i+", must be one of "+Object.keys(Xe))})),r.def('"',i,'" in ',n,"?",a,"[",n,".",i,"]:",7680)}return x.optional((function(){t.assert(r,n+"&&typeof "+n+'==="object"',"invalid "+e)})),["stencil.opBack"===e?1029:1028,i("fail"),i("zfail"),i("zpass")]}));case"polygonOffset.offset":return f((function(e){x.commandType(e,"object",o,t.commandStr);var r=0|e.factor,n=0|e.units;return x.commandType(r,"number",o+".factor",t.commandStr),x.commandType(n,"number",o+".units",t.commandStr),[r,n]}),(function(t,r,n){return x.optional((function(){t.assert(r,n+"&&typeof "+n+'==="object"',"invalid "+e)})),[r.def(n,".factor|0"),r.def(n,".units|0")]}));case"cull.face":return f((function(e){var r=0;return"front"===e?r=1028:"back"===e&&(r=1029),x.command(!!r,o,t.commandStr),r}),(function(e,t,r){return x.optional((function(){e.assert(t,r+'==="front"||'+r+'==="back"',"invalid cull.face")})),t.def(r,'==="front"?',1028,":",1029)}));case"lineWidth":return f((function(e){return x.command("number"==typeof e&&e>=a.lineWidthDims[0]&&e<=a.lineWidthDims[1],"invalid line width, must be a positive number between "+a.lineWidthDims[0]+" and "+a.lineWidthDims[1],t.commandStr),e}),(function(e,t,r){return x.optional((function(){e.assert(t,"typeof "+r+'==="number"&&'+r+">="+a.lineWidthDims[0]+"&&"+r+"<="+a.lineWidthDims[1],"invalid line width")})),r}));case"frontFace":return f((function(e){return x.commandParameter(e,Je,o,t.commandStr),Je[e]}),(function(e,t,r){return x.optional((function(){e.assert(t,r+'==="cw"||'+r+'==="ccw"',"invalid frontFace, must be one of cw,ccw")})),t.def(r+'==="cw"?2304:2305')}));case"colorMask":return f((function(e){return x.command(K(e)&&4===e.length,"color.mask must be length 4 array",t.commandStr),e.map((function(e){return!!e}))}),(function(e,t,r){return x.optional((function(){e.assert(t,e.shared.isArrayLike+"("+r+")&&"+r+".length===4","invalid color.mask")})),C(4,(function(e){return"!!"+r+"["+e+"]"}))}));case"sample.coverage":return f((function(e){x.command("object"==typeof e&&e,o,t.commandStr);var r="value"in e?e.value:1,n=!!e.invert;return x.command("number"==typeof r&&r>=0&&r<=1,"sample.coverage.value must be a number between 0 and 1",t.commandStr),[r,n]}),(function(e,t,r){return x.optional((function(){e.assert(t,r+"&&typeof "+r+'==="object"',"invalid sample.coverage")})),[t.def('"value" in ',r,"?+",r,".value:1"),t.def("!!",r,".invert")]}))}})),i}(e,s),w=function(e){var t=e.static,n=e.dynamic;function a(e){if(e in t){var a=r.id(t[e]);x.optional((function(){l.shader($e[e],a,x.guessCommand())}));var i=rt((function(){return a}));return i.id=a,i}if(e in n){var o=n[e];return nt(o,(function(t,r){var n=t.invoke(r,o),a=r.def(t.shared.strings,".id(",n,")");return x.optional((function(){r(t.shared.shader,".shader(",$e[e],",",a,",",t.command,");")})),a}))}return null}var i,o=a(Ie),f=a(Me),u=null;return tt(o)&&tt(f)?(u=l.program(f.id,o.id),i=rt((function(e,t){return e.link(u)}))):i=new et(o&&o.thisDep||f&&f.thisDep,o&&o.contextDep||f&&f.contextDep,o&&o.propDep||f&&f.propDep,(function(e,t){var r,n=e.shared.shader;r=o?o.append(e,t):t.def(n,".",Ie);var a=n+".program("+(f?f.append(e,t):t.def(n,".",Me))+","+r;return x.optional((function(){a+=","+e.command})),t.def(a+")")})),{frag:o,vert:f,progVar:i,program:u}}(e);function _(e){var t=m[e];t&&(y[e]=t)}_("viewport"),_(E("scissor.box"));var A=Object.keys(y).length>0,S={framebuffer:p,draw:h,shader:w,state:y,dirty:A};return S.profile=function(e){var t,r=e.static,n=e.dynamic;if(Be in r){var a=!!r[Be];(t=rt((function(e,t){return a}))).enable=a}else if(Be in n){var i=n[Be];t=nt(i,(function(e,t){return e.invoke(t,i)}))}return t}(e),S.uniforms=function(e,t){var r=e.static,n=e.dynamic,a={};return Object.keys(r).forEach((function(e){var n,i=r[e];if("number"==typeof i||"boolean"==typeof i)n=rt((function(){return i}));else if("function"==typeof i){var o=i._reglType;"texture2d"===o||"textureCube"===o?n=rt((function(e){return e.link(i)})):"framebuffer"===o||"framebufferCube"===o?(x.command(i.color.length>0,'missing color attachment for framebuffer sent to uniform "'+e+'"',t.commandStr),n=rt((function(e){return e.link(i.color[0])}))):x.commandRaise('invalid data for uniform "'+e+'"',t.commandStr)}else K(i)?n=rt((function(t){return t.global.def("[",C(i.length,(function(r){return x.command("number"==typeof i[r]||"boolean"==typeof i[r],"invalid uniform "+e,t.commandStr),i[r]})),"]")})):x.commandRaise('invalid or missing data for uniform "'+e+'"',t.commandStr);n.value=i,a[e]=n})),Object.keys(n).forEach((function(e){var t=n[e];a[e]=nt(t,(function(e,r){return e.invoke(r,t)}))})),a}(n,s),S.attributes=function(e,t){var n=e.static,a=e.dynamic,o={};return Object.keys(n).forEach((function(e){var a=n[e],f=r.id(e),u=new b;if(Ke(a))u.state=1,u.buffer=i.getBuffer(i.create(a,34962,!1,!0)),u.type=0;else{var s=i.getBuffer(a);if(s)u.state=1,u.buffer=s,u.type=0;else if(x.command("object"==typeof a&&a,"invalid data for attribute "+e,t.commandStr),"constant"in a){var c=a.constant;u.buffer="null",u.state=2,"number"==typeof c?u.x=c:(x.command(K(c)&&c.length>0&&c.length<=4,"invalid constant for attribute "+e,t.commandStr),ze.forEach((function(e,t){t<c.length&&(u[e]=c[t])})))}else{s=Ke(a.buffer)?i.getBuffer(i.create(a.buffer,34962,!1,!0)):i.getBuffer(a.buffer),x.command(!!s,'missing buffer for attribute "'+e+'"',t.commandStr);var l=0|a.offset;x.command(l>=0,'invalid offset for attribute "'+e+'"',t.commandStr);var d=0|a.stride;x.command(d>=0&&d<256,'invalid stride for attribute "'+e+'", must be integer betweeen [0, 255]',t.commandStr);var p=0|a.size;x.command(!("size"in a)||p>0&&p<=4,'invalid size for attribute "'+e+'", must be 1,2,3,4',t.commandStr);var m=!!a.normalized,h=0;"type"in a&&(x.commandParameter(a.type,W,"invalid type for attribute "+e,t.commandStr),h=W[a.type]);var v=0|a.divisor;"divisor"in a&&(x.command(0===v||g,'cannot specify divisor for attribute "'+e+'", instancing not supported',t.commandStr),x.command(v>=0,'invalid divisor for attribute "'+e+'"',t.commandStr)),x.optional((function(){var r=t.commandStr,n=["buffer","offset","divisor","normalized","type","size","stride"];Object.keys(a).forEach((function(t){x.command(n.indexOf(t)>=0,'unknown parameter "'+t+'" for attribute pointer "'+e+'" (valid parameters are '+n+")",r)}))})),u.buffer=s,u.state=1,u.size=p,u.normalized=m,u.type=h||s.dtype,u.offset=l,u.stride=d,u.divisor=v}}o[e]=rt((function(e,t){var r=e.attribCache;if(f in r)return r[f];var n={isStream:!1};return Object.keys(u).forEach((function(e){n[e]=u[e]})),u.buffer&&(n.buffer=e.link(u.buffer),n.type=n.type||n.buffer+".dtype"),r[f]=n,n}))})),Object.keys(a).forEach((function(e){var t=a[e];o[e]=nt(t,(function(r,n){var a=r.invoke(n,t),i=r.shared,o=r.constants,f=i.isBufferArgs,u=i.buffer;x.optional((function(){r.assert(n,a+"&&(typeof "+a+'==="object"||typeof '+a+'==="function")&&('+f+"("+a+")||"+u+".getBuffer("+a+")||"+u+".getBuffer("+a+".buffer)||"+f+"("+a+'.buffer)||("constant" in '+a+"&&(typeof "+a+'.constant==="number"||'+i.isArrayLike+"("+a+".constant))))",'invalid dynamic attribute "'+e+'"')}));var s={isStream:n.def(!1)},c=new b;c.state=1,Object.keys(c).forEach((function(e){s[e]=n.def(""+c[e])}));var l=s.buffer,d=s.type;function p(e){n(s[e],"=",a,".",e,"|0;")}return n("if(",f,"(",a,")){",s.isStream,"=true;",l,"=",u,".createStream(",34962,",",a,");",d,"=",l,".dtype;","}else{",l,"=",u,".getBuffer(",a,");","if(",l,"){",d,"=",l,".dtype;",'}else if("constant" in ',a,"){",s.state,"=",2,";","if(typeof "+a+'.constant === "number"){',s[ze[0]],"=",a,".constant;",ze.slice(1).map((function(e){return s[e]})).join("="),"=0;","}else{",ze.map((function(e,t){return s[e]+"="+a+".constant.length>"+t+"?"+a+".constant["+t+"]:0;"})).join(""),"}}else{","if(",f,"(",a,".buffer)){",l,"=",u,".createStream(",34962,",",a,".buffer);","}else{",l,"=",u,".getBuffer(",a,".buffer);","}",d,'="type" in ',a,"?",o.glTypes,"[",a,".type]:",l,".dtype;",s.normalized,"=!!",a,".normalized;"),p("size"),p("offset"),p("stride"),p("divisor"),n("}}"),n.exit("if(",s.isStream,"){",u,".destroyStream(",l,");","}"),s}))})),o}(t,s),S.context=function(e){var t=e.static,r=e.dynamic,n={};return Object.keys(t).forEach((function(e){var r=t[e];n[e]=rt((function(e,t){return"number"==typeof r||"boolean"==typeof r?""+r:e.link(r)}))})),Object.keys(r).forEach((function(e){var t=r[e];n[e]=nt(t,(function(e,r){return e.invoke(r,t)}))})),n}(f),S}function M(e,t,r){var n=e.shared.context,a=e.scope();Object.keys(r).forEach((function(i){t.save(n,"."+i);var o=r[i];a(n,".",i,"=",o.append(e,t),";")})),t(a)}function I(e,t,r,n){var a,i=e.shared,o=i.gl,f=i.framebuffer;y&&(a=t.def(i.extensions,".webgl_draw_buffers"));var u,s=e.constants,c=s.drawBuffer,l=s.backBuffer;u=r?r.append(e,t):t.def(f,".next"),n||t("if(",u,"!==",f,".cur){"),t("if(",u,"){",o,".bindFramebuffer(",36160,",",u,".framebuffer);"),y&&t(a,".drawBuffersWEBGL(",c,"[",u,".colorAttachments.length]);"),t("}else{",o,".bindFramebuffer(",36160,",null);"),y&&t(a,".drawBuffersWEBGL(",l,");"),t("}",f,".cur=",u,";"),n||t("}")}function R(e,t,r){var n=e.shared,a=n.gl,i=e.current,o=e.next,f=n.current,u=n.next,s=e.cond(f,".dirty");k.forEach((function(t){var n,c,l=E(t);if(!(l in r.state))if(l in o){n=o[l],c=i[l];var d=C(w[l].length,(function(e){return s.def(n,"[",e,"]")}));s(e.cond(d.map((function(e,t){return e+"!=="+c+"["+t+"]"})).join("||")).then(a,".",j[l],"(",d,");",d.map((function(e,t){return c+"["+t+"]="+e})).join(";"),";"))}else{n=s.def(u,".",l);var p=e.cond(n,"!==",f,".",l);s(p),l in A?p(e.cond(n).then(a,".enable(",A[l],");").else(a,".disable(",A[l],");"),f,".",l,"=",n,";"):p(a,".",j[l],"(",n,");",f,".",l,"=",n,";")}})),0===Object.keys(r.state).length&&s(f,".dirty=false;"),t(s)}function L(e,t,r,n){var a=e.shared,i=e.current,o=a.current,f=a.gl;Ze(Object.keys(r)).forEach((function(a){var u=r[a];if(!n||n(u)){var s=u.append(e,t);if(A[a]){var c=A[a];tt(u)?t(f,s?".enable(":".disable(",c,");"):t(e.cond(s).then(f,".enable(",c,");").else(f,".disable(",c,");")),t(o,".",a,"=",s,";")}else if(K(s)){var l=i[a];t(f,".",j[a],"(",s,");",s.map((function(e,t){return l+"["+t+"]="+e})).join(";"),";")}else t(f,".",j[a],"(",s,");",o,".",a,"=",s,";")}}))}function U(e,t){g&&(e.instancing=t.def(e.shared.extensions,".angle_instanced_arrays"))}function H(e,t,r,n,a){var i,o,f,u=e.shared,s=e.stats,c=u.current,l=u.timer,d=r.profile;function p(){return"undefined"==typeof performance?"Date.now()":"performance.now()"}function h(e){e(i=t.def(),"=",p(),";"),"string"==typeof a?e(s,".count+=",a,";"):e(s,".count++;"),m&&(n?e(o=t.def(),"=",l,".getNumPendingQueries();"):e(l,".beginQuery(",s,");"))}function b(e){e(s,".cpuTime+=",p(),"-",i,";"),m&&(n?e(l,".pushScopeStats(",o,",",l,".getNumPendingQueries(),",s,");"):e(l,".endQuery();"))}function v(e){var r=t.def(c,".profile");t(c,".profile=",e,";"),t.exit(c,".profile=",r,";")}if(d){if(tt(d))return void(d.enable?(h(t),b(t.exit),v("true")):v("false"));v(f=d.append(e,t))}else f=t.def(c,".profile");var g=e.block();h(g),t("if(",f,"){",g,"}");var y=e.block();b(y),t.exit("if(",f,"){",y,"}")}function q(e,t,r,n,a){var i=e.shared;n.forEach((function(n){var o,f=n.name,u=r.attributes[f];if(u){if(!a(u))return;o=u.append(e,t)}else{if(!a(at))return;var s=e.scopeAttrib(f);x.optional((function(){e.assert(t,s+".state","missing attribute "+f)})),o={},Object.keys(new b).forEach((function(e){o[e]=t.def(s,".",e)}))}!function(r,n,a){var o=i.gl,f=t.def(r,".location"),u=t.def(i.attributes,"[",f,"]"),s=a.state,c=a.buffer,l=[a.x,a.y,a.z,a.w],d=["buffer","normalized","offset","stride"];function p(){t("if(!",u,".buffer){",o,".enableVertexAttribArray(",f,");}");var r,i=a.type;if(r=a.size?t.def(a.size,"||",n):n,t("if(",u,".type!==",i,"||",u,".size!==",r,"||",d.map((function(e){return u+"."+e+"!=="+a[e]})).join("||"),"){",o,".bindBuffer(",34962,",",c,".buffer);",o,".vertexAttribPointer(",[f,r,i,a.normalized,a.stride,a.offset],");",u,".type=",i,";",u,".size=",r,";",d.map((function(e){return u+"."+e+"="+a[e]+";"})).join(""),"}"),g){var s=a.divisor;t("if(",u,".divisor!==",s,"){",e.instancing,".vertexAttribDivisorANGLE(",[f,s],");",u,".divisor=",s,";}")}}function m(){t("if(",u,".buffer){",o,".disableVertexAttribArray(",f,");",u,".buffer=null;","}if(",ze.map((function(e,t){return u+"."+e+"!=="+l[t]})).join("||"),"){",o,".vertexAttrib4f(",f,",",l,");",ze.map((function(e,t){return u+"."+e+"="+l[t]+";"})).join(""),"}")}1===s?p():2===s?m():(t("if(",s,"===",1,"){"),p(),t("}else{"),m(),t("}"))}(e.link(n),function(e){switch(e){case 35664:case 35667:case 35671:return 2;case 35665:case 35668:case 35672:return 3;case 35666:case 35669:case 35673:return 4;default:return 1}}(n.info.type),o)}))}function N(e,t,n,a,i){for(var o,f=e.shared,u=f.gl,s=0;s<a.length;++s){var c,l=a[s],d=l.name,p=l.info.type,m=n.uniforms[d],h=e.link(l)+".location";if(m){if(!i(m))continue;if(tt(m)){var b=m.value;if(x.command(null!=b,'missing uniform "'+d+'"',e.commandStr),35678===p||35680===p){x.command("function"==typeof b&&(35678===p&&("texture2d"===b._reglType||"framebuffer"===b._reglType)||35680===p&&("textureCube"===b._reglType||"framebufferCube"===b._reglType)),"invalid texture for uniform "+d,e.commandStr);var v=e.link(b._texture||b.color[0]._texture);t(u,".uniform1i(",h,",",v+".bind());"),t.exit(v,".unbind();")}else if(35674===p||35675===p||35676===p){x.optional((function(){x.command(K(b),"invalid matrix for uniform "+d,e.commandStr),x.command(35674===p&&4===b.length||35675===p&&9===b.length||35676===p&&16===b.length,"invalid length for matrix uniform "+d,e.commandStr)}));var g=e.global.def("new Float32Array(["+Array.prototype.slice.call(b)+"])"),y=2;35675===p?y=3:35676===p&&(y=4),t(u,".uniformMatrix",y,"fv(",h,",false,",g,");")}else{switch(p){case 5126:x.commandType(b,"number","uniform "+d,e.commandStr),o="1f";break;case 35664:x.command(K(b)&&2===b.length,"uniform "+d,e.commandStr),o="2f";break;case 35665:x.command(K(b)&&3===b.length,"uniform "+d,e.commandStr),o="3f";break;case 35666:x.command(K(b)&&4===b.length,"uniform "+d,e.commandStr),o="4f";break;case 35670:x.commandType(b,"boolean","uniform "+d,e.commandStr),o="1i";break;case 5124:x.commandType(b,"number","uniform "+d,e.commandStr),o="1i";break;case 35671:case 35667:x.command(K(b)&&2===b.length,"uniform "+d,e.commandStr),o="2i";break;case 35672:case 35668:x.command(K(b)&&3===b.length,"uniform "+d,e.commandStr),o="3i";break;case 35673:case 35669:x.command(K(b)&&4===b.length,"uniform "+d,e.commandStr),o="4i"}t(u,".uniform",o,"(",h,",",K(b)?Array.prototype.slice.call(b):b,");")}continue}c=m.append(e,t)}else{if(!i(at))continue;c=t.def(f.uniforms,"[",r.id(d),"]")}35678===p?t("if(",c,"&&",c,'._reglType==="framebuffer"){',c,"=",c,".color[0];","}"):35680===p&&t("if(",c,"&&",c,'._reglType==="framebufferCube"){',c,"=",c,".color[0];","}"),x.optional((function(){function r(r,n){e.assert(t,r,'bad data or missing for uniform "'+d+'".  '+n)}function n(e){r("typeof "+c+'==="'+e+'"',"invalid type, expected "+e)}function a(t,n){r(f.isArrayLike+"("+c+")&&"+c+".length==="+t,"invalid vector, should have length "+t,e.commandStr)}function i(t){r("typeof "+c+'==="function"&&'+c+'._reglType==="texture'+(3553===t?"2d":"Cube")+'"',"invalid texture type",e.commandStr)}switch(p){case 5124:n("number");break;case 35667:a(2);break;case 35668:a(3);break;case 35669:a(4);break;case 5126:n("number");break;case 35664:a(2);break;case 35665:a(3);break;case 35666:a(4);break;case 35670:n("boolean");break;case 35671:a(2);break;case 35672:a(3);break;case 35673:case 35674:a(4);break;case 35675:a(9);break;case 35676:a(16);break;case 35678:i(3553);break;case 35680:i(34067)}}));var w=1;switch(p){case 35678:case 35680:var _=t.def(c,"._texture");t(u,".uniform1i(",h,",",_,".bind());"),t.exit(_,".unbind();");continue;case 5124:case 35670:o="1i";break;case 35667:case 35671:o="2i",w=2;break;case 35668:case 35672:o="3i",w=3;break;case 35669:case 35673:o="4i",w=4;break;case 5126:o="1f";break;case 35664:o="2f",w=2;break;case 35665:o="3f",w=3;break;case 35666:o="4f",w=4;break;case 35674:o="Matrix2fv";break;case 35675:o="Matrix3fv";break;case 35676:o="Matrix4fv"}if(t(u,".uniform",o,"(",h,","),"M"===o.charAt(0)){var k=Math.pow(p-35674+2,2),A=e.global.def("new Float32Array(",k,")");t("false,(Array.isArray(",c,")||",c," instanceof Float32Array)?",c,":(",C(k,(function(e){return A+"["+e+"]="+c+"["+e+"]"})),",",A,")")}else t(w>1?C(w,(function(e){return c+"["+e+"]"})):c);t(");")}}function G(e,t,r,n){var a=e.shared,i=a.gl,o=a.draw,f=n.draw,u=function(){var a,u=f.elements,s=t;return u?((u.contextDep&&n.contextDynamic||u.propDep)&&(s=r),a=u.append(e,s)):a=s.def(o,".",Re),a&&s("if("+a+")"+i+".bindBuffer(34963,"+a+".buffer.buffer);"),a}();function s(a){var i=f[a];return i?i.contextDep&&n.contextDynamic||i.propDep?i.append(e,r):i.append(e,t):t.def(o,".",a)}var c,l,d=s(Le),p=s(Ue),m=function(){var a,i=f.count,u=t;return i?((i.contextDep&&n.contextDynamic||i.propDep)&&(u=r),a=i.append(e,u),x.optional((function(){i.MISSING&&e.assert(t,"false","missing vertex count"),i.DYNAMIC&&e.assert(u,a+">=0","missing vertex count")}))):(a=u.def(o,".",We),x.optional((function(){e.assert(u,a+">=0","missing vertex count")}))),a}();if("number"==typeof m){if(0===m)return}else r("if(",m,"){"),r.exit("}");g&&(c=s(He),l=e.instancing);var h=u+".type",b=f.elements&&tt(f.elements);function v(){function e(){r(l,".drawElementsInstancedANGLE(",[d,m,h,p+"<<(("+h+"-5121)>>1)",c],");")}function t(){r(l,".drawArraysInstancedANGLE(",[d,p,m,c],");")}u?b?e():(r("if(",u,"){"),e(),r("}else{"),t(),r("}")):t()}function y(){function e(){r(i+".drawElements("+[d,m,h,p+"<<(("+h+"-5121)>>1)"]+");")}function t(){r(i+".drawArrays("+[d,p,m]+");")}u?b?e():(r("if(",u,"){"),e(),r("}else{"),t(),r("}")):t()}g&&("number"!=typeof c||c>=0)?"string"==typeof c?(r("if(",c,">0){"),v(),r("}else if(",c,"<0){"),y(),r("}")):v():y()}function Q(e,t,r,n,a){var i=B(),o=i.proc("body",a);return x.optional((function(){i.commandStr=t.commandStr,i.command=i.link(t.commandStr)})),g&&(i.instancing=o.def(i.shared.extensions,".angle_instanced_arrays")),e(i,o,r,n),i.compile().body}function V(e,t,r,n){U(e,t),q(e,t,r,n.attributes,(function(){return!0})),N(e,t,r,n.uniforms,(function(){return!0})),G(e,t,t,r)}function X(e,t,r,n){function a(){return!0}e.batchId="a1",U(e,t),q(e,t,r,n.attributes,a),N(e,t,r,n.uniforms,a),G(e,t,t,r)}function $(e,t,r,n){U(e,t);var a=r.contextDep,i=t.def(),o=t.def();e.shared.props=o,e.batchId=i;var f=e.scope(),u=e.scope();function s(e){return e.contextDep&&a||e.propDep}function c(e){return!s(e)}if(t(f.entry,"for(",i,"=0;",i,"<","a1",";++",i,"){",o,"=","a0","[",i,"];",u,"}",f.exit),r.needsContext&&M(e,u,r.context),r.needsFramebuffer&&I(e,u,r.framebuffer),L(e,u,r.state,s),r.profile&&s(r.profile)&&H(e,u,r,!1,!0),n)q(e,f,r,n.attributes,c),q(e,u,r,n.attributes,s),N(e,f,r,n.uniforms,c),N(e,u,r,n.uniforms,s),G(e,f,u,r);else{var l=e.global.def("{}"),d=r.shader.progVar.append(e,u),p=u.def(d,".id"),m=u.def(l,"[",p,"]");u(e.shared.gl,".useProgram(",d,".program);","if(!",m,"){",m,"=",l,"[",p,"]=",e.link((function(t){return Q(X,e,r,t,2)})),"(",d,");}",m,".call(this,a0[",i,"],",i,");")}}function J(e,t,r){var n=t.static[r];if(n&&function(e){if("object"==typeof e&&!K(e)){for(var t=Object.keys(e),r=0;r<t.length;++r)if(S.isDynamic(e[t[r]]))return!0;return!1}}(n)){var a=e.global,i=Object.keys(n),o=!1,f=!1,u=!1,s=e.global.def("{}");i.forEach((function(t){var r=n[t];if(S.isDynamic(r)){"function"==typeof r&&(r=n[t]=S.unbox(r));var i=nt(r,null);o=o||i.thisDep,u=u||i.propDep,f=f||i.contextDep}else{switch(a(s,".",t,"="),typeof r){case"number":a(r);break;case"string":a('"',r,'"');break;case"object":Array.isArray(r)&&a("[",r.join(),"]");break;default:a(e.link(r))}a(";")}})),t.dynamic[r]=new S.DynamicVariable(4,{thisDep:o,contextDep:f,propDep:u,ref:s,append:function(e,t){i.forEach((function(r){var a=n[r];if(S.isDynamic(a)){var i=e.invoke(t,a);t(s,".",r,"=",i,";")}}))}}),delete t.static[r]}}return{next:_,current:w,procs:function(){var e=B(),t=e.proc("poll"),r=e.proc("refresh"),n=e.block();t(n),r(n);var i,o=e.shared,f=o.gl,u=o.next,s=o.current;n(s,".dirty=false;"),I(e,t),I(e,r,null,!0),g&&(i=e.link(g));for(var c=0;c<a.maxAttributes;++c){var l=r.def(o.attributes,"[",c,"]"),d=e.cond(l,".buffer");d.then(f,".enableVertexAttribArray(",c,");",f,".bindBuffer(",34962,",",l,".buffer.buffer);",f,".vertexAttribPointer(",c,",",l,".size,",l,".type,",l,".normalized,",l,".stride,",l,".offset);").else(f,".disableVertexAttribArray(",c,");",f,".vertexAttrib4f(",c,",",l,".x,",l,".y,",l,".z,",l,".w);",l,".buffer=null;"),r(d),g&&r(i,".vertexAttribDivisorANGLE(",c,",",l,".divisor);")}return Object.keys(A).forEach((function(a){var i=A[a],o=n.def(u,".",a),c=e.block();c("if(",o,"){",f,".enable(",i,")}else{",f,".disable(",i,")}",s,".",a,"=",o,";"),r(c),t("if(",o,"!==",s,".",a,"){",c,"}")})),Object.keys(j).forEach((function(a){var i,o,c=j[a],l=w[a],d=e.block();if(d(f,".",c,"("),K(l)){var p=l.length;i=e.global.def(u,".",a),o=e.global.def(s,".",a),d(C(p,(function(e){return i+"["+e+"]"})),");",C(p,(function(e){return o+"["+e+"]="+i+"["+e+"];"})).join("")),t("if(",C(p,(function(e){return i+"["+e+"]!=="+o+"["+e+"]"})).join("||"),"){",d,"}")}else i=n.def(u,".",a),o=n.def(s,".",a),d(i,");",s,".",a,"=",i,";"),t("if(",i,"!==",o,"){",d,"}");r(d)})),e.compile()}(),compile:function(e,t,n,a,i){var o=B();o.stats=o.link(i),Object.keys(t.static).forEach((function(e){J(o,t,e)})),Ge.forEach((function(t){J(o,e,t)}));var f=P(e,t,n,a,o);return function(e,t){var r=e.proc("draw",1);U(e,r),M(e,r,t.context),I(e,r,t.framebuffer),R(e,r,t),L(e,r,t.state),H(e,r,t,!1,!0);var n=t.shader.progVar.append(e,r);if(r(e.shared.gl,".useProgram(",n,".program);"),t.shader.program)V(e,r,t,t.shader.program);else{var a=e.global.def("{}"),i=r.def(n,".id"),o=r.def(a,"[",i,"]");r(e.cond(o).then(o,".call(this,a0);").else(o,"=",a,"[",i,"]=",e.link((function(r){return Q(V,e,t,r,1)})),"(",n,");",o,".call(this,a0);"))}Object.keys(t.state).length>0&&r(e.shared.current,".dirty=true;")}(o,f),function(e,t){var n=e.proc("scope",3);e.batchId="a2";var a=e.shared,i=a.current;function o(r){var i=t.shader[r];i&&n.set(a.shader,"."+r,i.append(e,n))}M(e,n,t.context),t.framebuffer&&t.framebuffer.append(e,n),Ze(Object.keys(t.state)).forEach((function(r){var i=t.state[r].append(e,n);K(i)?i.forEach((function(t,a){n.set(e.next[r],"["+a+"]",t)})):n.set(a.next,"."+r,i)})),H(e,n,t,!0,!0),[Re,Ue,We,He,Le].forEach((function(r){var i=t.draw[r];i&&n.set(a.draw,"."+r,""+i.append(e,n))})),Object.keys(t.uniforms).forEach((function(i){n.set(a.uniforms,"["+r.id(i)+"]",t.uniforms[i].append(e,n))})),Object.keys(t.attributes).forEach((function(r){var a=t.attributes[r].append(e,n),i=e.scopeAttrib(r);Object.keys(new b).forEach((function(e){n.set(i,"."+e,a[e])}))})),o(Me),o(Ie),Object.keys(t.state).length>0&&(n(i,".dirty=true;"),n.exit(i,".dirty=true;")),n("a1(",e.shared.context,",a0,",e.batchId,");")}(o,f),function(e,t){var r=e.proc("batch",2);e.batchId="0",U(e,r);var n=!1,a=!0;Object.keys(t.context).forEach((function(e){n=n||t.context[e].propDep})),n||(M(e,r,t.context),a=!1);var i=t.framebuffer,o=!1;function f(e){return e.contextDep&&n||e.propDep}i?(i.propDep?n=o=!0:i.contextDep&&n&&(o=!0),o||I(e,r,i)):I(e,r,null),t.state.viewport&&t.state.viewport.propDep&&(n=!0),R(e,r,t),L(e,r,t.state,(function(e){return!f(e)})),t.profile&&f(t.profile)||H(e,r,t,!1,"a1"),t.contextDep=n,t.needsContext=a,t.needsFramebuffer=o;var u=t.shader.progVar;if(u.contextDep&&n||u.propDep)$(e,r,t,null);else{var s=u.append(e,r);if(r(e.shared.gl,".useProgram(",s,".program);"),t.shader.program)$(e,r,t,t.shader.program);else{var c=e.global.def("{}"),l=r.def(s,".id"),d=r.def(c,"[",l,"]");r(e.cond(d).then(d,".call(this,a0,a1);").else(d,"=",c,"[",l,"]=",e.link((function(r){return Q($,e,t,r,2)})),"(",s,");",d,".call(this,a0,a1);"))}}Object.keys(t.state).length>0&&r(e.shared.current,".dirty=true;")}(o,f),o.compile()}}}var ot=function(e,t){if(!t.ext_disjoint_timer_query)return null;var r=[];function n(e){r.push(e)}var a=[];function i(){this.startQueryIndex=-1,this.endQueryIndex=-1,this.sum=0,this.stats=null}var o=[];function f(e){o.push(e)}var u=[];function s(e,t,r){var n=o.pop()||new i;n.startQueryIndex=e,n.endQueryIndex=t,n.sum=0,n.stats=r,u.push(n)}var c=[],l=[];return{beginQuery:function(e){var n=r.pop()||t.ext_disjoint_timer_query.createQueryEXT();t.ext_disjoint_timer_query.beginQueryEXT(35007,n),a.push(n),s(a.length-1,a.length,e)},endQuery:function(){t.ext_disjoint_timer_query.endQueryEXT(35007)},pushScopeStats:s,update:function(){var e,r,i=a.length;if(0!==i){l.length=Math.max(l.length,i+1),c.length=Math.max(c.length,i+1),c[0]=0,l[0]=0;var o=0;for(e=0,r=0;r<a.length;++r){var s=a[r];t.ext_disjoint_timer_query.getQueryObjectEXT(s,34919)?(o+=t.ext_disjoint_timer_query.getQueryObjectEXT(s,34918),n(s)):a[e++]=s,c[r+1]=o,l[r+1]=e}for(a.length=e,e=0,r=0;r<u.length;++r){var d=u[r],p=d.startQueryIndex,m=d.endQueryIndex;d.sum+=c[m]-c[p];var h=l[p],b=l[m];b===h?(d.stats.gpuTime+=d.sum/1e6,f(d)):(d.startQueryIndex=h,d.endQueryIndex=b,u[e++]=d)}u.length=e}},getNumPendingQueries:function(){return a.length},clear:function(){r.push.apply(r,a);for(var e=0;e<r.length;e++)t.ext_disjoint_timer_query.deleteQueryEXT(r[e]);a.length=0,r.length=0},restore:function(){a.length=0,r.length=0}}};function ft(e,t){for(var r=0;r<e.length;++r)if(e[r]===t)return r;return-1}return function(r){var n=O(r);if(!n)return null;var a=n.gl,i=a.getContextAttributes(),o=a.isContextLost(),f=function(e,t){var r={};function n(t){x.type(t,"string","extension name must be string");var n,a=t.toLowerCase();try{n=r[a]=e.getExtension(a)}catch(e){}return!!n}for(var a=0;a<t.extensions.length;++a){var i=t.extensions[a];if(!n(i))return t.onDestroy(),t.onDone('"'+i+'" extension is not supported by the current WebGL context, try upgrading your system or a different browser'),null}return t.optionalExtensions.forEach(n),{extensions:r,restore:function(){Object.keys(r).forEach((function(e){if(r[e]&&!n(e))throw new Error("(regl): error restoring extension "+e)}))}}}(a,n);if(!f)return null;var u,s,c=(u={"":0},s=[""],{id:function(e){var t=u[e];return t||(t=u[e]=s.length,s.push(e),t)},str:function(e){return s[e]}}),l={bufferCount:0,elementsCount:0,framebufferCount:0,shaderCount:0,textureCount:0,cubeCount:0,renderbufferCount:0,maxTextureUnits:0},d=f.extensions,p=ot(0,d),m=E(),h=a.drawingBufferWidth,b=a.drawingBufferHeight,v={tick:0,time:0,viewportWidth:h,viewportHeight:b,framebufferWidth:h,framebufferHeight:b,drawingBufferWidth:h,drawingBufferHeight:b,pixelRatio:n.pixelRatio},g=function(e,t){var r=1;t.ext_texture_filter_anisotropic&&(r=e.getParameter(34047));var n=1,a=1;t.webgl_draw_buffers&&(n=e.getParameter(34852),a=e.getParameter(36063));var i=!!t.oes_texture_float;if(i){var o=e.createTexture();e.bindTexture(3553,o),e.texImage2D(3553,0,6408,1,1,0,6408,5126,null);var f=e.createFramebuffer();if(e.bindFramebuffer(36160,f),e.framebufferTexture2D(36160,36064,3553,o,0),e.bindTexture(3553,null),36053!==e.checkFramebufferStatus(36160))i=!1;else{e.viewport(0,0,1,1),e.clearColor(1,0,0,1),e.clear(16384);var u=B.allocType(5126,4);e.readPixels(0,0,1,1,6408,5126,u),e.getError()?i=!1:(e.deleteFramebuffer(f),e.deleteTexture(o),i=1===u[0]),B.freeType(u)}}var s=!0;if("undefined"==typeof navigator||!(/MSIE/.test(navigator.userAgent)||/Trident\//.test(navigator.appVersion)||/Edge/.test(navigator.userAgent))){var c=e.createTexture(),l=B.allocType(5121,36);e.activeTexture(33984),e.bindTexture(34067,c),e.texImage2D(34069,0,6408,3,3,0,6408,5121,l),B.freeType(l),e.bindTexture(34067,null),e.deleteTexture(c),s=!e.getError()}return{colorBits:[e.getParameter(3410),e.getParameter(3411),e.getParameter(3412),e.getParameter(3413)],depthBits:e.getParameter(3414),stencilBits:e.getParameter(3415),subpixelBits:e.getParameter(3408),extensions:Object.keys(t).filter((function(e){return!!t[e]})),maxAnisotropic:r,maxDrawbuffers:n,maxColorAttachments:a,pointSizeDims:e.getParameter(33901),lineWidthDims:e.getParameter(33902),maxViewportDims:e.getParameter(3386),maxCombinedTextureUnits:e.getParameter(35661),maxCubeMapSize:e.getParameter(34076),maxRenderbufferSize:e.getParameter(34024),maxTextureUnits:e.getParameter(34930),maxTextureSize:e.getParameter(3379),maxAttributes:e.getParameter(34921),maxVertexUniforms:e.getParameter(36347),maxVertexTextureUnits:e.getParameter(35660),maxVaryingVectors:e.getParameter(36348),maxFragmentUniforms:e.getParameter(36349),glsl:e.getParameter(35724),renderer:e.getParameter(7937),vendor:e.getParameter(7936),version:e.getParameter(7938),readFloat:i,npotTextureCube:s}}(a,d),y=function(e,t,r,n){for(var a=r.maxAttributes,i=new Array(a),o=0;o<a;++o)i[o]=new De;return{Record:De,scope:{},state:i}}(0,0,g),w=function(t,r,n,a){var i=0,o={};function f(e){this.id=i++,this.buffer=t.createBuffer(),this.type=e,this.usage=35044,this.byteLength=0,this.dimension=1,this.dtype=5121,this.persistentData=null,n.profile&&(this.stats={size:0})}f.prototype.bind=function(){t.bindBuffer(this.type,this.buffer)},f.prototype.destroy=function(){l(this)};var u=[];function s(e,r,n){e.byteLength=r.byteLength,t.bufferData(e.type,r,n)}function c(t,r,n,a,i,o){var f,u;if(t.usage=n,Array.isArray(r)){if(t.dtype=a||5126,r.length>0)if(Array.isArray(r[0])){f=q(r);for(var c=1,l=1;l<f.length;++l)c*=f[l];t.dimension=c,s(t,u=H(r,f,t.dtype),n),o?t.persistentData=u:B.freeType(u)}else if("number"==typeof r[0]){t.dimension=i;var d=B.allocType(t.dtype,r.length);Q(d,r),s(t,d,n),o?t.persistentData=d:B.freeType(d)}else e(r[0])?(t.dimension=r[0].length,t.dtype=a||G(r[0])||5126,s(t,u=H(r,[r.length,r[0].length],t.dtype),n),o?t.persistentData=u:B.freeType(u)):x.raise("invalid buffer data")}else if(e(r))t.dtype=a||G(r),t.dimension=i,s(t,r,n),o&&(t.persistentData=new Uint8Array(new Uint8Array(r.buffer)));else if(P(r)){f=r.shape;var p=r.stride,m=r.offset,h=0,b=0,v=0,g=0;1===f.length?(h=f[0],b=1,v=p[0],g=0):2===f.length?(h=f[0],b=f[1],v=p[0],g=p[1]):x.raise("invalid shape"),t.dtype=a||G(r.data)||5126,t.dimension=b;var y=B.allocType(t.dtype,h*b);V(y,r.data,h,b,v,g,m),s(t,y,n),o?t.persistentData=y:B.freeType(y)}else r instanceof ArrayBuffer?(t.dtype=5121,t.dimension=i,s(t,r,n),o&&(t.persistentData=new Uint8Array(new Uint8Array(r)))):x.raise("invalid buffer data")}function l(e){r.bufferCount--;for(var n=0;n<a.state.length;++n){var i=a.state[n];i.buffer===e&&(t.disableVertexAttribArray(n),i.buffer=null)}var f=e.buffer;x(f,"buffer must not be deleted already"),t.deleteBuffer(f),e.buffer=null,delete o[e.id]}return n.profile&&(r.getTotalBufferSize=function(){var e=0;return Object.keys(o).forEach((function(t){e+=o[t].stats.size})),e}),{create:function(a,i,u,s){r.bufferCount++;var d=new f(i);function p(r){var a=35044,i=null,o=0,f=0,u=1;return Array.isArray(r)||e(r)||P(r)||r instanceof ArrayBuffer?i=r:"number"==typeof r?o=0|r:r&&(x.type(r,"object","buffer arguments must be an object, a number or an array"),"data"in r&&(x(null===i||Array.isArray(i)||e(i)||P(i),"invalid data for buffer"),i=r.data),"usage"in r&&(x.parameter(r.usage,U,"invalid buffer usage"),a=U[r.usage]),"type"in r&&(x.parameter(r.type,W,"invalid buffer type"),f=W[r.type]),"dimension"in r&&(x.type(r.dimension,"number","invalid dimension"),u=0|r.dimension),"length"in r&&(x.nni(o,"buffer length must be a nonnegative integer"),o=0|r.length)),d.bind(),i?c(d,i,a,f,u,s):(o&&t.bufferData(d.type,o,a),d.dtype=f||5121,d.usage=a,d.dimension=u,d.byteLength=o),n.profile&&(d.stats.size=d.byteLength*N[d.dtype]),p}function m(e,r){x(r+e.byteLength<=d.byteLength,"invalid buffer subdata call, buffer is too small.  Can't write data of size "+e.byteLength+" starting from offset "+r+" to a buffer of size "+d.byteLength),t.bufferSubData(d.type,r,e)}return o[d.id]=d,u||p(a),p._reglType="buffer",p._buffer=d,p.subdata=function(t,r){var n,a=0|(r||0);if(d.bind(),e(t)||t instanceof ArrayBuffer)m(t,a);else if(Array.isArray(t)){if(t.length>0)if("number"==typeof t[0]){var i=B.allocType(d.dtype,t.length);Q(i,t),m(i,a),B.freeType(i)}else if(Array.isArray(t[0])||e(t[0])){n=q(t);var o=H(t,n,d.dtype);m(o,a),B.freeType(o)}else x.raise("invalid buffer data")}else if(P(t)){n=t.shape;var f=t.stride,u=0,s=0,c=0,l=0;1===n.length?(u=n[0],s=1,c=f[0],l=0):2===n.length?(u=n[0],s=n[1],c=f[0],l=f[1]):x.raise("invalid shape");var h=Array.isArray(t.data)?d.dtype:G(t.data),b=B.allocType(h,u*s);V(b,t.data,u,s,c,l,t.offset),m(b,a),B.freeType(b)}else x.raise("invalid data for buffer subdata");return p},n.profile&&(p.stats=d.stats),p.destroy=function(){l(d)},p},createStream:function(e,t){var r=u.pop();return r||(r=new f(e)),r.bind(),c(r,t,35040,0,1,!1),r},destroyStream:function(e){u.push(e)},clear:function(){M(o).forEach(l),u.forEach(l)},getBuffer:function(e){return e&&e._buffer instanceof f?e._buffer:null},restore:function(){M(o).forEach((function(e){e.buffer=t.createBuffer(),t.bindBuffer(e.type,e.buffer),t.bufferData(e.type,e.persistentData||e.byteLength,e.usage)}))},_initBuffer:c}}(a,l,n,y),_=function(t,r,n,a){var i={},o=0,f={uint8:5121,uint16:5123};function u(e){this.id=o++,i[this.id]=this,this.buffer=e,this.primType=4,this.vertCount=0,this.type=0}r.oes_element_index_uint&&(f.uint32=5125),u.prototype.bind=function(){this.buffer.bind()};var s=[];function c(a,i,o,f,u,s,c){if(a.buffer.bind(),i){var l=c;c||e(i)&&(!P(i)||e(i.data))||(l=r.oes_element_index_uint?5125:5123),n._initBuffer(a.buffer,i,o,l,3)}else t.bufferData(34963,s,o),a.buffer.dtype=d||5121,a.buffer.usage=o,a.buffer.dimension=3,a.buffer.byteLength=s;var d=c;if(!c){switch(a.buffer.dtype){case 5121:case 5120:d=5121;break;case 5123:case 5122:d=5123;break;case 5125:case 5124:d=5125;break;default:x.raise("unsupported type for element array")}a.buffer.dtype=d}a.type=d,x(5125!==d||!!r.oes_element_index_uint,"32 bit element buffers not supported, enable oes_element_index_uint first");var p=u;p<0&&(p=a.buffer.byteLength,5123===d?p>>=1:5125===d&&(p>>=2)),a.vertCount=p;var m=f;if(f<0){m=4;var h=a.buffer.dimension;1===h&&(m=0),2===h&&(m=1),3===h&&(m=4)}a.primType=m}function l(e){a.elementsCount--,x(null!==e.buffer,"must not double destroy elements"),delete i[e.id],e.buffer.destroy(),e.buffer=null}return{create:function(t,r){var i=n.create(null,34963,!0),o=new u(i._buffer);function s(t){if(t)if("number"==typeof t)i(t),o.primType=4,o.vertCount=0|t,o.type=5121;else{var r=null,n=35044,a=-1,u=-1,l=0,d=0;Array.isArray(t)||e(t)||P(t)?r=t:(x.type(t,"object","invalid arguments for elements"),"data"in t&&(r=t.data,x(Array.isArray(r)||e(r)||P(r),"invalid data for element buffer")),"usage"in t&&(x.parameter(t.usage,U,"invalid element buffer usage"),n=U[t.usage]),"primitive"in t&&(x.parameter(t.primitive,Y,"invalid element buffer primitive"),a=Y[t.primitive]),"count"in t&&(x("number"==typeof t.count&&t.count>=0,"invalid vertex count for elements"),u=0|t.count),"type"in t&&(x.parameter(t.type,f,"invalid buffer type"),d=f[t.type]),"length"in t?l=0|t.length:(l=u,5123===d||5122===d?l*=2:5125!==d&&5124!==d||(l*=4))),c(o,r,n,a,u,l,d)}else i(),o.primType=4,o.vertCount=0,o.type=5121;return s}return a.elementsCount++,s(t),s._reglType="elements",s._elements=o,s.subdata=function(e,t){return i.subdata(e,t),s},s.destroy=function(){l(o)},s},createStream:function(e){var t=s.pop();return t||(t=new u(n.create(null,34963,!0,!1)._buffer)),c(t,e,35040,-1,-1,0,0),t},destroyStream:function(e){s.push(e)},getElements:function(e){return"function"==typeof e&&e._elements instanceof u?e._elements:null},clear:function(){M(i).forEach(l)}}}(a,d,w,l),k=function(e,t,r,n){var a={},i={};function o(e,t,r,n){this.name=e,this.id=t,this.location=r,this.info=n}function f(e,t){for(var r=0;r<e.length;++r)if(e[r].id===t.id)return void(e[r].location=t.location);e.push(t)}function u(r,n,o){var f=35632===r?a:i,u=f[n];if(!u){var s=t.str(n);u=e.createShader(r),e.shaderSource(u,s),e.compileShader(u),x.shaderError(e,u,s,r,o),f[n]=u}return u}var s={},c=[],l=0;function d(e,t){this.id=l++,this.fragId=e,this.vertId=t,this.program=null,this.uniforms=[],this.attributes=[],n.profile&&(this.stats={uniformsCount:0,attributesCount:0})}function p(r,a){var i,s,c=u(35632,r.fragId),l=u(35633,r.vertId),d=r.program=e.createProgram();e.attachShader(d,c),e.attachShader(d,l),e.linkProgram(d),x.linkError(e,d,t.str(r.fragId),t.str(r.vertId),a);var p=e.getProgramParameter(d,35718);n.profile&&(r.stats.uniformsCount=p);var m=r.uniforms;for(i=0;i<p;++i)if(s=e.getActiveUniform(d,i))if(s.size>1)for(var h=0;h<s.size;++h){var b=s.name.replace("[0]","["+h+"]");f(m,new o(b,t.id(b),e.getUniformLocation(d,b),s))}else f(m,new o(s.name,t.id(s.name),e.getUniformLocation(d,s.name),s));var v=e.getProgramParameter(d,35721);n.profile&&(r.stats.attributesCount=v);var g=r.attributes;for(i=0;i<v;++i)(s=e.getActiveAttrib(d,i))&&f(g,new o(s.name,t.id(s.name),e.getAttribLocation(d,s.name),s))}return n.profile&&(r.getMaxUniformsCount=function(){var e=0;return c.forEach((function(t){t.stats.uniformsCount>e&&(e=t.stats.uniformsCount)})),e},r.getMaxAttributesCount=function(){var e=0;return c.forEach((function(t){t.stats.attributesCount>e&&(e=t.stats.attributesCount)})),e}),{clear:function(){var t=e.deleteShader.bind(e);M(a).forEach(t),a={},M(i).forEach(t),i={},c.forEach((function(t){e.deleteProgram(t.program)})),c.length=0,s={},r.shaderCount=0},program:function(e,t,n){x.command(e>=0,"missing vertex shader",n),x.command(t>=0,"missing fragment shader",n);var a=s[t];a||(a=s[t]={});var i=a[e];return i||(i=new d(t,e),r.shaderCount++,p(i,n),a[e]=i,c.push(i)),i},restore:function(){a={},i={};for(var e=0;e<c.length;++e)p(c[e])},shader:u,frag:-1,vert:-1}}(a,c,l,n),A=we(a,d,g,(function(){C.procs.poll()}),v,l,n),T=function(e,t,r,n,a){var i={rgba4:32854,rgb565:36194,"rgb5 a1":32855,depth:33189,stencil:36168,"depth stencil":34041};t.ext_srgb&&(i.srgba=35907),t.ext_color_buffer_half_float&&(i.rgba16f=34842,i.rgb16f=34843),t.webgl_color_buffer_float&&(i.rgba32f=34836);var o=[];Object.keys(i).forEach((function(e){var t=i[e];o[t]=e}));var f=0,u={};function s(e){this.id=f++,this.refCount=1,this.renderbuffer=e,this.format=32854,this.width=0,this.height=0,a.profile&&(this.stats={size:0})}function c(t){var r=t.renderbuffer;x(r,"must not double destroy renderbuffer"),e.bindRenderbuffer(36161,null),e.deleteRenderbuffer(r),t.renderbuffer=null,t.refCount=0,delete u[t.id],n.renderbufferCount--}return s.prototype.decRef=function(){--this.refCount<=0&&c(this)},a.profile&&(n.getTotalRenderbufferSize=function(){var e=0;return Object.keys(u).forEach((function(t){e+=u[t].stats.size})),e}),{create:function(t,f){var c=new s(e.createRenderbuffer());function l(t,n){var f=0,u=0,s=32854;if("object"==typeof t&&t){var d=t;if("shape"in d){var p=d.shape;x(Array.isArray(p)&&p.length>=2,"invalid renderbuffer shape"),f=0|p[0],u=0|p[1]}else"radius"in d&&(f=u=0|d.radius),"width"in d&&(f=0|d.width),"height"in d&&(u=0|d.height);"format"in d&&(x.parameter(d.format,i,"invalid renderbuffer format"),s=i[d.format])}else"number"==typeof t?(f=0|t,u="number"==typeof n?0|n:f):t?x.raise("invalid arguments to renderbuffer constructor"):f=u=1;if(x(f>0&&u>0&&f<=r.maxRenderbufferSize&&u<=r.maxRenderbufferSize,"invalid renderbuffer size"),f!==c.width||u!==c.height||s!==c.format)return l.width=c.width=f,l.height=c.height=u,c.format=s,e.bindRenderbuffer(36161,c.renderbuffer),e.renderbufferStorage(36161,s,f,u),x(0===e.getError(),"invalid render buffer format"),a.profile&&(c.stats.size=ke(c.format,c.width,c.height)),l.format=o[c.format],l}return u[c.id]=c,n.renderbufferCount++,l(t,f),l.resize=function(t,n){var i=0|t,o=0|n||i;return i===c.width&&o===c.height||(x(i>0&&o>0&&i<=r.maxRenderbufferSize&&o<=r.maxRenderbufferSize,"invalid renderbuffer size"),l.width=c.width=i,l.height=c.height=o,e.bindRenderbuffer(36161,c.renderbuffer),e.renderbufferStorage(36161,c.format,i,o),x(0===e.getError(),"invalid render buffer format"),a.profile&&(c.stats.size=ke(c.format,c.width,c.height))),l},l._reglType="renderbuffer",l._renderbuffer=c,a.profile&&(l.stats=c.stats),l.destroy=function(){c.decRef()},l},clear:function(){M(u).forEach(c)},restore:function(){M(u).forEach((function(t){t.renderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(36161,t.renderbuffer),e.renderbufferStorage(36161,t.format,t.width,t.height)})),e.bindRenderbuffer(36161,null)}}}(a,d,g,l,n),D=function(e,r,n,a,i,o){var f={cur:null,next:null,dirty:!1,setFBO:null},u=["rgba"],s=["rgba4","rgb565","rgb5 a1"];r.ext_srgb&&s.push("srgba"),r.ext_color_buffer_half_float&&s.push("rgba16f","rgb16f"),r.webgl_color_buffer_float&&s.push("rgba32f");var c=["uint8"];function l(e,t,r){this.target=e,this.texture=t,this.renderbuffer=r;var n=0,a=0;t?(n=t.width,a=t.height):r&&(n=r.width,a=r.height),this.width=n,this.height=a}function d(e){e&&(e.texture&&e.texture._texture.decRef(),e.renderbuffer&&e.renderbuffer._renderbuffer.decRef())}function p(e,t,r){if(e)if(e.texture){var n=e.texture._texture,a=Math.max(1,n.width),i=Math.max(1,n.height);x(a===t&&i===r,"inconsistent width/height for supplied texture"),n.refCount+=1}else{var o=e.renderbuffer._renderbuffer;x(o.width===t&&o.height===r,"inconsistent width/height for renderbuffer"),o.refCount+=1}}function m(t,r){r&&(r.texture?e.framebufferTexture2D(36160,t,r.target,r.texture._texture.texture,0):e.framebufferRenderbuffer(36160,t,36161,r.renderbuffer._renderbuffer.renderbuffer))}function h(e){var t=3553,r=null,n=null,a=e;"object"==typeof e&&(a=e.data,"target"in e&&(t=0|e.target)),x.type(a,"function","invalid attachment data");var i=a._reglType;return"texture2d"===i?(r=a,x(3553===t)):"textureCube"===i?(r=a,x(t>=34069&&t<34075,"invalid cube map target")):"renderbuffer"===i?(n=a,t=36161):x.raise("invalid regl object for attachment"),new l(t,r,n)}function b(e,t,r,n,o){if(r){var f=a.create2D({width:e,height:t,format:n,type:o});return f._texture.refCount=0,new l(3553,f,null)}var u=i.create({width:e,height:t,format:n});return u._renderbuffer.refCount=0,new l(36161,null,u)}function v(e){return e&&(e.texture||e.renderbuffer)}function g(e,t,r){e&&(e.texture?e.texture.resize(t,r):e.renderbuffer&&e.renderbuffer.resize(t,r),e.width=t,e.height=r)}r.oes_texture_half_float&&c.push("half float","float16"),r.oes_texture_float&&c.push("float","float32");var y=0,w={};function _(){this.id=y++,w[this.id]=this,this.framebuffer=e.createFramebuffer(),this.width=0,this.height=0,this.colorAttachments=[],this.depthAttachment=null,this.stencilAttachment=null,this.depthStencilAttachment=null}function k(e){e.colorAttachments.forEach(d),d(e.depthAttachment),d(e.stencilAttachment),d(e.depthStencilAttachment)}function A(t){var r=t.framebuffer;x(r,"must not double destroy framebuffer"),e.deleteFramebuffer(r),t.framebuffer=null,o.framebufferCount--,delete w[t.id]}function S(t){var r;e.bindFramebuffer(36160,t.framebuffer);var a=t.colorAttachments;for(r=0;r<a.length;++r)m(36064+r,a[r]);for(r=a.length;r<n.maxColorAttachments;++r)e.framebufferTexture2D(36160,36064+r,3553,null,0);e.framebufferTexture2D(36160,33306,3553,null,0),e.framebufferTexture2D(36160,36096,3553,null,0),e.framebufferTexture2D(36160,36128,3553,null,0),m(36096,t.depthAttachment),m(36128,t.stencilAttachment),m(33306,t.depthStencilAttachment);var i=e.checkFramebufferStatus(36160);e.isContextLost()||36053===i||x.raise("framebuffer configuration not supported, status = "+Te[i]),e.bindFramebuffer(36160,f.next?f.next.framebuffer:null),f.cur=f.next,e.getError()}function j(e,a){var i=new _;function l(e,t){var a;x(f.next!==i,"can not update framebuffer which is currently in use");var o=0,d=0,m=!0,g=!0,y=null,w=!0,_="rgba",A="uint8",j=1,E=null,T=null,D=null,O=!1;if("number"==typeof e)o=0|e,d=0|t||o;else if(e){x.type(e,"object","invalid arguments for framebuffer");var C=e;if("shape"in C){var F=C.shape;x(Array.isArray(F)&&F.length>=2,"invalid shape for framebuffer"),o=F[0],d=F[1]}else"radius"in C&&(o=d=C.radius),"width"in C&&(o=C.width),"height"in C&&(d=C.height);("color"in C||"colors"in C)&&(y=C.color||C.colors,Array.isArray(y)&&x(1===y.length||r.webgl_draw_buffers,"multiple render targets not supported")),y||("colorCount"in C&&(j=0|C.colorCount,x(j>0,"invalid color buffer count")),"colorTexture"in C&&(w=!!C.colorTexture,_="rgba4"),"colorType"in C&&(A=C.colorType,w?(x(r.oes_texture_float||!("float"===A||"float32"===A),"you must enable OES_texture_float in order to use floating point framebuffer objects"),x(r.oes_texture_half_float||!("half float"===A||"float16"===A),"you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects")):"half float"===A||"float16"===A?(x(r.ext_color_buffer_half_float,"you must enable EXT_color_buffer_half_float to use 16-bit render buffers"),_="rgba16f"):"float"!==A&&"float32"!==A||(x(r.webgl_color_buffer_float,"you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers"),_="rgba32f"),x.oneOf(A,c,"invalid color type")),"colorFormat"in C&&(_=C.colorFormat,u.indexOf(_)>=0?w=!0:s.indexOf(_)>=0?w=!1:w?x.oneOf(C.colorFormat,u,"invalid color format for texture"):x.oneOf(C.colorFormat,s,"invalid color format for renderbuffer"))),("depthTexture"in C||"depthStencilTexture"in C)&&(O=!(!C.depthTexture&&!C.depthStencilTexture),x(!O||r.webgl_depth_texture,"webgl_depth_texture extension not supported")),"depth"in C&&("boolean"==typeof C.depth?m=C.depth:(E=C.depth,g=!1)),"stencil"in C&&("boolean"==typeof C.stencil?g=C.stencil:(T=C.stencil,m=!1)),"depthStencil"in C&&("boolean"==typeof C.depthStencil?m=g=C.depthStencil:(D=C.depthStencil,m=!1,g=!1))}else o=d=1;var z=null,B=null,P=null,M=null;if(Array.isArray(y))z=y.map(h);else if(y)z=[h(y)];else for(z=new Array(j),a=0;a<j;++a)z[a]=b(o,d,w,_,A);x(r.webgl_draw_buffers||z.length<=1,"you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers."),x(z.length<=n.maxColorAttachments,"too many color attachments, not supported"),o=o||z[0].width,d=d||z[0].height,E?B=h(E):m&&!g&&(B=b(o,d,O,"depth","uint32")),T?P=h(T):g&&!m&&(P=b(o,d,!1,"stencil","uint8")),D?M=h(D):!E&&!T&&g&&m&&(M=b(o,d,O,"depth stencil","depth stencil")),x(!!E+!!T+!!D<=1,"invalid framebuffer configuration, can specify exactly one depth/stencil attachment");var I=null;for(a=0;a<z.length;++a)if(p(z[a],o,d),x(!z[a]||z[a].texture&&Ae.indexOf(z[a].texture._texture.format)>=0||z[a].renderbuffer&&Ee.indexOf(z[a].renderbuffer._renderbuffer.format)>=0,"framebuffer color attachment "+a+" is invalid"),z[a]&&z[a].texture){var R=Se[z[a].texture._texture.format]*je[z[a].texture._texture.type];null===I?I=R:x(I===R,"all color attachments much have the same number of bits per pixel.")}return p(B,o,d),x(!B||B.texture&&6402===B.texture._texture.format||B.renderbuffer&&33189===B.renderbuffer._renderbuffer.format,"invalid depth attachment for framebuffer object"),p(P,o,d),x(!P||P.renderbuffer&&36168===P.renderbuffer._renderbuffer.format,"invalid stencil attachment for framebuffer object"),p(M,o,d),x(!M||M.texture&&34041===M.texture._texture.format||M.renderbuffer&&34041===M.renderbuffer._renderbuffer.format,"invalid depth-stencil attachment for framebuffer object"),k(i),i.width=o,i.height=d,i.colorAttachments=z,i.depthAttachment=B,i.stencilAttachment=P,i.depthStencilAttachment=M,l.color=z.map(v),l.depth=v(B),l.stencil=v(P),l.depthStencil=v(M),l.width=i.width,l.height=i.height,S(i),l}return o.framebufferCount++,l(e,a),t(l,{resize:function(e,t){x(f.next!==i,"can not resize a framebuffer which is currently in use");var r=Math.max(0|e,1),n=Math.max(0|t||r,1);if(r===i.width&&n===i.height)return l;for(var a=i.colorAttachments,o=0;o<a.length;++o)g(a[o],r,n);return g(i.depthAttachment,r,n),g(i.stencilAttachment,r,n),g(i.depthStencilAttachment,r,n),i.width=l.width=r,i.height=l.height=n,S(i),l},_reglType:"framebuffer",_framebuffer:i,destroy:function(){A(i),k(i)},use:function(e){f.setFBO({framebuffer:l},e)}})}return t(f,{getFramebuffer:function(e){if("function"==typeof e&&"framebuffer"===e._reglType){var t=e._framebuffer;if(t instanceof _)return t}return null},create:j,createCube:function(e){var i=Array(6);function o(e){var n;x(i.indexOf(f.next)<0,"can not update framebuffer which is currently in use");var s,l={color:null},d=0,p=null,m="rgba",h="uint8",b=1;if("number"==typeof e)d=0|e;else if(e){x.type(e,"object","invalid arguments for framebuffer");var v=e;if("shape"in v){var g=v.shape;x(Array.isArray(g)&&g.length>=2,"invalid shape for framebuffer"),x(g[0]===g[1],"cube framebuffer must be square"),d=g[0]}else"radius"in v&&(d=0|v.radius),"width"in v?(d=0|v.width,"height"in v&&x(v.height===d,"must be square")):"height"in v&&(d=0|v.height);("color"in v||"colors"in v)&&(p=v.color||v.colors,Array.isArray(p)&&x(1===p.length||r.webgl_draw_buffers,"multiple render targets not supported")),p||("colorCount"in v&&(b=0|v.colorCount,x(b>0,"invalid color buffer count")),"colorType"in v&&(x.oneOf(v.colorType,c,"invalid color type"),h=v.colorType),"colorFormat"in v&&(m=v.colorFormat,x.oneOf(v.colorFormat,u,"invalid color format for texture"))),"depth"in v&&(l.depth=v.depth),"stencil"in v&&(l.stencil=v.stencil),"depthStencil"in v&&(l.depthStencil=v.depthStencil)}else d=1;if(p)if(Array.isArray(p))for(s=[],n=0;n<p.length;++n)s[n]=p[n];else s=[p];else{s=Array(b);var y={radius:d,format:m,type:h};for(n=0;n<b;++n)s[n]=a.createCube(y)}for(l.color=Array(s.length),n=0;n<s.length;++n){var w=s[n];x("function"==typeof w&&"textureCube"===w._reglType,"invalid cube map"),d=d||w.width,x(w.width===d&&w.height===d,"invalid cube map shape"),l.color[n]={target:34069,data:s[n]}}for(n=0;n<6;++n){for(var _=0;_<s.length;++_)l.color[_].target=34069+n;n>0&&(l.depth=i[0].depth,l.stencil=i[0].stencil,l.depthStencil=i[0].depthStencil),i[n]?i[n](l):i[n]=j(l)}return t(o,{width:d,height:d,color:s})}return o(e),t(o,{faces:i,resize:function(e){var t,r=0|e;if(x(r>0&&r<=n.maxCubeMapSize,"invalid radius for cube fbo"),r===o.width)return o;var a=o.color;for(t=0;t<a.length;++t)a[t].resize(r);for(t=0;t<6;++t)i[t].resize(r);return o.width=o.height=r,o},_reglType:"framebufferCube",destroy:function(){i.forEach((function(e){e.destroy()}))}})},clear:function(){M(w).forEach(A)},restore:function(){f.cur=null,f.next=null,f.dirty=!0,M(w).forEach((function(t){t.framebuffer=e.createFramebuffer(),S(t)}))}})}(a,d,g,A,T,l),C=it(a,c,d,g,w,_,0,D,{},y,k,{elements:null,primitive:4,count:-1,offset:0,instances:-1},v,p,n),F=Oe(a,D,C.procs.poll,v,i,d,g),z=C.next,I=a.canvas,R=[],L=[],X=[],$=[n.onDestroy],J=null;function K(){if(0===R.length)return p&&p.update(),void(J=null);J=j.next(K),ue();for(var e=R.length-1;e>=0;--e){var t=R[e];t&&t(v,null,0)}a.flush(),p&&p.update()}function Z(){!J&&R.length>0&&(J=j.next(K))}function ee(){J&&(j.cancel(K),J=null)}function te(e){e.preventDefault(),o=!0,ee(),L.forEach((function(e){e()}))}function re(e){a.getError(),o=!1,f.restore(),k.restore(),w.restore(),A.restore(),T.restore(),D.restore(),p&&p.restore(),C.procs.refresh(),Z(),X.forEach((function(e){e()}))}function ne(e){function r(e){var t={},r={};return Object.keys(e).forEach((function(n){var a=e[n];S.isDynamic(a)?r[n]=S.unbox(a,n):t[n]=a})),{dynamic:r,static:t}}x(!!e,"invalid args to regl({...})"),x.type(e,"object","invalid args to regl({...})");var n=r(e.context||{}),a=r(e.uniforms||{}),i=r(e.attributes||{}),f=r(function(e){var r=t({},e);function n(e){if(e in r){var t=r[e];delete r[e],Object.keys(t).forEach((function(n){r[e+"."+n]=t[n]}))}}return delete r.uniforms,delete r.attributes,delete r.context,"stencil"in r&&r.stencil.op&&(r.stencil.opBack=r.stencil.opFront=r.stencil.op,delete r.stencil.op),n("blend"),n("depth"),n("cull"),n("stencil"),n("polygonOffset"),n("scissor"),n("sample"),r}(e)),u={gpuTime:0,cpuTime:0,count:0},s=C.compile(f,i,a,n,u),c=s.draw,l=s.batch,d=s.scope,p=[];return t((function(e,t){var r;if(o&&x.raise("context lost"),"function"==typeof e)return d.call(this,null,e,0);if("function"==typeof t){if("number"==typeof e){for(r=0;r<e;++r)d.call(this,null,t,r);return}if(Array.isArray(e)){for(r=0;r<e.length;++r)d.call(this,e[r],t,r);return}return d.call(this,e,t,0)}if("number"==typeof e){if(e>0)return l.call(this,function(e){for(;p.length<e;)p.push(null);return p}(0|e),0|e)}else{if(!Array.isArray(e))return c.call(this,e);if(e.length)return l.call(this,e,e.length)}}),{stats:u})}I&&(I.addEventListener("webglcontextlost",te,!1),I.addEventListener("webglcontextrestored",re,!1));var ae=D.setFBO=ne({framebuffer:S.define.call(null,1,"framebuffer")});function ie(e,t){var r=0;C.procs.poll();var n=t.color;n&&(a.clearColor(+n[0]||0,+n[1]||0,+n[2]||0,+n[3]||0),r|=16384),"depth"in t&&(a.clearDepth(+t.depth),r|=256),"stencil"in t&&(a.clearStencil(0|t.stencil),r|=1024),x(!!r,"called regl.clear with no buffer specified"),a.clear(r)}function oe(e){return x.type(e,"function","regl.frame() callback must be a function"),R.push(e),Z(),{cancel:function(){var t=ft(R,e);x(t>=0,"cannot cancel a frame twice"),R[t]=function e(){var t=ft(R,e);R[t]=R[R.length-1],R.length-=1,R.length<=0&&ee()}}}}function fe(){var e=z.viewport,t=z.scissor_box;e[0]=e[1]=t[0]=t[1]=0,v.viewportWidth=v.framebufferWidth=v.drawingBufferWidth=e[2]=t[2]=a.drawingBufferWidth,v.viewportHeight=v.framebufferHeight=v.drawingBufferHeight=e[3]=t[3]=a.drawingBufferHeight}function ue(){v.tick+=1,v.time=ce(),fe(),C.procs.poll()}function se(){fe(),C.procs.refresh(),p&&p.update()}function ce(){return(E()-m)/1e3}se();var le=t(ne,{clear:function(e){if(x("object"==typeof e&&e,"regl.clear() takes an object as input"),"framebuffer"in e)if(e.framebuffer&&"framebufferCube"===e.framebuffer_reglType)for(var r=0;r<6;++r)ae(t({framebuffer:e.framebuffer.faces[r]},e),ie);else ae(e,ie);else ie(0,e)},prop:S.define.bind(null,1),context:S.define.bind(null,2),this:S.define.bind(null,3),draw:ne({}),buffer:function(e){return w.create(e,34962,!1,!1)},elements:function(e){return _.create(e,!1)},texture:A.create2D,cube:A.createCube,renderbuffer:T.create,framebuffer:D.create,framebufferCube:D.createCube,attributes:i,frame:oe,on:function(e,t){var r;switch(x.type(t,"function","listener callback must be a function"),e){case"frame":return oe(t);case"lost":r=L;break;case"restore":r=X;break;case"destroy":r=$;break;default:x.raise("invalid event, must be one of frame,lost,restore,destroy")}return r.push(t),{cancel:function(){for(var e=0;e<r.length;++e)if(r[e]===t)return r[e]=r[r.length-1],void r.pop()}}},limits:g,hasExtension:function(e){return g.extensions.indexOf(e.toLowerCase())>=0},read:F,destroy:function(){R.length=0,ee(),I&&(I.removeEventListener("webglcontextlost",te),I.removeEventListener("webglcontextrestored",re)),k.clear(),D.clear(),T.clear(),A.clear(),_.clear(),w.clear(),p&&p.clear(),$.forEach((function(e){e()}))},_gl:a,_refresh:se,poll:function(){ue(),p&&p.update()},now:ce,stats:l});return n.onDone(null,le),le}}()},function(e,t,r){var n=r(3),a=r(4);"string"==typeof(a=a.__esModule?a.default:a)&&(a=[[e.i,a,""]]);var i={insert:"head",singleton:!1},o=(n(a,i),a.locals?a.locals:{});e.exports=o},function(e,t,r){"use strict";var n,a=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},i=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}(),o=[];function f(e){for(var t=-1,r=0;r<o.length;r++)if(o[r].identifier===e){t=r;break}return t}function u(e,t){for(var r={},n=[],a=0;a<e.length;a++){var i=e[a],u=t.base?i[0]+t.base:i[0],s=r[u]||0,c="".concat(u," ").concat(s);r[u]=s+1;var l=f(c),d={css:i[1],media:i[2],sourceMap:i[3]};-1!==l?(o[l].references++,o[l].updater(d)):o.push({identifier:c,updater:b(d,t),references:1}),n.push(c)}return n}function s(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var a=r.nc;a&&(n.nonce=a)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var o=i(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}return t}var c,l=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function d(e,t,r,n){var a=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=l(t,a);else{var i=document.createTextNode(a),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(i,o[t]):e.appendChild(i)}}function p(e,t,r){var n=r.css,a=r.media,i=r.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),i&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var m=null,h=0;function b(e,t){var r,n,a;if(t.singleton){var i=h++;r=m||(m=s(t)),n=d.bind(null,r,i,!1),a=d.bind(null,r,i,!0)}else r=s(t),n=p.bind(null,r,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=a());var r=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<r.length;n++){var a=f(r[n]);o[a].references--}for(var i=u(e,t),s=0;s<r.length;s++){var c=f(r[s]);0===o[c].references&&(o[c].updater(),o.splice(c,1))}r=i}}}},function(e,t,r){(t=r(5)(!1)).push([e.i,"html,body{font-family:redaction;-webkit-font-smoothing:antialiased;padding:0px;margin:0px}body{background:linear-gradient(to right, red, purple, blue)}#inner_body{background-color:white;margin:8px;padding-left:10px;padding-right:10px}p{font-size:1.3em}p.small{font-size:1.0em}.shadow{box-shadow:0 4px 4px 0 rgba(0,0,0,0.1)}h1,h2,h3,h4{text-align:center}#header-container{color:white}#header-container h1{letter-spacing:.08em;font-size:6em;margin:0px}#header-container a{color:white}#header-container .main-heading img{max-width:900px}.tag{float:left;margin:0px;margin-right:1em;margin-left:1em}.center{text-align:center}.col3{width:33%;float:left}.outer-text-container{width:100%;text-align:center}.outer-text-container .inner-text-container{max-width:900px;display:inline-block}.outer-text-container .inner-text-container p{text-align:justify;padding-left:10px;padding-right:10px}.outer-text-container .inner-text-container img{text-align:center;width:100%;max-width:700px}.viewer_row{width:100%;min-height:100vh;display:inline-block}.viewer_row .district-viewer,.viewer_row .district-text{display:inline-block;margin-left:20px;margin-right:20px}.viewer_row .district-viewer{text-align:center;position:relative;width:calc(60% - 40px);background-color:white}.viewer_row .district-viewer .parcoords{text-align:initial;width:100%;height:200px}.viewer_row .district-viewer canvas{width:100%;cursor:pointer}.viewer_row .district-viewer img.legend{width:100%;max-width:500px}.viewer_row .district-text{width:calc(40% - 40px);vertical-align:top;float:right}.viewer_row .district-text .block{margin-top:20vh;text-align:center}.viewer_row .district-text .block p{text-align:left}\n",""]),e.exports=t},function(e,t,r){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=function(e,t){var r=e[1]||"",n=e[3];if(!n)return r;if(t&&"function"==typeof btoa){var a=(o=n,f=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(f),"/*# ".concat(u," */")),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[r].concat(i).concat([a]).join("\n")}var o,f,u;return[r].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(n)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var f=0;f<e.length;f++){var u=[].concat(e[f]);n&&a[u[0]]||(r&&(u[2]?u[2]="".concat(r," and ").concat(u[2]):u[2]=r),t.push(u))}},t}},function(e,t,r){"use strict";e.exports=function(e){for(var t=new Array(e),r=0;r<e;++r)t[r]=r;return t}},function(e,t){function r(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(r(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&r(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,r){"use strict";r.r(t);r(2);function n(e){var t=new Promise((function(t,r){function n(){e.naturalWidth?t(e):r(e),e.removeEventListener("load",n),e.removeEventListener("error",n)}e.naturalWidth?t(e):e.complete?r(e):(e.addEventListener("load",n),e.addEventListener("error",n))}));return Object.assign(t,{image:e})}var a=function e(t,r){if(void 0===r&&(r={}),t instanceof HTMLImageElement)return n(t);if("string"==typeof t){var a=t,i=new Image;return Object.keys(r).forEach((function(e){return i.setAttribute(e,r[e])})),i.src=a,n(i)}if(function(e){return void 0!==e.length}(t)){var o=[].map.call(t,(function(t){return e(t,r).catch((function(e){return e}))}));return Promise.all(o).then((function(e){var t=e.filter((function(e){return e.naturalWidth}));return t.length===e.length?t:Promise.reject({loaded:t,errored:e.filter((function(e){return!e.naturalWidth}))})}))}return Promise.reject(new TypeError("input is not an image, a URL string, or an array of them."))},i=r(0),o=r.n(i),f=function(e,t,r,n){return new(r||(r=Promise))((function(a,i){function o(e){try{u(n.next(e))}catch(e){i(e)}}function f(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,f)}u((n=n.apply(e,t||[])).next())}))},u=function(e,t){var r,n,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:f(0),throw:f(1),return:f(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function f(i){return function(f){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(a=2&i[0]?n.return:i[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,i[1])).done)return a;switch(n=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,n=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],n=0}finally{r=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,f])}}};function s(e){return f(this,void 0,void 0,(function(){var t,r,n,i;return u(this,(function(f){switch(f.label){case 0:return[4,a(e)];case 1:return t=f.sent(),r=document.createElement("canvas"),n=r.getContext("2d"),r.width=t.naturalWidth,r.height=t.naturalHeight,n.drawImage(t,0,0),i=n.getImageData(0,0,r.width,r.height).data,[2,o()(i,[r.width,r.height,4])]}}))}))}function c(e,t){return fetch(e).then((function(e){return e.ok?e.json():null}))}function l(e,t){for(var r,n,a=e.slice(0),i=e.length;i--;)r=a[n=Math.floor((i+1)*Math.random())],a[n]=a[i],a[i]=r;return a.slice(0,t)}function d(e){return new Array(e).fill(0).map((function(e,t){return t}))}var p=r(1),m=r.n(p),h=function(e,t,r,n){return new(r||(r=Promise))((function(a,i){function o(e){try{u(n.next(e))}catch(e){i(e)}}function f(e){try{u(n.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(o,f)}u((n=n.apply(e,t||[])).next())}))},b=function(e,t){var r,n,a,i,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:f(0),throw:f(1),return:f(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function f(i){return function(f){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,n&&(a=2&i[0]?n.return:i[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,i[1])).done)return a;switch(n=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,n=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){o=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){o.label=i[1];break}if(6===i[0]&&o.label<a[1]){o.label=a[1],a=i;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(i);break}a[2]&&o.ops.pop(),o.trys.pop();continue}i=t.call(e,o)}catch(e){i=[6,e],n=0}finally{r=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,f])}}},v=document.querySelector("canvas"),g=m()({canvas:v,extensions:["oes_texture_float"],attributes:{antialias:!0},onDone:function(e){return h(this,void 0,void 0,(function(){function e(){window.requestAnimationFrame(e),k&&(console.log(_.length,t,r),1==_.length?w(1,1,_.map((function(e){return h[e]}))):_.length<4?w(2,2,_.map((function(e){return h[e]}))):_.length<9?w(3,3,_.map((function(e){return h[e]}))):w(t,r,_.map((function(e){return h[e]}))),k=!1)}var t,r,n,a,i,o,f,u,p,m,h,x,w,_,k,A;return b(this,(function(b){switch(b.label){case 0:return 2048,6516,t=5,r=5,[4,s("imgs/test.png")];case 1:return n=b.sent(),a=document.querySelector(".district-viewer"),i=document.querySelector(".viewer_row"),window.scrollY,i.clientHeight,console.time("load_data"),[4,Promise.all([c("/data/rundata_4.json"),c("/data/statedata.json")])];case 2:return o=b.sent(),f=o[0],u=o[1],p=f.config,m=f.values,h=f.solutions,f.metrics_data,x=m.map((function(e,t){var r={index:t};return e.forEach((function(e,t){return r[p.metrics[t]]=e})),r})),console.timeEnd("load_data"),w=function(e,t,r){var n=new Uint8Array(3145728).fill(0),a=function(e){return e({frag:"\n        precision highp float;\n        uniform sampler2D map;\n        uniform sampler2D colors;\n        varying vec2 uv;\n\n        uniform float nx;\n        uniform float ny;\n        uniform float color_texture_size;\n\n        const float s16 = 65653.0;\n        const float s8  = 256.0;\n        const vec3 RED   = vec3(1.0, 0.0, 0.0);\n        const vec3 BLUE  = vec3(0.0, 0.0, 1.0);\n        const vec3 WHITE = vec3(1.0, 1.0, 1.0);\n\n        // vec4 RdBu(float value) {\n            // return rdbu_colors[int(value * 512)]\n            // if (value < 0.5) {\n            //     float p = value / 0.5;\n            //     return vec4(mix(BLUE, WHITE, p), 1.0);\n            // } else {\n            //     float p = (value - 0.5) / 0.5;\n            //     return vec4(mix(WHITE, RED, p), 1.0);\n            // }\n        // }\n\n        vec2 tileIdx2colorPos(int tile_index, vec2 cell) {\n            float global_index = float(tile_index) + ((cell.y * nx)+cell.x) * 6516.0;\n            return vec2(\n                (mod( global_index, color_texture_size )) / color_texture_size,\n                floor( global_index / color_texture_size ) / color_texture_size\n            );\n        }\n\n        void main () {\n            // We are drawing a grid of maps. First find the cell index.\n            vec2 cell = vec2(floor(uv.x * nx), floor(uv.y * ny));\n\n            // Calculate offset within this cell.\n            vec2 cell_shape = vec2(1.0/nx, 1.0/ny);\n            vec2 cell_uv = vec2((uv.x - cell.x*cell_shape.x)/cell_shape.x,\n                                (uv.y - cell.y*cell_shape.y)/cell_shape.y);\n\n            vec3 value = texture2D(map, cell_uv).rgb;\n            int tile_index = int(value.r * 255.0*s16) + (int(value.g * 255.0 *s8)) + int(value.b * 255.0);\n            if (tile_index == 0) {\n                discard;\n            }\n            vec2 colorPos = tileIdx2colorPos(tile_index - 1, cell);\n            // float color_value = texture2D(colors, colorPos).r;\n            // gl_FragColor = RdBu(color_value);\n            gl_FragColor = vec4(texture2D(colors, colorPos).rgb, 1.0);\n        }",vert:"\n        precision highp float;\n        attribute vec2 position;\n        varying vec2 uv;\n        void main () {\n          uv = vec2(position.y, 1.0 - position.x);\n          gl_Position = vec4(1.0 - 2.0 * position, 0, 1);\n        }",attributes:{position:[-2,0,0,-2,2,2]},uniforms:{nx:e.prop("nx"),ny:e.prop("ny"),map:e.prop("map"),colors:e.prop("colors"),color_texture_size:e.prop("color_texture_size")},count:3})}(e),i=e.texture(t);return function(t,o,f){console.time("draw");for(var u=0,s=0;s<f.length;s++)for(var c=y(f[s],8,r),l=0;l<f[0].length;l++)n[u++]=c[f[s][l]][0],n[u++]=c[f[s][l]][1],n[u++]=c[f[s][l]][2];n.fill(255,u);var d=e.texture({data:n,width:1024,height:1024,channels:3});a({colors:d,nx:t,ny:o,map:i,color_texture_size:1024}),console.timeEnd("draw")}}(g,n,u),_=l(d(h.length),t*r),k=!0,A=function(e,t,r){var n=d3.parcoords()(e).alpha(.15).data(t).hideAxis(["index"]).render().shadows().reorderable().brushMode("1D-axes");return n.on("brush",(function(e){0!=e.length&&r(e.map((function(e){return e.index})),e)})),n}(document.querySelector(".parcoords"),x,(function(e){1==_.length&&A.unhighlight(),_=l(e,t*r),k=!0})),v.onclick=function(e){var n=e.offsetX,a=e.offsetY;if(1==_.length)_=l(d(h.length),t*r),A.unhighlight(),w(t,r,_.map((function(e){return h[e]})));else{var i=Math.floor(n/v.clientWidth*t),o=Math.floor(a/v.clientHeight*r);_=[_[i*t+o]],A.highlight([x[_[0]]]),w(1,1,_.map((function(e){return h[e]})))}},window.onresize=function(){A.width(a.clientWidth),A.resize(),A.render()},window.requestAnimationFrame(e),[2]}}))}))}});function y(e,t,r){var n=new Array(t).fill(0),a=new Array(t).fill(0);return e.forEach((function(e,t){n[e]+=r.voters[t][0],a[e]+=r.voters[t][1]})),n.map((function(e,t){return(e-a[t])/(e+a[t])})).map((function(e){var t=d3.rgb(d3.interpolateRdBu(function(e,t,r){return Math.min(r,Math.max(t,e))}(3.5*e+.5,0,1)));return[t.r,t.g,t.b]}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,