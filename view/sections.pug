include mixins

mixin header()
    #header.section
        .left_col
        .right_col
        .line_entry
            .content
            .text
                br
                h1.main-heading
                    i Antimander
        .line_entry
            .content
                .main_viewer
                    .canvas_container
                        canvas.main_canvas(width=1024, height=1024)
                //- .viewer_row(data-datapath='general', data-nx=1, data-ny=1)
                //-     +district_viewer("Interactive Viewer")
                //-     .district-text
                //- canvas.main_canvas(width=1024, height=1024)
                //- img(src='imgs/district.png')
                .slider_container
                    input.slider(type='range', min='0', max='.99', value='.5', step='any')
                    p.counts
            .text(style='vertical-align: top;')
                
               
                h2 
                    i Open-source research and software to fight gerrymandering.
                .index_nav
                    for name, idx in ['intro', 'background', 'viewer', 'metrics', 'methods', 'next-steps', 'appendix', 'references']
                        p.navlink: a(href='#'+name)!=idx+': '+name
                        //- .toUpperCase()
                .attribution
                    p By #[a(href='http://www.joelsimon.net') Joel Simon]
                    p with contributions from #[a(href='http://joellehman.com/') Joel Lehman] and #[a(href='http://nioono.com/') Nio Ono].
                    
                    //- img(src='imgs/header_pattern.png')

mixin intro()
    #intro.section
        .left_col
        .right_col
        .line_entry
            .content
            .text
                +section_nav2('intro')
        .line_entry
            .content
                img.medium-img(src='imgs/the_gerrymander.png')
                h3 The original gerrymander
            .text
                p 
                    | Gerrymandering is difficult for courts to fight becuase there is no agreed upon definition.
                    | Properties like compactness and fairness are desired but there are subjective tradeoffs between them
                    | and no single 'ideal' districting exists. As a result, it is difficult to definitively show that a districting 
                    | could be more fair. Evaluating a districting by comparing it to a set of reasonable alternatives has become a theoretically attractive approach. However, generating a large set of satisfactory districts is a significant technical challence because states may be composed of tens of thousands of geographic units, with trade-offs between many competing objectives.

                // p The districting problem is the partitioning of an undirected connected graph into a fixed number of districts. Each node in the graph represents the geographic unit of a state that composes a district, and contains a number of voters registered for each party.The partitioning of the state has two constraints: the total population of each district must be approximately equal (i.e. it cannot deviate more than 5% from the state’s total population divided by the number of districts), and each district must be contiguous.

                //- p Like with generative design tools, the goal is to present an optimal set of options for every trade-off that can be used for comparison.
                p Antimander is a generative design tool and research project to generate and browse optimized congressional districtings. While districting commitess using it directly is unikely, it could be used as evidence of gerrymandering and also to help inform to public about the tradeoffs and how these trade-offs were made for their districts.

                p Antimander proposes connecting algorithmic districting to the research field of multi-objective evolutionary algorithms (MOEAs) and novelty search and presents an open source optimization engine and viewer that does so. It is just a first-step and more work and help is needed.

            //- h3(style='margin-top:0px;') Wisconsin: Real vs Antimander-Optimized
        
mixin background()
    //- div.outer-text-container#background
    //-     div.inner-text-container
    #background.section
        .left_col
        .right_col
        .line_entry
            .content
            .text
                +section_nav2('background')
                p Every decade the US redraws congressional districts, which are divisions of a state each allotted one elected congressional representative. The distribution of elected representatives has significant political impact, motivating political parties to exploit such districting to their advantage, known as gerrymandering. For example, districtings can pack a small number of districts full of the opposing party’s voters to waste many votes, enabling other districts to crack i.e. to be won by a small (but comfortable) amount, thereby securing an outsize proportion of a state’s representatives for the gerrymandering party.

                p TODO - add more
                p Previous approaches apply Monte Carlo methods [1], single-objective evolutionary algorithms [4], and non-evolutionary two-objective methods [6] to generate districtings. Antimander is a open source, multi-objective evolutionary that creates optimzied dsitricts for comparison.

            //- h4 The #[a(href='https://www.smithsonianmag.com/history/where-did-term-gerrymander-come-180964118/') original "Gerrymander"] in Massachusetts
            //- img(src='img=s/the_gerrymander.jpg', style='width:256px;')
            //- H2 The role of Software
            //- P
            //- p Despite gerrymandering remaining a challenge, there is promise that algorithmic developments may o er relief. Towards that end, we have demonstrated a method and open-source tool that optimizes districts across several objectives using multi-objective evolution. Our study in Wisconsin demonstrates the capacity to produce districts that are more equal, competitive, and compact than the current real-world districts.

            //- p However, for tools like this to be successful they must incorporate many further measures, including majority-minority districts, preserving areas of interest, and other metrics that vary in importance by state. We suggest the districting problem as a potential MOEA benchmark for both technical reasons and because of its timely need for the 2021 redistricting.



            //- p Here we present an evolutionary multi-objective approach to identify gerrymandering, building on recent approaches that contrast a prospective districting with an ensemble of simulated solutions [7]. The premise is that a fair districting should not be heavily Pareto-dominated by such simulated solutions. However, generating a large set of satisfactory districts is a signi cant technical because states may be composed of tens of thousands of geographic units, with trade-o s between many competing objectives. Previous approaches apply Monte Carlo methods [1], single- objective evolutionary algorithms [4], and non-evolutionary two- objective methods [6] to generate districtings. However, there re- mains a need for an optimization tool that can scale to thousands of geographic units, several constraints, and more than two objectives. This paper connects the problem of congressional districting to the research  eld of multi-objective evolutionary algorithms (MOEAs) and novelty search. We introduce and validate a framework and open source library called Antimander1 for multi-objective optimiization of congressional districts.


            //-

mixin viewer()
    .section.viewer_row#viewer(data-datapath='general')
        //- .left_col
        //- .right_col
        +district_viewer("Interactive Viewer")
        .district-text
            .district-text-inner
                .scroll_block
                    h1 Interactive Viewer
                .scroll_block
                    p
                        | On the top left is something called a #[a.cite(href='https://eagereyes.org/techniques/parallel-coordinates') parallel coordinates plot]
                        | which has one line for every generated solution. Each vertical axis is another dimension we are trying to optimize for.
                .scroll_block
                    p You can drag (brush) on axis to filter only those. This makes it easy to explore the tradeoffs. For example, you may see only the top percentage of one objective and also how those solutions rank in other objectives.
                    img.shadow(src='imgs/filter.png')

                .scroll_block
                    p You may also click on any district to enlarge it.

                .scroll_block
                    p Each state is divided into eight districts. The color represents what party that district is leaning towards.
                    img.legend(src='imgs/figure_legend.png')

                //- for _ in [1,2,3]
                //-     .scroll_block
                //-         p Test
                //- p Test2
                //- .padding(style='height:30vh;')

mixin metrics()
    #metrics.section
        .left_col
        .right_col
        .line_entry
            .content
            .text
                +section_nav2('metrics')
        .line_entry
            .content
            .text
                //- H2 Metrics:
                h3 What makes a good district?
                p The results above were optimized for "fairness", "compactness" and "competitiveness." But what are those and what do they mean?
                
        .line_entry
            .content
                .compactness_tile
                    //- p Ratio of area to perimeter (used above).
                    img(src='imgs/compactness/polsby_popper.png', style='max-width:256px;')
                    h4 Polspy-Popper

                .compactness_tile
                    //- p Ratio of area to its convex hull.
                    img(src='imgs/compactness/convex_hull.png', style='max-width:256px;')
                    h4 Convex-Hull

                .compactness_tile
                    //- p Ratio of area to its minimum bounding circle. Also knows as "Reock."
                    img(src='imgs/compactness/reock.png', style='max-width:256px;')
                    h4 Bounding-Circle (Reock)

                .compactness_tile
                    //- p The average distance to the centroid of a district.
                    img(src='imgs/compactness/center_distance.png', style='max-width:256px;')
                    h4 Center-Distance

            .text
                H3 1. Compactness
                p The original gerrymander was named for its peculiar shape it is intuitivly desirable to expect to live near people within a same district. A lot of attention is therefore paid to the shad of districts, especially since - unlike other metrics - it is easy to evaluate visually. But what does it mean to be 'compact'? It turns out there are many metrics that can be used. Images below are from #[a(href="https://fisherzachary.github.io/public/r-output.html") this article] which also has additional metrics.
                p #[strong Polspy-Popper]: The ratio of area to perimeter (used above).
                p #[strong Convex-Hull]: The ratio of area to perimeter).
                p #[strong Bounding-Circle (Reock)]: Ratio of area to its minimum bounding circle. Also knows as "Reock."
                p #[strong Center-Distance]: The average distance of all tiles to the center of the district they belong to.

        .line_entry
            .content
            .text
                h3 2. Fairness
                p Generally we want the percent of representatives to correspont to the percent of voters for that party. The efficiency gap [5] is a metric that views fairness through the lens of the lost votes of each party. Votes cast for the losing party, or those cast for the winning party beyond the winning threshold are considered lost.
        .line_entry
            .content
            .text
                h3 3. Competitiveness
                p
                p Close races helps prevent incumbents from being too entrenched (incumbant gerrymandering). Also, less polarized represetnatives are beneficial for a healthy democracy. Competitiveness is measured by the largest ratio by which one party wins over another.

mixin all_compactness_viewer()
    .section.viewer_row#viewer(data-datapath='all_compactness')
        .left_col
        .right_col
        +district_viewer("Multiple compactness")
        .district-text
            .district-text-inner
                .scroll_block
                    p As you can see compactness is complicated. On the left are districts optimized for all of thecompactness metrics above. They still had to be contiguous and equal (same number of people).
                .scroll_block
                    p We can see which metrics corelate and which dont, or what it means to be compact for one but not the other.
                .scroll_block
                    p The dark colors mean these districts are not competitive, which is not suprising since that was not included.
                for i in [1,2,3,4]
                    .scroll_block
                        p Test
        
mixin methods()
    #methods.section
        .left_col
        .right_col
        .line_entry
            .content
            .text
                +section_nav2('methods')
                
        .line_entry
            .content
                img.background(src='imgs/nsgaii.png')
            .text
                p Multi-objective evolutionary algorithms are able to optimize across multiple objectives. The Non-Dominated-Sorting-Genetic-Algorithm (NSGA-II) [cite] is used here which is a common method that find solutions that are 'non-dominated' (there is no other solution better in all objectives). To improve upon NSGA-II (which when applied naively failed to generate any feasible solutions), we explore a series of extensions: multi-phase optimization, novelty search (NS), and feasible-infeasible (FIF) search. Crossover is not employed due to the challenges of combining diverse partitions to generate viable and meaningful new solutions.
                
        .line_entry
            .content
            .text
                h2 Representation & Seeding
                p Districts are represented as integer arrays, where each node is assigned to a district. Initial individuals are created by taking random seed nodes and iteratively adding adjacent random unassigned nodes until there are no unassigned nodes left. A hill-climbing repair operator mutates the random districts until they meet the equality threshold constraint.

        .line_entry
            .content
            .text
                h2 Mutation Operator
                p The mutation operator simply takes a node bordering another district and swaps the district it belongs to. To make exploring the search space practical, the mutation operator only allows mutations that preserve the contiguity of the district. Calculating graph connectedness after every mutation would be computationally prohibitive. Instead, local adjacency graph for every node is pre-computed. This graph on node N is the subgraph where every node is a neighbor of N. To determine if a node N may be removed from a partition without breaking contiguity, a simple search is done on the graph to see if all members that belong to that district remain connected. A full graph traversal is not needed because of assumptions about the structure of districts (such that one district will never fully enclosed another district) that are preserved by the objectives.

                h2 Novelty Search
                p Novelty search explicitly promotes phenotypic diversity, thereby assisting exploration [ #[a.cite(href='') cite] ]. Novelty Search requires a behavior characterization that captures important traits in few dimensions. To apply novelty search here, we take inspiration from shape features used to characterize 3D meshes [cite osada2002shape] (cite used in corals.). Here, our BC is the histogram of the distances between the centers of all districts.
        .line_entry
            .content
                img.shadow(src='imgs/FIF.png', style='opacity: .9;')
            .text
                h2 Feasible-Infeasible Search
                p The double constraints of contiguity and equality propose a challenge for the optimization process since the mast majory of the possibilities are inviable. Often, finding a good solution requires explores some bad ones first. Some genetic-algorithms simply throw out invlaid solutions while others keep them in the same population but with a penalty to their fitness. A more elegant solution is to keep two populations of solutions, one for feasible individuals (those that satify all constraints) and one for infeasible (FIF). The feasible optimize for all the objectives while the infeasible optimize to satisfy the objectives. Liapis et all (cite Enhancements to Constrained Novelty Search) propose combining novlety search with FIF.
        .line_entry
            .content
                img.shadow(src='imgs/contract.png')
            .text
                h2 Multi-Phase
                p Because optimizing a large number of nodes directly is challenging, districts are optimized through a multi-phase evolutionary algorithm, where each successive phase divides districts more granularly (similarly to Swarmy et al. cite{swamymulti}). To create a series of coarsening graphs, the graph is iteratively contracted using star contraction \cite[ch. 13]{ab-algorithms} until the state has reached 500 nodes (a resolution amenable to direct optimization). An additional bias is added to preserve compact shapes across graph resolutions. The results of optimizing at a more coarse representation serve as a starting point for optimizing the successive (less-coarse) phase.
                p TODO repalce with a state contracted


            //- The multi-objective evolutionary algorithm NSGA-II \cite{deb2002fast} is used to optimize the populations at each phase. The implementation used of NGSA-II [pymoo] handles constraints by placing infeasible solutions into their own front. A spatially aware mutation operator (described below) is implemented to encourage feasible mutations.
        .line_entry
            .content
            .text
                h2 Data
                p Wisconsin is chosen as a test as in [cite{liu2016pear,swamymulti}]. Census and geographic data was downloaded from the Metric Geometry and Gerrymandering Group's mggg-states Github repository. Voters for each party were the average voters in the 2012 and 2016 presidential election. Wisconsin has eight congressional districts composed from 6634 census wards.

//- Exploring the results allows us ot build intuition about the relaitonships of tradeoffs and environment.
//- THe value of making complex decison decisionas accessible for everyone
//- The value of design research and application.

//- FIF is the liek saying "this doesnt work but has promise so lets see where it goes"
//- Optimziation is also useful for better understanding the limits of the metrics and how they may be abused.
    //- For example the need to have sqaure error scaling to repvent singel distircts from being super gerrymandered
    //- Or, for lost votes to only count when above a threshold

mixin results()
    #results.section
        .left_col
        .right_col
        .line_entry
            .content
                img.background(src='imgs/results.svg', style='max-width:300px;')
            .text
                +section_nav2('results')
                p Three methods were compared: NSGA-II, feasible-infeasible search (FIF), and FIF with novelty as an additional objective in the infeasible population only (FIF-NOV). Each run had a total population of 800, and consisted of 1000 generations per each of its five phases. Each run was replicated five times.
                p FIF with novelty outperformed vanilla NSGA-2 and FIF without novelty. Somewhat suprisingly, FIF did worse than NSGA if no novelty was employed.
        .line_entry
            .content
                img.background(src='imgs/results.png')
            .text
                p Comparing actual and optimized Wisconsin districts. Shown optimized solutions are hand-chosen from those that dominate the actual districting (i.e. strictly lower score on all measures) (a) Wisconsin's 2011 districts have scores: fairness=0.788, competitiveness=%53.16, equality=%8.46. (b) An optimized compact district from a FIF-NOV run: fairness=0.647, competitiveness=%17.98, equality=%0.76. The solution is quantatively and qualitatively more compact than the actual districting. (c) An optimized district with maximum fairness and competitiveness from a FIF-NOV run: fairness=0.762, competitiveness=%13.12, equality=%0.0 Remarkably this districting had exactly 726419 lost votes for each party.        

mixin next-steps()
    #next-steps.section
        .left_col
        .right_col
        .line_entry
            .content
            .text
                +section_nav2('next-steps')
        .line_entry
            .content
                .background
                    +mailchimp()
            .text
                p Despite gerrymandering remaining a challenge, there is promise that algorithmic developments may offer relief. Towards that end, we have demonstrated a method and open-source tool that optimizes districts across several objectives using multi-objective evolution. Our study in Wisconsin demonstrates the capacity to produce districts that are more equal, competitive, and compact than the current real-world districts. However, for tools like this to be successful they must incorporate many further measures, including majority-minority districts, preserving areas of interest, and other metrics that vary in importance by state. We suggest the districting problem as a potential MOEA benchmark for both technical reasons and because of its timely need for the 2021 redistricting.

mixin appendix()
    #appendix.section
        .left_col
        .right_col
        .line_entry
            .content
            .text
                +section_nav2('appendix')

mixin references()
    #references.section
        .left_col
            img(src='imgs/footer_3.png', style='width:100%;height:100%;position:absolute;bottom:0px;opacity:0.8')
        .right_col
        .line_entry
            .content
            .text
                +section_nav2('references')
        .line_entry.align_top
            .content
            .text.align_top
                h3(style='margin-top:0px') Libraries used:
                ul
                    li: p: a(href='https://pymoo.org/') Pymoo: Multi-objective Optimization.
                    li: p: a(href='http://regl.party/') Regl: A functional abstraction for webgl.
                    li: p: a(href='https://cython.org/') Cython: Language and static compiler for Python.
                h3(style='') Papers cited:
                ul
                    li: p Metric Geometry and Gerrymandering Group. 2013. Gerrychain. https://github. com/mggg/GerryChain. (2013).
                    li: p Joel Lehman and Kenneth O Stanley. 2008. Exploiting open-endedness to solve problems through the search for novelty.. In ALIFE. 329–336.
                    li: p Antonios Liapis, Georgios N Yannakakis, and Julian Togelius. 2015. Constrained novelty search: A study on game content generation. Evolutionary computation 23, 1 (2015), 101–129.
                    li: p Yan Y Liu, Wendy K Tam Cho, and Shaowen Wang. 2016. PEAR: a massively parallel evolutionary computation approach for political redistricting optimization and analysis. Swarm and Evolutionary Computation 30 (2016), 78–92.
                    li: p Nicholas O Stephanopoulos and Eric M McGhee. 2015. Partisan gerrymandering and the e ciency gap. U. Chi. L. Rev. 82 (2015), 831.
                    li: p Rahul Swamy, Douglas King, and Sheldon Jacobson. [n. d.]. Multi-Objective Optimization for Political Districting: A Scalable Multilevel Approach. ([n. d.]).
                    li: p Wendy K Tam Cho and Yan Y Liu. 2016. Toward a talismanic redistricting tool: A computational method for identifying extreme redistricting plans. Election Law Journal 15, 4 (2016), 351–366.
                